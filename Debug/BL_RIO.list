
BL_RIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a08  080000b8  080000b8  000100b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  08007ac0  08007ac0  00017ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e54  08007e54  0002050a  2**0
                  CONTENTS
  4 .ARM          00000000  08007e54  08007e54  0002050a  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e54  08007e54  0002050a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e54  08007e54  00017e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e58  08007e58  00017e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000400  08007e5c  00020400  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .shared_mem   00000012  200004f8  08007f54  000204f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000994  20000510  08007f66  00020510  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000ea4  08007f66  00020ea4  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  0002050a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014d6b  00000000  00000000  00020532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000300c  00000000  00000000  0003529d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001120  00000000  00000000  000382b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001020  00000000  00000000  000393d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b325  00000000  00000000  0003a3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015216  00000000  00000000  00055715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6670  00000000  00000000  0006a92b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00110f9b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046ac  00000000  00000000  00110fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000510 	.word	0x20000510
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08007a94 	.word	0x08007a94

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000514 	.word	0x20000514
 80000fc:	08007a94 	.word	0x08007a94

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	; 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	; 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	; 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <crc32_for_byte>:
 * Invalid file names and files that cause errors are silently skipped.
 * The program reads from stdin if it is called with no arguments.
 *
 * From http://home.thep.lu.se/~bjorn/crc/ */

uint32_t crc32_for_byte(uint32_t r) {
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  for(int j = 0; j < 8; ++j)
 8000418:	2300      	movs	r3, #0
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	e00d      	b.n	800043a <crc32_for_byte+0x2a>
    r = (r & 1? 0: (uint32_t)0xEDB88320L) ^ r >> 1;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2201      	movs	r2, #1
 8000422:	4013      	ands	r3, r2
 8000424:	d001      	beq.n	800042a <crc32_for_byte+0x1a>
 8000426:	2300      	movs	r3, #0
 8000428:	e000      	b.n	800042c <crc32_for_byte+0x1c>
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <crc32_for_byte+0x40>)
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	0852      	lsrs	r2, r2, #1
 8000430:	4053      	eors	r3, r2
 8000432:	607b      	str	r3, [r7, #4]
  for(int j = 0; j < 8; ++j)
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	3301      	adds	r3, #1
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	2b07      	cmp	r3, #7
 800043e:	ddee      	ble.n	800041e <crc32_for_byte+0xe>
  return r ^ (uint32_t)0xFF000000L;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	22ff      	movs	r2, #255	; 0xff
 8000444:	0612      	lsls	r2, r2, #24
 8000446:	4053      	eors	r3, r2
}
 8000448:	0018      	movs	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	b004      	add	sp, #16
 800044e:	bd80      	pop	{r7, pc}
 8000450:	edb88320 	.word	0xedb88320

08000454 <crc32>:

uint32_t crc32(const void *data, uint32_t n_bytes) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0;
 800045e:	2300      	movs	r3, #0
 8000460:	617b      	str	r3, [r7, #20]
  static uint32_t table[0x100];
  if(!*table)
 8000462:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <crc32+0x78>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d111      	bne.n	800048e <crc32+0x3a>
    for(size_t i = 0; i < 0x100; ++i)
 800046a:	2300      	movs	r3, #0
 800046c:	613b      	str	r3, [r7, #16]
 800046e:	e00b      	b.n	8000488 <crc32+0x34>
      table[i] = crc32_for_byte(i);
 8000470:	693b      	ldr	r3, [r7, #16]
 8000472:	0018      	movs	r0, r3
 8000474:	f7ff ffcc 	bl	8000410 <crc32_for_byte>
 8000478:	0001      	movs	r1, r0
 800047a:	4b14      	ldr	r3, [pc, #80]	; (80004cc <crc32+0x78>)
 800047c:	693a      	ldr	r2, [r7, #16]
 800047e:	0092      	lsls	r2, r2, #2
 8000480:	50d1      	str	r1, [r2, r3]
    for(size_t i = 0; i < 0x100; ++i)
 8000482:	693b      	ldr	r3, [r7, #16]
 8000484:	3301      	adds	r3, #1
 8000486:	613b      	str	r3, [r7, #16]
 8000488:	693b      	ldr	r3, [r7, #16]
 800048a:	2bff      	cmp	r3, #255	; 0xff
 800048c:	d9f0      	bls.n	8000470 <crc32+0x1c>
  for(size_t i = 0; i < n_bytes; ++i)
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	e012      	b.n	80004ba <crc32+0x66>
    crc = table[(uint8_t)crc ^ ((uint8_t*)data)[i]] ^ crc >> 8;
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	b2da      	uxtb	r2, r3
 8000498:	6879      	ldr	r1, [r7, #4]
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	18cb      	adds	r3, r1, r3
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	4053      	eors	r3, r2
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	001a      	movs	r2, r3
 80004a6:	4b09      	ldr	r3, [pc, #36]	; (80004cc <crc32+0x78>)
 80004a8:	0092      	lsls	r2, r2, #2
 80004aa:	58d2      	ldr	r2, [r2, r3]
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	0a1b      	lsrs	r3, r3, #8
 80004b0:	4053      	eors	r3, r2
 80004b2:	617b      	str	r3, [r7, #20]
  for(size_t i = 0; i < n_bytes; ++i)
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	3301      	adds	r3, #1
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	68fa      	ldr	r2, [r7, #12]
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	429a      	cmp	r2, r3
 80004c0:	d3e8      	bcc.n	8000494 <crc32+0x40>

  return crc;
 80004c2:	697b      	ldr	r3, [r7, #20]
}
 80004c4:	0018      	movs	r0, r3
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b006      	add	sp, #24
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	2000052c 	.word	0x2000052c

080004d0 <image_get_header>:
#include "image.h"
#include "memoryMap.h"
#include "crc32.h"

const image_hdr_t *image_get_header(image_slot_t slot)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	0002      	movs	r2, r0
 80004d8:	1dfb      	adds	r3, r7, #7
 80004da:	701a      	strb	r2, [r3, #0]
    const image_hdr_t *hdr = NULL;
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]

    switch (slot)
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d002      	beq.n	80004ee <image_get_header+0x1e>
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	d003      	beq.n	80004f4 <image_get_header+0x24>
        break;
    case IMAGE_SLOT_2:
        hdr = (const image_hdr_t *) &__loader_rom_start__;
        break;
    default:
        break;
 80004ec:	e005      	b.n	80004fa <image_get_header+0x2a>
        hdr = (const image_hdr_t *) &__app_rom_start__;
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <image_get_header+0x54>)
 80004f0:	60fb      	str	r3, [r7, #12]
        break;
 80004f2:	e002      	b.n	80004fa <image_get_header+0x2a>
        hdr = (const image_hdr_t *) &__loader_rom_start__;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <image_get_header+0x58>)
 80004f6:	60fb      	str	r3, [r7, #12]
        break;
 80004f8:	46c0      	nop			; (mov r8, r8)
    }

    if (hdr && hdr->image_magic == IMAGE_MAGIC)
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d00b      	beq.n	8000518 <image_get_header+0x48>
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	781a      	ldrb	r2, [r3, #0]
 8000504:	785b      	ldrb	r3, [r3, #1]
 8000506:	021b      	lsls	r3, r3, #8
 8000508:	4313      	orrs	r3, r2
 800050a:	b29a      	uxth	r2, r3
 800050c:	23e7      	movs	r3, #231	; 0xe7
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	429a      	cmp	r2, r3
 8000512:	d101      	bne.n	8000518 <image_get_header+0x48>
    {
        return hdr;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	e000      	b.n	800051a <image_get_header+0x4a>
    }
    else
    {
        return NULL;
 8000518:	2300      	movs	r3, #0
    }
}
 800051a:	0018      	movs	r0, r3
 800051c:	46bd      	mov	sp, r7
 800051e:	b004      	add	sp, #16
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	0800c800 	.word	0x0800c800
 8000528:	08046800 	.word	0x08046800

0800052c <image_validate>:

int image_validate(image_slot_t slot, const image_hdr_t *hdr)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
 8000532:	0002      	movs	r2, r0
 8000534:	6039      	str	r1, [r7, #0]
 8000536:	1dfb      	adds	r3, r7, #7
 8000538:	701a      	strb	r2, [r3, #0]
    // void *addr = (slot == IMAGE_SLOT_1 ? &__apparom_start__ : &__appbrom_start__);
    void *addr = NULL;
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]

    switch (slot)
 800053e:	1dfb      	adds	r3, r7, #7
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d002      	beq.n	800054c <image_validate+0x20>
 8000546:	2b02      	cmp	r3, #2
 8000548:	d003      	beq.n	8000552 <image_validate+0x26>
 800054a:	e005      	b.n	8000558 <image_validate+0x2c>
    {
    case IMAGE_SLOT_1:
        addr = &__app_rom_start__;
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <image_validate+0xac>)
 800054e:	617b      	str	r3, [r7, #20]
        break;
 8000550:	e007      	b.n	8000562 <image_validate+0x36>
    case IMAGE_SLOT_2:
        addr = &__loader_rom_start__;
 8000552:	4b22      	ldr	r3, [pc, #136]	; (80005dc <image_validate+0xb0>)
 8000554:	617b      	str	r3, [r7, #20]
        break;
 8000556:	e004      	b.n	8000562 <image_validate+0x36>
    default:
        addr = NULL;
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
        return -1;
 800055c:	2301      	movs	r3, #1
 800055e:	425b      	negs	r3, r3
 8000560:	e036      	b.n	80005d0 <image_validate+0xa4>
    }

    addr += sizeof(image_hdr_t);
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	3320      	adds	r3, #32
 8000566:	617b      	str	r3, [r7, #20]
    uint32_t len = hdr->data_size;
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	7a1a      	ldrb	r2, [r3, #8]
 800056c:	7a59      	ldrb	r1, [r3, #9]
 800056e:	0209      	lsls	r1, r1, #8
 8000570:	430a      	orrs	r2, r1
 8000572:	7a99      	ldrb	r1, [r3, #10]
 8000574:	0409      	lsls	r1, r1, #16
 8000576:	430a      	orrs	r2, r1
 8000578:	7adb      	ldrb	r3, [r3, #11]
 800057a:	061b      	lsls	r3, r3, #24
 800057c:	4313      	orrs	r3, r2
 800057e:	613b      	str	r3, [r7, #16]
    uint32_t crc_calc = crc32(addr, len);
 8000580:	693a      	ldr	r2, [r7, #16]
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	0011      	movs	r1, r2
 8000586:	0018      	movs	r0, r3
 8000588:	f7ff ff64 	bl	8000454 <crc32>
 800058c:	0003      	movs	r3, r0
 800058e:	60fb      	str	r3, [r7, #12]
    uint32_t crc_image = hdr->crc;
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	791a      	ldrb	r2, [r3, #4]
 8000594:	7959      	ldrb	r1, [r3, #5]
 8000596:	0209      	lsls	r1, r1, #8
 8000598:	430a      	orrs	r2, r1
 800059a:	7999      	ldrb	r1, [r3, #6]
 800059c:	0409      	lsls	r1, r1, #16
 800059e:	430a      	orrs	r2, r1
 80005a0:	79db      	ldrb	r3, [r3, #7]
 80005a2:	061b      	lsls	r3, r3, #24
 80005a4:	4313      	orrs	r3, r2
 80005a6:	60bb      	str	r3, [r7, #8]

    if (crc_calc == crc_image) {
 80005a8:	68fa      	ldr	r2, [r7, #12]
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d107      	bne.n	80005c0 <image_validate+0x94>
        printf("CRC OK: %lx vs %lx\r\n", crc_image, crc_calc);
 80005b0:	68fa      	ldr	r2, [r7, #12]
 80005b2:	68b9      	ldr	r1, [r7, #8]
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <image_validate+0xb4>)
 80005b6:	0018      	movs	r0, r3
 80005b8:	f005 ff66 	bl	8006488 <iprintf>
        return 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	e007      	b.n	80005d0 <image_validate+0xa4>
    }
    else {
        printf("CRC mismatch: %lx vs %lx\r\n", crc_image, crc_calc);
 80005c0:	68fa      	ldr	r2, [r7, #12]
 80005c2:	68b9      	ldr	r1, [r7, #8]
 80005c4:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <image_validate+0xb8>)
 80005c6:	0018      	movs	r0, r3
 80005c8:	f005 ff5e 	bl	8006488 <iprintf>
        return -1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	425b      	negs	r3, r3
    }

}
 80005d0:	0018      	movs	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	b006      	add	sp, #24
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	0800c800 	.word	0x0800c800
 80005dc:	08046800 	.word	0x08046800
 80005e0:	08007ac0 	.word	0x08007ac0
 80005e4:	08007ad8 	.word	0x08007ad8

080005e8 <HAL_UARTEx_RxEventCallback>:
#define STRINGIFY(x) #x
#define ADD_QUOTES(y) STRINGIFY(y)


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	000a      	movs	r2, r1
 80005f2:	1cbb      	adds	r3, r7, #2
 80005f4:	801a      	strh	r2, [r3, #0]
	  HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx_buff, sizeof rx_buff);
 80005f6:	2382      	movs	r3, #130	; 0x82
 80005f8:	009a      	lsls	r2, r3, #2
 80005fa:	4913      	ldr	r1, [pc, #76]	; (8000648 <HAL_UARTEx_RxEventCallback+0x60>)
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <HAL_UARTEx_RxEventCallback+0x64>)
 80005fe:	0018      	movs	r0, r3
 8000600:	f005 fe40 	bl	8006284 <HAL_UARTEx_ReceiveToIdle_IT>
	  //memcpy(message,rx_buff,4);
	  if(transmit_data == false)
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <HAL_UARTEx_RxEventCallback+0x68>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2201      	movs	r2, #1
 800060a:	4053      	eors	r3, r2
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d002      	beq.n	8000618 <HAL_UARTEx_RxEventCallback+0x30>
		  dato_recivido = true;
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000614:	2201      	movs	r2, #1
 8000616:	701a      	strb	r2, [r3, #0]

	  if(Size == 520)
 8000618:	1cbb      	adds	r3, r7, #2
 800061a:	881a      	ldrh	r2, [r3, #0]
 800061c:	2382      	movs	r3, #130	; 0x82
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	429a      	cmp	r2, r3
 8000622:	d102      	bne.n	800062a <HAL_UARTEx_RxEventCallback+0x42>
		  dato_recivido = true;
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000626:	2201      	movs	r2, #1
 8000628:	701a      	strb	r2, [r3, #0]
	  if(Size == (offset+8))
 800062a:	1cbb      	adds	r3, r7, #2
 800062c:	881a      	ldrh	r2, [r3, #0]
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <HAL_UARTEx_RxEventCallback+0x70>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	3308      	adds	r3, #8
 8000634:	429a      	cmp	r2, r3
 8000636:	d102      	bne.n	800063e <HAL_UARTEx_RxEventCallback+0x56>
		  dato_recivido = true;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_UARTEx_RxEventCallback+0x6c>)
 800063a:	2201      	movs	r2, #1
 800063c:	701a      	strb	r2, [r3, #0]
	  //counter++;
}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	46bd      	mov	sp, r7
 8000642:	b002      	add	sp, #8
 8000644:	bd80      	pop	{r7, pc}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	20000c38 	.word	0x20000c38
 800064c:	20000a5c 	.word	0x20000a5c
 8000650:	20000c2a 	.word	0x20000c2a
 8000654:	20000c28 	.word	0x20000c28
 8000658:	20000c30 	.word	0x20000c30

0800065c <CRC16_X25>:
  0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,
  0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78
};

uint16_t CRC16_X25(const void * data, uint16_t sizeOfData, uint16_t startCrc)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	0008      	movs	r0, r1
 8000666:	0011      	movs	r1, r2
 8000668:	1cbb      	adds	r3, r7, #2
 800066a:	1c02      	adds	r2, r0, #0
 800066c:	801a      	strh	r2, [r3, #0]
 800066e:	003b      	movs	r3, r7
 8000670:	1c0a      	adds	r2, r1, #0
 8000672:	801a      	strh	r2, [r3, #0]
	  const uint8_t * dataPtr = (const uint8_t *) data;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	60fb      	str	r3, [r7, #12]

	  startCrc = startCrc ^ 0xffff;
 8000678:	003b      	movs	r3, r7
 800067a:	003a      	movs	r2, r7
 800067c:	8812      	ldrh	r2, [r2, #0]
 800067e:	43d2      	mvns	r2, r2
 8000680:	801a      	strh	r2, [r3, #0]

	  while (sizeOfData--) {
 8000682:	e012      	b.n	80006aa <CRC16_X25+0x4e>
	    startCrc = crc16Table[(startCrc ^ *dataPtr++) & 0xFF] ^ (startCrc >> 8);
 8000684:	003b      	movs	r3, r7
 8000686:	881a      	ldrh	r2, [r3, #0]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	1c59      	adds	r1, r3, #1
 800068c:	60f9      	str	r1, [r7, #12]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4053      	eors	r3, r2
 8000692:	22ff      	movs	r2, #255	; 0xff
 8000694:	401a      	ands	r2, r3
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <CRC16_X25+0x6c>)
 8000698:	0052      	lsls	r2, r2, #1
 800069a:	5ad1      	ldrh	r1, [r2, r3]
 800069c:	003b      	movs	r3, r7
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	0a1b      	lsrs	r3, r3, #8
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	003b      	movs	r3, r7
 80006a6:	404a      	eors	r2, r1
 80006a8:	801a      	strh	r2, [r3, #0]
	  while (sizeOfData--) {
 80006aa:	1cbb      	adds	r3, r7, #2
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	1cba      	adds	r2, r7, #2
 80006b0:	1e59      	subs	r1, r3, #1
 80006b2:	8011      	strh	r1, [r2, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d1e5      	bne.n	8000684 <CRC16_X25+0x28>
	  }

	  return (startCrc ^ 0xffff);
 80006b8:	003b      	movs	r3, r7
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	43db      	mvns	r3, r3
 80006be:	b29b      	uxth	r3, r3
}
 80006c0:	0018      	movs	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	b004      	add	sp, #16
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	08007b34 	.word	0x08007b34

080006cc <write>:


uint32_t write(uint8_t *data,uint32_t begin)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b087      	sub	sp, #28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
	uint32_t end = begin+64;// return the address to next 512 bytes
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	3340      	adds	r3, #64	; 0x40
 80006da:	60fb      	str	r3, [r7, #12]
	uint32_t _index;
	uint16_t k = 0;
 80006dc:	2316      	movs	r3, #22
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	2200      	movs	r2, #0
 80006e2:	801a      	strh	r2, [r3, #0]
	HAL_FLASH_Unlock();
 80006e4:	f001 ffa8 	bl	8002638 <HAL_FLASH_Unlock>
	for(uint32_t i = begin; i<end; i++)// 64*8 = 512 bytes
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	e023      	b.n	8000736 <write+0x6a>
	{
	  _index = 8*i;
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	4915      	ldr	r1, [pc, #84]	; (800074c <write+0x80>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	4252      	negs	r2, r2
 80006fa:	17d3      	asrs	r3, r2, #31
 80006fc:	600a      	str	r2, [r1, #0]
 80006fe:	604b      	str	r3, [r1, #4]
	  memset(&double_word,0xFF,8);
	  memcpy(&double_word,&data[k],8);
 8000700:	2416      	movs	r4, #22
 8000702:	193b      	adds	r3, r7, r4
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	18d1      	adds	r1, r2, r3
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <write+0x80>)
 800070c:	2208      	movs	r2, #8
 800070e:	0018      	movs	r0, r3
 8000710:	f005 fea8 	bl	8006464 <memcpy>
	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,loader_rom+_index,double_word);
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <write+0x84>)
 8000718:	1899      	adds	r1, r3, r2
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <write+0x80>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	2001      	movs	r0, #1
 8000722:	f001 ff3b 	bl	800259c <HAL_FLASH_Program>
	  k+=8;
 8000726:	193b      	adds	r3, r7, r4
 8000728:	193a      	adds	r2, r7, r4
 800072a:	8812      	ldrh	r2, [r2, #0]
 800072c:	3208      	adds	r2, #8
 800072e:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = begin; i<end; i++)// 64*8 = 512 bytes
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	3301      	adds	r3, #1
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	693a      	ldr	r2, [r7, #16]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	429a      	cmp	r2, r3
 800073c:	d3d7      	bcc.n	80006ee <write+0x22>
	}
	HAL_FLASH_Lock();
 800073e:	f001 ff9f 	bl	8002680 <HAL_FLASH_Lock>
	return end;
 8000742:	68fb      	ldr	r3, [r7, #12]
}
 8000744:	0018      	movs	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	b007      	add	sp, #28
 800074a:	bd90      	pop	{r4, r7, pc}
 800074c:	20000c20 	.word	0x20000c20
 8000750:	08046800 	.word	0x08046800

08000754 <clear_app_rom>:



void clear_app_rom(void)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b087      	sub	sp, #28
 8000758:	af00      	add	r7, sp, #0
	//printf("\r Clean APP_Room \r\n");
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]

	HAL_FLASH_Unlock();
 800075e:	f001 ff6b 	bl	8002638 <HAL_FLASH_Unlock>
	FLASH->OPTR |= FLASH_OPTR_DUAL_BANK_Msk;
 8000762:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <clear_app_rom+0x90>)
 8000764:	6a1a      	ldr	r2, [r3, #32]
 8000766:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <clear_app_rom+0x90>)
 8000768:	2180      	movs	r1, #128	; 0x80
 800076a:	0389      	lsls	r1, r1, #14
 800076c:	430a      	orrs	r2, r1
 800076e:	621a      	str	r2, [r3, #32]
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000770:	2408      	movs	r4, #8
 8000772:	193b      	adds	r3, r7, r4
 8000774:	2202      	movs	r2, #2
 8000776:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.Page = 25;
 8000778:	193b      	adds	r3, r7, r4
 800077a:	2219      	movs	r2, #25
 800077c:	609a      	str	r2, [r3, #8]
	  EraseInitStruct.Banks = FLASH_BANK_1;
 800077e:	193b      	adds	r3, r7, r4
 8000780:	2204      	movs	r2, #4
 8000782:	605a      	str	r2, [r3, #4]
	  EraseInitStruct.NbPages = 103;
 8000784:	193b      	adds	r3, r7, r4
 8000786:	2267      	movs	r2, #103	; 0x67
 8000788:	60da      	str	r2, [r3, #12]
	  HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800078a:	1d3a      	adds	r2, r7, #4
 800078c:	193b      	adds	r3, r7, r4
 800078e:	0011      	movs	r1, r2
 8000790:	0018      	movs	r0, r3
 8000792:	f001 ffff 	bl	8002794 <HAL_FLASHEx_Erase>
	  HAL_FLASH_Lock();
 8000796:	f001 ff73 	bl	8002680 <HAL_FLASH_Lock>

	  PageError = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
	  HAL_FLASH_Unlock();
 800079e:	f001 ff4b 	bl	8002638 <HAL_FLASH_Unlock>
	  FLASH->OPTR |= FLASH_OPTR_DUAL_BANK_Msk;
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <clear_app_rom+0x90>)
 80007a4:	6a1a      	ldr	r2, [r3, #32]
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <clear_app_rom+0x90>)
 80007a8:	2180      	movs	r1, #128	; 0x80
 80007aa:	0389      	lsls	r1, r1, #14
 80007ac:	430a      	orrs	r2, r1
 80007ae:	621a      	str	r2, [r3, #32]
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80007b0:	0021      	movs	r1, r4
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2202      	movs	r2, #2
 80007b6:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.Page = 128;
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2280      	movs	r2, #128	; 0x80
 80007bc:	609a      	str	r2, [r3, #8]
	  EraseInitStruct.Banks = FLASH_BANK_2;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2280      	movs	r2, #128	; 0x80
 80007c2:	0212      	lsls	r2, r2, #8
 80007c4:	605a      	str	r2, [r3, #4]
	  EraseInitStruct.NbPages = 13;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	220d      	movs	r2, #13
 80007ca:	60da      	str	r2, [r3, #12]
	  HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80007cc:	1d3a      	adds	r2, r7, #4
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	0011      	movs	r1, r2
 80007d2:	0018      	movs	r0, r3
 80007d4:	f001 ffde 	bl	8002794 <HAL_FLASHEx_Erase>
	  HAL_FLASH_Lock();
 80007d8:	f001 ff52 	bl	8002680 <HAL_FLASH_Lock>
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	b007      	add	sp, #28
 80007e2:	bd90      	pop	{r4, r7, pc}
 80007e4:	40022000 	.word	0x40022000

080007e8 <clear_loader_rom>:

void clear_loader_rom(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
	//printf("\r Clean Loader_Room \r\n");
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
	  PageError = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
	  HAL_FLASH_Unlock();
 80007f6:	f001 ff1f 	bl	8002638 <HAL_FLASH_Unlock>
	  FLASH->OPTR |= FLASH_OPTR_DUAL_BANK_Msk;
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <clear_loader_rom+0x54>)
 80007fc:	6a1a      	ldr	r2, [r3, #32]
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <clear_loader_rom+0x54>)
 8000800:	2180      	movs	r1, #128	; 0x80
 8000802:	0389      	lsls	r1, r1, #14
 8000804:	430a      	orrs	r2, r1
 8000806:	621a      	str	r2, [r3, #32]
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000808:	2108      	movs	r1, #8
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2202      	movs	r2, #2
 800080e:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.Page = 141;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	228d      	movs	r2, #141	; 0x8d
 8000814:	609a      	str	r2, [r3, #8]
	  EraseInitStruct.Banks = FLASH_BANK_2;
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2280      	movs	r2, #128	; 0x80
 800081a:	0212      	lsls	r2, r2, #8
 800081c:	605a      	str	r2, [r3, #4]
	  EraseInitStruct.NbPages = 115;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2273      	movs	r2, #115	; 0x73
 8000822:	60da      	str	r2, [r3, #12]
	  HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8000824:	1d3a      	adds	r2, r7, #4
 8000826:	187b      	adds	r3, r7, r1
 8000828:	0011      	movs	r1, r2
 800082a:	0018      	movs	r0, r3
 800082c:	f001 ffb2 	bl	8002794 <HAL_FLASHEx_Erase>
	  HAL_FLASH_Lock();
 8000830:	f001 ff26 	bl	8002680 <HAL_FLASH_Lock>
}
 8000834:	46c0      	nop			; (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	b006      	add	sp, #24
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40022000 	.word	0x40022000

08000840 <clone_rom>:
	  	  }
	  	  //printf("|\r\r\n");
}

uint32_t clone_rom(uint32_t Firmware_zise)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	uint32_t rows = Firmware_zise/8;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	08db      	lsrs	r3, r3, #3
 800084c:	60fb      	str	r3, [r7, #12]
	uint32_t offset = Firmware_zise%8;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2207      	movs	r2, #7
 8000852:	4013      	ands	r3, r2
 8000854:	60bb      	str	r3, [r7, #8]
	uint32_t _index = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24

	for(int k = 0; k <5; k++)
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
 800085e:	e00f      	b.n	8000880 <clone_rom+0x40>
	{
		//printf("\033\143");
		//printf("Cleaning app rom");
		for(int q = 0; q<=k; q++)
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
 8000864:	e005      	b.n	8000872 <clone_rom+0x32>
		{
			//printf(".");
			HAL_Delay(50);
 8000866:	2032      	movs	r0, #50	; 0x32
 8000868:	f001 fcb8 	bl	80021dc <HAL_Delay>
		for(int q = 0; q<=k; q++)
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	3301      	adds	r3, #1
 8000870:	61fb      	str	r3, [r7, #28]
 8000872:	69fa      	ldr	r2, [r7, #28]
 8000874:	6a3b      	ldr	r3, [r7, #32]
 8000876:	429a      	cmp	r2, r3
 8000878:	ddf5      	ble.n	8000866 <clone_rom+0x26>
	for(int k = 0; k <5; k++)
 800087a:	6a3b      	ldr	r3, [r7, #32]
 800087c:	3301      	adds	r3, #1
 800087e:	623b      	str	r3, [r7, #32]
 8000880:	6a3b      	ldr	r3, [r7, #32]
 8000882:	2b04      	cmp	r3, #4
 8000884:	ddec      	ble.n	8000860 <clone_rom+0x20>
		}
		//printf("\r\n");
	}

	clear_app_rom();
 8000886:	f7ff ff65 	bl	8000754 <clear_app_rom>

	/*printf("\r ------ Reday to Clone to slot 1 ---------- \r\n");
	printf("\r rows: %ld \r\n",rows);
	printf("\r offset: %ld \r\n",offset);
	*/
	for(int k = 0; k <5; k++)
 800088a:	2300      	movs	r3, #0
 800088c:	61bb      	str	r3, [r7, #24]
 800088e:	e00f      	b.n	80008b0 <clone_rom+0x70>
	{
		//printf("\033\143");
		//printf(" waiting ");
		for(int q = 0; q<=k; q++)
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	e005      	b.n	80008a2 <clone_rom+0x62>
		{
			///printf(".");
			HAL_Delay(50);
 8000896:	2032      	movs	r0, #50	; 0x32
 8000898:	f001 fca0 	bl	80021dc <HAL_Delay>
		for(int q = 0; q<=k; q++)
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	3301      	adds	r3, #1
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	697a      	ldr	r2, [r7, #20]
 80008a4:	69bb      	ldr	r3, [r7, #24]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	ddf5      	ble.n	8000896 <clone_rom+0x56>
	for(int k = 0; k <5; k++)
 80008aa:	69bb      	ldr	r3, [r7, #24]
 80008ac:	3301      	adds	r3, #1
 80008ae:	61bb      	str	r3, [r7, #24]
 80008b0:	69bb      	ldr	r3, [r7, #24]
 80008b2:	2b04      	cmp	r3, #4
 80008b4:	ddec      	ble.n	8000890 <clone_rom+0x50>
		}
		//printf("\r\n");
	}

	HAL_FLASH_Unlock();
 80008b6:	f001 febf 	bl	8002638 <HAL_FLASH_Unlock>
    for(uint32_t i = 0; i<=rows-1; i++)// 12288 /8 -1 = =rows,   11532/8 =
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	e02e      	b.n	800091e <clone_rom+0xde>
    {
    	_index = 8*i;
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	00db      	lsls	r3, r3, #3
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  	  RDAddr = (uint64_t *)(loader_rom + _index);
 80008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c8:	4a3a      	ldr	r2, [pc, #232]	; (80009b4 <clone_rom+0x174>)
 80008ca:	4694      	mov	ip, r2
 80008cc:	4463      	add	r3, ip
 80008ce:	001a      	movs	r2, r3
 80008d0:	4b39      	ldr	r3, [pc, #228]	; (80009b8 <clone_rom+0x178>)
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	4939      	ldr	r1, [pc, #228]	; (80009bc <clone_rom+0x17c>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	4252      	negs	r2, r2
 80008da:	17d3      	asrs	r3, r2, #31
 80008dc:	600a      	str	r2, [r1, #0]
 80008de:	604b      	str	r3, [r1, #4]
  	  memset(&double_word,0xFF,8);
  	  memcpy(&double_word,RDAddr,8);
 80008e0:	4b35      	ldr	r3, [pc, #212]	; (80009b8 <clone_rom+0x178>)
 80008e2:	6819      	ldr	r1, [r3, #0]
 80008e4:	4b35      	ldr	r3, [pc, #212]	; (80009bc <clone_rom+0x17c>)
 80008e6:	2208      	movs	r2, #8
 80008e8:	0018      	movs	r0, r3
 80008ea:	f005 fdbb 	bl	8006464 <memcpy>
  	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,app_rom+_index,double_word);
 80008ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f0:	4a33      	ldr	r2, [pc, #204]	; (80009c0 <clone_rom+0x180>)
 80008f2:	1899      	adds	r1, r3, r2
 80008f4:	4b31      	ldr	r3, [pc, #196]	; (80009bc <clone_rom+0x17c>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	2001      	movs	r0, #1
 80008fc:	f001 fe4e 	bl	800259c <HAL_FLASH_Program>
  	  crc_temp = CRC16_X25(RDAddr, 8, crc_temp);
 8000900:	4b2d      	ldr	r3, [pc, #180]	; (80009b8 <clone_rom+0x178>)
 8000902:	6818      	ldr	r0, [r3, #0]
 8000904:	4b2f      	ldr	r3, [pc, #188]	; (80009c4 <clone_rom+0x184>)
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	001a      	movs	r2, r3
 800090a:	2108      	movs	r1, #8
 800090c:	f7ff fea6 	bl	800065c <CRC16_X25>
 8000910:	0003      	movs	r3, r0
 8000912:	001a      	movs	r2, r3
 8000914:	4b2b      	ldr	r3, [pc, #172]	; (80009c4 <clone_rom+0x184>)
 8000916:	801a      	strh	r2, [r3, #0]
    for(uint32_t i = 0; i<=rows-1; i++)// 12288 /8 -1 = =rows,   11532/8 =
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	3301      	adds	r3, #1
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	3b01      	subs	r3, #1
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	429a      	cmp	r2, r3
 8000926:	d9cb      	bls.n	80008c0 <clone_rom+0x80>
	  //printf(" \r crc parts_app_rom: %04X \n",crc_temp);
	  //print_double_word(loader_rom+_index,&double_word);
    }
    if(offset!=0)
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d031      	beq.n	8000992 <clone_rom+0x152>
 800092e:	4923      	ldr	r1, [pc, #140]	; (80009bc <clone_rom+0x17c>)
 8000930:	2201      	movs	r2, #1
 8000932:	4252      	negs	r2, r2
 8000934:	17d3      	asrs	r3, r2, #31
 8000936:	600a      	str	r2, [r1, #0]
 8000938:	604b      	str	r3, [r1, #4]
    {
    	memset(&double_word,0xFF,8);
		_index+= 8;
 800093a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093c:	3308      	adds	r3, #8
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
		RDAddr = (uint64_t *)(loader_rom + _index);
 8000940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000942:	4a1c      	ldr	r2, [pc, #112]	; (80009b4 <clone_rom+0x174>)
 8000944:	4694      	mov	ip, r2
 8000946:	4463      	add	r3, ip
 8000948:	001a      	movs	r2, r3
 800094a:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <clone_rom+0x178>)
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	491b      	ldr	r1, [pc, #108]	; (80009bc <clone_rom+0x17c>)
 8000950:	2201      	movs	r2, #1
 8000952:	4252      	negs	r2, r2
 8000954:	17d3      	asrs	r3, r2, #31
 8000956:	600a      	str	r2, [r1, #0]
 8000958:	604b      	str	r3, [r1, #4]
		memset(&double_word,0xFF,8);
		memcpy(&double_word,RDAddr,offset);
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <clone_rom+0x178>)
 800095c:	6819      	ldr	r1, [r3, #0]
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	4b16      	ldr	r3, [pc, #88]	; (80009bc <clone_rom+0x17c>)
 8000962:	0018      	movs	r0, r3
 8000964:	f005 fd7e 	bl	8006464 <memcpy>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,app_rom+_index,double_word);
 8000968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096a:	4a15      	ldr	r2, [pc, #84]	; (80009c0 <clone_rom+0x180>)
 800096c:	1899      	adds	r1, r3, r2
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <clone_rom+0x17c>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	2001      	movs	r0, #1
 8000976:	f001 fe11 	bl	800259c <HAL_FLASH_Program>
		crc_temp = CRC16_X25(&double_word,offset, crc_temp);
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	b299      	uxth	r1, r3
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <clone_rom+0x184>)
 8000980:	881a      	ldrh	r2, [r3, #0]
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <clone_rom+0x17c>)
 8000984:	0018      	movs	r0, r3
 8000986:	f7ff fe69 	bl	800065c <CRC16_X25>
 800098a:	0003      	movs	r3, r0
 800098c:	001a      	movs	r2, r3
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <clone_rom+0x184>)
 8000990:	801a      	strh	r2, [r3, #0]
		//printf(" \r crc parts_app_rom: %04X \n",crc_temp);
		//print_double_word(loader_rom+_index,&double_word);
    }
    HAL_FLASH_Lock();
 8000992:	f001 fe75 	bl	8002680 <HAL_FLASH_Lock>


    if(crc_temp == CRC_16)
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <clone_rom+0x184>)
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	001a      	movs	r2, r3
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <clone_rom+0x188>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d101      	bne.n	80009a8 <clone_rom+0x168>
   		return 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	e000      	b.n	80009aa <clone_rom+0x16a>
    else
    	return 1;
 80009a8:	2301      	movs	r3, #1
}
 80009aa:	0018      	movs	r0, r3
 80009ac:	46bd      	mov	sp, r7
 80009ae:	b00a      	add	sp, #40	; 0x28
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	08046800 	.word	0x08046800
 80009b8:	20000c18 	.word	0x20000c18
 80009bc:	20000c20 	.word	0x20000c20
 80009c0:	0800c800 	.word	0x0800c800
 80009c4:	20000e4e 	.word	0x20000e4e
 80009c8:	20000e44 	.word	0x20000e44

080009cc <wait>:

void wait(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
	 while(dato_recivido == false)
 80009d2:	e019      	b.n	8000a08 <wait+0x3c>
	 {
			for(int z = 0; z <5; z++)
 80009d4:	2300      	movs	r3, #0
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	e013      	b.n	8000a02 <wait+0x36>
			{
				//printf("\033\143");
				//printf("\r waiting ");
				for(int q = 0; q<=z; q++)
 80009da:	2300      	movs	r3, #0
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	e002      	b.n	80009e6 <wait+0x1a>
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	3301      	adds	r3, #1
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	683a      	ldr	r2, [r7, #0]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	ddf8      	ble.n	80009e0 <wait+0x14>
				{
					//printf(".");
				}
				//printf("\r\n");
				HAL_Delay(10);
 80009ee:	200a      	movs	r0, #10
 80009f0:	f001 fbf4 	bl	80021dc <HAL_Delay>
				 if(flag_break)
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <wait+0x5c>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d111      	bne.n	8000a20 <wait+0x54>
			for(int z = 0; z <5; z++)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3301      	adds	r3, #1
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b04      	cmp	r3, #4
 8000a06:	dde8      	ble.n	80009da <wait+0xe>
	 while(dato_recivido == false)
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <wait+0x60>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	4053      	eors	r3, r2
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d1de      	bne.n	80009d4 <wait+0x8>
			 {
				 break;
			 }*/

	 }
	HAL_TIM_Base_Stop_IT(&htim15);
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <wait+0x64>)
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f003 f879 	bl	8003b10 <HAL_TIM_Base_Stop_IT>
 8000a1e:	e000      	b.n	8000a22 <wait+0x56>
					 return;
 8000a20:	46c0      	nop			; (mov r8, r8)

}
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b002      	add	sp, #8
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000e58 	.word	0x20000e58
 8000a2c:	20000c28 	.word	0x20000c28
 8000a30:	200009c4 	.word	0x200009c4

08000a34 <update_firmware>:

uint32_t update_firmware (void)
{
 8000a34:	b5b0      	push	{r4, r5, r7, lr}
 8000a36:	b08c      	sub	sp, #48	; 0x30
 8000a38:	af00      	add	r7, sp, #0
	 uint32_t err = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
		 //uint8_t len=0;
		 uint8_t buffer[10];
		 uint8_t strnum[10];
		 uint8_t OK[3] = {0x4F,0x4B,0x20};
 8000a3e:	230c      	movs	r3, #12
 8000a40:	18fb      	adds	r3, r7, r3
 8000a42:	4ace      	ldr	r2, [pc, #824]	; (8000d7c <update_firmware+0x348>)
 8000a44:	8811      	ldrh	r1, [r2, #0]
 8000a46:	8019      	strh	r1, [r3, #0]
 8000a48:	7892      	ldrb	r2, [r2, #2]
 8000a4a:	709a      	strb	r2, [r3, #2]
		 uint8_t ERR[4] = {0x45,0x52,0x52,0x20};
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	18fb      	adds	r3, r7, r3
 8000a50:	4acb      	ldr	r2, [pc, #812]	; (8000d80 <update_firmware+0x34c>)
 8000a52:	601a      	str	r2, [r3, #0]
		 uint32_t cmd7 [2] = {0x00,0x00};
 8000a54:	003b      	movs	r3, r7
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	003b      	movs	r3, r7
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	605a      	str	r2, [r3, #4]
		 clear_loader_rom();
 8000a60:	f7ff fec2 	bl	80007e8 <clear_loader_rom>
		 //CMD 1
		 HAL_UART_Transmit(&huart2,"FZ\n", (sizeof("FZ\n")-1),500);// begin
 8000a64:	23fa      	movs	r3, #250	; 0xfa
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	49c6      	ldr	r1, [pc, #792]	; (8000d84 <update_firmware+0x350>)
 8000a6a:	48c7      	ldr	r0, [pc, #796]	; (8000d88 <update_firmware+0x354>)
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	f003 fc9f 	bl	80043b0 <HAL_UART_Transmit>
		 //printf("\r Send FZ ... \r\n");
		 wait();
 8000a72:	f7ff ffab 	bl	80009cc <wait>
		 if(flag_break)
 8000a76:	4bc5      	ldr	r3, [pc, #788]	; (8000d8c <update_firmware+0x358>)
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <update_firmware+0x4e>
		 {
			 return 1;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e259      	b.n	8000f36 <update_firmware+0x502>
		 }
		 dato_recivido = false;
 8000a82:	4bc3      	ldr	r3, [pc, #780]	; (8000d90 <update_firmware+0x35c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
 8000a88:	4bc2      	ldr	r3, [pc, #776]	; (8000d94 <update_firmware+0x360>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
		 //CMD2

		memcpy(&FW_SIZE,&rx_buff[0],4);
 8000a8c:	4bc2      	ldr	r3, [pc, #776]	; (8000d98 <update_firmware+0x364>)
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	4bc0      	ldr	r3, [pc, #768]	; (8000d94 <update_firmware+0x360>)
 8000a92:	685a      	ldr	r2, [r3, #4]
		memcpy(&CRC_16,&rx_buff[4],4);
 8000a94:	4bc1      	ldr	r3, [pc, #772]	; (8000d9c <update_firmware+0x368>)
 8000a96:	601a      	str	r2, [r3, #0]
		pages = (uint32_t)(FW_SIZE/512);
 8000a98:	4bbf      	ldr	r3, [pc, #764]	; (8000d98 <update_firmware+0x364>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	0a5a      	lsrs	r2, r3, #9
 8000a9e:	4bc0      	ldr	r3, [pc, #768]	; (8000da0 <update_firmware+0x36c>)
 8000aa0:	601a      	str	r2, [r3, #0]
		n_bytes = 512*pages;
 8000aa2:	4bbf      	ldr	r3, [pc, #764]	; (8000da0 <update_firmware+0x36c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	025a      	lsls	r2, r3, #9
 8000aa8:	4bbe      	ldr	r3, [pc, #760]	; (8000da4 <update_firmware+0x370>)
 8000aaa:	601a      	str	r2, [r3, #0]
		offset = FW_SIZE - n_bytes;
 8000aac:	4bba      	ldr	r3, [pc, #744]	; (8000d98 <update_firmware+0x364>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4bbc      	ldr	r3, [pc, #752]	; (8000da4 <update_firmware+0x370>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	1ad2      	subs	r2, r2, r3
 8000ab6:	4bbc      	ldr	r3, [pc, #752]	; (8000da8 <update_firmware+0x374>)
 8000ab8:	601a      	str	r2, [r3, #0]
		//printf(" \r crc_app: %lX \n",CRC_16);
		//printf(" \r pages: %ld \n",pages);
		//printf(" \r n_bytes: %ld \n",n_bytes);
		//printf(" \r offset: %ld \n",offset);

		HAL_Delay(1000);
 8000aba:	23fa      	movs	r3, #250	; 0xfa
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f001 fb8c 	bl	80021dc <HAL_Delay>

		//printf("Send OK................. \n\r");
		HAL_UART_Transmit(&huart2,"OK\n", (sizeof("OK\n")-1),500);
 8000ac4:	23fa      	movs	r3, #250	; 0xfa
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	49b8      	ldr	r1, [pc, #736]	; (8000dac <update_firmware+0x378>)
 8000aca:	48af      	ldr	r0, [pc, #700]	; (8000d88 <update_firmware+0x354>)
 8000acc:	2203      	movs	r2, #3
 8000ace:	f003 fc6f 	bl	80043b0 <HAL_UART_Transmit>
		memset(rx_buff,'\0',sizeof(rx_buff));
 8000ad2:	2382      	movs	r3, #130	; 0x82
 8000ad4:	009a      	lsls	r2, r3, #2
 8000ad6:	4baf      	ldr	r3, [pc, #700]	; (8000d94 <update_firmware+0x360>)
 8000ad8:	2100      	movs	r1, #0
 8000ada:	0018      	movs	r0, r3
 8000adc:	f005 fccb 	bl	8006476 <memset>
		wait();
 8000ae0:	f7ff ff74 	bl	80009cc <wait>
		 dato_recivido = false;
 8000ae4:	4baa      	ldr	r3, [pc, #680]	; (8000d90 <update_firmware+0x35c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
	     transmit_data = true;
 8000aea:	4bb1      	ldr	r3, [pc, #708]	; (8000db0 <update_firmware+0x37c>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]

		 //printf(" \r Starting loader.......... \r\n");
		while( j<=pages-1)
 8000af0:	e0a7      	b.n	8000c42 <update_firmware+0x20e>
 8000af2:	4ba8      	ldr	r3, [pc, #672]	; (8000d94 <update_firmware+0x360>)
 8000af4:	681a      	ldr	r2, [r3, #0]
		{
			memcpy(&index_page,&rx_buff[0],4);
 8000af6:	4baf      	ldr	r3, [pc, #700]	; (8000db4 <update_firmware+0x380>)
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	4ba6      	ldr	r3, [pc, #664]	; (8000d94 <update_firmware+0x360>)
 8000afc:	685a      	ldr	r2, [r3, #4]
			memcpy(&crc_part,&rx_buff[4],4);
 8000afe:	4bae      	ldr	r3, [pc, #696]	; (8000db8 <update_firmware+0x384>)
 8000b00:	601a      	str	r2, [r3, #0]
			//printf(" \r index: %ld \n",index_page);
			//printf(" \r crc_part: %lX \n",crc_part);
			crc = CRC16_X25(&rx_buff[8], 512, 0);
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	0099      	lsls	r1, r3, #2
 8000b06:	4bad      	ldr	r3, [pc, #692]	; (8000dbc <update_firmware+0x388>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f7ff fda6 	bl	800065c <CRC16_X25>
 8000b10:	0003      	movs	r3, r0
 8000b12:	001a      	movs	r2, r3
 8000b14:	4baa      	ldr	r3, [pc, #680]	; (8000dc0 <update_firmware+0x38c>)
 8000b16:	801a      	strh	r2, [r3, #0]
			//printf(" \r crc computed: %X \r\n",crc);

			if((crc == crc_part) && (index_page < pages))
 8000b18:	4ba9      	ldr	r3, [pc, #676]	; (8000dc0 <update_firmware+0x38c>)
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	001a      	movs	r2, r3
 8000b1e:	4ba6      	ldr	r3, [pc, #664]	; (8000db8 <update_firmware+0x384>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d15c      	bne.n	8000be0 <update_firmware+0x1ac>
 8000b26:	4ba3      	ldr	r3, [pc, #652]	; (8000db4 <update_firmware+0x380>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	4b9d      	ldr	r3, [pc, #628]	; (8000da0 <update_firmware+0x36c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d256      	bcs.n	8000be0 <update_firmware+0x1ac>
			{
			  a = write(&rx_buff[8],a);
 8000b32:	4ba4      	ldr	r3, [pc, #656]	; (8000dc4 <update_firmware+0x390>)
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	001a      	movs	r2, r3
 8000b38:	4ba0      	ldr	r3, [pc, #640]	; (8000dbc <update_firmware+0x388>)
 8000b3a:	0011      	movs	r1, r2
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f7ff fdc5 	bl	80006cc <write>
 8000b42:	0003      	movs	r3, r0
 8000b44:	b29a      	uxth	r2, r3
 8000b46:	4b9f      	ldr	r3, [pc, #636]	; (8000dc4 <update_firmware+0x390>)
 8000b48:	801a      	strh	r2, [r3, #0]
			  crc_rec = CRC16_X25(&rx_buff[8], 512, crc_rec);
 8000b4a:	4b9f      	ldr	r3, [pc, #636]	; (8000dc8 <update_firmware+0x394>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	0099      	lsls	r1, r3, #2
 8000b54:	4b99      	ldr	r3, [pc, #612]	; (8000dbc <update_firmware+0x388>)
 8000b56:	0018      	movs	r0, r3
 8000b58:	f7ff fd80 	bl	800065c <CRC16_X25>
 8000b5c:	0003      	movs	r3, r0
 8000b5e:	001a      	movs	r2, r3
 8000b60:	4b99      	ldr	r3, [pc, #612]	; (8000dc8 <update_firmware+0x394>)
 8000b62:	601a      	str	r2, [r3, #0]
			  //printf(" \r crc_rec: %lX \r\n",crc_rec);

			  memset(buffer,'\0',sizeof(buffer));
 8000b64:	241c      	movs	r4, #28
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	220a      	movs	r2, #10
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f005 fc82 	bl	8006476 <memset>
			  memset(strnum,'\0',sizeof(strnum));
 8000b72:	2510      	movs	r5, #16
 8000b74:	197b      	adds	r3, r7, r5
 8000b76:	220a      	movs	r2, #10
 8000b78:	2100      	movs	r1, #0
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f005 fc7b 	bl	8006476 <memset>
			  snprintf(strnum,sizeof(strnum), "%ld",index_page);
 8000b80:	4b8c      	ldr	r3, [pc, #560]	; (8000db4 <update_firmware+0x380>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a91      	ldr	r2, [pc, #580]	; (8000dcc <update_firmware+0x398>)
 8000b86:	1978      	adds	r0, r7, r5
 8000b88:	210a      	movs	r1, #10
 8000b8a:	f005 fddb 	bl	8006744 <sniprintf>
			  memcpy(&buffer[0], OK, sizeof(OK));
 8000b8e:	193b      	adds	r3, r7, r4
 8000b90:	220c      	movs	r2, #12
 8000b92:	18ba      	adds	r2, r7, r2
 8000b94:	8811      	ldrh	r1, [r2, #0]
 8000b96:	8019      	strh	r1, [r3, #0]
 8000b98:	7892      	ldrb	r2, [r2, #2]
 8000b9a:	709a      	strb	r2, [r3, #2]
			  memcpy(&buffer[sizeof(OK)], strnum,strlen(strnum));
 8000b9c:	197b      	adds	r3, r7, r5
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f7ff faae 	bl	8000100 <strlen>
 8000ba4:	0002      	movs	r2, r0
 8000ba6:	1979      	adds	r1, r7, r5
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	3303      	adds	r3, #3
 8000bac:	0018      	movs	r0, r3
 8000bae:	f005 fc59 	bl	8006464 <memcpy>
			  //printf(" %s\n\r",buffer);
			  HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer),500);
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f7ff faa3 	bl	8000100 <strlen>
 8000bba:	0003      	movs	r3, r0
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	23fa      	movs	r3, #250	; 0xfa
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	1939      	adds	r1, r7, r4
 8000bc4:	4870      	ldr	r0, [pc, #448]	; (8000d88 <update_firmware+0x354>)
 8000bc6:	f003 fbf3 	bl	80043b0 <HAL_UART_Transmit>
			  wait();
 8000bca:	f7ff feff 	bl	80009cc <wait>
			  dato_recivido = false;
 8000bce:	4b70      	ldr	r3, [pc, #448]	; (8000d90 <update_firmware+0x35c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
			  j++;
 8000bd4:	4b7e      	ldr	r3, [pc, #504]	; (8000dd0 <update_firmware+0x39c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	1c5a      	adds	r2, r3, #1
 8000bda:	4b7d      	ldr	r3, [pc, #500]	; (8000dd0 <update_firmware+0x39c>)
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	e030      	b.n	8000c42 <update_firmware+0x20e>
			  //printf(" j: %d \n\r",j);
			}
			else
			{
				//i = i;
			  memset(buffer,'\0',sizeof(buffer));
 8000be0:	241c      	movs	r4, #28
 8000be2:	193b      	adds	r3, r7, r4
 8000be4:	220a      	movs	r2, #10
 8000be6:	2100      	movs	r1, #0
 8000be8:	0018      	movs	r0, r3
 8000bea:	f005 fc44 	bl	8006476 <memset>
			  memset(strnum,'\0',sizeof(strnum));
 8000bee:	2510      	movs	r5, #16
 8000bf0:	197b      	adds	r3, r7, r5
 8000bf2:	220a      	movs	r2, #10
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f005 fc3d 	bl	8006476 <memset>
			  //snprintf(strnum,sizeof(strnum), "%ld",index_page);
			  snprintf(strnum,sizeof(strnum), "%d",j);
 8000bfc:	4b74      	ldr	r3, [pc, #464]	; (8000dd0 <update_firmware+0x39c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a74      	ldr	r2, [pc, #464]	; (8000dd4 <update_firmware+0x3a0>)
 8000c02:	1978      	adds	r0, r7, r5
 8000c04:	210a      	movs	r1, #10
 8000c06:	f005 fd9d 	bl	8006744 <sniprintf>
			  memcpy(&buffer[0], ERR, sizeof(ERR));
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	2208      	movs	r2, #8
 8000c0e:	18ba      	adds	r2, r7, r2
 8000c10:	6812      	ldr	r2, [r2, #0]
 8000c12:	601a      	str	r2, [r3, #0]
			  memcpy(&buffer[sizeof(ERR)], strnum,strlen(strnum));
 8000c14:	197b      	adds	r3, r7, r5
 8000c16:	0018      	movs	r0, r3
 8000c18:	f7ff fa72 	bl	8000100 <strlen>
 8000c1c:	0002      	movs	r2, r0
 8000c1e:	1979      	adds	r1, r7, r5
 8000c20:	193b      	adds	r3, r7, r4
 8000c22:	3304      	adds	r3, #4
 8000c24:	0018      	movs	r0, r3
 8000c26:	f005 fc1d 	bl	8006464 <memcpy>
			  //printf(" \r %s\r\n",buffer);
			  //printf(" j: %d \n\r",j);
			  HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer),500);
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f7ff fa67 	bl	8000100 <strlen>
 8000c32:	0003      	movs	r3, r0
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	23fa      	movs	r3, #250	; 0xfa
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	1939      	adds	r1, r7, r4
 8000c3c:	4852      	ldr	r0, [pc, #328]	; (8000d88 <update_firmware+0x354>)
 8000c3e:	f003 fbb7 	bl	80043b0 <HAL_UART_Transmit>
		while( j<=pages-1)
 8000c42:	4b57      	ldr	r3, [pc, #348]	; (8000da0 <update_firmware+0x36c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	1e5a      	subs	r2, r3, #1
 8000c48:	4b61      	ldr	r3, [pc, #388]	; (8000dd0 <update_firmware+0x39c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d300      	bcc.n	8000c52 <update_firmware+0x21e>
 8000c50:	e74f      	b.n	8000af2 <update_firmware+0xbe>
			}

		}// end while
	     transmit_data = true;
 8000c52:	4b57      	ldr	r3, [pc, #348]	; (8000db0 <update_firmware+0x37c>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]

		if(offset!=0)
 8000c58:	4b53      	ldr	r3, [pc, #332]	; (8000da8 <update_firmware+0x374>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d100      	bne.n	8000c62 <update_firmware+0x22e>
 8000c60:	e0eb      	b.n	8000e3a <update_firmware+0x406>
 8000c62:	4b4c      	ldr	r3, [pc, #304]	; (8000d94 <update_firmware+0x360>)
 8000c64:	681a      	ldr	r2, [r3, #0]
		{
			//printf(" \r --------------Last Page ----------- \n");
			memcpy(&index_page,&rx_buff[0],4);
 8000c66:	4b53      	ldr	r3, [pc, #332]	; (8000db4 <update_firmware+0x380>)
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	4b4a      	ldr	r3, [pc, #296]	; (8000d94 <update_firmware+0x360>)
 8000c6c:	685a      	ldr	r2, [r3, #4]
			memcpy(&crc_part,&rx_buff[4],4);
 8000c6e:	4b52      	ldr	r3, [pc, #328]	; (8000db8 <update_firmware+0x384>)
 8000c70:	601a      	str	r2, [r3, #0]
			//printf(" \r index: %lX \n",index_page);
			//printf(" \r crc_part: %lX \n",crc_part);
			crc = CRC16_X25(&rx_buff[8], offset, 0);//offset
 8000c72:	4b4d      	ldr	r3, [pc, #308]	; (8000da8 <update_firmware+0x374>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	b299      	uxth	r1, r3
 8000c78:	4b50      	ldr	r3, [pc, #320]	; (8000dbc <update_firmware+0x388>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f7ff fced 	bl	800065c <CRC16_X25>
 8000c82:	0003      	movs	r3, r0
 8000c84:	001a      	movs	r2, r3
 8000c86:	4b4e      	ldr	r3, [pc, #312]	; (8000dc0 <update_firmware+0x38c>)
 8000c88:	801a      	strh	r2, [r3, #0]
			//printf(" \r crc computed: %X \r\n",crc);
			//printf(" \r crc_rec: %lX \r\n",crc_rec);


			if(crc == crc_part)
 8000c8a:	4b4d      	ldr	r3, [pc, #308]	; (8000dc0 <update_firmware+0x38c>)
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	001a      	movs	r2, r3
 8000c90:	4b49      	ldr	r3, [pc, #292]	; (8000db8 <update_firmware+0x384>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d000      	beq.n	8000c9a <update_firmware+0x266>
 8000c98:	e09e      	b.n	8000dd8 <update_firmware+0x3a4>
			{
			  a = write(&rx_buff[8],a);
 8000c9a:	4b4a      	ldr	r3, [pc, #296]	; (8000dc4 <update_firmware+0x390>)
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	001a      	movs	r2, r3
 8000ca0:	4b46      	ldr	r3, [pc, #280]	; (8000dbc <update_firmware+0x388>)
 8000ca2:	0011      	movs	r1, r2
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f7ff fd11 	bl	80006cc <write>
 8000caa:	0003      	movs	r3, r0
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	4b45      	ldr	r3, [pc, #276]	; (8000dc4 <update_firmware+0x390>)
 8000cb0:	801a      	strh	r2, [r3, #0]
			  crc_rec = CRC16_X25(&rx_buff[8], offset, crc_rec);
 8000cb2:	4b3d      	ldr	r3, [pc, #244]	; (8000da8 <update_firmware+0x374>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	b299      	uxth	r1, r3
 8000cb8:	4b43      	ldr	r3, [pc, #268]	; (8000dc8 <update_firmware+0x394>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	4b3f      	ldr	r3, [pc, #252]	; (8000dbc <update_firmware+0x388>)
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f7ff fccb 	bl	800065c <CRC16_X25>
 8000cc6:	0003      	movs	r3, r0
 8000cc8:	001a      	movs	r2, r3
 8000cca:	4b3f      	ldr	r3, [pc, #252]	; (8000dc8 <update_firmware+0x394>)
 8000ccc:	601a      	str	r2, [r3, #0]
			  memset(buffer,'\0',sizeof(buffer));
 8000cce:	241c      	movs	r4, #28
 8000cd0:	193b      	adds	r3, r7, r4
 8000cd2:	220a      	movs	r2, #10
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f005 fbcd 	bl	8006476 <memset>
			  memset(strnum,'\0',sizeof(strnum));
 8000cdc:	2510      	movs	r5, #16
 8000cde:	197b      	adds	r3, r7, r5
 8000ce0:	220a      	movs	r2, #10
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f005 fbc6 	bl	8006476 <memset>
			  snprintf(strnum,sizeof(strnum), "%d",index_page);
 8000cea:	4b32      	ldr	r3, [pc, #200]	; (8000db4 <update_firmware+0x380>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a39      	ldr	r2, [pc, #228]	; (8000dd4 <update_firmware+0x3a0>)
 8000cf0:	1978      	adds	r0, r7, r5
 8000cf2:	210a      	movs	r1, #10
 8000cf4:	f005 fd26 	bl	8006744 <sniprintf>
			  //printf("strnum: %s, len: %d \n",strnum,strlen(strnum));
			  memcpy(&buffer[0], OK, sizeof(OK));
 8000cf8:	193b      	adds	r3, r7, r4
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	18ba      	adds	r2, r7, r2
 8000cfe:	8811      	ldrh	r1, [r2, #0]
 8000d00:	8019      	strh	r1, [r3, #0]
 8000d02:	7892      	ldrb	r2, [r2, #2]
 8000d04:	709a      	strb	r2, [r3, #2]
			  memcpy(&buffer[sizeof(OK)], strnum,strlen(strnum));
 8000d06:	197b      	adds	r3, r7, r5
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f7ff f9f9 	bl	8000100 <strlen>
 8000d0e:	0002      	movs	r2, r0
 8000d10:	1979      	adds	r1, r7, r5
 8000d12:	193b      	adds	r3, r7, r4
 8000d14:	3303      	adds	r3, #3
 8000d16:	0018      	movs	r0, r3
 8000d18:	f005 fba4 	bl	8006464 <memcpy>
			  //printf(" \r buffer: %s\r\n",buffer);
			  HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer),500);
 8000d1c:	193b      	adds	r3, r7, r4
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f7ff f9ee 	bl	8000100 <strlen>
 8000d24:	0003      	movs	r3, r0
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	23fa      	movs	r3, #250	; 0xfa
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	1939      	adds	r1, r7, r4
 8000d2e:	4816      	ldr	r0, [pc, #88]	; (8000d88 <update_firmware+0x354>)
 8000d30:	f003 fb3e 	bl	80043b0 <HAL_UART_Transmit>

			  cmd7[0] = crc_rec;
 8000d34:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <update_firmware+0x394>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	003b      	movs	r3, r7
 8000d3a:	601a      	str	r2, [r3, #0]
			  cmd7[1] = 0xFFFFFFFF;
 8000d3c:	003b      	movs	r3, r7
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4252      	negs	r2, r2
 8000d42:	605a      	str	r2, [r3, #4]
			  //printf("\r ************************************* \r\n");
			  //printf(" \r crc rec: %lX \r\n",crc_rec);
			  //printf(" \r crc_app: %lX \n",CRC_16);
			  //printf("\r ************************************* \r\n");
			  HAL_Delay(200);
 8000d44:	20c8      	movs	r0, #200	; 0xc8
 8000d46:	f001 fa49 	bl	80021dc <HAL_Delay>
			  HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 8000d4a:	23fa      	movs	r3, #250	; 0xfa
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	0039      	movs	r1, r7
 8000d50:	480d      	ldr	r0, [pc, #52]	; (8000d88 <update_firmware+0x354>)
 8000d52:	2208      	movs	r2, #8
 8000d54:	f003 fb2c 	bl	80043b0 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 8000d58:	23fa      	movs	r3, #250	; 0xfa
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	0039      	movs	r1, r7
 8000d5e:	480a      	ldr	r0, [pc, #40]	; (8000d88 <update_firmware+0x354>)
 8000d60:	2208      	movs	r2, #8
 8000d62:	f003 fb25 	bl	80043b0 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 8000d66:	23fa      	movs	r3, #250	; 0xfa
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	0039      	movs	r1, r7
 8000d6c:	4806      	ldr	r0, [pc, #24]	; (8000d88 <update_firmware+0x354>)
 8000d6e:	2208      	movs	r2, #8
 8000d70:	f003 fb1e 	bl	80043b0 <HAL_UART_Transmit>

			 dato_recivido = false;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <update_firmware+0x35c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
 8000d7a:	e05e      	b.n	8000e3a <update_firmware+0x406>
 8000d7c:	08007b04 	.word	0x08007b04
 8000d80:	20525245 	.word	0x20525245
 8000d84:	08007af4 	.word	0x08007af4
 8000d88:	20000a5c 	.word	0x20000a5c
 8000d8c:	20000e58 	.word	0x20000e58
 8000d90:	20000c28 	.word	0x20000c28
 8000d94:	20000c38 	.word	0x20000c38
 8000d98:	20000e40 	.word	0x20000e40
 8000d9c:	20000e44 	.word	0x20000e44
 8000da0:	20000c2c 	.word	0x20000c2c
 8000da4:	20000c34 	.word	0x20000c34
 8000da8:	20000c30 	.word	0x20000c30
 8000dac:	08007af8 	.word	0x08007af8
 8000db0:	20000c2a 	.word	0x20000c2a
 8000db4:	20000e48 	.word	0x20000e48
 8000db8:	20000e5c 	.word	0x20000e5c
 8000dbc:	20000c40 	.word	0x20000c40
 8000dc0:	20000e4c 	.word	0x20000e4c
 8000dc4:	20000e52 	.word	0x20000e52
 8000dc8:	20000e60 	.word	0x20000e60
 8000dcc:	08007afc 	.word	0x08007afc
 8000dd0:	20000e64 	.word	0x20000e64
 8000dd4:	08007b00 	.word	0x08007b00
			}
			else
			{
			  memset(buffer,'\0',sizeof(buffer));
 8000dd8:	241c      	movs	r4, #28
 8000dda:	193b      	adds	r3, r7, r4
 8000ddc:	220a      	movs	r2, #10
 8000dde:	2100      	movs	r1, #0
 8000de0:	0018      	movs	r0, r3
 8000de2:	f005 fb48 	bl	8006476 <memset>
			  memset(strnum,'\0',sizeof(strnum));
 8000de6:	2510      	movs	r5, #16
 8000de8:	197b      	adds	r3, r7, r5
 8000dea:	220a      	movs	r2, #10
 8000dec:	2100      	movs	r1, #0
 8000dee:	0018      	movs	r0, r3
 8000df0:	f005 fb41 	bl	8006476 <memset>
			  snprintf(strnum,sizeof(strnum), "%d",index_page);
 8000df4:	4b52      	ldr	r3, [pc, #328]	; (8000f40 <update_firmware+0x50c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a52      	ldr	r2, [pc, #328]	; (8000f44 <update_firmware+0x510>)
 8000dfa:	1978      	adds	r0, r7, r5
 8000dfc:	210a      	movs	r1, #10
 8000dfe:	f005 fca1 	bl	8006744 <sniprintf>
			  memcpy(&buffer[0], ERR, sizeof(ERR));
 8000e02:	193b      	adds	r3, r7, r4
 8000e04:	2208      	movs	r2, #8
 8000e06:	18ba      	adds	r2, r7, r2
 8000e08:	6812      	ldr	r2, [r2, #0]
 8000e0a:	601a      	str	r2, [r3, #0]
			  memcpy(&buffer[sizeof(ERR)], strnum,strlen(strnum));
 8000e0c:	197b      	adds	r3, r7, r5
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f7ff f976 	bl	8000100 <strlen>
 8000e14:	0002      	movs	r2, r0
 8000e16:	1979      	adds	r1, r7, r5
 8000e18:	193b      	adds	r3, r7, r4
 8000e1a:	3304      	adds	r3, #4
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f005 fb21 	bl	8006464 <memcpy>
			  //printf(" \r buffer: %s\r\n",buffer);
			  HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer),500);
 8000e22:	193b      	adds	r3, r7, r4
 8000e24:	0018      	movs	r0, r3
 8000e26:	f7ff f96b 	bl	8000100 <strlen>
 8000e2a:	0003      	movs	r3, r0
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	23fa      	movs	r3, #250	; 0xfa
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	1939      	adds	r1, r7, r4
 8000e34:	4844      	ldr	r0, [pc, #272]	; (8000f48 <update_firmware+0x514>)
 8000e36:	f003 fabb 	bl	80043b0 <HAL_UART_Transmit>
				  //return -1;
			}
		}// offset

	//--------------------- Check Integration -----------------
		if(CRC_16 == crc_rec)
 8000e3a:	4b44      	ldr	r3, [pc, #272]	; (8000f4c <update_firmware+0x518>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	4b44      	ldr	r3, [pc, #272]	; (8000f50 <update_firmware+0x51c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d122      	bne.n	8000e8c <update_firmware+0x458>
			//printf("\r ************* CRC OK ****************** \r\n");
			//printf(" \r crc rec: %lX \r\n",crc_rec);
			//printf(" \r crc_app: %lX \n",CRC_16);
			//printf("\r ************************************* \r\n");

			HAL_Delay(2000);
 8000e46:	23fa      	movs	r3, #250	; 0xfa
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f001 f9c6 	bl	80021dc <HAL_Delay>
			cmd7[0] = crc_rec;
 8000e50:	4b3f      	ldr	r3, [pc, #252]	; (8000f50 <update_firmware+0x51c>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	003b      	movs	r3, r7
 8000e56:	601a      	str	r2, [r3, #0]
			cmd7[1] = 0xFFFFFFFF;
 8000e58:	003b      	movs	r3, r7
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	4252      	negs	r2, r2
 8000e5e:	605a      	str	r2, [r3, #4]
			HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 8000e60:	23fa      	movs	r3, #250	; 0xfa
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	0039      	movs	r1, r7
 8000e66:	4838      	ldr	r0, [pc, #224]	; (8000f48 <update_firmware+0x514>)
 8000e68:	2208      	movs	r2, #8
 8000e6a:	f003 faa1 	bl	80043b0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 8000e6e:	23fa      	movs	r3, #250	; 0xfa
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	0039      	movs	r1, r7
 8000e74:	4834      	ldr	r0, [pc, #208]	; (8000f48 <update_firmware+0x514>)
 8000e76:	2208      	movs	r2, #8
 8000e78:	f003 fa9a 	bl	80043b0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 8000e7c:	23fa      	movs	r3, #250	; 0xfa
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	0039      	movs	r1, r7
 8000e82:	4831      	ldr	r0, [pc, #196]	; (8000f48 <update_firmware+0x514>)
 8000e84:	2208      	movs	r2, #8
 8000e86:	f003 fa93 	bl	80043b0 <HAL_UART_Transmit>
 8000e8a:	e021      	b.n	8000ed0 <update_firmware+0x49c>
			//printf("\r ************* CRC FAIL ****************** \r\n");
			//printf(" \r crc rec: %lX \r\n",crc_rec);
			//printf(" \r crc_app: %lX \n",CRC_16);
			//printf("\r ************************************* \r\n");

			HAL_Delay(2000);
 8000e8c:	23fa      	movs	r3, #250	; 0xfa
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	0018      	movs	r0, r3
 8000e92:	f001 f9a3 	bl	80021dc <HAL_Delay>
			cmd7[0] = 0xFFFFFFFF;
 8000e96:	003b      	movs	r3, r7
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4252      	negs	r2, r2
 8000e9c:	601a      	str	r2, [r3, #0]
			cmd7[1] = 0xFFFFFFFF;
 8000e9e:	003b      	movs	r3, r7
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	4252      	negs	r2, r2
 8000ea4:	605a      	str	r2, [r3, #4]
			HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 8000ea6:	23fa      	movs	r3, #250	; 0xfa
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	0039      	movs	r1, r7
 8000eac:	4826      	ldr	r0, [pc, #152]	; (8000f48 <update_firmware+0x514>)
 8000eae:	2208      	movs	r2, #8
 8000eb0:	f003 fa7e 	bl	80043b0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 8000eb4:	23fa      	movs	r3, #250	; 0xfa
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	0039      	movs	r1, r7
 8000eba:	4823      	ldr	r0, [pc, #140]	; (8000f48 <update_firmware+0x514>)
 8000ebc:	2208      	movs	r2, #8
 8000ebe:	f003 fa77 	bl	80043b0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 8000ec2:	23fa      	movs	r3, #250	; 0xfa
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	0039      	movs	r1, r7
 8000ec8:	481f      	ldr	r0, [pc, #124]	; (8000f48 <update_firmware+0x514>)
 8000eca:	2208      	movs	r2, #8
 8000ecc:	f003 fa70 	bl	80043b0 <HAL_UART_Transmit>
			//printf("LOADER FAIL\r\n");
			//return -1;
		}

	//---------------- Validate -------------------------
		const image_hdr_t *hdr = NULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
		hdr = image_get_header(IMAGE_SLOT_2);//magic
 8000ed4:	2002      	movs	r0, #2
 8000ed6:	f7ff fafb 	bl	80004d0 <image_get_header>
 8000eda:	0003      	movs	r3, r0
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (hdr == NULL)
 8000ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d102      	bne.n	8000eea <update_firmware+0x4b6>
		{
			//printf("Magic incorrect \r\n");
			err =  -1;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	425b      	negs	r3, r3
 8000ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		if (image_validate(IMAGE_SLOT_2, hdr) != 0)//crc
 8000eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eec:	0019      	movs	r1, r3
 8000eee:	2002      	movs	r0, #2
 8000ef0:	f7ff fb1c 	bl	800052c <image_validate>
 8000ef4:	1e03      	subs	r3, r0, #0
 8000ef6:	d002      	beq.n	8000efe <update_firmware+0x4ca>
		{
			//printf("CRC incorrect \r\n");
			err = -1;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	425b      	negs	r3, r3
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
		}//*/
	// -------------------------- Clone ----------------------------

		if((CRC_16 == crc_rec) && (err == 0))
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <update_firmware+0x518>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <update_firmware+0x51c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d10e      	bne.n	8000f28 <update_firmware+0x4f4>
 8000f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d10b      	bne.n	8000f28 <update_firmware+0x4f4>
		{
			//printf("Ready to write to  Slot 1 \r\n");
			HAL_Delay(2000);
 8000f10:	23fa      	movs	r3, #250	; 0xfa
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	0018      	movs	r0, r3
 8000f16:	f001 f961 	bl	80021dc <HAL_Delay>
			err = clone_rom(FW_SIZE);
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <update_firmware+0x520>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f7ff fc8e 	bl	8000840 <clone_rom>
 8000f24:	0003      	movs	r3, r0
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		if ( err == 0)
 8000f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <update_firmware+0x4fe>
		{
			//printf("UPDATE SUCCESSFULLY\r\n");
			return 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e001      	b.n	8000f36 <update_firmware+0x502>
		}
		else
		{
			//printf("UPDATE FAIL\r\n");
			return -1;
 8000f32:	2301      	movs	r3, #1
 8000f34:	425b      	negs	r3, r3
		}//*/


}// get_Firmware()
 8000f36:	0018      	movs	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b00c      	add	sp, #48	; 0x30
 8000f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	20000e48 	.word	0x20000e48
 8000f44:	08007b00 	.word	0x08007b00
 8000f48:	20000a5c 	.word	0x20000a5c
 8000f4c:	20000e44 	.word	0x20000e44
 8000f50:	20000e60 	.word	0x20000e60
 8000f54:	20000e40 	.word	0x20000e40

08000f58 <BootJumpASM>:

__attribute__( (naked, noreturn) ) static void BootJumpASM(uint32_t PC, uint32_t SP) {
	__asm("           \n\
 8000f58:	f381 8808 	msr	MSP, r1
 8000f5c:	4700      	bx	r0
			msr msp, r1 /* load r1 into MSP */\n\
			bx r0       /* branch to the address at r0 */\n\
	");
}
 8000f5e:	46c0      	nop			; (mov r8, r8)

08000f60 <image_start>:

 void image_start(const image_hdr_t *hdr) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8000f68:	200f      	movs	r0, #15
 8000f6a:	183b      	adds	r3, r7, r0
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f70:	b672      	cpsid	i
}
 8000f72:	46c0      	nop			; (mov r8, r8)
	/* Disable interrupts */
	//Disable IRQ
	__disable_irq();

	//Disable the system timer
	SysTick->CTRL = 0;
 8000f74:	4b28      	ldr	r3, [pc, #160]	; (8001018 <image_start+0xb8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]

	//Clear the exception pending bit
	SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk ;
 8000f7a:	4b28      	ldr	r3, [pc, #160]	; (800101c <image_start+0xbc>)
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	4b27      	ldr	r3, [pc, #156]	; (800101c <image_start+0xbc>)
 8000f80:	2180      	movs	r1, #128	; 0x80
 8000f82:	0489      	lsls	r1, r1, #18
 8000f84:	430a      	orrs	r2, r1
 8000f86:	605a      	str	r2, [r3, #4]

	//Disable IRQs
    for (i = 0; i < 8; i++) {
 8000f88:	183b      	adds	r3, r7, r0
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
 8000f8e:	e015      	b.n	8000fbc <image_start+0x5c>
        NVIC->ICER[i] = 0xFFFFFFFF; // disable IRQ
 8000f90:	4923      	ldr	r1, [pc, #140]	; (8001020 <image_start+0xc0>)
 8000f92:	200f      	movs	r0, #15
 8000f94:	183b      	adds	r3, r7, r0
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	3320      	adds	r3, #32
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4252      	negs	r2, r2
 8000fa0:	505a      	str	r2, [r3, r1]
        NVIC->ICPR[i] = 0xFFFFFFFF; // clear pending IRQ
 8000fa2:	491f      	ldr	r1, [pc, #124]	; (8001020 <image_start+0xc0>)
 8000fa4:	183b      	adds	r3, r7, r0
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	3360      	adds	r3, #96	; 0x60
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	2201      	movs	r2, #1
 8000fae:	4252      	negs	r2, r2
 8000fb0:	505a      	str	r2, [r3, r1]
    for (i = 0; i < 8; i++) {
 8000fb2:	183b      	adds	r3, r7, r0
 8000fb4:	781a      	ldrb	r2, [r3, #0]
 8000fb6:	183b      	adds	r3, r7, r0
 8000fb8:	3201      	adds	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	18fb      	adds	r3, r7, r3
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b07      	cmp	r3, #7
 8000fc4:	d9e4      	bls.n	8000f90 <image_start+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fc6:	f3bf 8f4f 	dsb	sy
}
 8000fca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8000fcc:	f3bf 8f6f 	isb	sy
}
 8000fd0:	46c0      	nop			; (mov r8, r8)
	//Barriers
	__DSB();
	__ISB();

	//const DeviceVectors *vectors = (const DeviceVectors *) hdr->vector_addr;
	uint32_t *isr = (uint32_t *)hdr->vector_addr;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	7c1a      	ldrb	r2, [r3, #16]
 8000fd6:	7c59      	ldrb	r1, [r3, #17]
 8000fd8:	0209      	lsls	r1, r1, #8
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	7c99      	ldrb	r1, [r3, #18]
 8000fde:	0409      	lsls	r1, r1, #16
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	7cdb      	ldrb	r3, [r3, #19]
 8000fe4:	061b      	lsls	r3, r3, #24
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	60bb      	str	r3, [r7, #8]
    SCB->VTOR = (uint32_t)isr & SCB_VTOR_TBLOFF_Msk;
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <image_start+0xbc>)
 8000fee:	21ff      	movs	r1, #255	; 0xff
 8000ff0:	438a      	bics	r2, r1
 8000ff2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ff4:	f3bf 8f4f 	dsb	sy
}
 8000ff8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8000ffa:	f3bf 8f6f 	isb	sy
}
 8000ffe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("cpsie i" : : : "memory");
 8001000:	b662      	cpsie	i
}
 8001002:	46c0      	nop			; (mov r8, r8)
	__ISB();

	/* Enable interrrupts */
	__enable_irq();

    BootJumpASM(isr[1], isr[0]);
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	3304      	adds	r3, #4
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	0019      	movs	r1, r3
 8001010:	0010      	movs	r0, r2
 8001012:	f7ff ffa1 	bl	8000f58 <BootJumpASM>
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	e000e010 	.word	0xe000e010
 800101c:	e000ed00 	.word	0xe000ed00
 8001020:	e000e100 	.word	0xe000e100

08001024 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102a:	f001 f851 	bl	80020d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102e:	f000 f917 	bl	8001260 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  MX_USART2_UART_Init();
 8001032:	f000 fa8f 	bl	8001554 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001036:	f000 f95b 	bl	80012f0 <MX_TIM1_Init>
  MX_TIM3_Init();
 800103a:	f000 f9b3 	bl	80013a4 <MX_TIM3_Init>
  MX_USART5_UART_Init();
 800103e:	f000 fb25 	bl	800168c <MX_USART5_UART_Init>
  MX_TIM15_Init();
 8001042:	f000 fa05 	bl	8001450 <MX_TIM15_Init>
  MX_USART3_UART_Init();
 8001046:	f000 fad3 	bl	80015f0 <MX_USART3_UART_Init>
  MX_TIM16_Init();
 800104a:	f000 fa5b 	bl	8001504 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  MX_GPIO_Init_user();
 800104e:	f000 fb95 	bl	800177c <MX_GPIO_Init_user>
   RetargetInit(&huart3);
 8001052:	4b76      	ldr	r3, [pc, #472]	; (800122c <main+0x208>)
 8001054:	0018      	movs	r0, r3
 8001056:	f000 fcf3 	bl	8001a40 <RetargetInit>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);// BOOT/*/

   //printf("\r ------ Start Bootooader ----- \r\n");
   HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx_buff, sizeof rx_buff);
 800105a:	2382      	movs	r3, #130	; 0x82
 800105c:	009a      	lsls	r2, r3, #2
 800105e:	4974      	ldr	r1, [pc, #464]	; (8001230 <main+0x20c>)
 8001060:	4b74      	ldr	r3, [pc, #464]	; (8001234 <main+0x210>)
 8001062:	0018      	movs	r0, r3
 8001064:	f005 f90e 	bl	8006284 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	shared_memory_init();
 8001068:	f000 fc68 	bl	800193c <shared_memory_init>
	timer_flag = 0;
 800106c:	4b72      	ldr	r3, [pc, #456]	; (8001238 <main+0x214>)
 800106e:	2200      	movs	r2, #0
 8001070:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim1);
 8001072:	4b72      	ldr	r3, [pc, #456]	; (800123c <main+0x218>)
 8001074:	0018      	movs	r0, r3
 8001076:	f002 fcef 	bl	8003a58 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim15);
 800107a:	4b71      	ldr	r3, [pc, #452]	; (8001240 <main+0x21c>)
 800107c:	0018      	movs	r0, r3
 800107e:	f002 fceb 	bl	8003a58 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim16);
 8001082:	4b70      	ldr	r3, [pc, #448]	; (8001244 <main+0x220>)
 8001084:	0018      	movs	r0, r3
 8001086:	f002 fce7 	bl	8003a58 <HAL_TIM_Base_Start_IT>



	while (1)
	{
		HAL_Delay(5);
 800108a:	2005      	movs	r0, #5
 800108c:	f001 f8a6 	bl	80021dc <HAL_Delay>
		boot = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_14);// 1/0
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	01da      	lsls	r2, r3, #7
 8001094:	23a0      	movs	r3, #160	; 0xa0
 8001096:	05db      	lsls	r3, r3, #23
 8001098:	0011      	movs	r1, r2
 800109a:	0018      	movs	r0, r3
 800109c:	f001 fd96 	bl	8002bcc <HAL_GPIO_ReadPin>
 80010a0:	0003      	movs	r3, r0
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	4b68      	ldr	r3, [pc, #416]	; (8001248 <main+0x224>)
 80010a6:	801a      	strh	r2, [r3, #0]
		//printf("\r boot: %d \r\n",boot);
		bootloader = timer_flag & boot;
 80010a8:	4b63      	ldr	r3, [pc, #396]	; (8001238 <main+0x214>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	4a66      	ldr	r2, [pc, #408]	; (8001248 <main+0x224>)
 80010ae:	8812      	ldrh	r2, [r2, #0]
 80010b0:	4013      	ands	r3, r2
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	1e5a      	subs	r2, r3, #1
 80010b6:	4193      	sbcs	r3, r2
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b64      	ldr	r3, [pc, #400]	; (800124c <main+0x228>)
 80010bc:	701a      	strb	r2, [r3, #0]
		if(bootloader)
 80010be:	4b63      	ldr	r3, [pc, #396]	; (800124c <main+0x228>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d006      	beq.n	80010d4 <main+0xb0>
		{
			//printf(" App \n\r");
			HAL_TIM_Base_Stop_IT(&htim1);
 80010c6:	4b5d      	ldr	r3, [pc, #372]	; (800123c <main+0x218>)
 80010c8:	0018      	movs	r0, r3
 80010ca:	f002 fd21 	bl	8003b10 <HAL_TIM_Base_Stop_IT>
			shared_mem_set_app_update_requested(false);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f000 fc9c 	bl	8001a0c <shared_mem_set_app_update_requested>
		}
		 if(bootloader == 0)
 80010d4:	4b5d      	ldr	r3, [pc, #372]	; (800124c <main+0x228>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2201      	movs	r2, #1
 80010da:	4053      	eors	r3, r2
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d006      	beq.n	80010f0 <main+0xcc>
		{
			//printf(" \r Bootloader \r\n");
			HAL_TIM_Base_Stop_IT(&htim1);
 80010e2:	4b56      	ldr	r3, [pc, #344]	; (800123c <main+0x218>)
 80010e4:	0018      	movs	r0, r3
 80010e6:	f002 fd13 	bl	8003b10 <HAL_TIM_Base_Stop_IT>
			shared_mem_set_app_update_requested(true);
 80010ea:	2001      	movs	r0, #1
 80010ec:	f000 fc8e 	bl	8001a0c <shared_mem_set_app_update_requested>
		}

	    if((flag_break == 1) && (bootloader==0))
 80010f0:	4b57      	ldr	r3, [pc, #348]	; (8001250 <main+0x22c>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d109      	bne.n	800110c <main+0xe8>
 80010f8:	4b54      	ldr	r3, [pc, #336]	; (800124c <main+0x228>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2201      	movs	r2, #1
 80010fe:	4053      	eors	r3, r2
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <main+0xe8>
		{
			//printf(" \r App Timer \r\n");
			shared_mem_set_app_update_requested(false);
 8001106:	2000      	movs	r0, #0
 8001108:	f000 fc80 	bl	8001a0c <shared_mem_set_app_update_requested>
		}

	if (shared_mem_is_bl_upd_requested()) {//bootloader
 800110c:	f000 fc3d 	bl	800198a <shared_mem_is_bl_upd_requested>
 8001110:	1e03      	subs	r3, r0, #0
 8001112:	d016      	beq.n	8001142 <main+0x11e>
			hdr = image_get_header(IMAGE_SLOT_2); // get address y magic
 8001114:	2002      	movs	r0, #2
 8001116:	f7ff f9db 	bl	80004d0 <image_get_header>
 800111a:	0002      	movs	r2, r0
 800111c:	4b4d      	ldr	r3, [pc, #308]	; (8001254 <main+0x230>)
 800111e:	601a      	str	r2, [r3, #0]

		// Load the updater (apparom)
		if (hdr == NULL)
 8001120:	4b4c      	ldr	r3, [pc, #304]	; (8001254 <main+0x230>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d005      	beq.n	8001134 <main+0x110>
		{
			//printf("No image found in slot 2\r\n");
		}
		else
		{
			if (image_validate(IMAGE_SLOT_2, hdr) != 0) {// addr =  &__loader_rom_start__ + sizeof(image_hdr_t), len -> crc(add, len)
 8001128:	4b4a      	ldr	r3, [pc, #296]	; (8001254 <main+0x230>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	0019      	movs	r1, r3
 800112e:	2002      	movs	r0, #2
 8001130:	f7ff f9fc 	bl	800052c <image_validate>
		}
		//ioport_set_pin_level(RED_LED, false);
		//ioport_set_pin_level(GREEN_LED, false);
		//ioport_set_pin_level(BLUE_LED, false);
		//printf("Jumping to updater\r\n");
		shared_mem_increment_boot_counter();
 8001134:	f000 fc32 	bl	800199c <shared_mem_increment_boot_counter>
		//printf("Boot count: %d \r\n",shared_mem_get_boot_counter());
		image_start(hdr);
 8001138:	4b46      	ldr	r3, [pc, #280]	; (8001254 <main+0x230>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	0018      	movs	r0, r3
 800113e:	f7ff ff0f 	bl	8000f60 <image_start>

	}

	if (!shared_mem_is_app_upd_requested()) {//app //boot 1
 8001142:	f000 fc19 	bl	8001978 <shared_mem_is_app_upd_requested>
 8001146:	0003      	movs	r3, r0
 8001148:	001a      	movs	r2, r3
 800114a:	2301      	movs	r3, #1
 800114c:	4053      	eors	r3, r2
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	d02a      	beq.n	80011aa <main+0x186>
		// Boot count, maybe not neccessary or implement a better thing to handle this
		const uint8_t max_boot_attemps = 4;
 8001154:	1dfb      	adds	r3, r7, #7
 8001156:	2204      	movs	r2, #4
 8001158:	701a      	strb	r2, [r3, #0]
		if (shared_mem_get_boot_counter() >= max_boot_attemps)
 800115a:	f000 fc37 	bl	80019cc <shared_mem_get_boot_counter>
 800115e:	0003      	movs	r3, r0
 8001160:	001a      	movs	r2, r3
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	4293      	cmp	r3, r2
 8001168:	d805      	bhi.n	8001176 <main+0x152>
		{
			shared_mem_clear_boot_counter();
 800116a:	f000 fc25 	bl	80019b8 <shared_mem_clear_boot_counter>
			//printf("App unstable, entering to DFU mode\r\n");
			break;
 800116e:	46c0      	nop			; (mov r8, r8)

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }//end while
	HAL_NVIC_SystemReset(); //resetea el uC
 8001170:	f001 f93b 	bl	80023ea <HAL_NVIC_SystemReset>
 8001174:	e058      	b.n	8001228 <main+0x204>
		hdr = image_get_header(IMAGE_SLOT_1);// get address y magic
 8001176:	2001      	movs	r0, #1
 8001178:	f7ff f9aa 	bl	80004d0 <image_get_header>
 800117c:	0002      	movs	r2, r0
 800117e:	4b35      	ldr	r3, [pc, #212]	; (8001254 <main+0x230>)
 8001180:	601a      	str	r2, [r3, #0]
		if (hdr == NULL)
 8001182:	4b34      	ldr	r3, [pc, #208]	; (8001254 <main+0x230>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d04b      	beq.n	8001222 <main+0x1fe>
		if (image_validate(IMAGE_SLOT_1, hdr) != 0) { // addr =  &__loader_rom_start__ + sizeof(image_hdr_t), len -> crc(add, len)
 800118a:	4b32      	ldr	r3, [pc, #200]	; (8001254 <main+0x230>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	0019      	movs	r1, r3
 8001190:	2001      	movs	r0, #1
 8001192:	f7ff f9cb 	bl	800052c <image_validate>
 8001196:	1e03      	subs	r3, r0, #0
 8001198:	d145      	bne.n	8001226 <main+0x202>
		shared_mem_increment_boot_counter();
 800119a:	f000 fbff 	bl	800199c <shared_mem_increment_boot_counter>
		image_start(hdr);
 800119e:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <main+0x230>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	0018      	movs	r0, r3
 80011a4:	f7ff fedc 	bl	8000f60 <image_start>
 80011a8:	e76f      	b.n	800108a <main+0x66>
	else if (shared_mem_is_app_upd_requested())
 80011aa:	f000 fbe5 	bl	8001978 <shared_mem_is_app_upd_requested>
 80011ae:	1e03      	subs	r3, r0, #0
 80011b0:	d100      	bne.n	80011b4 <main+0x190>
 80011b2:	e76a      	b.n	800108a <main+0x66>
		if (update_firmware() == 0)
 80011b4:	f7ff fc3e 	bl	8000a34 <update_firmware>
 80011b8:	1e03      	subs	r3, r0, #0
 80011ba:	d000      	beq.n	80011be <main+0x19a>
 80011bc:	e765      	b.n	800108a <main+0x66>
			shared_mem_set_update_completed();
 80011be:	f000 fc0f 	bl	80019e0 <shared_mem_set_update_completed>
			shared_mem_clear_boot_counter();
 80011c2:	f000 fbf9 	bl	80019b8 <shared_mem_clear_boot_counter>
			shared_mem_clear_ota_info();
 80011c6:	f000 fc17 	bl	80019f8 <shared_mem_clear_ota_info>
			shared_mem_set_app_update_requested(false);
 80011ca:	2000      	movs	r0, #0
 80011cc:	f000 fc1e 	bl	8001a0c <shared_mem_set_app_update_requested>
			shared_mem_set_update();
 80011d0:	f000 fc2c 	bl	8001a2c <shared_mem_set_update>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);//resetea el uC
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	481f      	ldr	r0, [pc, #124]	; (8001258 <main+0x234>)
 80011da:	2200      	movs	r2, #0
 80011dc:	0019      	movs	r1, r3
 80011de:	f001 fd12 	bl	8002c06 <HAL_GPIO_WritePin>
			HAL_Delay(2000);
 80011e2:	23fa      	movs	r3, #250	; 0xfa
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	0018      	movs	r0, r3
 80011e8:	f000 fff8 	bl	80021dc <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4819      	ldr	r0, [pc, #100]	; (8001258 <main+0x234>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	0019      	movs	r1, r3
 80011f6:	f001 fd06 	bl	8002c06 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);//resetea el uC
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <main+0x238>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	2108      	movs	r1, #8
 8001200:	0018      	movs	r0, r3
 8001202:	f001 fd00 	bl	8002c06 <HAL_GPIO_WritePin>
			HAL_Delay(2000);
 8001206:	23fa      	movs	r3, #250	; 0xfa
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	0018      	movs	r0, r3
 800120c:	f000 ffe6 	bl	80021dc <HAL_Delay>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <main+0x238>)
 8001212:	2201      	movs	r2, #1
 8001214:	2108      	movs	r1, #8
 8001216:	0018      	movs	r0, r3
 8001218:	f001 fcf5 	bl	8002c06 <HAL_GPIO_WritePin>
			HAL_NVIC_SystemReset();
 800121c:	f001 f8e5 	bl	80023ea <HAL_NVIC_SystemReset>
		HAL_Delay(5);
 8001220:	e733      	b.n	800108a <main+0x66>
			goto invalid;
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	e000      	b.n	8001228 <main+0x204>
			goto invalid;
 8001226:	46c0      	nop			; (mov r8, r8)

	invalid:
		//printf("\r\nFlash a valid application\r\n");
		while (true)
		{
			__asm__ __volatile__("");
 8001228:	e7fe      	b.n	8001228 <main+0x204>
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	20000af0 	.word	0x20000af0
 8001230:	20000c38 	.word	0x20000c38
 8001234:	20000a5c 	.word	0x20000a5c
 8001238:	20000e56 	.word	0x20000e56
 800123c:	2000092c 	.word	0x2000092c
 8001240:	200009c4 	.word	0x200009c4
 8001244:	20000a10 	.word	0x20000a10
 8001248:	20000e54 	.word	0x20000e54
 800124c:	20000c29 	.word	0x20000c29
 8001250:	20000e58 	.word	0x20000e58
 8001254:	20000e68 	.word	0x20000e68
 8001258:	50000400 	.word	0x50000400
 800125c:	50000c00 	.word	0x50000c00

08001260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b093      	sub	sp, #76	; 0x4c
 8001264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001266:	2410      	movs	r4, #16
 8001268:	193b      	adds	r3, r7, r4
 800126a:	0018      	movs	r0, r3
 800126c:	2338      	movs	r3, #56	; 0x38
 800126e:	001a      	movs	r2, r3
 8001270:	2100      	movs	r1, #0
 8001272:	f005 f900 	bl	8006476 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001276:	003b      	movs	r3, r7
 8001278:	0018      	movs	r0, r3
 800127a:	2310      	movs	r3, #16
 800127c:	001a      	movs	r2, r3
 800127e:	2100      	movs	r1, #0
 8001280:	f005 f8f9 	bl	8006476 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	0018      	movs	r0, r3
 800128a:	f001 fcf5 	bl	8002c78 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800128e:	193b      	adds	r3, r7, r4
 8001290:	2202      	movs	r2, #2
 8001292:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001294:	193b      	adds	r3, r7, r4
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	0052      	lsls	r2, r2, #1
 800129a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800129c:	193b      	adds	r3, r7, r4
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a2:	193b      	adds	r3, r7, r4
 80012a4:	2240      	movs	r2, #64	; 0x40
 80012a6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012a8:	193b      	adds	r3, r7, r4
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ae:	193b      	adds	r3, r7, r4
 80012b0:	0018      	movs	r0, r3
 80012b2:	f001 fd2d 	bl	8002d10 <HAL_RCC_OscConfig>
 80012b6:	1e03      	subs	r3, r0, #0
 80012b8:	d001      	beq.n	80012be <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80012ba:	f000 fb07 	bl	80018cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012be:	003b      	movs	r3, r7
 80012c0:	2207      	movs	r2, #7
 80012c2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012c4:	003b      	movs	r3, r7
 80012c6:	2200      	movs	r2, #0
 80012c8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ca:	003b      	movs	r3, r7
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012d0:	003b      	movs	r3, r7
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012d6:	003b      	movs	r3, r7
 80012d8:	2100      	movs	r1, #0
 80012da:	0018      	movs	r0, r3
 80012dc:	f002 f832 	bl	8003344 <HAL_RCC_ClockConfig>
 80012e0:	1e03      	subs	r3, r0, #0
 80012e2:	d001      	beq.n	80012e8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80012e4:	f000 faf2 	bl	80018cc <Error_Handler>
  }
}
 80012e8:	46c0      	nop			; (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b013      	add	sp, #76	; 0x4c
 80012ee:	bd90      	pop	{r4, r7, pc}

080012f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f6:	2310      	movs	r3, #16
 80012f8:	18fb      	adds	r3, r7, r3
 80012fa:	0018      	movs	r0, r3
 80012fc:	2310      	movs	r3, #16
 80012fe:	001a      	movs	r2, r3
 8001300:	2100      	movs	r1, #0
 8001302:	f005 f8b8 	bl	8006476 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	0018      	movs	r0, r3
 800130a:	230c      	movs	r3, #12
 800130c:	001a      	movs	r2, r3
 800130e:	2100      	movs	r1, #0
 8001310:	f005 f8b1 	bl	8006476 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001314:	4b21      	ldr	r3, [pc, #132]	; (800139c <MX_TIM1_Init+0xac>)
 8001316:	4a22      	ldr	r2, [pc, #136]	; (80013a0 <MX_TIM1_Init+0xb0>)
 8001318:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <MX_TIM1_Init+0xac>)
 800131c:	220f      	movs	r2, #15
 800131e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001320:	4b1e      	ldr	r3, [pc, #120]	; (800139c <MX_TIM1_Init+0xac>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_TIM1_Init+0xac>)
 8001328:	22fa      	movs	r2, #250	; 0xfa
 800132a:	0052      	lsls	r2, r2, #1
 800132c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132e:	4b1b      	ldr	r3, [pc, #108]	; (800139c <MX_TIM1_Init+0xac>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_TIM1_Init+0xac>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <MX_TIM1_Init+0xac>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_TIM1_Init+0xac>)
 8001342:	0018      	movs	r0, r3
 8001344:	f002 fb30 	bl	80039a8 <HAL_TIM_Base_Init>
 8001348:	1e03      	subs	r3, r0, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 800134c:	f000 fabe 	bl	80018cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001350:	2110      	movs	r1, #16
 8001352:	187b      	adds	r3, r7, r1
 8001354:	2280      	movs	r2, #128	; 0x80
 8001356:	0152      	lsls	r2, r2, #5
 8001358:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800135a:	187a      	adds	r2, r7, r1
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_TIM1_Init+0xac>)
 800135e:	0011      	movs	r1, r2
 8001360:	0018      	movs	r0, r3
 8001362:	f002 fd35 	bl	8003dd0 <HAL_TIM_ConfigClockSource>
 8001366:	1e03      	subs	r3, r0, #0
 8001368:	d001      	beq.n	800136e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800136a:	f000 faaf 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2200      	movs	r2, #0
 8001378:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001380:	1d3a      	adds	r2, r7, #4
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_TIM1_Init+0xac>)
 8001384:	0011      	movs	r1, r2
 8001386:	0018      	movs	r0, r3
 8001388:	f002 ff34 	bl	80041f4 <HAL_TIMEx_MasterConfigSynchronization>
 800138c:	1e03      	subs	r3, r0, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001390:	f000 fa9c 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001394:	46c0      	nop			; (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	b008      	add	sp, #32
 800139a:	bd80      	pop	{r7, pc}
 800139c:	2000092c 	.word	0x2000092c
 80013a0:	40012c00 	.word	0x40012c00

080013a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013aa:	2310      	movs	r3, #16
 80013ac:	18fb      	adds	r3, r7, r3
 80013ae:	0018      	movs	r0, r3
 80013b0:	2310      	movs	r3, #16
 80013b2:	001a      	movs	r2, r3
 80013b4:	2100      	movs	r1, #0
 80013b6:	f005 f85e 	bl	8006476 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	0018      	movs	r0, r3
 80013be:	230c      	movs	r3, #12
 80013c0:	001a      	movs	r2, r3
 80013c2:	2100      	movs	r1, #0
 80013c4:	f005 f857 	bl	8006476 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013c8:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <MX_TIM3_Init+0xa0>)
 80013ca:	4a1f      	ldr	r2, [pc, #124]	; (8001448 <MX_TIM3_Init+0xa4>)
 80013cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000-1;
 80013ce:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <MX_TIM3_Init+0xa0>)
 80013d0:	4a1e      	ldr	r2, [pc, #120]	; (800144c <MX_TIM3_Init+0xa8>)
 80013d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <MX_TIM3_Init+0xa0>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8000;
 80013da:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_TIM3_Init+0xa0>)
 80013dc:	22fa      	movs	r2, #250	; 0xfa
 80013de:	0152      	lsls	r2, r2, #5
 80013e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_TIM3_Init+0xa0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e8:	4b16      	ldr	r3, [pc, #88]	; (8001444 <MX_TIM3_Init+0xa0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <MX_TIM3_Init+0xa0>)
 80013f0:	0018      	movs	r0, r3
 80013f2:	f002 fad9 	bl	80039a8 <HAL_TIM_Base_Init>
 80013f6:	1e03      	subs	r3, r0, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80013fa:	f000 fa67 	bl	80018cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013fe:	2110      	movs	r1, #16
 8001400:	187b      	adds	r3, r7, r1
 8001402:	2280      	movs	r2, #128	; 0x80
 8001404:	0152      	lsls	r2, r2, #5
 8001406:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001408:	187a      	adds	r2, r7, r1
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_TIM3_Init+0xa0>)
 800140c:	0011      	movs	r1, r2
 800140e:	0018      	movs	r0, r3
 8001410:	f002 fcde 	bl	8003dd0 <HAL_TIM_ConfigClockSource>
 8001414:	1e03      	subs	r3, r0, #0
 8001416:	d001      	beq.n	800141c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001418:	f000 fa58 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001428:	1d3a      	adds	r2, r7, #4
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_TIM3_Init+0xa0>)
 800142c:	0011      	movs	r1, r2
 800142e:	0018      	movs	r0, r3
 8001430:	f002 fee0 	bl	80041f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001434:	1e03      	subs	r3, r0, #0
 8001436:	d001      	beq.n	800143c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001438:	f000 fa48 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800143c:	46c0      	nop			; (mov r8, r8)
 800143e:	46bd      	mov	sp, r7
 8001440:	b008      	add	sp, #32
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000978 	.word	0x20000978
 8001448:	40000400 	.word	0x40000400
 800144c:	00003e7f 	.word	0x00003e7f

08001450 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001456:	2310      	movs	r3, #16
 8001458:	18fb      	adds	r3, r7, r3
 800145a:	0018      	movs	r0, r3
 800145c:	2310      	movs	r3, #16
 800145e:	001a      	movs	r2, r3
 8001460:	2100      	movs	r1, #0
 8001462:	f005 f808 	bl	8006476 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	0018      	movs	r0, r3
 800146a:	230c      	movs	r3, #12
 800146c:	001a      	movs	r2, r3
 800146e:	2100      	movs	r1, #0
 8001470:	f005 f801 	bl	8006476 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001474:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <MX_TIM15_Init+0xa4>)
 8001476:	4a20      	ldr	r2, [pc, #128]	; (80014f8 <MX_TIM15_Init+0xa8>)
 8001478:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 16000-1;
 800147a:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <MX_TIM15_Init+0xa4>)
 800147c:	4a1f      	ldr	r2, [pc, #124]	; (80014fc <MX_TIM15_Init+0xac>)
 800147e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001480:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <MX_TIM15_Init+0xa4>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 5000;
 8001486:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <MX_TIM15_Init+0xa4>)
 8001488:	4a1d      	ldr	r2, [pc, #116]	; (8001500 <MX_TIM15_Init+0xb0>)
 800148a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <MX_TIM15_Init+0xa4>)
 800148e:	2200      	movs	r2, #0
 8001490:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_TIM15_Init+0xa4>)
 8001494:	2200      	movs	r2, #0
 8001496:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001498:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <MX_TIM15_Init+0xa4>)
 800149a:	2200      	movs	r2, #0
 800149c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <MX_TIM15_Init+0xa4>)
 80014a0:	0018      	movs	r0, r3
 80014a2:	f002 fa81 	bl	80039a8 <HAL_TIM_Base_Init>
 80014a6:	1e03      	subs	r3, r0, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 80014aa:	f000 fa0f 	bl	80018cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ae:	2110      	movs	r1, #16
 80014b0:	187b      	adds	r3, r7, r1
 80014b2:	2280      	movs	r2, #128	; 0x80
 80014b4:	0152      	lsls	r2, r2, #5
 80014b6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80014b8:	187a      	adds	r2, r7, r1
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <MX_TIM15_Init+0xa4>)
 80014bc:	0011      	movs	r1, r2
 80014be:	0018      	movs	r0, r3
 80014c0:	f002 fc86 	bl	8003dd0 <HAL_TIM_ConfigClockSource>
 80014c4:	1e03      	subs	r3, r0, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80014c8:	f000 fa00 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80014d8:	1d3a      	adds	r2, r7, #4
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_TIM15_Init+0xa4>)
 80014dc:	0011      	movs	r1, r2
 80014de:	0018      	movs	r0, r3
 80014e0:	f002 fe88 	bl	80041f4 <HAL_TIMEx_MasterConfigSynchronization>
 80014e4:	1e03      	subs	r3, r0, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 80014e8:	f000 f9f0 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80014ec:	46c0      	nop			; (mov r8, r8)
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b008      	add	sp, #32
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200009c4 	.word	0x200009c4
 80014f8:	40014000 	.word	0x40014000
 80014fc:	00003e7f 	.word	0x00003e7f
 8001500:	00001388 	.word	0x00001388

08001504 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <MX_TIM16_Init+0x44>)
 800150a:	4a10      	ldr	r2, [pc, #64]	; (800154c <MX_TIM16_Init+0x48>)
 800150c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <MX_TIM16_Init+0x44>)
 8001510:	2200      	movs	r2, #0
 8001512:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <MX_TIM16_Init+0x44>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 24024;
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <MX_TIM16_Init+0x44>)
 800151c:	4a0c      	ldr	r2, [pc, #48]	; (8001550 <MX_TIM16_Init+0x4c>)
 800151e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <MX_TIM16_Init+0x44>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <MX_TIM16_Init+0x44>)
 8001528:	2200      	movs	r2, #0
 800152a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <MX_TIM16_Init+0x44>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <MX_TIM16_Init+0x44>)
 8001534:	0018      	movs	r0, r3
 8001536:	f002 fa37 	bl	80039a8 <HAL_TIM_Base_Init>
 800153a:	1e03      	subs	r3, r0, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800153e:	f000 f9c5 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000a10 	.word	0x20000a10
 800154c:	40014400 	.word	0x40014400
 8001550:	00005dd8 	.word	0x00005dd8

08001554 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001558:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 800155a:	4a24      	ldr	r2, [pc, #144]	; (80015ec <MX_USART2_UART_Init+0x98>)
 800155c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800155e:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 8001560:	2296      	movs	r2, #150	; 0x96
 8001562:	0192      	lsls	r2, r2, #6
 8001564:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001566:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800156c:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001572:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 800157a:	220c      	movs	r2, #12
 800157c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800158a:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001590:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 8001592:	2200      	movs	r2, #0
 8001594:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001596:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 8001598:	2200      	movs	r2, #0
 800159a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 800159e:	0018      	movs	r0, r3
 80015a0:	f002 feb0 	bl	8004304 <HAL_UART_Init>
 80015a4:	1e03      	subs	r3, r0, #0
 80015a6:	d001      	beq.n	80015ac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80015a8:	f000 f990 	bl	80018cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 80015ae:	2100      	movs	r1, #0
 80015b0:	0018      	movs	r0, r3
 80015b2:	f004 fde5 	bl	8006180 <HAL_UARTEx_SetTxFifoThreshold>
 80015b6:	1e03      	subs	r3, r0, #0
 80015b8:	d001      	beq.n	80015be <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80015ba:	f000 f987 	bl	80018cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 80015c0:	2100      	movs	r1, #0
 80015c2:	0018      	movs	r0, r3
 80015c4:	f004 fe1c 	bl	8006200 <HAL_UARTEx_SetRxFifoThreshold>
 80015c8:	1e03      	subs	r3, r0, #0
 80015ca:	d001      	beq.n	80015d0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80015cc:	f000 f97e 	bl	80018cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <MX_USART2_UART_Init+0x94>)
 80015d2:	0018      	movs	r0, r3
 80015d4:	f004 fd9a 	bl	800610c <HAL_UARTEx_DisableFifoMode>
 80015d8:	1e03      	subs	r3, r0, #0
 80015da:	d001      	beq.n	80015e0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80015dc:	f000 f976 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015e0:	46c0      	nop			; (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	20000a5c 	.word	0x20000a5c
 80015ec:	40004400 	.word	0x40004400

080015f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015f4:	4b23      	ldr	r3, [pc, #140]	; (8001684 <MX_USART3_UART_Init+0x94>)
 80015f6:	4a24      	ldr	r2, [pc, #144]	; (8001688 <MX_USART3_UART_Init+0x98>)
 80015f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015fa:	4b22      	ldr	r3, [pc, #136]	; (8001684 <MX_USART3_UART_Init+0x94>)
 80015fc:	22e1      	movs	r2, #225	; 0xe1
 80015fe:	0252      	lsls	r2, r2, #9
 8001600:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001602:	4b20      	ldr	r3, [pc, #128]	; (8001684 <MX_USART3_UART_Init+0x94>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <MX_USART3_UART_Init+0x94>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800160e:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <MX_USART3_UART_Init+0x94>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <MX_USART3_UART_Init+0x94>)
 8001616:	220c      	movs	r2, #12
 8001618:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161a:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <MX_USART3_UART_Init+0x94>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001620:	4b18      	ldr	r3, [pc, #96]	; (8001684 <MX_USART3_UART_Init+0x94>)
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <MX_USART3_UART_Init+0x94>)
 8001628:	2200      	movs	r2, #0
 800162a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <MX_USART3_UART_Init+0x94>)
 800162e:	2200      	movs	r2, #0
 8001630:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001632:	4b14      	ldr	r3, [pc, #80]	; (8001684 <MX_USART3_UART_Init+0x94>)
 8001634:	2200      	movs	r2, #0
 8001636:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <MX_USART3_UART_Init+0x94>)
 800163a:	0018      	movs	r0, r3
 800163c:	f002 fe62 	bl	8004304 <HAL_UART_Init>
 8001640:	1e03      	subs	r3, r0, #0
 8001642:	d001      	beq.n	8001648 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001644:	f000 f942 	bl	80018cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001648:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <MX_USART3_UART_Init+0x94>)
 800164a:	2100      	movs	r1, #0
 800164c:	0018      	movs	r0, r3
 800164e:	f004 fd97 	bl	8006180 <HAL_UARTEx_SetTxFifoThreshold>
 8001652:	1e03      	subs	r3, r0, #0
 8001654:	d001      	beq.n	800165a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001656:	f000 f939 	bl	80018cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <MX_USART3_UART_Init+0x94>)
 800165c:	2100      	movs	r1, #0
 800165e:	0018      	movs	r0, r3
 8001660:	f004 fdce 	bl	8006200 <HAL_UARTEx_SetRxFifoThreshold>
 8001664:	1e03      	subs	r3, r0, #0
 8001666:	d001      	beq.n	800166c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001668:	f000 f930 	bl	80018cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <MX_USART3_UART_Init+0x94>)
 800166e:	0018      	movs	r0, r3
 8001670:	f004 fd4c 	bl	800610c <HAL_UARTEx_DisableFifoMode>
 8001674:	1e03      	subs	r3, r0, #0
 8001676:	d001      	beq.n	800167c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001678:	f000 f928 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800167c:	46c0      	nop			; (mov r8, r8)
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	20000af0 	.word	0x20000af0
 8001688:	40004800 	.word	0x40004800

0800168c <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8001690:	4b16      	ldr	r3, [pc, #88]	; (80016ec <MX_USART5_UART_Init+0x60>)
 8001692:	4a17      	ldr	r2, [pc, #92]	; (80016f0 <MX_USART5_UART_Init+0x64>)
 8001694:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <MX_USART5_UART_Init+0x60>)
 8001698:	22e1      	movs	r2, #225	; 0xe1
 800169a:	0252      	lsls	r2, r2, #9
 800169c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800169e:	4b13      	ldr	r3, [pc, #76]	; (80016ec <MX_USART5_UART_Init+0x60>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_USART5_UART_Init+0x60>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <MX_USART5_UART_Init+0x60>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <MX_USART5_UART_Init+0x60>)
 80016b2:	220c      	movs	r2, #12
 80016b4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <MX_USART5_UART_Init+0x60>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <MX_USART5_UART_Init+0x60>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <MX_USART5_UART_Init+0x60>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <MX_USART5_UART_Init+0x60>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <MX_USART5_UART_Init+0x60>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <MX_USART5_UART_Init+0x60>)
 80016d6:	0018      	movs	r0, r3
 80016d8:	f002 fe14 	bl	8004304 <HAL_UART_Init>
 80016dc:	1e03      	subs	r3, r0, #0
 80016de:	d001      	beq.n	80016e4 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 80016e0:	f000 f8f4 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 80016e4:	46c0      	nop			; (mov r8, r8)
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	20000b84 	.word	0x20000b84
 80016f0:	40005000 	.word	0x40005000

080016f4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a16      	ldr	r2, [pc, #88]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d102      	bne.n	800170c <HAL_TIM_PeriodElapsedCallback+0x18>
	  {
		timer_flag = 1 ;
 8001706:	4b16      	ldr	r3, [pc, #88]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001708:	2201      	movs	r2, #1
 800170a:	801a      	strh	r2, [r3, #0]
	  }

   if(htim->Instance == TIM3)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a14      	ldr	r2, [pc, #80]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d102      	bne.n	800171c <HAL_TIM_PeriodElapsedCallback+0x28>
     {
	   dato_recivido = 1;// offset is 0 or page integers
 8001716:	4b14      	ldr	r3, [pc, #80]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001718:	2201      	movs	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]
     }

   if(htim->Instance == TIM16)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a12      	ldr	r2, [pc, #72]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d107      	bne.n	8001736 <HAL_TIM_PeriodElapsedCallback+0x42>
     {
	   HAL_GPIO_TogglePin(WDT_EXT_GPIO_Port, WDT_EXT_Pin);
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	021a      	lsls	r2, r3, #8
 800172a:	23a0      	movs	r3, #160	; 0xa0
 800172c:	05db      	lsls	r3, r3, #23
 800172e:	0011      	movs	r1, r2
 8001730:	0018      	movs	r0, r3
 8001732:	f001 fa85 	bl	8002c40 <HAL_GPIO_TogglePin>
     }

   if(htim->Instance == TIM15)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a0d      	ldr	r2, [pc, #52]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d109      	bne.n	8001754 <HAL_TIM_PeriodElapsedCallback+0x60>
     {
		//printf("TIMER15\r\n\n");
		//printf("flag_timer: %d\r\n\n",flag_timer);
		if(flag_timer)
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d002      	beq.n	800174e <HAL_TIM_PeriodElapsedCallback+0x5a>
		{
			flag_break = 1;
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800174a:	2201      	movs	r2, #1
 800174c:	801a      	strh	r2, [r3, #0]
			//printf("flag_break: %d\r\n\n",flag_break);
		}
		flag_timer = 1;
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001750:	2201      	movs	r2, #1
 8001752:	801a      	strh	r2, [r3, #0]

     }
}
 8001754:	46c0      	nop			; (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	b002      	add	sp, #8
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40012c00 	.word	0x40012c00
 8001760:	20000e56 	.word	0x20000e56
 8001764:	40000400 	.word	0x40000400
 8001768:	20000c28 	.word	0x20000c28
 800176c:	40014400 	.word	0x40014400
 8001770:	40014000 	.word	0x40014000
 8001774:	20000e50 	.word	0x20000e50
 8001778:	20000e58 	.word	0x20000e58

0800177c <MX_GPIO_Init_user>:



static void MX_GPIO_Init_user(void)
{
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b08b      	sub	sp, #44	; 0x2c
 8001780:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001782:	2414      	movs	r4, #20
 8001784:	193b      	adds	r3, r7, r4
 8001786:	0018      	movs	r0, r3
 8001788:	2314      	movs	r3, #20
 800178a:	001a      	movs	r2, r3
 800178c:	2100      	movs	r1, #0
 800178e:	f004 fe72 	bl	8006476 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001792:	4b4b      	ldr	r3, [pc, #300]	; (80018c0 <MX_GPIO_Init_user+0x144>)
 8001794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001796:	4b4a      	ldr	r3, [pc, #296]	; (80018c0 <MX_GPIO_Init_user+0x144>)
 8001798:	2104      	movs	r1, #4
 800179a:	430a      	orrs	r2, r1
 800179c:	635a      	str	r2, [r3, #52]	; 0x34
 800179e:	4b48      	ldr	r3, [pc, #288]	; (80018c0 <MX_GPIO_Init_user+0x144>)
 80017a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a2:	2204      	movs	r2, #4
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017aa:	4b45      	ldr	r3, [pc, #276]	; (80018c0 <MX_GPIO_Init_user+0x144>)
 80017ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ae:	4b44      	ldr	r3, [pc, #272]	; (80018c0 <MX_GPIO_Init_user+0x144>)
 80017b0:	2108      	movs	r1, #8
 80017b2:	430a      	orrs	r2, r1
 80017b4:	635a      	str	r2, [r3, #52]	; 0x34
 80017b6:	4b42      	ldr	r3, [pc, #264]	; (80018c0 <MX_GPIO_Init_user+0x144>)
 80017b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ba:	2208      	movs	r2, #8
 80017bc:	4013      	ands	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	4b3f      	ldr	r3, [pc, #252]	; (80018c0 <MX_GPIO_Init_user+0x144>)
 80017c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017c6:	4b3e      	ldr	r3, [pc, #248]	; (80018c0 <MX_GPIO_Init_user+0x144>)
 80017c8:	2101      	movs	r1, #1
 80017ca:	430a      	orrs	r2, r1
 80017cc:	635a      	str	r2, [r3, #52]	; 0x34
 80017ce:	4b3c      	ldr	r3, [pc, #240]	; (80018c0 <MX_GPIO_Init_user+0x144>)
 80017d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d2:	2201      	movs	r2, #1
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017da:	4b39      	ldr	r3, [pc, #228]	; (80018c0 <MX_GPIO_Init_user+0x144>)
 80017dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017de:	4b38      	ldr	r3, [pc, #224]	; (80018c0 <MX_GPIO_Init_user+0x144>)
 80017e0:	2102      	movs	r1, #2
 80017e2:	430a      	orrs	r2, r1
 80017e4:	635a      	str	r2, [r3, #52]	; 0x34
 80017e6:	4b36      	ldr	r3, [pc, #216]	; (80018c0 <MX_GPIO_Init_user+0x144>)
 80017e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ea:	2202      	movs	r2, #2
 80017ec:	4013      	ands	r3, r2
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 80017f2:	4b34      	ldr	r3, [pc, #208]	; (80018c4 <MX_GPIO_Init_user+0x148>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	2108      	movs	r1, #8
 80017f8:	0018      	movs	r0, r3
 80017fa:	f001 fa04 	bl	8002c06 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(RST_COMM_GPIO_Port, RST_COMM_Pin, GPIO_PIN_SET);
 80017fe:	2380      	movs	r3, #128	; 0x80
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4831      	ldr	r0, [pc, #196]	; (80018c8 <MX_GPIO_Init_user+0x14c>)
 8001804:	2201      	movs	r2, #1
 8001806:	0019      	movs	r1, r3
 8001808:	f001 f9fd 	bl	8002c06 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(WDT_EXT_GPIO_Port, WDT_EXT_Pin, GPIO_PIN_RESET);
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	0219      	lsls	r1, r3, #8
 8001810:	23a0      	movs	r3, #160	; 0xa0
 8001812:	05db      	lsls	r3, r3, #23
 8001814:	2200      	movs	r2, #0
 8001816:	0018      	movs	r0, r3
 8001818:	f001 f9f5 	bl	8002c06 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : WDT_EXT_Pin */
	  GPIO_InitStruct.Pin = WDT_EXT_Pin;
 800181c:	193b      	adds	r3, r7, r4
 800181e:	2280      	movs	r2, #128	; 0x80
 8001820:	0212      	lsls	r2, r2, #8
 8001822:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	193b      	adds	r3, r7, r4
 8001826:	2201      	movs	r2, #1
 8001828:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	193b      	adds	r3, r7, r4
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	193b      	adds	r3, r7, r4
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(WDT_EXT_GPIO_Port, &GPIO_InitStruct);
 8001836:	193a      	adds	r2, r7, r4
 8001838:	23a0      	movs	r3, #160	; 0xa0
 800183a:	05db      	lsls	r3, r3, #23
 800183c:	0011      	movs	r1, r2
 800183e:	0018      	movs	r0, r3
 8001840:	f001 f858 	bl	80028f4 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = LTE_ON_Pin;
 8001844:	193b      	adds	r3, r7, r4
 8001846:	2208      	movs	r2, #8
 8001848:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184a:	193b      	adds	r3, r7, r4
 800184c:	2201      	movs	r2, #1
 800184e:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	193b      	adds	r3, r7, r4
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	193b      	adds	r3, r7, r4
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(LTE_ON_GPIO_Port, &GPIO_InitStruct);
 800185c:	193b      	adds	r3, r7, r4
 800185e:	4a19      	ldr	r2, [pc, #100]	; (80018c4 <MX_GPIO_Init_user+0x148>)
 8001860:	0019      	movs	r1, r3
 8001862:	0010      	movs	r0, r2
 8001864:	f001 f846 	bl	80028f4 <HAL_GPIO_Init>


	  /*Configure GPIO pin : RST_COMM_Pin */
	  GPIO_InitStruct.Pin = RST_COMM_Pin;
 8001868:	0021      	movs	r1, r4
 800186a:	187b      	adds	r3, r7, r1
 800186c:	2280      	movs	r2, #128	; 0x80
 800186e:	0052      	lsls	r2, r2, #1
 8001870:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	000c      	movs	r4, r1
 8001874:	193b      	adds	r3, r7, r4
 8001876:	2201      	movs	r2, #1
 8001878:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	193b      	adds	r3, r7, r4
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	193b      	adds	r3, r7, r4
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(RST_COMM_GPIO_Port, &GPIO_InitStruct);
 8001886:	193b      	adds	r3, r7, r4
 8001888:	4a0f      	ldr	r2, [pc, #60]	; (80018c8 <MX_GPIO_Init_user+0x14c>)
 800188a:	0019      	movs	r1, r3
 800188c:	0010      	movs	r0, r2
 800188e:	f001 f831 	bl	80028f4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
  /*Configure GPIO pin : PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001892:	0021      	movs	r1, r4
 8001894:	187b      	adds	r3, r7, r1
 8001896:	2280      	movs	r2, #128	; 0x80
 8001898:	01d2      	lsls	r2, r2, #7
 800189a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189c:	187b      	adds	r3, r7, r1
 800189e:	2200      	movs	r2, #0
 80018a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018a2:	187b      	adds	r3, r7, r1
 80018a4:	2202      	movs	r2, #2
 80018a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a8:	187a      	adds	r2, r7, r1
 80018aa:	23a0      	movs	r3, #160	; 0xa0
 80018ac:	05db      	lsls	r3, r3, #23
 80018ae:	0011      	movs	r1, r2
 80018b0:	0018      	movs	r0, r3
 80018b2:	f001 f81f 	bl	80028f4 <HAL_GPIO_Init>


}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b00b      	add	sp, #44	; 0x2c
 80018bc:	bd90      	pop	{r4, r7, pc}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	40021000 	.word	0x40021000
 80018c4:	50000c00 	.word	0x50000c00
 80018c8:	50000400 	.word	0x50000400

080018cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018d0:	b672      	cpsid	i
}
 80018d2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <Error_Handler+0x8>
	...

080018d8 <prv_set_flag>:
  BL_UPDATE_REQUEST = 1 << 1,

  FLAG_BG_FAULT = 1 << 2,
};

static void prv_set_flag(uint32_t flag, bool value) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	000a      	movs	r2, r1
 80018e2:	1cfb      	adds	r3, r7, #3
 80018e4:	701a      	strb	r2, [r3, #0]
    if (value) {
 80018e6:	1cfb      	adds	r3, r7, #3
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d006      	beq.n	80018fc <prv_set_flag+0x24>
        shared_data.flags |= flag;
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <prv_set_flag+0x3c>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	431a      	orrs	r2, r3
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <prv_set_flag+0x3c>)
 80018f8:	601a      	str	r2, [r3, #0]
    } else {
        shared_data.flags &= ~flag;
    }
}
 80018fa:	e006      	b.n	800190a <prv_set_flag+0x32>
        shared_data.flags &= ~flag;
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <prv_set_flag+0x3c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	43d2      	mvns	r2, r2
 8001904:	401a      	ands	r2, r3
 8001906:	4b03      	ldr	r3, [pc, #12]	; (8001914 <prv_set_flag+0x3c>)
 8001908:	601a      	str	r2, [r3, #0]
}
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	46bd      	mov	sp, r7
 800190e:	b002      	add	sp, #8
 8001910:	bd80      	pop	{r7, pc}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	200004f8 	.word	0x200004f8

08001918 <prv_get_flag>:

static bool prv_get_flag(uint32_t flag) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
    return shared_data.flags & flag;
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <prv_get_flag+0x20>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	4013      	ands	r3, r2
 8001928:	1e5a      	subs	r2, r3, #1
 800192a:	4193      	sbcs	r3, r2
 800192c:	b2db      	uxtb	r3, r3
}
 800192e:	0018      	movs	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	b002      	add	sp, #8
 8001934:	bd80      	pop	{r7, pc}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	200004f8 	.word	0x200004f8

0800193c <shared_memory_init>:

void shared_memory_init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  if (shared_data.magic != MAGIC)
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <shared_memory_init+0x34>)
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	23e7      	movs	r3, #231	; 0xe7
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	429a      	cmp	r2, r3
 800194a:	d00d      	beq.n	8001968 <shared_memory_init+0x2c>
  {
    printf("Shared memory uninitialized, setting MAGIC\r\n");
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <shared_memory_init+0x38>)
 800194e:	0018      	movs	r0, r3
 8001950:	f004 fe26 	bl	80065a0 <puts>
    memset(&shared_data, 0, sizeof (shared_data_t));
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <shared_memory_init+0x34>)
 8001956:	2212      	movs	r2, #18
 8001958:	2100      	movs	r1, #0
 800195a:	0018      	movs	r0, r3
 800195c:	f004 fd8b 	bl	8006476 <memset>
    shared_data.magic = MAGIC;
 8001960:	23e7      	movs	r3, #231	; 0xe7
 8001962:	005a      	lsls	r2, r3, #1
 8001964:	4b02      	ldr	r3, [pc, #8]	; (8001970 <shared_memory_init+0x34>)
 8001966:	605a      	str	r2, [r3, #4]
  }
}
 8001968:	46c0      	nop			; (mov r8, r8)
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	200004f8 	.word	0x200004f8
 8001974:	08007b08 	.word	0x08007b08

08001978 <shared_mem_is_app_upd_requested>:

bool shared_mem_is_app_upd_requested(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  return prv_get_flag(APP_UPDATE_REQUEST);
 800197c:	2001      	movs	r0, #1
 800197e:	f7ff ffcb 	bl	8001918 <prv_get_flag>
 8001982:	0003      	movs	r3, r0
}
 8001984:	0018      	movs	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <shared_mem_is_bl_upd_requested>:

bool shared_mem_is_bl_upd_requested(void)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	af00      	add	r7, sp, #0
  return prv_get_flag(BL_UPDATE_REQUEST);
 800198e:	2002      	movs	r0, #2
 8001990:	f7ff ffc2 	bl	8001918 <prv_get_flag>
 8001994:	0003      	movs	r3, r0
}
 8001996:	0018      	movs	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <shared_mem_increment_boot_counter>:
{
  return prv_get_flag(FLAG_BG_FAULT);
}

void shared_mem_increment_boot_counter(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  shared_data.boot_count++;
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <shared_mem_increment_boot_counter+0x18>)
 80019a2:	7c1b      	ldrb	r3, [r3, #16]
 80019a4:	3301      	adds	r3, #1
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	4b02      	ldr	r3, [pc, #8]	; (80019b4 <shared_mem_increment_boot_counter+0x18>)
 80019aa:	741a      	strb	r2, [r3, #16]
}
 80019ac:	46c0      	nop			; (mov r8, r8)
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	200004f8 	.word	0x200004f8

080019b8 <shared_mem_clear_boot_counter>:

void shared_mem_clear_boot_counter(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  shared_data.boot_count = 0;
 80019bc:	4b02      	ldr	r3, [pc, #8]	; (80019c8 <shared_mem_clear_boot_counter+0x10>)
 80019be:	2200      	movs	r2, #0
 80019c0:	741a      	strb	r2, [r3, #16]
}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200004f8 	.word	0x200004f8

080019cc <shared_mem_get_boot_counter>:

uint8_t shared_mem_get_boot_counter(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  return shared_data.boot_count;
 80019d0:	4b02      	ldr	r3, [pc, #8]	; (80019dc <shared_mem_get_boot_counter+0x10>)
 80019d2:	7c1b      	ldrb	r3, [r3, #16]
}
 80019d4:	0018      	movs	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	200004f8 	.word	0x200004f8

080019e0 <shared_mem_set_update_completed>:
{
  return shared_data.update_size;
}

void shared_mem_set_update_completed(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  memcpy(shared_data.fota_status, "DONE", 4);
 80019e4:	4b02      	ldr	r3, [pc, #8]	; (80019f0 <shared_mem_set_update_completed+0x10>)
 80019e6:	4a03      	ldr	r2, [pc, #12]	; (80019f4 <shared_mem_set_update_completed+0x14>)
 80019e8:	60da      	str	r2, [r3, #12]
}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	200004f8 	.word	0x200004f8
 80019f4:	454e4f44 	.word	0x454e4f44

080019f8 <shared_mem_clear_ota_info>:

void shared_mem_clear_ota_info(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  shared_data.update_size = 0;
 80019fc:	4b02      	ldr	r3, [pc, #8]	; (8001a08 <shared_mem_clear_ota_info+0x10>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]

}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	200004f8 	.word	0x200004f8

08001a0c <shared_mem_set_app_update_requested>:

void shared_mem_set_app_update_requested(bool value)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	0002      	movs	r2, r0
 8001a14:	1dfb      	adds	r3, r7, #7
 8001a16:	701a      	strb	r2, [r3, #0]
  prv_set_flag(APP_UPDATE_REQUEST, value);
 8001a18:	1dfb      	adds	r3, r7, #7
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	0019      	movs	r1, r3
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f7ff ff5a 	bl	80018d8 <prv_set_flag>
}
 8001a24:	46c0      	nop			; (mov r8, r8)
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b002      	add	sp, #8
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <shared_mem_set_update>:
  shared_data.update_size = size;
}


void shared_mem_set_update(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	shared_data.update = 1;
 8001a30:	4b02      	ldr	r3, [pc, #8]	; (8001a3c <shared_mem_set_update+0x10>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	745a      	strb	r2, [r3, #17]
}
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	200004f8 	.word	0x200004f8

08001a40 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001a48:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <RetargetInit+0x28>)
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	601a      	str	r2, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001a4e:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <RetargetInit+0x2c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6898      	ldr	r0, [r3, #8]
 8001a54:	2300      	movs	r3, #0
 8001a56:	2202      	movs	r2, #2
 8001a58:	2100      	movs	r1, #0
 8001a5a:	f004 fdab 	bl	80065b4 <setvbuf>
}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	46bd      	mov	sp, r7
 8001a62:	b002      	add	sp, #8
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	20000e6c 	.word	0x20000e6c
 8001a6c:	2000040c 	.word	0x2000040c

08001a70 <_isatty>:

int _isatty(int fd) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	db04      	blt.n	8001a88 <_isatty+0x18>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	dc01      	bgt.n	8001a88 <_isatty+0x18>
    return 1;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e005      	b.n	8001a94 <_isatty+0x24>

  errno = EBADF;
 8001a88:	f004 fcc2 	bl	8006410 <__errno>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	2209      	movs	r2, #9
 8001a90:	601a      	str	r2, [r3, #0]
  return 0;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	0018      	movs	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b002      	add	sp, #8
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <_write>:

int _write(int fd, char* ptr, int len) {
 8001a9c:	b5b0      	push	{r4, r5, r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d002      	beq.n	8001ab4 <_write+0x18>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d114      	bne.n	8001ade <_write+0x42>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <_write+0x58>)
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	2517      	movs	r5, #23
 8001abe:	197c      	adds	r4, r7, r5
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	425b      	negs	r3, r3
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	f002 fc73 	bl	80043b0 <HAL_UART_Transmit>
 8001aca:	0003      	movs	r3, r0
 8001acc:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 8001ace:	197b      	adds	r3, r7, r5
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <_write+0x3e>
      return len;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	e008      	b.n	8001aec <_write+0x50>
    else
      return EIO;
 8001ada:	2305      	movs	r3, #5
 8001adc:	e006      	b.n	8001aec <_write+0x50>
  }
  errno = EBADF;
 8001ade:	f004 fc97 	bl	8006410 <__errno>
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	2209      	movs	r2, #9
 8001ae6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	425b      	negs	r3, r3
}
 8001aec:	0018      	movs	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b006      	add	sp, #24
 8001af2:	bdb0      	pop	{r4, r5, r7, pc}
 8001af4:	20000e6c 	.word	0x20000e6c

08001af8 <_close>:

int _close(int fd) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	db04      	blt.n	8001b10 <_close+0x18>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	dc01      	bgt.n	8001b10 <_close+0x18>
    return 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	e006      	b.n	8001b1e <_close+0x26>

  errno = EBADF;
 8001b10:	f004 fc7e 	bl	8006410 <__errno>
 8001b14:	0003      	movs	r3, r0
 8001b16:	2209      	movs	r2, #9
 8001b18:	601a      	str	r2, [r3, #0]
  return -1;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	425b      	negs	r3, r3
}
 8001b1e:	0018      	movs	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b002      	add	sp, #8
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b084      	sub	sp, #16
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	60f8      	str	r0, [r7, #12]
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001b32:	f004 fc6d 	bl	8006410 <__errno>
 8001b36:	0003      	movs	r3, r0
 8001b38:	2209      	movs	r2, #9
 8001b3a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	425b      	negs	r3, r3
}
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b004      	add	sp, #16
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <_read>:

int _read(int fd, char* ptr, int len) {
 8001b48:	b5b0      	push	{r4, r5, r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d113      	bne.n	8001b82 <_read+0x3a>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <_read+0x50>)
 8001b5c:	6818      	ldr	r0, [r3, #0]
 8001b5e:	2517      	movs	r5, #23
 8001b60:	197c      	adds	r4, r7, r5
 8001b62:	2301      	movs	r3, #1
 8001b64:	425b      	negs	r3, r3
 8001b66:	68b9      	ldr	r1, [r7, #8]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f002 fcbd 	bl	80044e8 <HAL_UART_Receive>
 8001b6e:	0003      	movs	r3, r0
 8001b70:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 8001b72:	197b      	adds	r3, r7, r5
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <_read+0x36>
      return 1;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e008      	b.n	8001b90 <_read+0x48>
    else
      return EIO;
 8001b7e:	2305      	movs	r3, #5
 8001b80:	e006      	b.n	8001b90 <_read+0x48>
  }
  errno = EBADF;
 8001b82:	f004 fc45 	bl	8006410 <__errno>
 8001b86:	0003      	movs	r3, r0
 8001b88:	2209      	movs	r2, #9
 8001b8a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	425b      	negs	r3, r3
}
 8001b90:	0018      	movs	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b006      	add	sp, #24
 8001b96:	bdb0      	pop	{r4, r5, r7, pc}
 8001b98:	20000e6c 	.word	0x20000e6c

08001b9c <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db08      	blt.n	8001bbe <_fstat+0x22>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	dc05      	bgt.n	8001bbe <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2280      	movs	r2, #128	; 0x80
 8001bb6:	0192      	lsls	r2, r2, #6
 8001bb8:	605a      	str	r2, [r3, #4]
    return 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e005      	b.n	8001bca <_fstat+0x2e>
  }

  errno = EBADF;
 8001bbe:	f004 fc27 	bl	8006410 <__errno>
 8001bc2:	0003      	movs	r3, r0
 8001bc4:	2209      	movs	r2, #9
 8001bc6:	601a      	str	r2, [r3, #0]
  return 0;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	0018      	movs	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	b002      	add	sp, #8
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <HAL_MspInit+0x44>)
 8001bdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <HAL_MspInit+0x44>)
 8001be0:	2101      	movs	r1, #1
 8001be2:	430a      	orrs	r2, r1
 8001be4:	641a      	str	r2, [r3, #64]	; 0x40
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <HAL_MspInit+0x44>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	2201      	movs	r2, #1
 8001bec:	4013      	ands	r3, r2
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_MspInit+0x44>)
 8001bf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <HAL_MspInit+0x44>)
 8001bf8:	2180      	movs	r1, #128	; 0x80
 8001bfa:	0549      	lsls	r1, r1, #21
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <HAL_MspInit+0x44>)
 8001c02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	055b      	lsls	r3, r3, #21
 8001c08:	4013      	ands	r3, r2
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	46bd      	mov	sp, r7
 8001c12:	b002      	add	sp, #8
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	40021000 	.word	0x40021000

08001c1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a3b      	ldr	r2, [pc, #236]	; (8001d18 <HAL_TIM_Base_MspInit+0xfc>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d11e      	bne.n	8001c6c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c2e:	4b3b      	ldr	r3, [pc, #236]	; (8001d1c <HAL_TIM_Base_MspInit+0x100>)
 8001c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c32:	4b3a      	ldr	r3, [pc, #232]	; (8001d1c <HAL_TIM_Base_MspInit+0x100>)
 8001c34:	2180      	movs	r1, #128	; 0x80
 8001c36:	0109      	lsls	r1, r1, #4
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	641a      	str	r2, [r3, #64]	; 0x40
 8001c3c:	4b37      	ldr	r3, [pc, #220]	; (8001d1c <HAL_TIM_Base_MspInit+0x100>)
 8001c3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	4013      	ands	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	200d      	movs	r0, #13
 8001c50:	f000 fba6 	bl	80023a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001c54:	200d      	movs	r0, #13
 8001c56:	f000 fbb8 	bl	80023ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	200e      	movs	r0, #14
 8001c60:	f000 fb9e 	bl	80023a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001c64:	200e      	movs	r0, #14
 8001c66:	f000 fbb0 	bl	80023ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001c6a:	e050      	b.n	8001d0e <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM3)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a2b      	ldr	r2, [pc, #172]	; (8001d20 <HAL_TIM_Base_MspInit+0x104>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d114      	bne.n	8001ca0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c76:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <HAL_TIM_Base_MspInit+0x100>)
 8001c78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c7a:	4b28      	ldr	r3, [pc, #160]	; (8001d1c <HAL_TIM_Base_MspInit+0x100>)
 8001c7c:	2102      	movs	r1, #2
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c82:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <HAL_TIM_Base_MspInit+0x100>)
 8001c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c86:	2202      	movs	r2, #2
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_TIM4_IRQn, 0, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	2010      	movs	r0, #16
 8001c94:	f000 fb84 	bl	80023a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_TIM4_IRQn);
 8001c98:	2010      	movs	r0, #16
 8001c9a:	f000 fb96 	bl	80023ca <HAL_NVIC_EnableIRQ>
}
 8001c9e:	e036      	b.n	8001d0e <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM15)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a1f      	ldr	r2, [pc, #124]	; (8001d24 <HAL_TIM_Base_MspInit+0x108>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d116      	bne.n	8001cd8 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001caa:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <HAL_TIM_Base_MspInit+0x100>)
 8001cac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cae:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <HAL_TIM_Base_MspInit+0x100>)
 8001cb0:	2180      	movs	r1, #128	; 0x80
 8001cb2:	0249      	lsls	r1, r1, #9
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	641a      	str	r2, [r3, #64]	; 0x40
 8001cb8:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <HAL_TIM_Base_MspInit+0x100>)
 8001cba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	025b      	lsls	r3, r3, #9
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2100      	movs	r1, #0
 8001cca:	2014      	movs	r0, #20
 8001ccc:	f000 fb68 	bl	80023a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001cd0:	2014      	movs	r0, #20
 8001cd2:	f000 fb7a 	bl	80023ca <HAL_NVIC_EnableIRQ>
}
 8001cd6:	e01a      	b.n	8001d0e <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM16)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a12      	ldr	r2, [pc, #72]	; (8001d28 <HAL_TIM_Base_MspInit+0x10c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d115      	bne.n	8001d0e <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <HAL_TIM_Base_MspInit+0x100>)
 8001ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <HAL_TIM_Base_MspInit+0x100>)
 8001ce8:	2180      	movs	r1, #128	; 0x80
 8001cea:	0289      	lsls	r1, r1, #10
 8001cec:	430a      	orrs	r2, r1
 8001cee:	641a      	str	r2, [r3, #64]	; 0x40
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <HAL_TIM_Base_MspInit+0x100>)
 8001cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	029b      	lsls	r3, r3, #10
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2100      	movs	r1, #0
 8001d02:	2015      	movs	r0, #21
 8001d04:	f000 fb4c 	bl	80023a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001d08:	2015      	movs	r0, #21
 8001d0a:	f000 fb5e 	bl	80023ca <HAL_NVIC_EnableIRQ>
}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b006      	add	sp, #24
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	40012c00 	.word	0x40012c00
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40000400 	.word	0x40000400
 8001d24:	40014000 	.word	0x40014000
 8001d28:	40014400 	.word	0x40014400

08001d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b099      	sub	sp, #100	; 0x64
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	234c      	movs	r3, #76	; 0x4c
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	0018      	movs	r0, r3
 8001d3a:	2314      	movs	r3, #20
 8001d3c:	001a      	movs	r2, r3
 8001d3e:	2100      	movs	r1, #0
 8001d40:	f004 fb99 	bl	8006476 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d44:	2420      	movs	r4, #32
 8001d46:	193b      	adds	r3, r7, r4
 8001d48:	0018      	movs	r0, r3
 8001d4a:	232c      	movs	r3, #44	; 0x2c
 8001d4c:	001a      	movs	r2, r3
 8001d4e:	2100      	movs	r1, #0
 8001d50:	f004 fb91 	bl	8006476 <memset>
  if(huart->Instance==USART2)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a6c      	ldr	r2, [pc, #432]	; (8001f0c <HAL_UART_MspInit+0x1e0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d147      	bne.n	8001dee <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d5e:	193b      	adds	r3, r7, r4
 8001d60:	2202      	movs	r2, #2
 8001d62:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d64:	193b      	adds	r3, r7, r4
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d6a:	193b      	adds	r3, r7, r4
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f001 fc93 	bl	8003698 <HAL_RCCEx_PeriphCLKConfig>
 8001d72:	1e03      	subs	r3, r0, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d76:	f7ff fda9 	bl	80018cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d7a:	4b65      	ldr	r3, [pc, #404]	; (8001f10 <HAL_UART_MspInit+0x1e4>)
 8001d7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d7e:	4b64      	ldr	r3, [pc, #400]	; (8001f10 <HAL_UART_MspInit+0x1e4>)
 8001d80:	2180      	movs	r1, #128	; 0x80
 8001d82:	0289      	lsls	r1, r1, #10
 8001d84:	430a      	orrs	r2, r1
 8001d86:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d88:	4b61      	ldr	r3, [pc, #388]	; (8001f10 <HAL_UART_MspInit+0x1e4>)
 8001d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	029b      	lsls	r3, r3, #10
 8001d90:	4013      	ands	r3, r2
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	4b5e      	ldr	r3, [pc, #376]	; (8001f10 <HAL_UART_MspInit+0x1e4>)
 8001d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d9a:	4b5d      	ldr	r3, [pc, #372]	; (8001f10 <HAL_UART_MspInit+0x1e4>)
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	635a      	str	r2, [r3, #52]	; 0x34
 8001da2:	4b5b      	ldr	r3, [pc, #364]	; (8001f10 <HAL_UART_MspInit+0x1e4>)
 8001da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da6:	2201      	movs	r2, #1
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
 8001dac:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dae:	214c      	movs	r1, #76	; 0x4c
 8001db0:	187b      	adds	r3, r7, r1
 8001db2:	220c      	movs	r2, #12
 8001db4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db6:	187b      	adds	r3, r7, r1
 8001db8:	2202      	movs	r2, #2
 8001dba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	187b      	adds	r3, r7, r1
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc2:	187b      	adds	r3, r7, r1
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001dc8:	187b      	adds	r3, r7, r1
 8001dca:	2201      	movs	r2, #1
 8001dcc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dce:	187a      	adds	r2, r7, r1
 8001dd0:	23a0      	movs	r3, #160	; 0xa0
 8001dd2:	05db      	lsls	r3, r3, #23
 8001dd4:	0011      	movs	r1, r2
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f000 fd8c 	bl	80028f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2100      	movs	r1, #0
 8001de0:	201c      	movs	r0, #28
 8001de2:	f000 fadd 	bl	80023a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001de6:	201c      	movs	r0, #28
 8001de8:	f000 faef 	bl	80023ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8001dec:	e08a      	b.n	8001f04 <HAL_UART_MspInit+0x1d8>
  else if(huart->Instance==USART3)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a48      	ldr	r2, [pc, #288]	; (8001f14 <HAL_UART_MspInit+0x1e8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d148      	bne.n	8001e8a <HAL_UART_MspInit+0x15e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001df8:	2120      	movs	r1, #32
 8001dfa:	187b      	adds	r3, r7, r1
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e00:	187b      	adds	r3, r7, r1
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e06:	187b      	adds	r3, r7, r1
 8001e08:	0018      	movs	r0, r3
 8001e0a:	f001 fc45 	bl	8003698 <HAL_RCCEx_PeriphCLKConfig>
 8001e0e:	1e03      	subs	r3, r0, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_UART_MspInit+0xea>
      Error_Handler();
 8001e12:	f7ff fd5b 	bl	80018cc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e16:	4b3e      	ldr	r3, [pc, #248]	; (8001f10 <HAL_UART_MspInit+0x1e4>)
 8001e18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e1a:	4b3d      	ldr	r3, [pc, #244]	; (8001f10 <HAL_UART_MspInit+0x1e4>)
 8001e1c:	2180      	movs	r1, #128	; 0x80
 8001e1e:	02c9      	lsls	r1, r1, #11
 8001e20:	430a      	orrs	r2, r1
 8001e22:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e24:	4b3a      	ldr	r3, [pc, #232]	; (8001f10 <HAL_UART_MspInit+0x1e4>)
 8001e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	02db      	lsls	r3, r3, #11
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e32:	4b37      	ldr	r3, [pc, #220]	; (8001f10 <HAL_UART_MspInit+0x1e4>)
 8001e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e36:	4b36      	ldr	r3, [pc, #216]	; (8001f10 <HAL_UART_MspInit+0x1e4>)
 8001e38:	2102      	movs	r1, #2
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e3e:	4b34      	ldr	r3, [pc, #208]	; (8001f10 <HAL_UART_MspInit+0x1e4>)
 8001e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e42:	2202      	movs	r2, #2
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e4a:	214c      	movs	r1, #76	; 0x4c
 8001e4c:	187b      	adds	r3, r7, r1
 8001e4e:	22c0      	movs	r2, #192	; 0xc0
 8001e50:	0112      	lsls	r2, r2, #4
 8001e52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	187b      	adds	r3, r7, r1
 8001e56:	2202      	movs	r2, #2
 8001e58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	187b      	adds	r3, r7, r1
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	187b      	adds	r3, r7, r1
 8001e62:	2200      	movs	r2, #0
 8001e64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8001e66:	187b      	adds	r3, r7, r1
 8001e68:	2204      	movs	r2, #4
 8001e6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6c:	187b      	adds	r3, r7, r1
 8001e6e:	4a2a      	ldr	r2, [pc, #168]	; (8001f18 <HAL_UART_MspInit+0x1ec>)
 8001e70:	0019      	movs	r1, r3
 8001e72:	0010      	movs	r0, r2
 8001e74:	f000 fd3e 	bl	80028f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_5_6_IRQn, 0, 0);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	201d      	movs	r0, #29
 8001e7e:	f000 fa8f 	bl	80023a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_IRQn);
 8001e82:	201d      	movs	r0, #29
 8001e84:	f000 faa1 	bl	80023ca <HAL_NVIC_EnableIRQ>
}
 8001e88:	e03c      	b.n	8001f04 <HAL_UART_MspInit+0x1d8>
  else if(huart->Instance==USART5)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a23      	ldr	r2, [pc, #140]	; (8001f1c <HAL_UART_MspInit+0x1f0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d137      	bne.n	8001f04 <HAL_UART_MspInit+0x1d8>
    __HAL_RCC_USART5_CLK_ENABLE();
 8001e94:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <HAL_UART_MspInit+0x1e4>)
 8001e96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e98:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <HAL_UART_MspInit+0x1e4>)
 8001e9a:	2180      	movs	r1, #128	; 0x80
 8001e9c:	0049      	lsls	r1, r1, #1
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ea2:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <HAL_UART_MspInit+0x1e4>)
 8001ea4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ea6:	2380      	movs	r3, #128	; 0x80
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4013      	ands	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb0:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <HAL_UART_MspInit+0x1e4>)
 8001eb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb4:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <HAL_UART_MspInit+0x1e4>)
 8001eb6:	2102      	movs	r1, #2
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	635a      	str	r2, [r3, #52]	; 0x34
 8001ebc:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <HAL_UART_MspInit+0x1e4>)
 8001ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ec8:	214c      	movs	r1, #76	; 0x4c
 8001eca:	187b      	adds	r3, r7, r1
 8001ecc:	2203      	movs	r2, #3
 8001ece:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	187b      	adds	r3, r7, r1
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	187b      	adds	r3, r7, r1
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	187b      	adds	r3, r7, r1
 8001ede:	2200      	movs	r2, #0
 8001ee0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART5;
 8001ee2:	187b      	adds	r3, r7, r1
 8001ee4:	2208      	movs	r2, #8
 8001ee6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee8:	187b      	adds	r3, r7, r1
 8001eea:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <HAL_UART_MspInit+0x1ec>)
 8001eec:	0019      	movs	r1, r3
 8001eee:	0010      	movs	r0, r2
 8001ef0:	f000 fd00 	bl	80028f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_5_6_IRQn, 0, 0);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	201d      	movs	r0, #29
 8001efa:	f000 fa51 	bl	80023a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_IRQn);
 8001efe:	201d      	movs	r0, #29
 8001f00:	f000 fa63 	bl	80023ca <HAL_NVIC_EnableIRQ>
}
 8001f04:	46c0      	nop			; (mov r8, r8)
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b019      	add	sp, #100	; 0x64
 8001f0a:	bd90      	pop	{r4, r7, pc}
 8001f0c:	40004400 	.word	0x40004400
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40004800 	.word	0x40004800
 8001f18:	50000400 	.word	0x50000400
 8001f1c:	40005000 	.word	0x40005000

08001f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <NMI_Handler+0x4>

08001f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f2a:	e7fe      	b.n	8001f2a <HardFault_Handler+0x4>

08001f2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f30:	46c0      	nop			; (mov r8, r8)
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f44:	f000 f92e 	bl	80021a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f48:	46c0      	nop			; (mov r8, r8)
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f54:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001f56:	0018      	movs	r0, r3
 8001f58:	f001 fe08 	bl	8003b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001f5c:	46c0      	nop			; (mov r8, r8)
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	2000092c 	.word	0x2000092c

08001f68 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f6c:	4b03      	ldr	r3, [pc, #12]	; (8001f7c <TIM1_CC_IRQHandler+0x14>)
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f001 fdfc 	bl	8003b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001f74:	46c0      	nop			; (mov r8, r8)
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	2000092c 	.word	0x2000092c

08001f80 <TIM3_TIM4_IRQHandler>:

/**
  * @brief This function handles TIM3, TIM4 global Interrupt.
  */
void TIM3_TIM4_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_TIM4_IRQn 0 */

  /* USER CODE END TIM3_TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <TIM3_TIM4_IRQHandler+0x14>)
 8001f86:	0018      	movs	r0, r3
 8001f88:	f001 fdf0 	bl	8003b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_TIM4_IRQn 1 */

  /* USER CODE END TIM3_TIM4_IRQn 1 */
}
 8001f8c:	46c0      	nop			; (mov r8, r8)
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	20000978 	.word	0x20000978

08001f98 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001f9c:	4b03      	ldr	r3, [pc, #12]	; (8001fac <TIM15_IRQHandler+0x14>)
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f001 fde4 	bl	8003b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8001fa4:	46c0      	nop			; (mov r8, r8)
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	200009c4 	.word	0x200009c4

08001fb0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <TIM16_IRQHandler+0x14>)
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	f001 fdd8 	bl	8003b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001fbc:	46c0      	nop			; (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	20000a10 	.word	0x20000a10

08001fc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <USART2_IRQHandler+0x14>)
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f002 fb6c 	bl	80046ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fd4:	46c0      	nop			; (mov r8, r8)
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	20000a5c 	.word	0x20000a5c

08001fe0 <USART3_4_5_6_IRQHandler>:

/**
  * @brief This function handles USART3, USART4, USART5, USART6 globlal Interrupts (combined with EXTI 28).
  */
void USART3_4_5_6_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_5_6_IRQn 0 */

  /* USER CODE END USART3_4_5_6_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <USART3_4_5_6_IRQHandler+0x1c>)
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	f002 fb60 	bl	80046ac <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <USART3_4_5_6_IRQHandler+0x20>)
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f002 fb5c 	bl	80046ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_5_6_IRQn 1 */

  /* USER CODE END USART3_4_5_6_IRQn 1 */
}
 8001ff4:	46c0      	nop			; (mov r8, r8)
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	20000af0 	.word	0x20000af0
 8002000:	20000b84 	.word	0x20000b84

08002004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800200c:	4a14      	ldr	r2, [pc, #80]	; (8002060 <_sbrk+0x5c>)
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <_sbrk+0x60>)
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002018:	4b13      	ldr	r3, [pc, #76]	; (8002068 <_sbrk+0x64>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <_sbrk+0x64>)
 8002022:	4a12      	ldr	r2, [pc, #72]	; (800206c <_sbrk+0x68>)
 8002024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <_sbrk+0x64>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	18d3      	adds	r3, r2, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	429a      	cmp	r2, r3
 8002032:	d207      	bcs.n	8002044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002034:	f004 f9ec 	bl	8006410 <__errno>
 8002038:	0003      	movs	r3, r0
 800203a:	220c      	movs	r2, #12
 800203c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800203e:	2301      	movs	r3, #1
 8002040:	425b      	negs	r3, r3
 8002042:	e009      	b.n	8002058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <_sbrk+0x64>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800204a:	4b07      	ldr	r3, [pc, #28]	; (8002068 <_sbrk+0x64>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	18d2      	adds	r2, r2, r3
 8002052:	4b05      	ldr	r3, [pc, #20]	; (8002068 <_sbrk+0x64>)
 8002054:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002056:	68fb      	ldr	r3, [r7, #12]
}
 8002058:	0018      	movs	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	b006      	add	sp, #24
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20024000 	.word	0x20024000
 8002064:	00000400 	.word	0x00000400
 8002068:	20000e70 	.word	0x20000e70
 800206c:	20000ea8 	.word	0x20000ea8

08002070 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002074:	46c0      	nop			; (mov r8, r8)
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800207c:	480d      	ldr	r0, [pc, #52]	; (80020b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800207e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002080:	f7ff fff6 	bl	8002070 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002084:	480c      	ldr	r0, [pc, #48]	; (80020b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002086:	490d      	ldr	r1, [pc, #52]	; (80020bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002088:	4a0d      	ldr	r2, [pc, #52]	; (80020c0 <LoopForever+0xe>)
  movs r3, #0
 800208a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800208c:	e002      	b.n	8002094 <LoopCopyDataInit>

0800208e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800208e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002092:	3304      	adds	r3, #4

08002094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002098:	d3f9      	bcc.n	800208e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800209a:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800209c:	4c0a      	ldr	r4, [pc, #40]	; (80020c8 <LoopForever+0x16>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a0:	e001      	b.n	80020a6 <LoopFillZerobss>

080020a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a4:	3204      	adds	r2, #4

080020a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a8:	d3fb      	bcc.n	80020a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020aa:	f004 f9b7 	bl	800641c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80020ae:	f7fe ffb9 	bl	8001024 <main>

080020b2 <LoopForever>:

LoopForever:
  b LoopForever
 80020b2:	e7fe      	b.n	80020b2 <LoopForever>
  ldr   r0, =_estack
 80020b4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80020b8:	20000400 	.word	0x20000400
  ldr r1, =_edata
 80020bc:	200004f8 	.word	0x200004f8
  ldr r2, =_sidata
 80020c0:	08007e5c 	.word	0x08007e5c
  ldr r2, =_sbss
 80020c4:	20000510 	.word	0x20000510
  ldr r4, =_ebss
 80020c8:	20000ea4 	.word	0x20000ea4

080020cc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020cc:	e7fe      	b.n	80020cc <ADC1_IRQHandler>
	...

080020d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020d6:	1dfb      	adds	r3, r7, #7
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_Init+0x3c>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4b0a      	ldr	r3, [pc, #40]	; (800210c <HAL_Init+0x3c>)
 80020e2:	2180      	movs	r1, #128	; 0x80
 80020e4:	0049      	lsls	r1, r1, #1
 80020e6:	430a      	orrs	r2, r1
 80020e8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020ea:	2003      	movs	r0, #3
 80020ec:	f000 f810 	bl	8002110 <HAL_InitTick>
 80020f0:	1e03      	subs	r3, r0, #0
 80020f2:	d003      	beq.n	80020fc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80020f4:	1dfb      	adds	r3, r7, #7
 80020f6:	2201      	movs	r2, #1
 80020f8:	701a      	strb	r2, [r3, #0]
 80020fa:	e001      	b.n	8002100 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80020fc:	f7ff fd6a 	bl	8001bd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002100:	1dfb      	adds	r3, r7, #7
 8002102:	781b      	ldrb	r3, [r3, #0]
}
 8002104:	0018      	movs	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	b002      	add	sp, #8
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40022000 	.word	0x40022000

08002110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002110:	b590      	push	{r4, r7, lr}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002118:	230f      	movs	r3, #15
 800211a:	18fb      	adds	r3, r7, r3
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_InitTick+0x88>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d02b      	beq.n	8002180 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002128:	4b1c      	ldr	r3, [pc, #112]	; (800219c <HAL_InitTick+0x8c>)
 800212a:	681c      	ldr	r4, [r3, #0]
 800212c:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <HAL_InitTick+0x88>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	0019      	movs	r1, r3
 8002132:	23fa      	movs	r3, #250	; 0xfa
 8002134:	0098      	lsls	r0, r3, #2
 8002136:	f7fd fff5 	bl	8000124 <__udivsi3>
 800213a:	0003      	movs	r3, r0
 800213c:	0019      	movs	r1, r3
 800213e:	0020      	movs	r0, r4
 8002140:	f7fd fff0 	bl	8000124 <__udivsi3>
 8002144:	0003      	movs	r3, r0
 8002146:	0018      	movs	r0, r3
 8002148:	f000 f953 	bl	80023f2 <HAL_SYSTICK_Config>
 800214c:	1e03      	subs	r3, r0, #0
 800214e:	d112      	bne.n	8002176 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b03      	cmp	r3, #3
 8002154:	d80a      	bhi.n	800216c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	2301      	movs	r3, #1
 800215a:	425b      	negs	r3, r3
 800215c:	2200      	movs	r2, #0
 800215e:	0018      	movs	r0, r3
 8002160:	f000 f91e 	bl	80023a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002164:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <HAL_InitTick+0x90>)
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	e00d      	b.n	8002188 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800216c:	230f      	movs	r3, #15
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
 8002174:	e008      	b.n	8002188 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002176:	230f      	movs	r3, #15
 8002178:	18fb      	adds	r3, r7, r3
 800217a:	2201      	movs	r2, #1
 800217c:	701a      	strb	r2, [r3, #0]
 800217e:	e003      	b.n	8002188 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002180:	230f      	movs	r3, #15
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	2201      	movs	r2, #1
 8002186:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002188:	230f      	movs	r3, #15
 800218a:	18fb      	adds	r3, r7, r3
 800218c:	781b      	ldrb	r3, [r3, #0]
}
 800218e:	0018      	movs	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	b005      	add	sp, #20
 8002194:	bd90      	pop	{r4, r7, pc}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	20000408 	.word	0x20000408
 800219c:	20000400 	.word	0x20000400
 80021a0:	20000404 	.word	0x20000404

080021a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <HAL_IncTick+0x1c>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	001a      	movs	r2, r3
 80021ae:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_IncTick+0x20>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	18d2      	adds	r2, r2, r3
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <HAL_IncTick+0x20>)
 80021b6:	601a      	str	r2, [r3, #0]
}
 80021b8:	46c0      	nop			; (mov r8, r8)
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	20000408 	.word	0x20000408
 80021c4:	20000e74 	.word	0x20000e74

080021c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  return uwTick;
 80021cc:	4b02      	ldr	r3, [pc, #8]	; (80021d8 <HAL_GetTick+0x10>)
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	0018      	movs	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	20000e74 	.word	0x20000e74

080021dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e4:	f7ff fff0 	bl	80021c8 <HAL_GetTick>
 80021e8:	0003      	movs	r3, r0
 80021ea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	3301      	adds	r3, #1
 80021f4:	d005      	beq.n	8002202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_Delay+0x44>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	001a      	movs	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	189b      	adds	r3, r3, r2
 8002200:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	f7ff ffe0 	bl	80021c8 <HAL_GetTick>
 8002208:	0002      	movs	r2, r0
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	429a      	cmp	r2, r3
 8002212:	d8f7      	bhi.n	8002204 <HAL_Delay+0x28>
  {
  }
}
 8002214:	46c0      	nop			; (mov r8, r8)
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	46bd      	mov	sp, r7
 800221a:	b004      	add	sp, #16
 800221c:	bd80      	pop	{r7, pc}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	20000408 	.word	0x20000408

08002224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	0002      	movs	r2, r0
 800222c:	1dfb      	adds	r3, r7, #7
 800222e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002230:	1dfb      	adds	r3, r7, #7
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b7f      	cmp	r3, #127	; 0x7f
 8002236:	d809      	bhi.n	800224c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002238:	1dfb      	adds	r3, r7, #7
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	001a      	movs	r2, r3
 800223e:	231f      	movs	r3, #31
 8002240:	401a      	ands	r2, r3
 8002242:	4b04      	ldr	r3, [pc, #16]	; (8002254 <__NVIC_EnableIRQ+0x30>)
 8002244:	2101      	movs	r1, #1
 8002246:	4091      	lsls	r1, r2
 8002248:	000a      	movs	r2, r1
 800224a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800224c:	46c0      	nop			; (mov r8, r8)
 800224e:	46bd      	mov	sp, r7
 8002250:	b002      	add	sp, #8
 8002252:	bd80      	pop	{r7, pc}
 8002254:	e000e100 	.word	0xe000e100

08002258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	0002      	movs	r2, r0
 8002260:	6039      	str	r1, [r7, #0]
 8002262:	1dfb      	adds	r3, r7, #7
 8002264:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002266:	1dfb      	adds	r3, r7, #7
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b7f      	cmp	r3, #127	; 0x7f
 800226c:	d828      	bhi.n	80022c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800226e:	4a2f      	ldr	r2, [pc, #188]	; (800232c <__NVIC_SetPriority+0xd4>)
 8002270:	1dfb      	adds	r3, r7, #7
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	b25b      	sxtb	r3, r3
 8002276:	089b      	lsrs	r3, r3, #2
 8002278:	33c0      	adds	r3, #192	; 0xc0
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	589b      	ldr	r3, [r3, r2]
 800227e:	1dfa      	adds	r2, r7, #7
 8002280:	7812      	ldrb	r2, [r2, #0]
 8002282:	0011      	movs	r1, r2
 8002284:	2203      	movs	r2, #3
 8002286:	400a      	ands	r2, r1
 8002288:	00d2      	lsls	r2, r2, #3
 800228a:	21ff      	movs	r1, #255	; 0xff
 800228c:	4091      	lsls	r1, r2
 800228e:	000a      	movs	r2, r1
 8002290:	43d2      	mvns	r2, r2
 8002292:	401a      	ands	r2, r3
 8002294:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	019b      	lsls	r3, r3, #6
 800229a:	22ff      	movs	r2, #255	; 0xff
 800229c:	401a      	ands	r2, r3
 800229e:	1dfb      	adds	r3, r7, #7
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	0018      	movs	r0, r3
 80022a4:	2303      	movs	r3, #3
 80022a6:	4003      	ands	r3, r0
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022ac:	481f      	ldr	r0, [pc, #124]	; (800232c <__NVIC_SetPriority+0xd4>)
 80022ae:	1dfb      	adds	r3, r7, #7
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	b25b      	sxtb	r3, r3
 80022b4:	089b      	lsrs	r3, r3, #2
 80022b6:	430a      	orrs	r2, r1
 80022b8:	33c0      	adds	r3, #192	; 0xc0
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80022be:	e031      	b.n	8002324 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022c0:	4a1b      	ldr	r2, [pc, #108]	; (8002330 <__NVIC_SetPriority+0xd8>)
 80022c2:	1dfb      	adds	r3, r7, #7
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	0019      	movs	r1, r3
 80022c8:	230f      	movs	r3, #15
 80022ca:	400b      	ands	r3, r1
 80022cc:	3b08      	subs	r3, #8
 80022ce:	089b      	lsrs	r3, r3, #2
 80022d0:	3306      	adds	r3, #6
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	18d3      	adds	r3, r2, r3
 80022d6:	3304      	adds	r3, #4
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	1dfa      	adds	r2, r7, #7
 80022dc:	7812      	ldrb	r2, [r2, #0]
 80022de:	0011      	movs	r1, r2
 80022e0:	2203      	movs	r2, #3
 80022e2:	400a      	ands	r2, r1
 80022e4:	00d2      	lsls	r2, r2, #3
 80022e6:	21ff      	movs	r1, #255	; 0xff
 80022e8:	4091      	lsls	r1, r2
 80022ea:	000a      	movs	r2, r1
 80022ec:	43d2      	mvns	r2, r2
 80022ee:	401a      	ands	r2, r3
 80022f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	019b      	lsls	r3, r3, #6
 80022f6:	22ff      	movs	r2, #255	; 0xff
 80022f8:	401a      	ands	r2, r3
 80022fa:	1dfb      	adds	r3, r7, #7
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	0018      	movs	r0, r3
 8002300:	2303      	movs	r3, #3
 8002302:	4003      	ands	r3, r0
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002308:	4809      	ldr	r0, [pc, #36]	; (8002330 <__NVIC_SetPriority+0xd8>)
 800230a:	1dfb      	adds	r3, r7, #7
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	001c      	movs	r4, r3
 8002310:	230f      	movs	r3, #15
 8002312:	4023      	ands	r3, r4
 8002314:	3b08      	subs	r3, #8
 8002316:	089b      	lsrs	r3, r3, #2
 8002318:	430a      	orrs	r2, r1
 800231a:	3306      	adds	r3, #6
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	18c3      	adds	r3, r0, r3
 8002320:	3304      	adds	r3, #4
 8002322:	601a      	str	r2, [r3, #0]
}
 8002324:	46c0      	nop			; (mov r8, r8)
 8002326:	46bd      	mov	sp, r7
 8002328:	b003      	add	sp, #12
 800232a:	bd90      	pop	{r4, r7, pc}
 800232c:	e000e100 	.word	0xe000e100
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002338:	f3bf 8f4f 	dsb	sy
}
 800233c:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800233e:	4b04      	ldr	r3, [pc, #16]	; (8002350 <__NVIC_SystemReset+0x1c>)
 8002340:	4a04      	ldr	r2, [pc, #16]	; (8002354 <__NVIC_SystemReset+0x20>)
 8002342:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002344:	f3bf 8f4f 	dsb	sy
}
 8002348:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	e7fd      	b.n	800234a <__NVIC_SystemReset+0x16>
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	e000ed00 	.word	0xe000ed00
 8002354:	05fa0004 	.word	0x05fa0004

08002358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	1e5a      	subs	r2, r3, #1
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	045b      	lsls	r3, r3, #17
 8002368:	429a      	cmp	r2, r3
 800236a:	d301      	bcc.n	8002370 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800236c:	2301      	movs	r3, #1
 800236e:	e010      	b.n	8002392 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002370:	4b0a      	ldr	r3, [pc, #40]	; (800239c <SysTick_Config+0x44>)
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	3a01      	subs	r2, #1
 8002376:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002378:	2301      	movs	r3, #1
 800237a:	425b      	negs	r3, r3
 800237c:	2103      	movs	r1, #3
 800237e:	0018      	movs	r0, r3
 8002380:	f7ff ff6a 	bl	8002258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <SysTick_Config+0x44>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800238a:	4b04      	ldr	r3, [pc, #16]	; (800239c <SysTick_Config+0x44>)
 800238c:	2207      	movs	r2, #7
 800238e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002390:	2300      	movs	r3, #0
}
 8002392:	0018      	movs	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	b002      	add	sp, #8
 8002398:	bd80      	pop	{r7, pc}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	e000e010 	.word	0xe000e010

080023a0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
 80023aa:	210f      	movs	r1, #15
 80023ac:	187b      	adds	r3, r7, r1
 80023ae:	1c02      	adds	r2, r0, #0
 80023b0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	187b      	adds	r3, r7, r1
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	b25b      	sxtb	r3, r3
 80023ba:	0011      	movs	r1, r2
 80023bc:	0018      	movs	r0, r3
 80023be:	f7ff ff4b 	bl	8002258 <__NVIC_SetPriority>
}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b004      	add	sp, #16
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	0002      	movs	r2, r0
 80023d2:	1dfb      	adds	r3, r7, #7
 80023d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d6:	1dfb      	adds	r3, r7, #7
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	b25b      	sxtb	r3, r3
 80023dc:	0018      	movs	r0, r3
 80023de:	f7ff ff21 	bl	8002224 <__NVIC_EnableIRQ>
}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b002      	add	sp, #8
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80023ee:	f7ff ffa1 	bl	8002334 <__NVIC_SystemReset>

080023f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	0018      	movs	r0, r3
 80023fe:	f7ff ffab 	bl	8002358 <SysTick_Config>
 8002402:	0003      	movs	r3, r0
}
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	b002      	add	sp, #8
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e04f      	b.n	80024be <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2225      	movs	r2, #37	; 0x25
 8002422:	5c9b      	ldrb	r3, [r3, r2]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d008      	beq.n	800243c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2204      	movs	r2, #4
 800242e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2224      	movs	r2, #36	; 0x24
 8002434:	2100      	movs	r1, #0
 8002436:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e040      	b.n	80024be <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	210e      	movs	r1, #14
 8002448:	438a      	bics	r2, r1
 800244a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002456:	491c      	ldr	r1, [pc, #112]	; (80024c8 <HAL_DMA_Abort+0xbc>)
 8002458:	400a      	ands	r2, r1
 800245a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2101      	movs	r1, #1
 8002468:	438a      	bics	r2, r1
 800246a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002470:	221c      	movs	r2, #28
 8002472:	401a      	ands	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002478:	2101      	movs	r1, #1
 800247a:	4091      	lsls	r1, r2
 800247c:	000a      	movs	r2, r1
 800247e:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002488:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00c      	beq.n	80024ac <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249c:	490a      	ldr	r1, [pc, #40]	; (80024c8 <HAL_DMA_Abort+0xbc>)
 800249e:	400a      	ands	r2, r1
 80024a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80024aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2225      	movs	r2, #37	; 0x25
 80024b0:	2101      	movs	r1, #1
 80024b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2224      	movs	r2, #36	; 0x24
 80024b8:	2100      	movs	r1, #0
 80024ba:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	0018      	movs	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	b002      	add	sp, #8
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	fffffeff 	.word	0xfffffeff

080024cc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024d4:	210f      	movs	r1, #15
 80024d6:	187b      	adds	r3, r7, r1
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2225      	movs	r2, #37	; 0x25
 80024e0:	5c9b      	ldrb	r3, [r3, r2]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d006      	beq.n	80024f6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2204      	movs	r2, #4
 80024ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80024ee:	187b      	adds	r3, r7, r1
 80024f0:	2201      	movs	r2, #1
 80024f2:	701a      	strb	r2, [r3, #0]
 80024f4:	e048      	b.n	8002588 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	210e      	movs	r1, #14
 8002502:	438a      	bics	r2, r1
 8002504:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2101      	movs	r1, #1
 8002512:	438a      	bics	r2, r1
 8002514:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002520:	491d      	ldr	r1, [pc, #116]	; (8002598 <HAL_DMA_Abort_IT+0xcc>)
 8002522:	400a      	ands	r2, r1
 8002524:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	221c      	movs	r2, #28
 800252c:	401a      	ands	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	2101      	movs	r1, #1
 8002534:	4091      	lsls	r1, r2
 8002536:	000a      	movs	r2, r1
 8002538:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002542:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00c      	beq.n	8002566 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002556:	4910      	ldr	r1, [pc, #64]	; (8002598 <HAL_DMA_Abort_IT+0xcc>)
 8002558:	400a      	ands	r2, r1
 800255a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002564:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2225      	movs	r2, #37	; 0x25
 800256a:	2101      	movs	r1, #1
 800256c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2224      	movs	r2, #36	; 0x24
 8002572:	2100      	movs	r1, #0
 8002574:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257a:	2b00      	cmp	r3, #0
 800257c:	d004      	beq.n	8002588 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	0010      	movs	r0, r2
 8002586:	4798      	blx	r3
    }
  }
  return status;
 8002588:	230f      	movs	r3, #15
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	781b      	ldrb	r3, [r3, #0]
}
 800258e:	0018      	movs	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	b004      	add	sp, #16
 8002594:	bd80      	pop	{r7, pc}
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	fffffeff 	.word	0xfffffeff

0800259c <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800259c:	b5b0      	push	{r4, r5, r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	603a      	str	r2, [r7, #0]
 80025a8:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80025aa:	4b21      	ldr	r3, [pc, #132]	; (8002630 <HAL_FLASH_Program+0x94>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_FLASH_Program+0x1a>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e038      	b.n	8002628 <HAL_FLASH_Program+0x8c>
 80025b6:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <HAL_FLASH_Program+0x94>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80025bc:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <HAL_FLASH_Program+0x94>)
 80025be:	2200      	movs	r2, #0
 80025c0:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80025c2:	2517      	movs	r5, #23
 80025c4:	197c      	adds	r4, r7, r5
 80025c6:	23fa      	movs	r3, #250	; 0xfa
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	0018      	movs	r0, r3
 80025cc:	f000 f874 	bl	80026b8 <FLASH_WaitForLastOperation>
 80025d0:	0003      	movs	r3, r0
 80025d2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80025d4:	197b      	adds	r3, r7, r5
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d11f      	bne.n	800261c <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d106      	bne.n	80025f0 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68b9      	ldr	r1, [r7, #8]
 80025e8:	0008      	movs	r0, r1
 80025ea:	f000 f8b3 	bl	8002754 <FLASH_Program_DoubleWord>
 80025ee:	e005      	b.n	80025fc <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	0011      	movs	r1, r2
 80025f6:	0018      	movs	r0, r3
 80025f8:	f005 fa5a 	bl	8007ab0 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80025fc:	2317      	movs	r3, #23
 80025fe:	18fc      	adds	r4, r7, r3
 8002600:	23fa      	movs	r3, #250	; 0xfa
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	0018      	movs	r0, r3
 8002606:	f000 f857 	bl	80026b8 <FLASH_WaitForLastOperation>
 800260a:	0003      	movs	r3, r0
 800260c:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_FLASH_Program+0x98>)
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	43d9      	mvns	r1, r3
 8002616:	4b07      	ldr	r3, [pc, #28]	; (8002634 <HAL_FLASH_Program+0x98>)
 8002618:	400a      	ands	r2, r1
 800261a:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800261c:	4b04      	ldr	r3, [pc, #16]	; (8002630 <HAL_FLASH_Program+0x94>)
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8002622:	2317      	movs	r3, #23
 8002624:	18fb      	adds	r3, r7, r3
 8002626:	781b      	ldrb	r3, [r3, #0]
}
 8002628:	0018      	movs	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	b006      	add	sp, #24
 800262e:	bdb0      	pop	{r4, r5, r7, pc}
 8002630:	20000e78 	.word	0x20000e78
 8002634:	40022000 	.word	0x40022000

08002638 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800263e:	1dfb      	adds	r3, r7, #7
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <HAL_FLASH_Unlock+0x3c>)
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	2b00      	cmp	r3, #0
 800264a:	da0c      	bge.n	8002666 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800264c:	4b09      	ldr	r3, [pc, #36]	; (8002674 <HAL_FLASH_Unlock+0x3c>)
 800264e:	4a0a      	ldr	r2, [pc, #40]	; (8002678 <HAL_FLASH_Unlock+0x40>)
 8002650:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002652:	4b08      	ldr	r3, [pc, #32]	; (8002674 <HAL_FLASH_Unlock+0x3c>)
 8002654:	4a09      	ldr	r2, [pc, #36]	; (800267c <HAL_FLASH_Unlock+0x44>)
 8002656:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <HAL_FLASH_Unlock+0x3c>)
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	2b00      	cmp	r3, #0
 800265e:	da02      	bge.n	8002666 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8002660:	1dfb      	adds	r3, r7, #7
 8002662:	2201      	movs	r2, #1
 8002664:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002666:	1dfb      	adds	r3, r7, #7
 8002668:	781b      	ldrb	r3, [r3, #0]
}
 800266a:	0018      	movs	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	b002      	add	sp, #8
 8002670:	bd80      	pop	{r7, pc}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	40022000 	.word	0x40022000
 8002678:	45670123 	.word	0x45670123
 800267c:	cdef89ab 	.word	0xcdef89ab

08002680 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8002686:	1dfb      	adds	r3, r7, #7
 8002688:	2201      	movs	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800268c:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <HAL_FLASH_Lock+0x34>)
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <HAL_FLASH_Lock+0x34>)
 8002692:	2180      	movs	r1, #128	; 0x80
 8002694:	0609      	lsls	r1, r1, #24
 8002696:	430a      	orrs	r2, r1
 8002698:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_FLASH_Lock+0x34>)
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	da02      	bge.n	80026a8 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 80026a2:	1dfb      	adds	r3, r7, #7
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80026a8:	1dfb      	adds	r3, r7, #7
 80026aa:	781b      	ldrb	r3, [r3, #0]
}
 80026ac:	0018      	movs	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b002      	add	sp, #8
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40022000 	.word	0x40022000

080026b8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 80026c0:	f7ff fd82 	bl	80021c8 <HAL_GetTick>
 80026c4:	0002      	movs	r2, r0
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	189b      	adds	r3, r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 80026cc:	23c0      	movs	r3, #192	; 0xc0
 80026ce:	029b      	lsls	r3, r3, #10
 80026d0:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 80026d2:	e007      	b.n	80026e4 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 80026d4:	f7ff fd78 	bl	80021c8 <HAL_GetTick>
 80026d8:	0002      	movs	r2, r0
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4293      	cmp	r3, r2
 80026de:	d801      	bhi.n	80026e4 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e02a      	b.n	800273a <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 80026e4:	4b17      	ldr	r3, [pc, #92]	; (8002744 <FLASH_WaitForLastOperation+0x8c>)
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	4013      	ands	r3, r2
 80026ec:	d1f2      	bne.n	80026d4 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80026ee:	4b15      	ldr	r3, [pc, #84]	; (8002744 <FLASH_WaitForLastOperation+0x8c>)
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	4a15      	ldr	r2, [pc, #84]	; (8002748 <FLASH_WaitForLastOperation+0x90>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <FLASH_WaitForLastOperation+0x8c>)
 80026fa:	4a14      	ldr	r2, [pc, #80]	; (800274c <FLASH_WaitForLastOperation+0x94>)
 80026fc:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d004      	beq.n	800270e <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8002704:	4b12      	ldr	r3, [pc, #72]	; (8002750 <FLASH_WaitForLastOperation+0x98>)
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e015      	b.n	800273a <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 800270e:	f7ff fd5b 	bl	80021c8 <HAL_GetTick>
 8002712:	0002      	movs	r2, r0
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	189b      	adds	r3, r3, r2
 8002718:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800271a:	e007      	b.n	800272c <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 800271c:	f7ff fd54 	bl	80021c8 <HAL_GetTick>
 8002720:	0002      	movs	r2, r0
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4293      	cmp	r3, r2
 8002726:	d801      	bhi.n	800272c <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e006      	b.n	800273a <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <FLASH_WaitForLastOperation+0x8c>)
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	2380      	movs	r3, #128	; 0x80
 8002732:	02db      	lsls	r3, r3, #11
 8002734:	4013      	ands	r3, r2
 8002736:	d1f1      	bne.n	800271c <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	0018      	movs	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	b004      	add	sp, #16
 8002740:	bd80      	pop	{r7, pc}
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	40022000 	.word	0x40022000
 8002748:	000083fa 	.word	0x000083fa
 800274c:	000883fb 	.word	0x000883fb
 8002750:	20000e78 	.word	0x20000e78

08002754 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002754:	b5b0      	push	{r4, r5, r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	603a      	str	r2, [r7, #0]
 800275e:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <FLASH_Program_DoubleWord+0x3c>)
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <FLASH_Program_DoubleWord+0x3c>)
 8002766:	2101      	movs	r1, #1
 8002768:	430a      	orrs	r2, r1
 800276a:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002772:	f3bf 8f6f 	isb	sy
}
 8002776:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	001c      	movs	r4, r3
 800277c:	2300      	movs	r3, #0
 800277e:	001d      	movs	r5, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3304      	adds	r3, #4
 8002784:	0022      	movs	r2, r4
 8002786:	601a      	str	r2, [r3, #0]
}
 8002788:	46c0      	nop			; (mov r8, r8)
 800278a:	46bd      	mov	sp, r7
 800278c:	b004      	add	sp, #16
 800278e:	bdb0      	pop	{r4, r5, r7, pc}
 8002790:	40022000 	.word	0x40022000

08002794 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002794:	b5b0      	push	{r4, r5, r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800279e:	4b33      	ldr	r3, [pc, #204]	; (800286c <HAL_FLASHEx_Erase+0xd8>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_FLASHEx_Erase+0x16>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e05c      	b.n	8002864 <HAL_FLASHEx_Erase+0xd0>
 80027aa:	4b30      	ldr	r3, [pc, #192]	; (800286c <HAL_FLASHEx_Erase+0xd8>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80027b0:	4b2e      	ldr	r3, [pc, #184]	; (800286c <HAL_FLASHEx_Erase+0xd8>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80027b6:	250f      	movs	r5, #15
 80027b8:	197c      	adds	r4, r7, r5
 80027ba:	23fa      	movs	r3, #250	; 0xfa
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	0018      	movs	r0, r3
 80027c0:	f7ff ff7a 	bl	80026b8 <FLASH_WaitForLastOperation>
 80027c4:	0003      	movs	r3, r0
 80027c6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80027c8:	002c      	movs	r4, r5
 80027ca:	193b      	adds	r3, r7, r4
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d142      	bne.n	8002858 <HAL_FLASHEx_Erase+0xc4>
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	d10d      	bne.n	80027f6 <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	0018      	movs	r0, r3
 80027e0:	f000 f848 	bl	8002874 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80027e4:	193c      	adds	r4, r7, r4
 80027e6:	23fa      	movs	r3, #250	; 0xfa
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	0018      	movs	r0, r3
 80027ec:	f7ff ff64 	bl	80026b8 <FLASH_WaitForLastOperation>
 80027f0:	0003      	movs	r3, r0
 80027f2:	7023      	strb	r3, [r4, #0]
 80027f4:	e030      	b.n	8002858 <HAL_FLASHEx_Erase+0xc4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2201      	movs	r2, #1
 80027fa:	4252      	negs	r2, r2
 80027fc:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	e01a      	b.n	800283c <HAL_FLASHEx_Erase+0xa8>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	0011      	movs	r1, r2
 800280e:	0018      	movs	r0, r3
 8002810:	f000 f844 	bl	800289c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002814:	250f      	movs	r5, #15
 8002816:	197c      	adds	r4, r7, r5
 8002818:	23fa      	movs	r3, #250	; 0xfa
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	0018      	movs	r0, r3
 800281e:	f7ff ff4b 	bl	80026b8 <FLASH_WaitForLastOperation>
 8002822:	0003      	movs	r3, r0
 8002824:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8002826:	197b      	adds	r3, r7, r5
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_FLASHEx_Erase+0xa2>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	601a      	str	r2, [r3, #0]
          break;
 8002834:	e00a      	b.n	800284c <HAL_FLASHEx_Erase+0xb8>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	3301      	adds	r3, #1
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	18d3      	adds	r3, r2, r3
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	429a      	cmp	r2, r3
 800284a:	d3dc      	bcc.n	8002806 <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800284c:	4b08      	ldr	r3, [pc, #32]	; (8002870 <HAL_FLASHEx_Erase+0xdc>)
 800284e:	695a      	ldr	r2, [r3, #20]
 8002850:	4b07      	ldr	r3, [pc, #28]	; (8002870 <HAL_FLASHEx_Erase+0xdc>)
 8002852:	2102      	movs	r1, #2
 8002854:	438a      	bics	r2, r1
 8002856:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <HAL_FLASHEx_Erase+0xd8>)
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800285e:	230f      	movs	r3, #15
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	781b      	ldrb	r3, [r3, #0]
}
 8002864:	0018      	movs	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	b004      	add	sp, #16
 800286a:	bdb0      	pop	{r4, r5, r7, pc}
 800286c:	20000e78 	.word	0x20000e78
 8002870:	40022000 	.word	0x40022000

08002874 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <FLASH_MassErase+0x24>)
 800287e:	695a      	ldr	r2, [r3, #20]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	431a      	orrs	r2, r3
 8002884:	4b04      	ldr	r3, [pc, #16]	; (8002898 <FLASH_MassErase+0x24>)
 8002886:	2180      	movs	r1, #128	; 0x80
 8002888:	0249      	lsls	r1, r1, #9
 800288a:	430a      	orrs	r2, r1
 800288c:	615a      	str	r2, [r3, #20]
}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	46bd      	mov	sp, r7
 8002892:	b002      	add	sp, #8
 8002894:	bd80      	pop	{r7, pc}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	40022000 	.word	0x40022000

0800289c <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 80028a6:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <FLASH_PageErase+0x48>)
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	4a0f      	ldr	r2, [pc, #60]	; (80028e8 <FLASH_PageErase+0x4c>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d005      	beq.n	80028c2 <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2280      	movs	r2, #128	; 0x80
 80028ba:	0192      	lsls	r2, r2, #6
 80028bc:	4313      	orrs	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	e003      	b.n	80028ca <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4a09      	ldr	r2, [pc, #36]	; (80028ec <FLASH_PageErase+0x50>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]
  }
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	00da      	lsls	r2, r3, #3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	431a      	orrs	r2, r3
 80028d2:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <FLASH_PageErase+0x48>)
 80028d4:	4906      	ldr	r1, [pc, #24]	; (80028f0 <FLASH_PageErase+0x54>)
 80028d6:	430a      	orrs	r2, r1
 80028d8:	615a      	str	r2, [r3, #20]
}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	46bd      	mov	sp, r7
 80028de:	b004      	add	sp, #16
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	40022000 	.word	0x40022000
 80028e8:	ffffe007 	.word	0xffffe007
 80028ec:	ffffdfff 	.word	0xffffdfff
 80028f0:	00010002 	.word	0x00010002

080028f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002902:	e14d      	b.n	8002ba0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2101      	movs	r1, #1
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4091      	lsls	r1, r2
 800290e:	000a      	movs	r2, r1
 8002910:	4013      	ands	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d100      	bne.n	800291c <HAL_GPIO_Init+0x28>
 800291a:	e13e      	b.n	8002b9a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2203      	movs	r2, #3
 8002922:	4013      	ands	r3, r2
 8002924:	2b01      	cmp	r3, #1
 8002926:	d005      	beq.n	8002934 <HAL_GPIO_Init+0x40>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2203      	movs	r2, #3
 800292e:	4013      	ands	r3, r2
 8002930:	2b02      	cmp	r3, #2
 8002932:	d130      	bne.n	8002996 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	2203      	movs	r2, #3
 8002940:	409a      	lsls	r2, r3
 8002942:	0013      	movs	r3, r2
 8002944:	43da      	mvns	r2, r3
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4013      	ands	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	409a      	lsls	r2, r3
 8002956:	0013      	movs	r3, r2
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800296a:	2201      	movs	r2, #1
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	409a      	lsls	r2, r3
 8002970:	0013      	movs	r3, r2
 8002972:	43da      	mvns	r2, r3
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4013      	ands	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	091b      	lsrs	r3, r3, #4
 8002980:	2201      	movs	r2, #1
 8002982:	401a      	ands	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	409a      	lsls	r2, r3
 8002988:	0013      	movs	r3, r2
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2203      	movs	r2, #3
 800299c:	4013      	ands	r3, r2
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d017      	beq.n	80029d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	2203      	movs	r2, #3
 80029ae:	409a      	lsls	r2, r3
 80029b0:	0013      	movs	r3, r2
 80029b2:	43da      	mvns	r2, r3
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4013      	ands	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	409a      	lsls	r2, r3
 80029c4:	0013      	movs	r3, r2
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2203      	movs	r2, #3
 80029d8:	4013      	ands	r3, r2
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d123      	bne.n	8002a26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	08da      	lsrs	r2, r3, #3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3208      	adds	r2, #8
 80029e6:	0092      	lsls	r2, r2, #2
 80029e8:	58d3      	ldr	r3, [r2, r3]
 80029ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2207      	movs	r2, #7
 80029f0:	4013      	ands	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	220f      	movs	r2, #15
 80029f6:	409a      	lsls	r2, r3
 80029f8:	0013      	movs	r3, r2
 80029fa:	43da      	mvns	r2, r3
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4013      	ands	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2107      	movs	r1, #7
 8002a0a:	400b      	ands	r3, r1
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	409a      	lsls	r2, r3
 8002a10:	0013      	movs	r3, r2
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	08da      	lsrs	r2, r3, #3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3208      	adds	r2, #8
 8002a20:	0092      	lsls	r2, r2, #2
 8002a22:	6939      	ldr	r1, [r7, #16]
 8002a24:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	2203      	movs	r2, #3
 8002a32:	409a      	lsls	r2, r3
 8002a34:	0013      	movs	r3, r2
 8002a36:	43da      	mvns	r2, r3
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2203      	movs	r2, #3
 8002a44:	401a      	ands	r2, r3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	409a      	lsls	r2, r3
 8002a4c:	0013      	movs	r3, r2
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	23c0      	movs	r3, #192	; 0xc0
 8002a60:	029b      	lsls	r3, r3, #10
 8002a62:	4013      	ands	r3, r2
 8002a64:	d100      	bne.n	8002a68 <HAL_GPIO_Init+0x174>
 8002a66:	e098      	b.n	8002b9a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002a68:	4a53      	ldr	r2, [pc, #332]	; (8002bb8 <HAL_GPIO_Init+0x2c4>)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	089b      	lsrs	r3, r3, #2
 8002a6e:	3318      	adds	r3, #24
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	589b      	ldr	r3, [r3, r2]
 8002a74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2203      	movs	r2, #3
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	220f      	movs	r2, #15
 8002a80:	409a      	lsls	r2, r3
 8002a82:	0013      	movs	r3, r2
 8002a84:	43da      	mvns	r2, r3
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	23a0      	movs	r3, #160	; 0xa0
 8002a90:	05db      	lsls	r3, r3, #23
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d019      	beq.n	8002aca <HAL_GPIO_Init+0x1d6>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a48      	ldr	r2, [pc, #288]	; (8002bbc <HAL_GPIO_Init+0x2c8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d013      	beq.n	8002ac6 <HAL_GPIO_Init+0x1d2>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a47      	ldr	r2, [pc, #284]	; (8002bc0 <HAL_GPIO_Init+0x2cc>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d00d      	beq.n	8002ac2 <HAL_GPIO_Init+0x1ce>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a46      	ldr	r2, [pc, #280]	; (8002bc4 <HAL_GPIO_Init+0x2d0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d007      	beq.n	8002abe <HAL_GPIO_Init+0x1ca>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a45      	ldr	r2, [pc, #276]	; (8002bc8 <HAL_GPIO_Init+0x2d4>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d101      	bne.n	8002aba <HAL_GPIO_Init+0x1c6>
 8002ab6:	2304      	movs	r3, #4
 8002ab8:	e008      	b.n	8002acc <HAL_GPIO_Init+0x1d8>
 8002aba:	2305      	movs	r3, #5
 8002abc:	e006      	b.n	8002acc <HAL_GPIO_Init+0x1d8>
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e004      	b.n	8002acc <HAL_GPIO_Init+0x1d8>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e002      	b.n	8002acc <HAL_GPIO_Init+0x1d8>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <HAL_GPIO_Init+0x1d8>
 8002aca:	2300      	movs	r3, #0
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	2103      	movs	r1, #3
 8002ad0:	400a      	ands	r2, r1
 8002ad2:	00d2      	lsls	r2, r2, #3
 8002ad4:	4093      	lsls	r3, r2
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002adc:	4936      	ldr	r1, [pc, #216]	; (8002bb8 <HAL_GPIO_Init+0x2c4>)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	089b      	lsrs	r3, r3, #2
 8002ae2:	3318      	adds	r3, #24
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002aea:	4b33      	ldr	r3, [pc, #204]	; (8002bb8 <HAL_GPIO_Init+0x2c4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	43da      	mvns	r2, r3
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4013      	ands	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	2380      	movs	r3, #128	; 0x80
 8002b00:	035b      	lsls	r3, r3, #13
 8002b02:	4013      	ands	r3, r2
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b0e:	4b2a      	ldr	r3, [pc, #168]	; (8002bb8 <HAL_GPIO_Init+0x2c4>)
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002b14:	4b28      	ldr	r3, [pc, #160]	; (8002bb8 <HAL_GPIO_Init+0x2c4>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	43da      	mvns	r2, r3
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4013      	ands	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	2380      	movs	r3, #128	; 0x80
 8002b2a:	039b      	lsls	r3, r3, #14
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b38:	4b1f      	ldr	r3, [pc, #124]	; (8002bb8 <HAL_GPIO_Init+0x2c4>)
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b3e:	4a1e      	ldr	r2, [pc, #120]	; (8002bb8 <HAL_GPIO_Init+0x2c4>)
 8002b40:	2384      	movs	r3, #132	; 0x84
 8002b42:	58d3      	ldr	r3, [r2, r3]
 8002b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	43da      	mvns	r2, r3
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	2380      	movs	r3, #128	; 0x80
 8002b56:	029b      	lsls	r3, r3, #10
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d003      	beq.n	8002b64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b64:	4914      	ldr	r1, [pc, #80]	; (8002bb8 <HAL_GPIO_Init+0x2c4>)
 8002b66:	2284      	movs	r2, #132	; 0x84
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002b6c:	4a12      	ldr	r2, [pc, #72]	; (8002bb8 <HAL_GPIO_Init+0x2c4>)
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	58d3      	ldr	r3, [r2, r3]
 8002b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	43da      	mvns	r2, r3
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	025b      	lsls	r3, r3, #9
 8002b86:	4013      	ands	r3, r2
 8002b88:	d003      	beq.n	8002b92 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b92:	4909      	ldr	r1, [pc, #36]	; (8002bb8 <HAL_GPIO_Init+0x2c4>)
 8002b94:	2280      	movs	r2, #128	; 0x80
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	40da      	lsrs	r2, r3
 8002ba8:	1e13      	subs	r3, r2, #0
 8002baa:	d000      	beq.n	8002bae <HAL_GPIO_Init+0x2ba>
 8002bac:	e6aa      	b.n	8002904 <HAL_GPIO_Init+0x10>
  }
}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	46c0      	nop			; (mov r8, r8)
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b006      	add	sp, #24
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40021800 	.word	0x40021800
 8002bbc:	50000400 	.word	0x50000400
 8002bc0:	50000800 	.word	0x50000800
 8002bc4:	50000c00 	.word	0x50000c00
 8002bc8:	50001000 	.word	0x50001000

08002bcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	000a      	movs	r2, r1
 8002bd6:	1cbb      	adds	r3, r7, #2
 8002bd8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	1cba      	adds	r2, r7, #2
 8002be0:	8812      	ldrh	r2, [r2, #0]
 8002be2:	4013      	ands	r3, r2
 8002be4:	d004      	beq.n	8002bf0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002be6:	230f      	movs	r3, #15
 8002be8:	18fb      	adds	r3, r7, r3
 8002bea:	2201      	movs	r2, #1
 8002bec:	701a      	strb	r2, [r3, #0]
 8002bee:	e003      	b.n	8002bf8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bf0:	230f      	movs	r3, #15
 8002bf2:	18fb      	adds	r3, r7, r3
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002bf8:	230f      	movs	r3, #15
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	781b      	ldrb	r3, [r3, #0]
}
 8002bfe:	0018      	movs	r0, r3
 8002c00:	46bd      	mov	sp, r7
 8002c02:	b004      	add	sp, #16
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	0008      	movs	r0, r1
 8002c10:	0011      	movs	r1, r2
 8002c12:	1cbb      	adds	r3, r7, #2
 8002c14:	1c02      	adds	r2, r0, #0
 8002c16:	801a      	strh	r2, [r3, #0]
 8002c18:	1c7b      	adds	r3, r7, #1
 8002c1a:	1c0a      	adds	r2, r1, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c1e:	1c7b      	adds	r3, r7, #1
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d004      	beq.n	8002c30 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c26:	1cbb      	adds	r3, r7, #2
 8002c28:	881a      	ldrh	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c2e:	e003      	b.n	8002c38 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c30:	1cbb      	adds	r3, r7, #2
 8002c32:	881a      	ldrh	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b002      	add	sp, #8
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	000a      	movs	r2, r1
 8002c4a:	1cbb      	adds	r3, r7, #2
 8002c4c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c54:	1cbb      	adds	r3, r7, #2
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	041a      	lsls	r2, r3, #16
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	43db      	mvns	r3, r3
 8002c62:	1cb9      	adds	r1, r7, #2
 8002c64:	8809      	ldrh	r1, [r1, #0]
 8002c66:	400b      	ands	r3, r1
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	619a      	str	r2, [r3, #24]
}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b004      	add	sp, #16
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002c80:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a19      	ldr	r2, [pc, #100]	; (8002cec <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	0019      	movs	r1, r3
 8002c8a:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d11f      	bne.n	8002cdc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002c9c:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	0013      	movs	r3, r2
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	189b      	adds	r3, r3, r2
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	4912      	ldr	r1, [pc, #72]	; (8002cf4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002caa:	0018      	movs	r0, r3
 8002cac:	f7fd fa3a 	bl	8000124 <__udivsi3>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cb6:	e008      	b.n	8002cca <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	e001      	b.n	8002cca <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e009      	b.n	8002cde <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cca:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002ccc:	695a      	ldr	r2, [r3, #20]
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	401a      	ands	r2, r3
 8002cd4:	2380      	movs	r3, #128	; 0x80
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d0ed      	beq.n	8002cb8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	0018      	movs	r0, r3
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b004      	add	sp, #16
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	40007000 	.word	0x40007000
 8002cec:	fffff9ff 	.word	0xfffff9ff
 8002cf0:	20000400 	.word	0x20000400
 8002cf4:	000f4240 	.word	0x000f4240

08002cf8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002cfc:	4b03      	ldr	r3, [pc, #12]	; (8002d0c <LL_RCC_GetAPB1Prescaler+0x14>)
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	23e0      	movs	r3, #224	; 0xe0
 8002d02:	01db      	lsls	r3, r3, #7
 8002d04:	4013      	ands	r3, r2
}
 8002d06:	0018      	movs	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40021000 	.word	0x40021000

08002d10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e2fe      	b.n	8003320 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2201      	movs	r2, #1
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d100      	bne.n	8002d2e <HAL_RCC_OscConfig+0x1e>
 8002d2c:	e07c      	b.n	8002e28 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d2e:	4bc3      	ldr	r3, [pc, #780]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2238      	movs	r2, #56	; 0x38
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d38:	4bc0      	ldr	r3, [pc, #768]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	4013      	ands	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	2b10      	cmp	r3, #16
 8002d46:	d102      	bne.n	8002d4e <HAL_RCC_OscConfig+0x3e>
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d002      	beq.n	8002d54 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d10b      	bne.n	8002d6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d54:	4bb9      	ldr	r3, [pc, #740]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	2380      	movs	r3, #128	; 0x80
 8002d5a:	029b      	lsls	r3, r3, #10
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d062      	beq.n	8002e26 <HAL_RCC_OscConfig+0x116>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d15e      	bne.n	8002e26 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e2d9      	b.n	8003320 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	2380      	movs	r3, #128	; 0x80
 8002d72:	025b      	lsls	r3, r3, #9
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d107      	bne.n	8002d88 <HAL_RCC_OscConfig+0x78>
 8002d78:	4bb0      	ldr	r3, [pc, #704]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4baf      	ldr	r3, [pc, #700]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002d7e:	2180      	movs	r1, #128	; 0x80
 8002d80:	0249      	lsls	r1, r1, #9
 8002d82:	430a      	orrs	r2, r1
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	e020      	b.n	8002dca <HAL_RCC_OscConfig+0xba>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	23a0      	movs	r3, #160	; 0xa0
 8002d8e:	02db      	lsls	r3, r3, #11
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d10e      	bne.n	8002db2 <HAL_RCC_OscConfig+0xa2>
 8002d94:	4ba9      	ldr	r3, [pc, #676]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4ba8      	ldr	r3, [pc, #672]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002d9a:	2180      	movs	r1, #128	; 0x80
 8002d9c:	02c9      	lsls	r1, r1, #11
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	4ba6      	ldr	r3, [pc, #664]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	4ba5      	ldr	r3, [pc, #660]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002da8:	2180      	movs	r1, #128	; 0x80
 8002daa:	0249      	lsls	r1, r1, #9
 8002dac:	430a      	orrs	r2, r1
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	e00b      	b.n	8002dca <HAL_RCC_OscConfig+0xba>
 8002db2:	4ba2      	ldr	r3, [pc, #648]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	4ba1      	ldr	r3, [pc, #644]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002db8:	49a1      	ldr	r1, [pc, #644]	; (8003040 <HAL_RCC_OscConfig+0x330>)
 8002dba:	400a      	ands	r2, r1
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	4b9f      	ldr	r3, [pc, #636]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	4b9e      	ldr	r3, [pc, #632]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002dc4:	499f      	ldr	r1, [pc, #636]	; (8003044 <HAL_RCC_OscConfig+0x334>)
 8002dc6:	400a      	ands	r2, r1
 8002dc8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d014      	beq.n	8002dfc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd2:	f7ff f9f9 	bl	80021c8 <HAL_GetTick>
 8002dd6:	0003      	movs	r3, r0
 8002dd8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ddc:	f7ff f9f4 	bl	80021c8 <HAL_GetTick>
 8002de0:	0002      	movs	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b64      	cmp	r3, #100	; 0x64
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e298      	b.n	8003320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dee:	4b93      	ldr	r3, [pc, #588]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	029b      	lsls	r3, r3, #10
 8002df6:	4013      	ands	r3, r2
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0xcc>
 8002dfa:	e015      	b.n	8002e28 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7ff f9e4 	bl	80021c8 <HAL_GetTick>
 8002e00:	0003      	movs	r3, r0
 8002e02:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e06:	f7ff f9df 	bl	80021c8 <HAL_GetTick>
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b64      	cmp	r3, #100	; 0x64
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e283      	b.n	8003320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e18:	4b88      	ldr	r3, [pc, #544]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	029b      	lsls	r3, r3, #10
 8002e20:	4013      	ands	r3, r2
 8002e22:	d1f0      	bne.n	8002e06 <HAL_RCC_OscConfig+0xf6>
 8002e24:	e000      	b.n	8002e28 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e26:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d100      	bne.n	8002e34 <HAL_RCC_OscConfig+0x124>
 8002e32:	e099      	b.n	8002f68 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e34:	4b81      	ldr	r3, [pc, #516]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2238      	movs	r2, #56	; 0x38
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e3e:	4b7f      	ldr	r3, [pc, #508]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	2203      	movs	r2, #3
 8002e44:	4013      	ands	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	2b10      	cmp	r3, #16
 8002e4c:	d102      	bne.n	8002e54 <HAL_RCC_OscConfig+0x144>
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d002      	beq.n	8002e5a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d135      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e5a:	4b78      	ldr	r3, [pc, #480]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	2380      	movs	r3, #128	; 0x80
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	4013      	ands	r3, r2
 8002e64:	d005      	beq.n	8002e72 <HAL_RCC_OscConfig+0x162>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e256      	b.n	8003320 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e72:	4b72      	ldr	r3, [pc, #456]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	4a74      	ldr	r2, [pc, #464]	; (8003048 <HAL_RCC_OscConfig+0x338>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	0019      	movs	r1, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	021a      	lsls	r2, r3, #8
 8002e82:	4b6e      	ldr	r3, [pc, #440]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002e84:	430a      	orrs	r2, r1
 8002e86:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d112      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002e8e:	4b6b      	ldr	r3, [pc, #428]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a6e      	ldr	r2, [pc, #440]	; (800304c <HAL_RCC_OscConfig+0x33c>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	0019      	movs	r1, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	4b67      	ldr	r3, [pc, #412]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002ea2:	4b66      	ldr	r3, [pc, #408]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	0adb      	lsrs	r3, r3, #11
 8002ea8:	2207      	movs	r2, #7
 8002eaa:	4013      	ands	r3, r2
 8002eac:	4a68      	ldr	r2, [pc, #416]	; (8003050 <HAL_RCC_OscConfig+0x340>)
 8002eae:	40da      	lsrs	r2, r3
 8002eb0:	4b68      	ldr	r3, [pc, #416]	; (8003054 <HAL_RCC_OscConfig+0x344>)
 8002eb2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002eb4:	4b68      	ldr	r3, [pc, #416]	; (8003058 <HAL_RCC_OscConfig+0x348>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f7ff f929 	bl	8002110 <HAL_InitTick>
 8002ebe:	1e03      	subs	r3, r0, #0
 8002ec0:	d051      	beq.n	8002f66 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e22c      	b.n	8003320 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d030      	beq.n	8002f30 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002ece:	4b5b      	ldr	r3, [pc, #364]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a5e      	ldr	r2, [pc, #376]	; (800304c <HAL_RCC_OscConfig+0x33c>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	0019      	movs	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	4b57      	ldr	r3, [pc, #348]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002ee2:	4b56      	ldr	r3, [pc, #344]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	4b55      	ldr	r3, [pc, #340]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002ee8:	2180      	movs	r1, #128	; 0x80
 8002eea:	0049      	lsls	r1, r1, #1
 8002eec:	430a      	orrs	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7ff f96a 	bl	80021c8 <HAL_GetTick>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002efa:	f7ff f965 	bl	80021c8 <HAL_GetTick>
 8002efe:	0002      	movs	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e209      	b.n	8003320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f0c:	4b4b      	ldr	r3, [pc, #300]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	2380      	movs	r3, #128	; 0x80
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	4013      	ands	r3, r2
 8002f16:	d0f0      	beq.n	8002efa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f18:	4b48      	ldr	r3, [pc, #288]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4a4a      	ldr	r2, [pc, #296]	; (8003048 <HAL_RCC_OscConfig+0x338>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	0019      	movs	r1, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	021a      	lsls	r2, r3, #8
 8002f28:	4b44      	ldr	r3, [pc, #272]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	e01b      	b.n	8002f68 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002f30:	4b42      	ldr	r3, [pc, #264]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4b41      	ldr	r3, [pc, #260]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002f36:	4949      	ldr	r1, [pc, #292]	; (800305c <HAL_RCC_OscConfig+0x34c>)
 8002f38:	400a      	ands	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3c:	f7ff f944 	bl	80021c8 <HAL_GetTick>
 8002f40:	0003      	movs	r3, r0
 8002f42:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f46:	f7ff f93f 	bl	80021c8 <HAL_GetTick>
 8002f4a:	0002      	movs	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e1e3      	b.n	8003320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f58:	4b38      	ldr	r3, [pc, #224]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	2380      	movs	r3, #128	; 0x80
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	4013      	ands	r3, r2
 8002f62:	d1f0      	bne.n	8002f46 <HAL_RCC_OscConfig+0x236>
 8002f64:	e000      	b.n	8002f68 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f66:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2208      	movs	r2, #8
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d047      	beq.n	8003002 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002f72:	4b32      	ldr	r3, [pc, #200]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2238      	movs	r2, #56	; 0x38
 8002f78:	4013      	ands	r3, r2
 8002f7a:	2b18      	cmp	r3, #24
 8002f7c:	d10a      	bne.n	8002f94 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002f7e:	4b2f      	ldr	r3, [pc, #188]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f82:	2202      	movs	r2, #2
 8002f84:	4013      	ands	r3, r2
 8002f86:	d03c      	beq.n	8003002 <HAL_RCC_OscConfig+0x2f2>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d138      	bne.n	8003002 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e1c5      	b.n	8003320 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d019      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002f9c:	4b27      	ldr	r3, [pc, #156]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002f9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fa0:	4b26      	ldr	r3, [pc, #152]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7ff f90e 	bl	80021c8 <HAL_GetTick>
 8002fac:	0003      	movs	r3, r0
 8002fae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb2:	f7ff f909 	bl	80021c8 <HAL_GetTick>
 8002fb6:	0002      	movs	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e1ad      	b.n	8003320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fc4:	4b1d      	ldr	r3, [pc, #116]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc8:	2202      	movs	r2, #2
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d0f1      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x2a2>
 8002fce:	e018      	b.n	8003002 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002fd2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fd4:	4b19      	ldr	r3, [pc, #100]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	438a      	bics	r2, r1
 8002fda:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7ff f8f4 	bl	80021c8 <HAL_GetTick>
 8002fe0:	0003      	movs	r3, r0
 8002fe2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe6:	f7ff f8ef 	bl	80021c8 <HAL_GetTick>
 8002fea:	0002      	movs	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e193      	b.n	8003320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ff8:	4b10      	ldr	r3, [pc, #64]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8002ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	4013      	ands	r3, r2
 8003000:	d1f1      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2204      	movs	r2, #4
 8003008:	4013      	ands	r3, r2
 800300a:	d100      	bne.n	800300e <HAL_RCC_OscConfig+0x2fe>
 800300c:	e0c6      	b.n	800319c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800300e:	231f      	movs	r3, #31
 8003010:	18fb      	adds	r3, r7, r3
 8003012:	2200      	movs	r2, #0
 8003014:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003016:	4b09      	ldr	r3, [pc, #36]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2238      	movs	r2, #56	; 0x38
 800301c:	4013      	ands	r3, r2
 800301e:	2b20      	cmp	r3, #32
 8003020:	d11e      	bne.n	8003060 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_RCC_OscConfig+0x32c>)
 8003024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003026:	2202      	movs	r2, #2
 8003028:	4013      	ands	r3, r2
 800302a:	d100      	bne.n	800302e <HAL_RCC_OscConfig+0x31e>
 800302c:	e0b6      	b.n	800319c <HAL_RCC_OscConfig+0x48c>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d000      	beq.n	8003038 <HAL_RCC_OscConfig+0x328>
 8003036:	e0b1      	b.n	800319c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e171      	b.n	8003320 <HAL_RCC_OscConfig+0x610>
 800303c:	40021000 	.word	0x40021000
 8003040:	fffeffff 	.word	0xfffeffff
 8003044:	fffbffff 	.word	0xfffbffff
 8003048:	ffff80ff 	.word	0xffff80ff
 800304c:	ffffc7ff 	.word	0xffffc7ff
 8003050:	00f42400 	.word	0x00f42400
 8003054:	20000400 	.word	0x20000400
 8003058:	20000404 	.word	0x20000404
 800305c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003060:	4bb1      	ldr	r3, [pc, #708]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 8003062:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003064:	2380      	movs	r3, #128	; 0x80
 8003066:	055b      	lsls	r3, r3, #21
 8003068:	4013      	ands	r3, r2
 800306a:	d101      	bne.n	8003070 <HAL_RCC_OscConfig+0x360>
 800306c:	2301      	movs	r3, #1
 800306e:	e000      	b.n	8003072 <HAL_RCC_OscConfig+0x362>
 8003070:	2300      	movs	r3, #0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d011      	beq.n	800309a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003076:	4bac      	ldr	r3, [pc, #688]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 8003078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800307a:	4bab      	ldr	r3, [pc, #684]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 800307c:	2180      	movs	r1, #128	; 0x80
 800307e:	0549      	lsls	r1, r1, #21
 8003080:	430a      	orrs	r2, r1
 8003082:	63da      	str	r2, [r3, #60]	; 0x3c
 8003084:	4ba8      	ldr	r3, [pc, #672]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 8003086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003088:	2380      	movs	r3, #128	; 0x80
 800308a:	055b      	lsls	r3, r3, #21
 800308c:	4013      	ands	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003092:	231f      	movs	r3, #31
 8003094:	18fb      	adds	r3, r7, r3
 8003096:	2201      	movs	r2, #1
 8003098:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800309a:	4ba4      	ldr	r3, [pc, #656]	; (800332c <HAL_RCC_OscConfig+0x61c>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	4013      	ands	r3, r2
 80030a4:	d11a      	bne.n	80030dc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030a6:	4ba1      	ldr	r3, [pc, #644]	; (800332c <HAL_RCC_OscConfig+0x61c>)
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	4ba0      	ldr	r3, [pc, #640]	; (800332c <HAL_RCC_OscConfig+0x61c>)
 80030ac:	2180      	movs	r1, #128	; 0x80
 80030ae:	0049      	lsls	r1, r1, #1
 80030b0:	430a      	orrs	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80030b4:	f7ff f888 	bl	80021c8 <HAL_GetTick>
 80030b8:	0003      	movs	r3, r0
 80030ba:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030be:	f7ff f883 	bl	80021c8 <HAL_GetTick>
 80030c2:	0002      	movs	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e127      	b.n	8003320 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030d0:	4b96      	ldr	r3, [pc, #600]	; (800332c <HAL_RCC_OscConfig+0x61c>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	2380      	movs	r3, #128	; 0x80
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	4013      	ands	r3, r2
 80030da:	d0f0      	beq.n	80030be <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d106      	bne.n	80030f2 <HAL_RCC_OscConfig+0x3e2>
 80030e4:	4b90      	ldr	r3, [pc, #576]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 80030e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030e8:	4b8f      	ldr	r3, [pc, #572]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 80030ea:	2101      	movs	r1, #1
 80030ec:	430a      	orrs	r2, r1
 80030ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80030f0:	e01c      	b.n	800312c <HAL_RCC_OscConfig+0x41c>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2b05      	cmp	r3, #5
 80030f8:	d10c      	bne.n	8003114 <HAL_RCC_OscConfig+0x404>
 80030fa:	4b8b      	ldr	r3, [pc, #556]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 80030fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030fe:	4b8a      	ldr	r3, [pc, #552]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 8003100:	2104      	movs	r1, #4
 8003102:	430a      	orrs	r2, r1
 8003104:	65da      	str	r2, [r3, #92]	; 0x5c
 8003106:	4b88      	ldr	r3, [pc, #544]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 8003108:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800310a:	4b87      	ldr	r3, [pc, #540]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 800310c:	2101      	movs	r1, #1
 800310e:	430a      	orrs	r2, r1
 8003110:	65da      	str	r2, [r3, #92]	; 0x5c
 8003112:	e00b      	b.n	800312c <HAL_RCC_OscConfig+0x41c>
 8003114:	4b84      	ldr	r3, [pc, #528]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 8003116:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003118:	4b83      	ldr	r3, [pc, #524]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 800311a:	2101      	movs	r1, #1
 800311c:	438a      	bics	r2, r1
 800311e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003120:	4b81      	ldr	r3, [pc, #516]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 8003122:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003124:	4b80      	ldr	r3, [pc, #512]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 8003126:	2104      	movs	r1, #4
 8003128:	438a      	bics	r2, r1
 800312a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d014      	beq.n	800315e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003134:	f7ff f848 	bl	80021c8 <HAL_GetTick>
 8003138:	0003      	movs	r3, r0
 800313a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800313c:	e009      	b.n	8003152 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313e:	f7ff f843 	bl	80021c8 <HAL_GetTick>
 8003142:	0002      	movs	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	4a79      	ldr	r2, [pc, #484]	; (8003330 <HAL_RCC_OscConfig+0x620>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e0e6      	b.n	8003320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003152:	4b75      	ldr	r3, [pc, #468]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 8003154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003156:	2202      	movs	r2, #2
 8003158:	4013      	ands	r3, r2
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x42e>
 800315c:	e013      	b.n	8003186 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315e:	f7ff f833 	bl	80021c8 <HAL_GetTick>
 8003162:	0003      	movs	r3, r0
 8003164:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003166:	e009      	b.n	800317c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003168:	f7ff f82e 	bl	80021c8 <HAL_GetTick>
 800316c:	0002      	movs	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	4a6f      	ldr	r2, [pc, #444]	; (8003330 <HAL_RCC_OscConfig+0x620>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e0d1      	b.n	8003320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800317c:	4b6a      	ldr	r3, [pc, #424]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 800317e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003180:	2202      	movs	r2, #2
 8003182:	4013      	ands	r3, r2
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003186:	231f      	movs	r3, #31
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d105      	bne.n	800319c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003190:	4b65      	ldr	r3, [pc, #404]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 8003192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003194:	4b64      	ldr	r3, [pc, #400]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 8003196:	4967      	ldr	r1, [pc, #412]	; (8003334 <HAL_RCC_OscConfig+0x624>)
 8003198:	400a      	ands	r2, r1
 800319a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d100      	bne.n	80031a6 <HAL_RCC_OscConfig+0x496>
 80031a4:	e0bb      	b.n	800331e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031a6:	4b60      	ldr	r3, [pc, #384]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	2238      	movs	r2, #56	; 0x38
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b10      	cmp	r3, #16
 80031b0:	d100      	bne.n	80031b4 <HAL_RCC_OscConfig+0x4a4>
 80031b2:	e07b      	b.n	80032ac <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d156      	bne.n	800326a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031bc:	4b5a      	ldr	r3, [pc, #360]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	4b59      	ldr	r3, [pc, #356]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 80031c2:	495d      	ldr	r1, [pc, #372]	; (8003338 <HAL_RCC_OscConfig+0x628>)
 80031c4:	400a      	ands	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7fe fffe 	bl	80021c8 <HAL_GetTick>
 80031cc:	0003      	movs	r3, r0
 80031ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d2:	f7fe fff9 	bl	80021c8 <HAL_GetTick>
 80031d6:	0002      	movs	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e09d      	b.n	8003320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031e4:	4b50      	ldr	r3, [pc, #320]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	049b      	lsls	r3, r3, #18
 80031ec:	4013      	ands	r3, r2
 80031ee:	d1f0      	bne.n	80031d2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031f0:	4b4d      	ldr	r3, [pc, #308]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	4a51      	ldr	r2, [pc, #324]	; (800333c <HAL_RCC_OscConfig+0x62c>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	0019      	movs	r1, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1a      	ldr	r2, [r3, #32]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	021b      	lsls	r3, r3, #8
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321c:	431a      	orrs	r2, r3
 800321e:	4b42      	ldr	r3, [pc, #264]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 8003220:	430a      	orrs	r2, r1
 8003222:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003224:	4b40      	ldr	r3, [pc, #256]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b3f      	ldr	r3, [pc, #252]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 800322a:	2180      	movs	r1, #128	; 0x80
 800322c:	0449      	lsls	r1, r1, #17
 800322e:	430a      	orrs	r2, r1
 8003230:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003232:	4b3d      	ldr	r3, [pc, #244]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	4b3c      	ldr	r3, [pc, #240]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 8003238:	2180      	movs	r1, #128	; 0x80
 800323a:	0549      	lsls	r1, r1, #21
 800323c:	430a      	orrs	r2, r1
 800323e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fe ffc2 	bl	80021c8 <HAL_GetTick>
 8003244:	0003      	movs	r3, r0
 8003246:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800324a:	f7fe ffbd 	bl	80021c8 <HAL_GetTick>
 800324e:	0002      	movs	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e061      	b.n	8003320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800325c:	4b32      	ldr	r3, [pc, #200]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	2380      	movs	r3, #128	; 0x80
 8003262:	049b      	lsls	r3, r3, #18
 8003264:	4013      	ands	r3, r2
 8003266:	d0f0      	beq.n	800324a <HAL_RCC_OscConfig+0x53a>
 8003268:	e059      	b.n	800331e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326a:	4b2f      	ldr	r3, [pc, #188]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	4b2e      	ldr	r3, [pc, #184]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 8003270:	4931      	ldr	r1, [pc, #196]	; (8003338 <HAL_RCC_OscConfig+0x628>)
 8003272:	400a      	ands	r2, r1
 8003274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003276:	f7fe ffa7 	bl	80021c8 <HAL_GetTick>
 800327a:	0003      	movs	r3, r0
 800327c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003280:	f7fe ffa2 	bl	80021c8 <HAL_GetTick>
 8003284:	0002      	movs	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e046      	b.n	8003320 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003292:	4b25      	ldr	r3, [pc, #148]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	2380      	movs	r3, #128	; 0x80
 8003298:	049b      	lsls	r3, r3, #18
 800329a:	4013      	ands	r3, r2
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800329e:	4b22      	ldr	r3, [pc, #136]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	4b21      	ldr	r3, [pc, #132]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 80032a4:	4926      	ldr	r1, [pc, #152]	; (8003340 <HAL_RCC_OscConfig+0x630>)
 80032a6:	400a      	ands	r2, r1
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	e038      	b.n	800331e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e033      	b.n	8003320 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80032b8:	4b1b      	ldr	r3, [pc, #108]	; (8003328 <HAL_RCC_OscConfig+0x618>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2203      	movs	r2, #3
 80032c2:	401a      	ands	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d126      	bne.n	800331a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2270      	movs	r2, #112	; 0x70
 80032d0:	401a      	ands	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d11f      	bne.n	800331a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	23fe      	movs	r3, #254	; 0xfe
 80032de:	01db      	lsls	r3, r3, #7
 80032e0:	401a      	ands	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d116      	bne.n	800331a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	23f8      	movs	r3, #248	; 0xf8
 80032f0:	039b      	lsls	r3, r3, #14
 80032f2:	401a      	ands	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d10e      	bne.n	800331a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	23e0      	movs	r3, #224	; 0xe0
 8003300:	051b      	lsls	r3, r3, #20
 8003302:	401a      	ands	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003308:	429a      	cmp	r2, r3
 800330a:	d106      	bne.n	800331a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	0f5b      	lsrs	r3, r3, #29
 8003310:	075a      	lsls	r2, r3, #29
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003316:	429a      	cmp	r2, r3
 8003318:	d001      	beq.n	800331e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	0018      	movs	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	b008      	add	sp, #32
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40021000 	.word	0x40021000
 800332c:	40007000 	.word	0x40007000
 8003330:	00001388 	.word	0x00001388
 8003334:	efffffff 	.word	0xefffffff
 8003338:	feffffff 	.word	0xfeffffff
 800333c:	11c1808c 	.word	0x11c1808c
 8003340:	eefefffc 	.word	0xeefefffc

08003344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0e9      	b.n	800352c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003358:	4b76      	ldr	r3, [pc, #472]	; (8003534 <HAL_RCC_ClockConfig+0x1f0>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2207      	movs	r2, #7
 800335e:	4013      	ands	r3, r2
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d91e      	bls.n	80033a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003366:	4b73      	ldr	r3, [pc, #460]	; (8003534 <HAL_RCC_ClockConfig+0x1f0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2207      	movs	r2, #7
 800336c:	4393      	bics	r3, r2
 800336e:	0019      	movs	r1, r3
 8003370:	4b70      	ldr	r3, [pc, #448]	; (8003534 <HAL_RCC_ClockConfig+0x1f0>)
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003378:	f7fe ff26 	bl	80021c8 <HAL_GetTick>
 800337c:	0003      	movs	r3, r0
 800337e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003380:	e009      	b.n	8003396 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003382:	f7fe ff21 	bl	80021c8 <HAL_GetTick>
 8003386:	0002      	movs	r2, r0
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	4a6a      	ldr	r2, [pc, #424]	; (8003538 <HAL_RCC_ClockConfig+0x1f4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e0ca      	b.n	800352c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003396:	4b67      	ldr	r3, [pc, #412]	; (8003534 <HAL_RCC_ClockConfig+0x1f0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2207      	movs	r2, #7
 800339c:	4013      	ands	r3, r2
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d1ee      	bne.n	8003382 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2202      	movs	r2, #2
 80033aa:	4013      	ands	r3, r2
 80033ac:	d015      	beq.n	80033da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2204      	movs	r2, #4
 80033b4:	4013      	ands	r3, r2
 80033b6:	d006      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80033b8:	4b60      	ldr	r3, [pc, #384]	; (800353c <HAL_RCC_ClockConfig+0x1f8>)
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	4b5f      	ldr	r3, [pc, #380]	; (800353c <HAL_RCC_ClockConfig+0x1f8>)
 80033be:	21e0      	movs	r1, #224	; 0xe0
 80033c0:	01c9      	lsls	r1, r1, #7
 80033c2:	430a      	orrs	r2, r1
 80033c4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c6:	4b5d      	ldr	r3, [pc, #372]	; (800353c <HAL_RCC_ClockConfig+0x1f8>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	4a5d      	ldr	r2, [pc, #372]	; (8003540 <HAL_RCC_ClockConfig+0x1fc>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	0019      	movs	r1, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	4b59      	ldr	r3, [pc, #356]	; (800353c <HAL_RCC_ClockConfig+0x1f8>)
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2201      	movs	r2, #1
 80033e0:	4013      	ands	r3, r2
 80033e2:	d057      	beq.n	8003494 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d107      	bne.n	80033fc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ec:	4b53      	ldr	r3, [pc, #332]	; (800353c <HAL_RCC_ClockConfig+0x1f8>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	2380      	movs	r3, #128	; 0x80
 80033f2:	029b      	lsls	r3, r3, #10
 80033f4:	4013      	ands	r3, r2
 80033f6:	d12b      	bne.n	8003450 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e097      	b.n	800352c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b02      	cmp	r3, #2
 8003402:	d107      	bne.n	8003414 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003404:	4b4d      	ldr	r3, [pc, #308]	; (800353c <HAL_RCC_ClockConfig+0x1f8>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	2380      	movs	r3, #128	; 0x80
 800340a:	049b      	lsls	r3, r3, #18
 800340c:	4013      	ands	r3, r2
 800340e:	d11f      	bne.n	8003450 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e08b      	b.n	800352c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d107      	bne.n	800342c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800341c:	4b47      	ldr	r3, [pc, #284]	; (800353c <HAL_RCC_ClockConfig+0x1f8>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	2380      	movs	r3, #128	; 0x80
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4013      	ands	r3, r2
 8003426:	d113      	bne.n	8003450 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e07f      	b.n	800352c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b03      	cmp	r3, #3
 8003432:	d106      	bne.n	8003442 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003434:	4b41      	ldr	r3, [pc, #260]	; (800353c <HAL_RCC_ClockConfig+0x1f8>)
 8003436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003438:	2202      	movs	r2, #2
 800343a:	4013      	ands	r3, r2
 800343c:	d108      	bne.n	8003450 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e074      	b.n	800352c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003442:	4b3e      	ldr	r3, [pc, #248]	; (800353c <HAL_RCC_ClockConfig+0x1f8>)
 8003444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003446:	2202      	movs	r2, #2
 8003448:	4013      	ands	r3, r2
 800344a:	d101      	bne.n	8003450 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e06d      	b.n	800352c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003450:	4b3a      	ldr	r3, [pc, #232]	; (800353c <HAL_RCC_ClockConfig+0x1f8>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2207      	movs	r2, #7
 8003456:	4393      	bics	r3, r2
 8003458:	0019      	movs	r1, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	4b37      	ldr	r3, [pc, #220]	; (800353c <HAL_RCC_ClockConfig+0x1f8>)
 8003460:	430a      	orrs	r2, r1
 8003462:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003464:	f7fe feb0 	bl	80021c8 <HAL_GetTick>
 8003468:	0003      	movs	r3, r0
 800346a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346c:	e009      	b.n	8003482 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800346e:	f7fe feab 	bl	80021c8 <HAL_GetTick>
 8003472:	0002      	movs	r2, r0
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	4a2f      	ldr	r2, [pc, #188]	; (8003538 <HAL_RCC_ClockConfig+0x1f4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e054      	b.n	800352c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003482:	4b2e      	ldr	r3, [pc, #184]	; (800353c <HAL_RCC_ClockConfig+0x1f8>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	2238      	movs	r2, #56	; 0x38
 8003488:	401a      	ands	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	429a      	cmp	r2, r3
 8003492:	d1ec      	bne.n	800346e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003494:	4b27      	ldr	r3, [pc, #156]	; (8003534 <HAL_RCC_ClockConfig+0x1f0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2207      	movs	r2, #7
 800349a:	4013      	ands	r3, r2
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d21e      	bcs.n	80034e0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a2:	4b24      	ldr	r3, [pc, #144]	; (8003534 <HAL_RCC_ClockConfig+0x1f0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2207      	movs	r2, #7
 80034a8:	4393      	bics	r3, r2
 80034aa:	0019      	movs	r1, r3
 80034ac:	4b21      	ldr	r3, [pc, #132]	; (8003534 <HAL_RCC_ClockConfig+0x1f0>)
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034b4:	f7fe fe88 	bl	80021c8 <HAL_GetTick>
 80034b8:	0003      	movs	r3, r0
 80034ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034bc:	e009      	b.n	80034d2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034be:	f7fe fe83 	bl	80021c8 <HAL_GetTick>
 80034c2:	0002      	movs	r2, r0
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	4a1b      	ldr	r2, [pc, #108]	; (8003538 <HAL_RCC_ClockConfig+0x1f4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e02c      	b.n	800352c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034d2:	4b18      	ldr	r3, [pc, #96]	; (8003534 <HAL_RCC_ClockConfig+0x1f0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2207      	movs	r2, #7
 80034d8:	4013      	ands	r3, r2
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d1ee      	bne.n	80034be <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2204      	movs	r2, #4
 80034e6:	4013      	ands	r3, r2
 80034e8:	d009      	beq.n	80034fe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80034ea:	4b14      	ldr	r3, [pc, #80]	; (800353c <HAL_RCC_ClockConfig+0x1f8>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	4a15      	ldr	r2, [pc, #84]	; (8003544 <HAL_RCC_ClockConfig+0x200>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	0019      	movs	r1, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	4b10      	ldr	r3, [pc, #64]	; (800353c <HAL_RCC_ClockConfig+0x1f8>)
 80034fa:	430a      	orrs	r2, r1
 80034fc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80034fe:	f000 f829 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8003502:	0001      	movs	r1, r0
 8003504:	4b0d      	ldr	r3, [pc, #52]	; (800353c <HAL_RCC_ClockConfig+0x1f8>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	0a1b      	lsrs	r3, r3, #8
 800350a:	220f      	movs	r2, #15
 800350c:	401a      	ands	r2, r3
 800350e:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <HAL_RCC_ClockConfig+0x204>)
 8003510:	0092      	lsls	r2, r2, #2
 8003512:	58d3      	ldr	r3, [r2, r3]
 8003514:	221f      	movs	r2, #31
 8003516:	4013      	ands	r3, r2
 8003518:	000a      	movs	r2, r1
 800351a:	40da      	lsrs	r2, r3
 800351c:	4b0b      	ldr	r3, [pc, #44]	; (800354c <HAL_RCC_ClockConfig+0x208>)
 800351e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003520:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <HAL_RCC_ClockConfig+0x20c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	0018      	movs	r0, r3
 8003526:	f7fe fdf3 	bl	8002110 <HAL_InitTick>
 800352a:	0003      	movs	r3, r0
}
 800352c:	0018      	movs	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	b004      	add	sp, #16
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40022000 	.word	0x40022000
 8003538:	00001388 	.word	0x00001388
 800353c:	40021000 	.word	0x40021000
 8003540:	fffff0ff 	.word	0xfffff0ff
 8003544:	ffff8fff 	.word	0xffff8fff
 8003548:	08007d34 	.word	0x08007d34
 800354c:	20000400 	.word	0x20000400
 8003550:	20000404 	.word	0x20000404

08003554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800355a:	4b3c      	ldr	r3, [pc, #240]	; (800364c <HAL_RCC_GetSysClockFreq+0xf8>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2238      	movs	r2, #56	; 0x38
 8003560:	4013      	ands	r3, r2
 8003562:	d10f      	bne.n	8003584 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003564:	4b39      	ldr	r3, [pc, #228]	; (800364c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	0adb      	lsrs	r3, r3, #11
 800356a:	2207      	movs	r2, #7
 800356c:	4013      	ands	r3, r2
 800356e:	2201      	movs	r2, #1
 8003570:	409a      	lsls	r2, r3
 8003572:	0013      	movs	r3, r2
 8003574:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003576:	6839      	ldr	r1, [r7, #0]
 8003578:	4835      	ldr	r0, [pc, #212]	; (8003650 <HAL_RCC_GetSysClockFreq+0xfc>)
 800357a:	f7fc fdd3 	bl	8000124 <__udivsi3>
 800357e:	0003      	movs	r3, r0
 8003580:	613b      	str	r3, [r7, #16]
 8003582:	e05d      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003584:	4b31      	ldr	r3, [pc, #196]	; (800364c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2238      	movs	r2, #56	; 0x38
 800358a:	4013      	ands	r3, r2
 800358c:	2b08      	cmp	r3, #8
 800358e:	d102      	bne.n	8003596 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003590:	4b30      	ldr	r3, [pc, #192]	; (8003654 <HAL_RCC_GetSysClockFreq+0x100>)
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	e054      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003596:	4b2d      	ldr	r3, [pc, #180]	; (800364c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2238      	movs	r2, #56	; 0x38
 800359c:	4013      	ands	r3, r2
 800359e:	2b10      	cmp	r3, #16
 80035a0:	d138      	bne.n	8003614 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80035a2:	4b2a      	ldr	r3, [pc, #168]	; (800364c <HAL_RCC_GetSysClockFreq+0xf8>)
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	2203      	movs	r2, #3
 80035a8:	4013      	ands	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035ac:	4b27      	ldr	r3, [pc, #156]	; (800364c <HAL_RCC_GetSysClockFreq+0xf8>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	091b      	lsrs	r3, r3, #4
 80035b2:	2207      	movs	r2, #7
 80035b4:	4013      	ands	r3, r2
 80035b6:	3301      	adds	r3, #1
 80035b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b03      	cmp	r3, #3
 80035be:	d10d      	bne.n	80035dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035c0:	68b9      	ldr	r1, [r7, #8]
 80035c2:	4824      	ldr	r0, [pc, #144]	; (8003654 <HAL_RCC_GetSysClockFreq+0x100>)
 80035c4:	f7fc fdae 	bl	8000124 <__udivsi3>
 80035c8:	0003      	movs	r3, r0
 80035ca:	0019      	movs	r1, r3
 80035cc:	4b1f      	ldr	r3, [pc, #124]	; (800364c <HAL_RCC_GetSysClockFreq+0xf8>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	0a1b      	lsrs	r3, r3, #8
 80035d2:	227f      	movs	r2, #127	; 0x7f
 80035d4:	4013      	ands	r3, r2
 80035d6:	434b      	muls	r3, r1
 80035d8:	617b      	str	r3, [r7, #20]
        break;
 80035da:	e00d      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80035dc:	68b9      	ldr	r1, [r7, #8]
 80035de:	481c      	ldr	r0, [pc, #112]	; (8003650 <HAL_RCC_GetSysClockFreq+0xfc>)
 80035e0:	f7fc fda0 	bl	8000124 <__udivsi3>
 80035e4:	0003      	movs	r3, r0
 80035e6:	0019      	movs	r1, r3
 80035e8:	4b18      	ldr	r3, [pc, #96]	; (800364c <HAL_RCC_GetSysClockFreq+0xf8>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	0a1b      	lsrs	r3, r3, #8
 80035ee:	227f      	movs	r2, #127	; 0x7f
 80035f0:	4013      	ands	r3, r2
 80035f2:	434b      	muls	r3, r1
 80035f4:	617b      	str	r3, [r7, #20]
        break;
 80035f6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80035f8:	4b14      	ldr	r3, [pc, #80]	; (800364c <HAL_RCC_GetSysClockFreq+0xf8>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	0f5b      	lsrs	r3, r3, #29
 80035fe:	2207      	movs	r2, #7
 8003600:	4013      	ands	r3, r2
 8003602:	3301      	adds	r3, #1
 8003604:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	6978      	ldr	r0, [r7, #20]
 800360a:	f7fc fd8b 	bl	8000124 <__udivsi3>
 800360e:	0003      	movs	r3, r0
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	e015      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003614:	4b0d      	ldr	r3, [pc, #52]	; (800364c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	2238      	movs	r2, #56	; 0x38
 800361a:	4013      	ands	r3, r2
 800361c:	2b20      	cmp	r3, #32
 800361e:	d103      	bne.n	8003628 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003620:	2380      	movs	r3, #128	; 0x80
 8003622:	021b      	lsls	r3, r3, #8
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	e00b      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003628:	4b08      	ldr	r3, [pc, #32]	; (800364c <HAL_RCC_GetSysClockFreq+0xf8>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2238      	movs	r2, #56	; 0x38
 800362e:	4013      	ands	r3, r2
 8003630:	2b18      	cmp	r3, #24
 8003632:	d103      	bne.n	800363c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003634:	23fa      	movs	r3, #250	; 0xfa
 8003636:	01db      	lsls	r3, r3, #7
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	e001      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003640:	693b      	ldr	r3, [r7, #16]
}
 8003642:	0018      	movs	r0, r3
 8003644:	46bd      	mov	sp, r7
 8003646:	b006      	add	sp, #24
 8003648:	bd80      	pop	{r7, pc}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	40021000 	.word	0x40021000
 8003650:	00f42400 	.word	0x00f42400
 8003654:	007a1200 	.word	0x007a1200

08003658 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800365c:	4b02      	ldr	r3, [pc, #8]	; (8003668 <HAL_RCC_GetHCLKFreq+0x10>)
 800365e:	681b      	ldr	r3, [r3, #0]
}
 8003660:	0018      	movs	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	20000400 	.word	0x20000400

0800366c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800366c:	b5b0      	push	{r4, r5, r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003670:	f7ff fff2 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 8003674:	0004      	movs	r4, r0
 8003676:	f7ff fb3f 	bl	8002cf8 <LL_RCC_GetAPB1Prescaler>
 800367a:	0003      	movs	r3, r0
 800367c:	0b1a      	lsrs	r2, r3, #12
 800367e:	4b05      	ldr	r3, [pc, #20]	; (8003694 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003680:	0092      	lsls	r2, r2, #2
 8003682:	58d3      	ldr	r3, [r2, r3]
 8003684:	221f      	movs	r2, #31
 8003686:	4013      	ands	r3, r2
 8003688:	40dc      	lsrs	r4, r3
 800368a:	0023      	movs	r3, r4
}
 800368c:	0018      	movs	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	bdb0      	pop	{r4, r5, r7, pc}
 8003692:	46c0      	nop			; (mov r8, r8)
 8003694:	08007d74 	.word	0x08007d74

08003698 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80036a0:	2313      	movs	r3, #19
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036a8:	2312      	movs	r3, #18
 80036aa:	18fb      	adds	r3, r7, r3
 80036ac:	2200      	movs	r2, #0
 80036ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	2380      	movs	r3, #128	; 0x80
 80036b6:	029b      	lsls	r3, r3, #10
 80036b8:	4013      	ands	r3, r2
 80036ba:	d100      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x26>
 80036bc:	e0a3      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036be:	2011      	movs	r0, #17
 80036c0:	183b      	adds	r3, r7, r0
 80036c2:	2200      	movs	r2, #0
 80036c4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036c6:	4bb0      	ldr	r3, [pc, #704]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036ca:	2380      	movs	r3, #128	; 0x80
 80036cc:	055b      	lsls	r3, r3, #21
 80036ce:	4013      	ands	r3, r2
 80036d0:	d110      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d2:	4bad      	ldr	r3, [pc, #692]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036d6:	4bac      	ldr	r3, [pc, #688]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036d8:	2180      	movs	r1, #128	; 0x80
 80036da:	0549      	lsls	r1, r1, #21
 80036dc:	430a      	orrs	r2, r1
 80036de:	63da      	str	r2, [r3, #60]	; 0x3c
 80036e0:	4ba9      	ldr	r3, [pc, #676]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036e4:	2380      	movs	r3, #128	; 0x80
 80036e6:	055b      	lsls	r3, r3, #21
 80036e8:	4013      	ands	r3, r2
 80036ea:	60bb      	str	r3, [r7, #8]
 80036ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ee:	183b      	adds	r3, r7, r0
 80036f0:	2201      	movs	r2, #1
 80036f2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036f4:	4ba5      	ldr	r3, [pc, #660]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4ba4      	ldr	r3, [pc, #656]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036fa:	2180      	movs	r1, #128	; 0x80
 80036fc:	0049      	lsls	r1, r1, #1
 80036fe:	430a      	orrs	r2, r1
 8003700:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003702:	f7fe fd61 	bl	80021c8 <HAL_GetTick>
 8003706:	0003      	movs	r3, r0
 8003708:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800370a:	e00b      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800370c:	f7fe fd5c 	bl	80021c8 <HAL_GetTick>
 8003710:	0002      	movs	r2, r0
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d904      	bls.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800371a:	2313      	movs	r3, #19
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	2203      	movs	r2, #3
 8003720:	701a      	strb	r2, [r3, #0]
        break;
 8003722:	e005      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003724:	4b99      	ldr	r3, [pc, #612]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	4013      	ands	r3, r2
 800372e:	d0ed      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003730:	2313      	movs	r3, #19
 8003732:	18fb      	adds	r3, r7, r3
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d154      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800373a:	4b93      	ldr	r3, [pc, #588]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800373c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800373e:	23c0      	movs	r3, #192	; 0xc0
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4013      	ands	r3, r2
 8003744:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d019      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	429a      	cmp	r2, r3
 8003754:	d014      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003756:	4b8c      	ldr	r3, [pc, #560]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375a:	4a8d      	ldr	r2, [pc, #564]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800375c:	4013      	ands	r3, r2
 800375e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003760:	4b89      	ldr	r3, [pc, #548]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003762:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003764:	4b88      	ldr	r3, [pc, #544]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003766:	2180      	movs	r1, #128	; 0x80
 8003768:	0249      	lsls	r1, r1, #9
 800376a:	430a      	orrs	r2, r1
 800376c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800376e:	4b86      	ldr	r3, [pc, #536]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003770:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003772:	4b85      	ldr	r3, [pc, #532]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003774:	4987      	ldr	r1, [pc, #540]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003776:	400a      	ands	r2, r1
 8003778:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800377a:	4b83      	ldr	r3, [pc, #524]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	2201      	movs	r2, #1
 8003784:	4013      	ands	r3, r2
 8003786:	d016      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003788:	f7fe fd1e 	bl	80021c8 <HAL_GetTick>
 800378c:	0003      	movs	r3, r0
 800378e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003790:	e00c      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003792:	f7fe fd19 	bl	80021c8 <HAL_GetTick>
 8003796:	0002      	movs	r2, r0
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	4a7e      	ldr	r2, [pc, #504]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d904      	bls.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80037a2:	2313      	movs	r3, #19
 80037a4:	18fb      	adds	r3, r7, r3
 80037a6:	2203      	movs	r2, #3
 80037a8:	701a      	strb	r2, [r3, #0]
            break;
 80037aa:	e004      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ac:	4b76      	ldr	r3, [pc, #472]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b0:	2202      	movs	r2, #2
 80037b2:	4013      	ands	r3, r2
 80037b4:	d0ed      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80037b6:	2313      	movs	r3, #19
 80037b8:	18fb      	adds	r3, r7, r3
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10a      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037c0:	4b71      	ldr	r3, [pc, #452]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c4:	4a72      	ldr	r2, [pc, #456]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	0019      	movs	r1, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037ce:	4b6e      	ldr	r3, [pc, #440]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037d0:	430a      	orrs	r2, r1
 80037d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80037d4:	e00c      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037d6:	2312      	movs	r3, #18
 80037d8:	18fb      	adds	r3, r7, r3
 80037da:	2213      	movs	r2, #19
 80037dc:	18ba      	adds	r2, r7, r2
 80037de:	7812      	ldrb	r2, [r2, #0]
 80037e0:	701a      	strb	r2, [r3, #0]
 80037e2:	e005      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e4:	2312      	movs	r3, #18
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	2213      	movs	r2, #19
 80037ea:	18ba      	adds	r2, r7, r2
 80037ec:	7812      	ldrb	r2, [r2, #0]
 80037ee:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037f0:	2311      	movs	r3, #17
 80037f2:	18fb      	adds	r3, r7, r3
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d105      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037fa:	4b63      	ldr	r3, [pc, #396]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037fe:	4b62      	ldr	r3, [pc, #392]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003800:	4966      	ldr	r1, [pc, #408]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003802:	400a      	ands	r2, r1
 8003804:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2201      	movs	r2, #1
 800380c:	4013      	ands	r3, r2
 800380e:	d009      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003810:	4b5d      	ldr	r3, [pc, #372]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003814:	2203      	movs	r2, #3
 8003816:	4393      	bics	r3, r2
 8003818:	0019      	movs	r1, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	4b5a      	ldr	r3, [pc, #360]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003820:	430a      	orrs	r2, r1
 8003822:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2202      	movs	r2, #2
 800382a:	4013      	ands	r3, r2
 800382c:	d009      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800382e:	4b56      	ldr	r3, [pc, #344]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003832:	220c      	movs	r2, #12
 8003834:	4393      	bics	r3, r2
 8003836:	0019      	movs	r1, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	4b52      	ldr	r3, [pc, #328]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800383e:	430a      	orrs	r2, r1
 8003840:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2204      	movs	r2, #4
 8003848:	4013      	ands	r3, r2
 800384a:	d009      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800384c:	4b4e      	ldr	r3, [pc, #312]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800384e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003850:	2230      	movs	r2, #48	; 0x30
 8003852:	4393      	bics	r3, r2
 8003854:	0019      	movs	r1, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	4b4b      	ldr	r3, [pc, #300]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800385c:	430a      	orrs	r2, r1
 800385e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2220      	movs	r2, #32
 8003866:	4013      	ands	r3, r2
 8003868:	d009      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800386a:	4b47      	ldr	r3, [pc, #284]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800386c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386e:	4a4c      	ldr	r2, [pc, #304]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003870:	4013      	ands	r3, r2
 8003872:	0019      	movs	r1, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	4b43      	ldr	r3, [pc, #268]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800387a:	430a      	orrs	r2, r1
 800387c:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2240      	movs	r2, #64	; 0x40
 8003884:	4013      	ands	r3, r2
 8003886:	d009      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003888:	4b3f      	ldr	r3, [pc, #252]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800388a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388c:	4a45      	ldr	r2, [pc, #276]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800388e:	4013      	ands	r3, r2
 8003890:	0019      	movs	r1, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695a      	ldr	r2, [r3, #20]
 8003896:	4b3c      	ldr	r3, [pc, #240]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003898:	430a      	orrs	r2, r1
 800389a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	2380      	movs	r3, #128	; 0x80
 80038a2:	01db      	lsls	r3, r3, #7
 80038a4:	4013      	ands	r3, r2
 80038a6:	d015      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038a8:	4b37      	ldr	r3, [pc, #220]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	0899      	lsrs	r1, r3, #2
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a1a      	ldr	r2, [r3, #32]
 80038b4:	4b34      	ldr	r3, [pc, #208]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038b6:	430a      	orrs	r2, r1
 80038b8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1a      	ldr	r2, [r3, #32]
 80038be:	2380      	movs	r3, #128	; 0x80
 80038c0:	05db      	lsls	r3, r3, #23
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d106      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80038c6:	4b30      	ldr	r3, [pc, #192]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	4b2f      	ldr	r3, [pc, #188]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038cc:	2180      	movs	r1, #128	; 0x80
 80038ce:	0249      	lsls	r1, r1, #9
 80038d0:	430a      	orrs	r2, r1
 80038d2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	2380      	movs	r3, #128	; 0x80
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	4013      	ands	r3, r2
 80038de:	d014      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80038e0:	4b29      	ldr	r3, [pc, #164]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e4:	2203      	movs	r2, #3
 80038e6:	4393      	bics	r3, r2
 80038e8:	0019      	movs	r1, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699a      	ldr	r2, [r3, #24]
 80038ee:	4b26      	ldr	r3, [pc, #152]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038f0:	430a      	orrs	r2, r1
 80038f2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d106      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80038fc:	4b22      	ldr	r3, [pc, #136]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	4b21      	ldr	r3, [pc, #132]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003902:	2180      	movs	r1, #128	; 0x80
 8003904:	0249      	lsls	r1, r1, #9
 8003906:	430a      	orrs	r2, r1
 8003908:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	2380      	movs	r3, #128	; 0x80
 8003910:	019b      	lsls	r3, r3, #6
 8003912:	4013      	ands	r3, r2
 8003914:	d014      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003916:	4b1c      	ldr	r3, [pc, #112]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391a:	220c      	movs	r2, #12
 800391c:	4393      	bics	r3, r2
 800391e:	0019      	movs	r1, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69da      	ldr	r2, [r3, #28]
 8003924:	4b18      	ldr	r3, [pc, #96]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003926:	430a      	orrs	r2, r1
 8003928:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	2b04      	cmp	r3, #4
 8003930:	d106      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003932:	4b15      	ldr	r3, [pc, #84]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	4b14      	ldr	r3, [pc, #80]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003938:	2180      	movs	r1, #128	; 0x80
 800393a:	0249      	lsls	r1, r1, #9
 800393c:	430a      	orrs	r2, r1
 800393e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	2380      	movs	r3, #128	; 0x80
 8003946:	045b      	lsls	r3, r3, #17
 8003948:	4013      	ands	r3, r2
 800394a:	d016      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800394c:	4b0e      	ldr	r3, [pc, #56]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800394e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003950:	4a13      	ldr	r2, [pc, #76]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003952:	4013      	ands	r3, r2
 8003954:	0019      	movs	r1, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800395a:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800395c:	430a      	orrs	r2, r1
 800395e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003964:	2380      	movs	r3, #128	; 0x80
 8003966:	019b      	lsls	r3, r3, #6
 8003968:	429a      	cmp	r2, r3
 800396a:	d106      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800396c:	4b06      	ldr	r3, [pc, #24]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003972:	2180      	movs	r1, #128	; 0x80
 8003974:	0449      	lsls	r1, r1, #17
 8003976:	430a      	orrs	r2, r1
 8003978:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800397a:	2312      	movs	r3, #18
 800397c:	18fb      	adds	r3, r7, r3
 800397e:	781b      	ldrb	r3, [r3, #0]
}
 8003980:	0018      	movs	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	b006      	add	sp, #24
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40021000 	.word	0x40021000
 800398c:	40007000 	.word	0x40007000
 8003990:	fffffcff 	.word	0xfffffcff
 8003994:	fffeffff 	.word	0xfffeffff
 8003998:	00001388 	.word	0x00001388
 800399c:	efffffff 	.word	0xefffffff
 80039a0:	ffffcfff 	.word	0xffffcfff
 80039a4:	ffff3fff 	.word	0xffff3fff

080039a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e04a      	b.n	8003a50 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	223d      	movs	r2, #61	; 0x3d
 80039be:	5c9b      	ldrb	r3, [r3, r2]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d107      	bne.n	80039d6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	223c      	movs	r2, #60	; 0x3c
 80039ca:	2100      	movs	r1, #0
 80039cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	0018      	movs	r0, r3
 80039d2:	f7fe f923 	bl	8001c1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	223d      	movs	r2, #61	; 0x3d
 80039da:	2102      	movs	r1, #2
 80039dc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3304      	adds	r3, #4
 80039e6:	0019      	movs	r1, r3
 80039e8:	0010      	movs	r0, r2
 80039ea:	f000 fae7 	bl	8003fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2248      	movs	r2, #72	; 0x48
 80039f2:	2101      	movs	r1, #1
 80039f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	223e      	movs	r2, #62	; 0x3e
 80039fa:	2101      	movs	r1, #1
 80039fc:	5499      	strb	r1, [r3, r2]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	223f      	movs	r2, #63	; 0x3f
 8003a02:	2101      	movs	r1, #1
 8003a04:	5499      	strb	r1, [r3, r2]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2240      	movs	r2, #64	; 0x40
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	5499      	strb	r1, [r3, r2]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2241      	movs	r2, #65	; 0x41
 8003a12:	2101      	movs	r1, #1
 8003a14:	5499      	strb	r1, [r3, r2]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2242      	movs	r2, #66	; 0x42
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	5499      	strb	r1, [r3, r2]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2243      	movs	r2, #67	; 0x43
 8003a22:	2101      	movs	r1, #1
 8003a24:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2244      	movs	r2, #68	; 0x44
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	5499      	strb	r1, [r3, r2]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2245      	movs	r2, #69	; 0x45
 8003a32:	2101      	movs	r1, #1
 8003a34:	5499      	strb	r1, [r3, r2]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2246      	movs	r2, #70	; 0x46
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	5499      	strb	r1, [r3, r2]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2247      	movs	r2, #71	; 0x47
 8003a42:	2101      	movs	r1, #1
 8003a44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	223d      	movs	r2, #61	; 0x3d
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	0018      	movs	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b002      	add	sp, #8
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	223d      	movs	r2, #61	; 0x3d
 8003a64:	5c9b      	ldrb	r3, [r3, r2]
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d001      	beq.n	8003a70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e041      	b.n	8003af4 <HAL_TIM_Base_Start_IT+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	223d      	movs	r2, #61	; 0x3d
 8003a74:	2102      	movs	r1, #2
 8003a76:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2101      	movs	r1, #1
 8003a84:	430a      	orrs	r2, r1
 8003a86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a1b      	ldr	r2, [pc, #108]	; (8003afc <HAL_TIM_Base_Start_IT+0xa4>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d00e      	beq.n	8003ab0 <HAL_TIM_Base_Start_IT+0x58>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a1a      	ldr	r2, [pc, #104]	; (8003b00 <HAL_TIM_Base_Start_IT+0xa8>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d009      	beq.n	8003ab0 <HAL_TIM_Base_Start_IT+0x58>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a18      	ldr	r2, [pc, #96]	; (8003b04 <HAL_TIM_Base_Start_IT+0xac>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d004      	beq.n	8003ab0 <HAL_TIM_Base_Start_IT+0x58>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a17      	ldr	r2, [pc, #92]	; (8003b08 <HAL_TIM_Base_Start_IT+0xb0>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d116      	bne.n	8003ade <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	4a15      	ldr	r2, [pc, #84]	; (8003b0c <HAL_TIM_Base_Start_IT+0xb4>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2b06      	cmp	r3, #6
 8003ac0:	d016      	beq.n	8003af0 <HAL_TIM_Base_Start_IT+0x98>
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	2380      	movs	r3, #128	; 0x80
 8003ac6:	025b      	lsls	r3, r3, #9
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d011      	beq.n	8003af0 <HAL_TIM_Base_Start_IT+0x98>
    {
      __HAL_TIM_ENABLE(htim);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003adc:	e008      	b.n	8003af0 <HAL_TIM_Base_Start_IT+0x98>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2101      	movs	r1, #1
 8003aea:	430a      	orrs	r2, r1
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	e000      	b.n	8003af2 <HAL_TIM_Base_Start_IT+0x9a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	0018      	movs	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b004      	add	sp, #16
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40012c00 	.word	0x40012c00
 8003b00:	40000400 	.word	0x40000400
 8003b04:	40000800 	.word	0x40000800
 8003b08:	40014000 	.word	0x40014000
 8003b0c:	00010007 	.word	0x00010007

08003b10 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2101      	movs	r1, #1
 8003b24:	438a      	bics	r2, r1
 8003b26:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	4a0d      	ldr	r2, [pc, #52]	; (8003b64 <HAL_TIM_Base_Stop_IT+0x54>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	d10d      	bne.n	8003b50 <HAL_TIM_Base_Stop_IT+0x40>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	4a0b      	ldr	r2, [pc, #44]	; (8003b68 <HAL_TIM_Base_Stop_IT+0x58>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d107      	bne.n	8003b50 <HAL_TIM_Base_Stop_IT+0x40>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	438a      	bics	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	223d      	movs	r2, #61	; 0x3d
 8003b54:	2101      	movs	r1, #1
 8003b56:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	b002      	add	sp, #8
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	00001111 	.word	0x00001111
 8003b68:	00000444 	.word	0x00000444

08003b6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d124      	bne.n	8003bcc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	2202      	movs	r2, #2
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d11d      	bne.n	8003bcc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2203      	movs	r2, #3
 8003b96:	4252      	negs	r2, r2
 8003b98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	2203      	movs	r2, #3
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d004      	beq.n	8003bb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f000 f9ec 	bl	8003f8c <HAL_TIM_IC_CaptureCallback>
 8003bb4:	e007      	b.n	8003bc6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f000 f9df 	bl	8003f7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f000 f9eb 	bl	8003f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	2204      	movs	r2, #4
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d125      	bne.n	8003c26 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	2204      	movs	r2, #4
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d11e      	bne.n	8003c26 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2205      	movs	r2, #5
 8003bee:	4252      	negs	r2, r2
 8003bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699a      	ldr	r2, [r3, #24]
 8003bfe:	23c0      	movs	r3, #192	; 0xc0
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4013      	ands	r3, r2
 8003c04:	d004      	beq.n	8003c10 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f000 f9bf 	bl	8003f8c <HAL_TIM_IC_CaptureCallback>
 8003c0e:	e007      	b.n	8003c20 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	0018      	movs	r0, r3
 8003c14:	f000 f9b2 	bl	8003f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f000 f9be 	bl	8003f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	2208      	movs	r2, #8
 8003c2e:	4013      	ands	r3, r2
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d124      	bne.n	8003c7e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	2208      	movs	r2, #8
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b08      	cmp	r3, #8
 8003c40:	d11d      	bne.n	8003c7e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2209      	movs	r2, #9
 8003c48:	4252      	negs	r2, r2
 8003c4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2204      	movs	r2, #4
 8003c50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	2203      	movs	r2, #3
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d004      	beq.n	8003c68 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	0018      	movs	r0, r3
 8003c62:	f000 f993 	bl	8003f8c <HAL_TIM_IC_CaptureCallback>
 8003c66:	e007      	b.n	8003c78 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f000 f986 	bl	8003f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	0018      	movs	r0, r3
 8003c74:	f000 f992 	bl	8003f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	2210      	movs	r2, #16
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b10      	cmp	r3, #16
 8003c8a:	d125      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	2210      	movs	r2, #16
 8003c94:	4013      	ands	r3, r2
 8003c96:	2b10      	cmp	r3, #16
 8003c98:	d11e      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2211      	movs	r2, #17
 8003ca0:	4252      	negs	r2, r2
 8003ca2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2208      	movs	r2, #8
 8003ca8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	23c0      	movs	r3, #192	; 0xc0
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d004      	beq.n	8003cc2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f000 f966 	bl	8003f8c <HAL_TIM_IC_CaptureCallback>
 8003cc0:	e007      	b.n	8003cd2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f000 f959 	bl	8003f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	0018      	movs	r0, r3
 8003cce:	f000 f965 	bl	8003f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d10f      	bne.n	8003d06 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	2201      	movs	r2, #1
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d108      	bne.n	8003d06 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	4252      	negs	r2, r2
 8003cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	0018      	movs	r0, r3
 8003d02:	f7fd fcf7 	bl	80016f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	2280      	movs	r2, #128	; 0x80
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2b80      	cmp	r3, #128	; 0x80
 8003d12:	d10f      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	2280      	movs	r2, #128	; 0x80
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	2b80      	cmp	r3, #128	; 0x80
 8003d20:	d108      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2281      	movs	r2, #129	; 0x81
 8003d28:	4252      	negs	r2, r2
 8003d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f000 fad8 	bl	80042e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691a      	ldr	r2, [r3, #16]
 8003d3a:	2380      	movs	r3, #128	; 0x80
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	401a      	ands	r2, r3
 8003d40:	2380      	movs	r3, #128	; 0x80
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d10e      	bne.n	8003d66 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	2280      	movs	r2, #128	; 0x80
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b80      	cmp	r3, #128	; 0x80
 8003d54:	d107      	bne.n	8003d66 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a1c      	ldr	r2, [pc, #112]	; (8003dcc <HAL_TIM_IRQHandler+0x260>)
 8003d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	0018      	movs	r0, r3
 8003d62:	f000 fac7 	bl	80042f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	2240      	movs	r2, #64	; 0x40
 8003d6e:	4013      	ands	r3, r2
 8003d70:	2b40      	cmp	r3, #64	; 0x40
 8003d72:	d10f      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2240      	movs	r2, #64	; 0x40
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b40      	cmp	r3, #64	; 0x40
 8003d80:	d108      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2241      	movs	r2, #65	; 0x41
 8003d88:	4252      	negs	r2, r2
 8003d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f000 f90c 	bl	8003fac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d10f      	bne.n	8003dc2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	2220      	movs	r2, #32
 8003daa:	4013      	ands	r3, r2
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d108      	bne.n	8003dc2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2221      	movs	r2, #33	; 0x21
 8003db6:	4252      	negs	r2, r2
 8003db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f000 fa89 	bl	80042d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	b002      	add	sp, #8
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	fffffeff 	.word	0xfffffeff

08003dd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dda:	230f      	movs	r3, #15
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	2200      	movs	r2, #0
 8003de0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	223c      	movs	r2, #60	; 0x3c
 8003de6:	5c9b      	ldrb	r3, [r3, r2]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_TIM_ConfigClockSource+0x20>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e0bc      	b.n	8003f6a <HAL_TIM_ConfigClockSource+0x19a>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	223c      	movs	r2, #60	; 0x3c
 8003df4:	2101      	movs	r1, #1
 8003df6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	223d      	movs	r2, #61	; 0x3d
 8003dfc:	2102      	movs	r1, #2
 8003dfe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4a5a      	ldr	r2, [pc, #360]	; (8003f74 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	4a59      	ldr	r2, [pc, #356]	; (8003f78 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2280      	movs	r2, #128	; 0x80
 8003e26:	0192      	lsls	r2, r2, #6
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d040      	beq.n	8003eae <HAL_TIM_ConfigClockSource+0xde>
 8003e2c:	2280      	movs	r2, #128	; 0x80
 8003e2e:	0192      	lsls	r2, r2, #6
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d900      	bls.n	8003e36 <HAL_TIM_ConfigClockSource+0x66>
 8003e34:	e088      	b.n	8003f48 <HAL_TIM_ConfigClockSource+0x178>
 8003e36:	2280      	movs	r2, #128	; 0x80
 8003e38:	0152      	lsls	r2, r2, #5
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d100      	bne.n	8003e40 <HAL_TIM_ConfigClockSource+0x70>
 8003e3e:	e088      	b.n	8003f52 <HAL_TIM_ConfigClockSource+0x182>
 8003e40:	2280      	movs	r2, #128	; 0x80
 8003e42:	0152      	lsls	r2, r2, #5
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d900      	bls.n	8003e4a <HAL_TIM_ConfigClockSource+0x7a>
 8003e48:	e07e      	b.n	8003f48 <HAL_TIM_ConfigClockSource+0x178>
 8003e4a:	2b70      	cmp	r3, #112	; 0x70
 8003e4c:	d018      	beq.n	8003e80 <HAL_TIM_ConfigClockSource+0xb0>
 8003e4e:	d900      	bls.n	8003e52 <HAL_TIM_ConfigClockSource+0x82>
 8003e50:	e07a      	b.n	8003f48 <HAL_TIM_ConfigClockSource+0x178>
 8003e52:	2b60      	cmp	r3, #96	; 0x60
 8003e54:	d04f      	beq.n	8003ef6 <HAL_TIM_ConfigClockSource+0x126>
 8003e56:	d900      	bls.n	8003e5a <HAL_TIM_ConfigClockSource+0x8a>
 8003e58:	e076      	b.n	8003f48 <HAL_TIM_ConfigClockSource+0x178>
 8003e5a:	2b50      	cmp	r3, #80	; 0x50
 8003e5c:	d03b      	beq.n	8003ed6 <HAL_TIM_ConfigClockSource+0x106>
 8003e5e:	d900      	bls.n	8003e62 <HAL_TIM_ConfigClockSource+0x92>
 8003e60:	e072      	b.n	8003f48 <HAL_TIM_ConfigClockSource+0x178>
 8003e62:	2b40      	cmp	r3, #64	; 0x40
 8003e64:	d057      	beq.n	8003f16 <HAL_TIM_ConfigClockSource+0x146>
 8003e66:	d900      	bls.n	8003e6a <HAL_TIM_ConfigClockSource+0x9a>
 8003e68:	e06e      	b.n	8003f48 <HAL_TIM_ConfigClockSource+0x178>
 8003e6a:	2b30      	cmp	r3, #48	; 0x30
 8003e6c:	d063      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x166>
 8003e6e:	d86b      	bhi.n	8003f48 <HAL_TIM_ConfigClockSource+0x178>
 8003e70:	2b20      	cmp	r3, #32
 8003e72:	d060      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x166>
 8003e74:	d868      	bhi.n	8003f48 <HAL_TIM_ConfigClockSource+0x178>
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d05d      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x166>
 8003e7a:	2b10      	cmp	r3, #16
 8003e7c:	d05b      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x166>
 8003e7e:	e063      	b.n	8003f48 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	6899      	ldr	r1, [r3, #8]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f000 f990 	bl	80041b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2277      	movs	r2, #119	; 0x77
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	609a      	str	r2, [r3, #8]
      break;
 8003eac:	e052      	b.n	8003f54 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	6899      	ldr	r1, [r3, #8]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f000 f979 	bl	80041b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2180      	movs	r1, #128	; 0x80
 8003ece:	01c9      	lsls	r1, r1, #7
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	609a      	str	r2, [r3, #8]
      break;
 8003ed4:	e03e      	b.n	8003f54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6818      	ldr	r0, [r3, #0]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	6859      	ldr	r1, [r3, #4]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	001a      	movs	r2, r3
 8003ee4:	f000 f8ea 	bl	80040bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2150      	movs	r1, #80	; 0x50
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f000 f944 	bl	800417c <TIM_ITRx_SetConfig>
      break;
 8003ef4:	e02e      	b.n	8003f54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6818      	ldr	r0, [r3, #0]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	6859      	ldr	r1, [r3, #4]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	001a      	movs	r2, r3
 8003f04:	f000 f908 	bl	8004118 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2160      	movs	r1, #96	; 0x60
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f000 f934 	bl	800417c <TIM_ITRx_SetConfig>
      break;
 8003f14:	e01e      	b.n	8003f54 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6818      	ldr	r0, [r3, #0]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	6859      	ldr	r1, [r3, #4]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	001a      	movs	r2, r3
 8003f24:	f000 f8ca 	bl	80040bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2140      	movs	r1, #64	; 0x40
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f000 f924 	bl	800417c <TIM_ITRx_SetConfig>
      break;
 8003f34:	e00e      	b.n	8003f54 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	0019      	movs	r1, r3
 8003f40:	0010      	movs	r0, r2
 8003f42:	f000 f91b 	bl	800417c <TIM_ITRx_SetConfig>
      break;
 8003f46:	e005      	b.n	8003f54 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003f48:	230f      	movs	r3, #15
 8003f4a:	18fb      	adds	r3, r7, r3
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	701a      	strb	r2, [r3, #0]
      break;
 8003f50:	e000      	b.n	8003f54 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003f52:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	223d      	movs	r2, #61	; 0x3d
 8003f58:	2101      	movs	r1, #1
 8003f5a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	223c      	movs	r2, #60	; 0x3c
 8003f60:	2100      	movs	r1, #0
 8003f62:	5499      	strb	r1, [r3, r2]

  return status;
 8003f64:	230f      	movs	r3, #15
 8003f66:	18fb      	adds	r3, r7, r3
 8003f68:	781b      	ldrb	r3, [r3, #0]
}
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	b004      	add	sp, #16
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	46c0      	nop			; (mov r8, r8)
 8003f74:	ffceff88 	.word	0xffceff88
 8003f78:	ffff00ff 	.word	0xffff00ff

08003f7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f84:	46c0      	nop			; (mov r8, r8)
 8003f86:	46bd      	mov	sp, r7
 8003f88:	b002      	add	sp, #8
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f94:	46c0      	nop			; (mov r8, r8)
 8003f96:	46bd      	mov	sp, r7
 8003f98:	b002      	add	sp, #8
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fa4:	46c0      	nop			; (mov r8, r8)
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b002      	add	sp, #8
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fb4:	46c0      	nop			; (mov r8, r8)
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	b002      	add	sp, #8
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a33      	ldr	r2, [pc, #204]	; (800409c <TIM_Base_SetConfig+0xe0>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d007      	beq.n	8003fe4 <TIM_Base_SetConfig+0x28>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a32      	ldr	r2, [pc, #200]	; (80040a0 <TIM_Base_SetConfig+0xe4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d003      	beq.n	8003fe4 <TIM_Base_SetConfig+0x28>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a31      	ldr	r2, [pc, #196]	; (80040a4 <TIM_Base_SetConfig+0xe8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d108      	bne.n	8003ff6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2270      	movs	r2, #112	; 0x70
 8003fe8:	4393      	bics	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a28      	ldr	r2, [pc, #160]	; (800409c <TIM_Base_SetConfig+0xe0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d017      	beq.n	800402e <TIM_Base_SetConfig+0x72>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a27      	ldr	r2, [pc, #156]	; (80040a0 <TIM_Base_SetConfig+0xe4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <TIM_Base_SetConfig+0x72>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a26      	ldr	r2, [pc, #152]	; (80040a4 <TIM_Base_SetConfig+0xe8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00f      	beq.n	800402e <TIM_Base_SetConfig+0x72>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a25      	ldr	r2, [pc, #148]	; (80040a8 <TIM_Base_SetConfig+0xec>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00b      	beq.n	800402e <TIM_Base_SetConfig+0x72>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a24      	ldr	r2, [pc, #144]	; (80040ac <TIM_Base_SetConfig+0xf0>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d007      	beq.n	800402e <TIM_Base_SetConfig+0x72>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a23      	ldr	r2, [pc, #140]	; (80040b0 <TIM_Base_SetConfig+0xf4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d003      	beq.n	800402e <TIM_Base_SetConfig+0x72>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a22      	ldr	r2, [pc, #136]	; (80040b4 <TIM_Base_SetConfig+0xf8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d108      	bne.n	8004040 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4a21      	ldr	r2, [pc, #132]	; (80040b8 <TIM_Base_SetConfig+0xfc>)
 8004032:	4013      	ands	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4313      	orrs	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2280      	movs	r2, #128	; 0x80
 8004044:	4393      	bics	r3, r2
 8004046:	001a      	movs	r2, r3
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	4313      	orrs	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a0c      	ldr	r2, [pc, #48]	; (800409c <TIM_Base_SetConfig+0xe0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00b      	beq.n	8004086 <TIM_Base_SetConfig+0xca>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a0e      	ldr	r2, [pc, #56]	; (80040ac <TIM_Base_SetConfig+0xf0>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d007      	beq.n	8004086 <TIM_Base_SetConfig+0xca>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a0d      	ldr	r2, [pc, #52]	; (80040b0 <TIM_Base_SetConfig+0xf4>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d003      	beq.n	8004086 <TIM_Base_SetConfig+0xca>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a0c      	ldr	r2, [pc, #48]	; (80040b4 <TIM_Base_SetConfig+0xf8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d103      	bne.n	800408e <TIM_Base_SetConfig+0xd2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	615a      	str	r2, [r3, #20]
}
 8004094:	46c0      	nop			; (mov r8, r8)
 8004096:	46bd      	mov	sp, r7
 8004098:	b004      	add	sp, #16
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	40000400 	.word	0x40000400
 80040a4:	40000800 	.word	0x40000800
 80040a8:	40002000 	.word	0x40002000
 80040ac:	40014000 	.word	0x40014000
 80040b0:	40014400 	.word	0x40014400
 80040b4:	40014800 	.word	0x40014800
 80040b8:	fffffcff 	.word	0xfffffcff

080040bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	2201      	movs	r2, #1
 80040d4:	4393      	bics	r3, r2
 80040d6:	001a      	movs	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	22f0      	movs	r2, #240	; 0xf0
 80040e6:	4393      	bics	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	220a      	movs	r2, #10
 80040f8:	4393      	bics	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	4313      	orrs	r3, r2
 8004102:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	621a      	str	r2, [r3, #32]
}
 8004110:	46c0      	nop			; (mov r8, r8)
 8004112:	46bd      	mov	sp, r7
 8004114:	b006      	add	sp, #24
 8004116:	bd80      	pop	{r7, pc}

08004118 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	2210      	movs	r2, #16
 800412a:	4393      	bics	r3, r2
 800412c:	001a      	movs	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	4a0d      	ldr	r2, [pc, #52]	; (8004178 <TIM_TI2_ConfigInputStage+0x60>)
 8004142:	4013      	ands	r3, r2
 8004144:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	031b      	lsls	r3, r3, #12
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	22a0      	movs	r2, #160	; 0xa0
 8004154:	4393      	bics	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	621a      	str	r2, [r3, #32]
}
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	46bd      	mov	sp, r7
 8004172:	b006      	add	sp, #24
 8004174:	bd80      	pop	{r7, pc}
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	ffff0fff 	.word	0xffff0fff

0800417c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4a08      	ldr	r2, [pc, #32]	; (80041b0 <TIM_ITRx_SetConfig+0x34>)
 8004190:	4013      	ands	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4313      	orrs	r3, r2
 800419a:	2207      	movs	r2, #7
 800419c:	4313      	orrs	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	609a      	str	r2, [r3, #8]
}
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	46bd      	mov	sp, r7
 80041aa:	b004      	add	sp, #16
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	ffcfff8f 	.word	0xffcfff8f

080041b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	4a09      	ldr	r2, [pc, #36]	; (80041f0 <TIM_ETR_SetConfig+0x3c>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	021a      	lsls	r2, r3, #8
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	431a      	orrs	r2, r3
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4313      	orrs	r3, r2
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	609a      	str	r2, [r3, #8]
}
 80041e8:	46c0      	nop			; (mov r8, r8)
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b006      	add	sp, #24
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	ffff00ff 	.word	0xffff00ff

080041f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	223c      	movs	r2, #60	; 0x3c
 8004202:	5c9b      	ldrb	r3, [r3, r2]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d101      	bne.n	800420c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004208:	2302      	movs	r3, #2
 800420a:	e054      	b.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	223c      	movs	r2, #60	; 0x3c
 8004210:	2101      	movs	r1, #1
 8004212:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	223d      	movs	r2, #61	; 0x3d
 8004218:	2102      	movs	r1, #2
 800421a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a23      	ldr	r2, [pc, #140]	; (80042c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d108      	bne.n	8004248 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4a22      	ldr	r2, [pc, #136]	; (80042c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800423a:	4013      	ands	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	4313      	orrs	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2270      	movs	r2, #112	; 0x70
 800424c:	4393      	bics	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a16      	ldr	r2, [pc, #88]	; (80042c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d00e      	beq.n	800428a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a15      	ldr	r2, [pc, #84]	; (80042c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d009      	beq.n	800428a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a14      	ldr	r2, [pc, #80]	; (80042cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d004      	beq.n	800428a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a12      	ldr	r2, [pc, #72]	; (80042d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d10c      	bne.n	80042a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2280      	movs	r2, #128	; 0x80
 800428e:	4393      	bics	r3, r2
 8004290:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	4313      	orrs	r3, r2
 800429a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	223d      	movs	r2, #61	; 0x3d
 80042a8:	2101      	movs	r1, #1
 80042aa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	223c      	movs	r2, #60	; 0x3c
 80042b0:	2100      	movs	r1, #0
 80042b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	0018      	movs	r0, r3
 80042b8:	46bd      	mov	sp, r7
 80042ba:	b004      	add	sp, #16
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	40012c00 	.word	0x40012c00
 80042c4:	ff0fffff 	.word	0xff0fffff
 80042c8:	40000400 	.word	0x40000400
 80042cc:	40000800 	.word	0x40000800
 80042d0:	40014000 	.word	0x40014000

080042d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042dc:	46c0      	nop			; (mov r8, r8)
 80042de:	46bd      	mov	sp, r7
 80042e0:	b002      	add	sp, #8
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042ec:	46c0      	nop			; (mov r8, r8)
 80042ee:	46bd      	mov	sp, r7
 80042f0:	b002      	add	sp, #8
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042fc:	46c0      	nop			; (mov r8, r8)
 80042fe:	46bd      	mov	sp, r7
 8004300:	b002      	add	sp, #8
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e046      	b.n	80043a4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2288      	movs	r2, #136	; 0x88
 800431a:	589b      	ldr	r3, [r3, r2]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d107      	bne.n	8004330 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2284      	movs	r2, #132	; 0x84
 8004324:	2100      	movs	r1, #0
 8004326:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	0018      	movs	r0, r3
 800432c:	f7fd fcfe 	bl	8001d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2288      	movs	r2, #136	; 0x88
 8004334:	2124      	movs	r1, #36	; 0x24
 8004336:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2101      	movs	r1, #1
 8004344:	438a      	bics	r2, r1
 8004346:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	0018      	movs	r0, r3
 800434c:	f000 fcec 	bl	8004d28 <UART_SetConfig>
 8004350:	0003      	movs	r3, r0
 8004352:	2b01      	cmp	r3, #1
 8004354:	d101      	bne.n	800435a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e024      	b.n	80043a4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	0018      	movs	r0, r3
 8004366:	f000 fec1 	bl	80050ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	490d      	ldr	r1, [pc, #52]	; (80043ac <HAL_UART_Init+0xa8>)
 8004376:	400a      	ands	r2, r1
 8004378:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	212a      	movs	r1, #42	; 0x2a
 8004386:	438a      	bics	r2, r1
 8004388:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2101      	movs	r1, #1
 8004396:	430a      	orrs	r2, r1
 8004398:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	0018      	movs	r0, r3
 800439e:	f000 ff59 	bl	8005254 <UART_CheckIdleState>
 80043a2:	0003      	movs	r3, r0
}
 80043a4:	0018      	movs	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	b002      	add	sp, #8
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	ffffb7ff 	.word	0xffffb7ff

080043b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08a      	sub	sp, #40	; 0x28
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	603b      	str	r3, [r7, #0]
 80043bc:	1dbb      	adds	r3, r7, #6
 80043be:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2288      	movs	r2, #136	; 0x88
 80043c4:	589b      	ldr	r3, [r3, r2]
 80043c6:	2b20      	cmp	r3, #32
 80043c8:	d000      	beq.n	80043cc <HAL_UART_Transmit+0x1c>
 80043ca:	e088      	b.n	80044de <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_UART_Transmit+0x2a>
 80043d2:	1dbb      	adds	r3, r7, #6
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e080      	b.n	80044e0 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	2380      	movs	r3, #128	; 0x80
 80043e4:	015b      	lsls	r3, r3, #5
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d109      	bne.n	80043fe <HAL_UART_Transmit+0x4e>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d105      	bne.n	80043fe <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2201      	movs	r2, #1
 80043f6:	4013      	ands	r3, r2
 80043f8:	d001      	beq.n	80043fe <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e070      	b.n	80044e0 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2290      	movs	r2, #144	; 0x90
 8004402:	2100      	movs	r1, #0
 8004404:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2288      	movs	r2, #136	; 0x88
 800440a:	2121      	movs	r1, #33	; 0x21
 800440c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800440e:	f7fd fedb 	bl	80021c8 <HAL_GetTick>
 8004412:	0003      	movs	r3, r0
 8004414:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	1dba      	adds	r2, r7, #6
 800441a:	2154      	movs	r1, #84	; 0x54
 800441c:	8812      	ldrh	r2, [r2, #0]
 800441e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	1dba      	adds	r2, r7, #6
 8004424:	2156      	movs	r1, #86	; 0x56
 8004426:	8812      	ldrh	r2, [r2, #0]
 8004428:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	2380      	movs	r3, #128	; 0x80
 8004430:	015b      	lsls	r3, r3, #5
 8004432:	429a      	cmp	r2, r3
 8004434:	d108      	bne.n	8004448 <HAL_UART_Transmit+0x98>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d104      	bne.n	8004448 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800443e:	2300      	movs	r3, #0
 8004440:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	61bb      	str	r3, [r7, #24]
 8004446:	e003      	b.n	8004450 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800444c:	2300      	movs	r3, #0
 800444e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004450:	e02c      	b.n	80044ac <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	0013      	movs	r3, r2
 800445c:	2200      	movs	r2, #0
 800445e:	2180      	movs	r1, #128	; 0x80
 8004460:	f000 ff46 	bl	80052f0 <UART_WaitOnFlagUntilTimeout>
 8004464:	1e03      	subs	r3, r0, #0
 8004466:	d001      	beq.n	800446c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e039      	b.n	80044e0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10b      	bne.n	800448a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	001a      	movs	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	05d2      	lsls	r2, r2, #23
 800447e:	0dd2      	lsrs	r2, r2, #23
 8004480:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	3302      	adds	r3, #2
 8004486:	61bb      	str	r3, [r7, #24]
 8004488:	e007      	b.n	800449a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	781a      	ldrb	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	3301      	adds	r3, #1
 8004498:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2256      	movs	r2, #86	; 0x56
 800449e:	5a9b      	ldrh	r3, [r3, r2]
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b299      	uxth	r1, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2256      	movs	r2, #86	; 0x56
 80044aa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2256      	movs	r2, #86	; 0x56
 80044b0:	5a9b      	ldrh	r3, [r3, r2]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1cc      	bne.n	8004452 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	0013      	movs	r3, r2
 80044c2:	2200      	movs	r2, #0
 80044c4:	2140      	movs	r1, #64	; 0x40
 80044c6:	f000 ff13 	bl	80052f0 <UART_WaitOnFlagUntilTimeout>
 80044ca:	1e03      	subs	r3, r0, #0
 80044cc:	d001      	beq.n	80044d2 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e006      	b.n	80044e0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2288      	movs	r2, #136	; 0x88
 80044d6:	2120      	movs	r1, #32
 80044d8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	e000      	b.n	80044e0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80044de:	2302      	movs	r3, #2
  }
}
 80044e0:	0018      	movs	r0, r3
 80044e2:	46bd      	mov	sp, r7
 80044e4:	b008      	add	sp, #32
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08a      	sub	sp, #40	; 0x28
 80044ec:	af02      	add	r7, sp, #8
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	603b      	str	r3, [r7, #0]
 80044f4:	1dbb      	adds	r3, r7, #6
 80044f6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	228c      	movs	r2, #140	; 0x8c
 80044fc:	589b      	ldr	r3, [r3, r2]
 80044fe:	2b20      	cmp	r3, #32
 8004500:	d000      	beq.n	8004504 <HAL_UART_Receive+0x1c>
 8004502:	e0cc      	b.n	800469e <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_UART_Receive+0x2a>
 800450a:	1dbb      	adds	r3, r7, #6
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e0c4      	b.n	80046a0 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	2380      	movs	r3, #128	; 0x80
 800451c:	015b      	lsls	r3, r3, #5
 800451e:	429a      	cmp	r2, r3
 8004520:	d109      	bne.n	8004536 <HAL_UART_Receive+0x4e>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d105      	bne.n	8004536 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2201      	movs	r2, #1
 800452e:	4013      	ands	r3, r2
 8004530:	d001      	beq.n	8004536 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e0b4      	b.n	80046a0 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2290      	movs	r2, #144	; 0x90
 800453a:	2100      	movs	r1, #0
 800453c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	228c      	movs	r2, #140	; 0x8c
 8004542:	2122      	movs	r1, #34	; 0x22
 8004544:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800454c:	f7fd fe3c 	bl	80021c8 <HAL_GetTick>
 8004550:	0003      	movs	r3, r0
 8004552:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	1dba      	adds	r2, r7, #6
 8004558:	215c      	movs	r1, #92	; 0x5c
 800455a:	8812      	ldrh	r2, [r2, #0]
 800455c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	1dba      	adds	r2, r7, #6
 8004562:	215e      	movs	r1, #94	; 0x5e
 8004564:	8812      	ldrh	r2, [r2, #0]
 8004566:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	2380      	movs	r3, #128	; 0x80
 800456e:	015b      	lsls	r3, r3, #5
 8004570:	429a      	cmp	r2, r3
 8004572:	d10d      	bne.n	8004590 <HAL_UART_Receive+0xa8>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d104      	bne.n	8004586 <HAL_UART_Receive+0x9e>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2260      	movs	r2, #96	; 0x60
 8004580:	4949      	ldr	r1, [pc, #292]	; (80046a8 <HAL_UART_Receive+0x1c0>)
 8004582:	5299      	strh	r1, [r3, r2]
 8004584:	e02e      	b.n	80045e4 <HAL_UART_Receive+0xfc>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2260      	movs	r2, #96	; 0x60
 800458a:	21ff      	movs	r1, #255	; 0xff
 800458c:	5299      	strh	r1, [r3, r2]
 800458e:	e029      	b.n	80045e4 <HAL_UART_Receive+0xfc>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10d      	bne.n	80045b4 <HAL_UART_Receive+0xcc>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d104      	bne.n	80045aa <HAL_UART_Receive+0xc2>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2260      	movs	r2, #96	; 0x60
 80045a4:	21ff      	movs	r1, #255	; 0xff
 80045a6:	5299      	strh	r1, [r3, r2]
 80045a8:	e01c      	b.n	80045e4 <HAL_UART_Receive+0xfc>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2260      	movs	r2, #96	; 0x60
 80045ae:	217f      	movs	r1, #127	; 0x7f
 80045b0:	5299      	strh	r1, [r3, r2]
 80045b2:	e017      	b.n	80045e4 <HAL_UART_Receive+0xfc>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	2380      	movs	r3, #128	; 0x80
 80045ba:	055b      	lsls	r3, r3, #21
 80045bc:	429a      	cmp	r2, r3
 80045be:	d10d      	bne.n	80045dc <HAL_UART_Receive+0xf4>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d104      	bne.n	80045d2 <HAL_UART_Receive+0xea>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2260      	movs	r2, #96	; 0x60
 80045cc:	217f      	movs	r1, #127	; 0x7f
 80045ce:	5299      	strh	r1, [r3, r2]
 80045d0:	e008      	b.n	80045e4 <HAL_UART_Receive+0xfc>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2260      	movs	r2, #96	; 0x60
 80045d6:	213f      	movs	r1, #63	; 0x3f
 80045d8:	5299      	strh	r1, [r3, r2]
 80045da:	e003      	b.n	80045e4 <HAL_UART_Receive+0xfc>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2260      	movs	r2, #96	; 0x60
 80045e0:	2100      	movs	r1, #0
 80045e2:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80045e4:	2312      	movs	r3, #18
 80045e6:	18fb      	adds	r3, r7, r3
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	2160      	movs	r1, #96	; 0x60
 80045ec:	5a52      	ldrh	r2, [r2, r1]
 80045ee:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	2380      	movs	r3, #128	; 0x80
 80045f6:	015b      	lsls	r3, r3, #5
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d108      	bne.n	800460e <HAL_UART_Receive+0x126>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d104      	bne.n	800460e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8004604:	2300      	movs	r3, #0
 8004606:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	61bb      	str	r3, [r7, #24]
 800460c:	e003      	b.n	8004616 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004612:	2300      	movs	r3, #0
 8004614:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004616:	e036      	b.n	8004686 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	0013      	movs	r3, r2
 8004622:	2200      	movs	r2, #0
 8004624:	2120      	movs	r1, #32
 8004626:	f000 fe63 	bl	80052f0 <UART_WaitOnFlagUntilTimeout>
 800462a:	1e03      	subs	r3, r0, #0
 800462c:	d001      	beq.n	8004632 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e036      	b.n	80046a0 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10e      	bne.n	8004656 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	b29b      	uxth	r3, r3
 8004640:	2212      	movs	r2, #18
 8004642:	18ba      	adds	r2, r7, r2
 8004644:	8812      	ldrh	r2, [r2, #0]
 8004646:	4013      	ands	r3, r2
 8004648:	b29a      	uxth	r2, r3
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	3302      	adds	r3, #2
 8004652:	61bb      	str	r3, [r7, #24]
 8004654:	e00e      	b.n	8004674 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2212      	movs	r2, #18
 8004660:	18ba      	adds	r2, r7, r2
 8004662:	8812      	ldrh	r2, [r2, #0]
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	4013      	ands	r3, r2
 8004668:	b2da      	uxtb	r2, r3
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	3301      	adds	r3, #1
 8004672:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	225e      	movs	r2, #94	; 0x5e
 8004678:	5a9b      	ldrh	r3, [r3, r2]
 800467a:	b29b      	uxth	r3, r3
 800467c:	3b01      	subs	r3, #1
 800467e:	b299      	uxth	r1, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	225e      	movs	r2, #94	; 0x5e
 8004684:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	225e      	movs	r2, #94	; 0x5e
 800468a:	5a9b      	ldrh	r3, [r3, r2]
 800468c:	b29b      	uxth	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1c2      	bne.n	8004618 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	228c      	movs	r2, #140	; 0x8c
 8004696:	2120      	movs	r1, #32
 8004698:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	e000      	b.n	80046a0 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 800469e:	2302      	movs	r3, #2
  }
}
 80046a0:	0018      	movs	r0, r3
 80046a2:	46bd      	mov	sp, r7
 80046a4:	b008      	add	sp, #32
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	000001ff 	.word	0x000001ff

080046ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046ac:	b5b0      	push	{r4, r5, r7, lr}
 80046ae:	b0aa      	sub	sp, #168	; 0xa8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	22a4      	movs	r2, #164	; 0xa4
 80046bc:	18b9      	adds	r1, r7, r2
 80046be:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	20a0      	movs	r0, #160	; 0xa0
 80046c8:	1839      	adds	r1, r7, r0
 80046ca:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	249c      	movs	r4, #156	; 0x9c
 80046d4:	1939      	adds	r1, r7, r4
 80046d6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046d8:	0011      	movs	r1, r2
 80046da:	18bb      	adds	r3, r7, r2
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4aa2      	ldr	r2, [pc, #648]	; (8004968 <HAL_UART_IRQHandler+0x2bc>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	2298      	movs	r2, #152	; 0x98
 80046e4:	18bd      	adds	r5, r7, r2
 80046e6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80046e8:	18bb      	adds	r3, r7, r2
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d11a      	bne.n	8004726 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80046f0:	187b      	adds	r3, r7, r1
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2220      	movs	r2, #32
 80046f6:	4013      	ands	r3, r2
 80046f8:	d015      	beq.n	8004726 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80046fa:	183b      	adds	r3, r7, r0
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2220      	movs	r2, #32
 8004700:	4013      	ands	r3, r2
 8004702:	d105      	bne.n	8004710 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004704:	193b      	adds	r3, r7, r4
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	2380      	movs	r3, #128	; 0x80
 800470a:	055b      	lsls	r3, r3, #21
 800470c:	4013      	ands	r3, r2
 800470e:	d00a      	beq.n	8004726 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004714:	2b00      	cmp	r3, #0
 8004716:	d100      	bne.n	800471a <HAL_UART_IRQHandler+0x6e>
 8004718:	e2dc      	b.n	8004cd4 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	0010      	movs	r0, r2
 8004722:	4798      	blx	r3
      }
      return;
 8004724:	e2d6      	b.n	8004cd4 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004726:	2398      	movs	r3, #152	; 0x98
 8004728:	18fb      	adds	r3, r7, r3
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d100      	bne.n	8004732 <HAL_UART_IRQHandler+0x86>
 8004730:	e122      	b.n	8004978 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004732:	239c      	movs	r3, #156	; 0x9c
 8004734:	18fb      	adds	r3, r7, r3
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a8c      	ldr	r2, [pc, #560]	; (800496c <HAL_UART_IRQHandler+0x2c0>)
 800473a:	4013      	ands	r3, r2
 800473c:	d106      	bne.n	800474c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800473e:	23a0      	movs	r3, #160	; 0xa0
 8004740:	18fb      	adds	r3, r7, r3
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a8a      	ldr	r2, [pc, #552]	; (8004970 <HAL_UART_IRQHandler+0x2c4>)
 8004746:	4013      	ands	r3, r2
 8004748:	d100      	bne.n	800474c <HAL_UART_IRQHandler+0xa0>
 800474a:	e115      	b.n	8004978 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800474c:	23a4      	movs	r3, #164	; 0xa4
 800474e:	18fb      	adds	r3, r7, r3
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2201      	movs	r2, #1
 8004754:	4013      	ands	r3, r2
 8004756:	d012      	beq.n	800477e <HAL_UART_IRQHandler+0xd2>
 8004758:	23a0      	movs	r3, #160	; 0xa0
 800475a:	18fb      	adds	r3, r7, r3
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	2380      	movs	r3, #128	; 0x80
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	4013      	ands	r3, r2
 8004764:	d00b      	beq.n	800477e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2201      	movs	r2, #1
 800476c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2290      	movs	r2, #144	; 0x90
 8004772:	589b      	ldr	r3, [r3, r2]
 8004774:	2201      	movs	r2, #1
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2190      	movs	r1, #144	; 0x90
 800477c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800477e:	23a4      	movs	r3, #164	; 0xa4
 8004780:	18fb      	adds	r3, r7, r3
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2202      	movs	r2, #2
 8004786:	4013      	ands	r3, r2
 8004788:	d011      	beq.n	80047ae <HAL_UART_IRQHandler+0x102>
 800478a:	239c      	movs	r3, #156	; 0x9c
 800478c:	18fb      	adds	r3, r7, r3
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2201      	movs	r2, #1
 8004792:	4013      	ands	r3, r2
 8004794:	d00b      	beq.n	80047ae <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2202      	movs	r2, #2
 800479c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2290      	movs	r2, #144	; 0x90
 80047a2:	589b      	ldr	r3, [r3, r2]
 80047a4:	2204      	movs	r2, #4
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2190      	movs	r1, #144	; 0x90
 80047ac:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047ae:	23a4      	movs	r3, #164	; 0xa4
 80047b0:	18fb      	adds	r3, r7, r3
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2204      	movs	r2, #4
 80047b6:	4013      	ands	r3, r2
 80047b8:	d011      	beq.n	80047de <HAL_UART_IRQHandler+0x132>
 80047ba:	239c      	movs	r3, #156	; 0x9c
 80047bc:	18fb      	adds	r3, r7, r3
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2201      	movs	r2, #1
 80047c2:	4013      	ands	r3, r2
 80047c4:	d00b      	beq.n	80047de <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2204      	movs	r2, #4
 80047cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2290      	movs	r2, #144	; 0x90
 80047d2:	589b      	ldr	r3, [r3, r2]
 80047d4:	2202      	movs	r2, #2
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2190      	movs	r1, #144	; 0x90
 80047dc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047de:	23a4      	movs	r3, #164	; 0xa4
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2208      	movs	r2, #8
 80047e6:	4013      	ands	r3, r2
 80047e8:	d017      	beq.n	800481a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80047ea:	23a0      	movs	r3, #160	; 0xa0
 80047ec:	18fb      	adds	r3, r7, r3
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2220      	movs	r2, #32
 80047f2:	4013      	ands	r3, r2
 80047f4:	d105      	bne.n	8004802 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80047f6:	239c      	movs	r3, #156	; 0x9c
 80047f8:	18fb      	adds	r3, r7, r3
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a5b      	ldr	r2, [pc, #364]	; (800496c <HAL_UART_IRQHandler+0x2c0>)
 80047fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004800:	d00b      	beq.n	800481a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2208      	movs	r2, #8
 8004808:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2290      	movs	r2, #144	; 0x90
 800480e:	589b      	ldr	r3, [r3, r2]
 8004810:	2208      	movs	r2, #8
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2190      	movs	r1, #144	; 0x90
 8004818:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800481a:	23a4      	movs	r3, #164	; 0xa4
 800481c:	18fb      	adds	r3, r7, r3
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	2380      	movs	r3, #128	; 0x80
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	4013      	ands	r3, r2
 8004826:	d013      	beq.n	8004850 <HAL_UART_IRQHandler+0x1a4>
 8004828:	23a0      	movs	r3, #160	; 0xa0
 800482a:	18fb      	adds	r3, r7, r3
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	2380      	movs	r3, #128	; 0x80
 8004830:	04db      	lsls	r3, r3, #19
 8004832:	4013      	ands	r3, r2
 8004834:	d00c      	beq.n	8004850 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2280      	movs	r2, #128	; 0x80
 800483c:	0112      	lsls	r2, r2, #4
 800483e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2290      	movs	r2, #144	; 0x90
 8004844:	589b      	ldr	r3, [r3, r2]
 8004846:	2220      	movs	r2, #32
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2190      	movs	r1, #144	; 0x90
 800484e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2290      	movs	r2, #144	; 0x90
 8004854:	589b      	ldr	r3, [r3, r2]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d100      	bne.n	800485c <HAL_UART_IRQHandler+0x1b0>
 800485a:	e23d      	b.n	8004cd8 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800485c:	23a4      	movs	r3, #164	; 0xa4
 800485e:	18fb      	adds	r3, r7, r3
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2220      	movs	r2, #32
 8004864:	4013      	ands	r3, r2
 8004866:	d015      	beq.n	8004894 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004868:	23a0      	movs	r3, #160	; 0xa0
 800486a:	18fb      	adds	r3, r7, r3
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2220      	movs	r2, #32
 8004870:	4013      	ands	r3, r2
 8004872:	d106      	bne.n	8004882 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004874:	239c      	movs	r3, #156	; 0x9c
 8004876:	18fb      	adds	r3, r7, r3
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	2380      	movs	r3, #128	; 0x80
 800487c:	055b      	lsls	r3, r3, #21
 800487e:	4013      	ands	r3, r2
 8004880:	d008      	beq.n	8004894 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004886:	2b00      	cmp	r3, #0
 8004888:	d004      	beq.n	8004894 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	0010      	movs	r0, r2
 8004892:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2290      	movs	r2, #144	; 0x90
 8004898:	589b      	ldr	r3, [r3, r2]
 800489a:	2194      	movs	r1, #148	; 0x94
 800489c:	187a      	adds	r2, r7, r1
 800489e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	2240      	movs	r2, #64	; 0x40
 80048a8:	4013      	ands	r3, r2
 80048aa:	2b40      	cmp	r3, #64	; 0x40
 80048ac:	d004      	beq.n	80048b8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80048ae:	187b      	adds	r3, r7, r1
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2228      	movs	r2, #40	; 0x28
 80048b4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048b6:	d04c      	beq.n	8004952 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	0018      	movs	r0, r3
 80048bc:	f000 ff04 	bl	80056c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	2240      	movs	r2, #64	; 0x40
 80048c8:	4013      	ands	r3, r2
 80048ca:	2b40      	cmp	r3, #64	; 0x40
 80048cc:	d13c      	bne.n	8004948 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ce:	f3ef 8310 	mrs	r3, PRIMASK
 80048d2:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80048d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048d6:	2090      	movs	r0, #144	; 0x90
 80048d8:	183a      	adds	r2, r7, r0
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	2301      	movs	r3, #1
 80048de:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048e2:	f383 8810 	msr	PRIMASK, r3
}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2140      	movs	r1, #64	; 0x40
 80048f4:	438a      	bics	r2, r1
 80048f6:	609a      	str	r2, [r3, #8]
 80048f8:	183b      	adds	r3, r7, r0
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004900:	f383 8810 	msr	PRIMASK, r3
}
 8004904:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2280      	movs	r2, #128	; 0x80
 800490a:	589b      	ldr	r3, [r3, r2]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d016      	beq.n	800493e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2280      	movs	r2, #128	; 0x80
 8004914:	589b      	ldr	r3, [r3, r2]
 8004916:	4a17      	ldr	r2, [pc, #92]	; (8004974 <HAL_UART_IRQHandler+0x2c8>)
 8004918:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2280      	movs	r2, #128	; 0x80
 800491e:	589b      	ldr	r3, [r3, r2]
 8004920:	0018      	movs	r0, r3
 8004922:	f7fd fdd3 	bl	80024cc <HAL_DMA_Abort_IT>
 8004926:	1e03      	subs	r3, r0, #0
 8004928:	d01c      	beq.n	8004964 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2280      	movs	r2, #128	; 0x80
 800492e:	589b      	ldr	r3, [r3, r2]
 8004930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	2180      	movs	r1, #128	; 0x80
 8004936:	5852      	ldr	r2, [r2, r1]
 8004938:	0010      	movs	r0, r2
 800493a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800493c:	e012      	b.n	8004964 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	0018      	movs	r0, r3
 8004942:	f000 f9e9 	bl	8004d18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004946:	e00d      	b.n	8004964 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	0018      	movs	r0, r3
 800494c:	f000 f9e4 	bl	8004d18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004950:	e008      	b.n	8004964 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	0018      	movs	r0, r3
 8004956:	f000 f9df 	bl	8004d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2290      	movs	r2, #144	; 0x90
 800495e:	2100      	movs	r1, #0
 8004960:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004962:	e1b9      	b.n	8004cd8 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004964:	46c0      	nop			; (mov r8, r8)
    return;
 8004966:	e1b7      	b.n	8004cd8 <HAL_UART_IRQHandler+0x62c>
 8004968:	0000080f 	.word	0x0000080f
 800496c:	10000001 	.word	0x10000001
 8004970:	04000120 	.word	0x04000120
 8004974:	08005795 	.word	0x08005795

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800497c:	2b01      	cmp	r3, #1
 800497e:	d000      	beq.n	8004982 <HAL_UART_IRQHandler+0x2d6>
 8004980:	e13e      	b.n	8004c00 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004982:	23a4      	movs	r3, #164	; 0xa4
 8004984:	18fb      	adds	r3, r7, r3
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2210      	movs	r2, #16
 800498a:	4013      	ands	r3, r2
 800498c:	d100      	bne.n	8004990 <HAL_UART_IRQHandler+0x2e4>
 800498e:	e137      	b.n	8004c00 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004990:	23a0      	movs	r3, #160	; 0xa0
 8004992:	18fb      	adds	r3, r7, r3
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2210      	movs	r2, #16
 8004998:	4013      	ands	r3, r2
 800499a:	d100      	bne.n	800499e <HAL_UART_IRQHandler+0x2f2>
 800499c:	e130      	b.n	8004c00 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2210      	movs	r2, #16
 80049a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	2240      	movs	r2, #64	; 0x40
 80049ae:	4013      	ands	r3, r2
 80049b0:	2b40      	cmp	r3, #64	; 0x40
 80049b2:	d000      	beq.n	80049b6 <HAL_UART_IRQHandler+0x30a>
 80049b4:	e0a4      	b.n	8004b00 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2280      	movs	r2, #128	; 0x80
 80049ba:	589b      	ldr	r3, [r3, r2]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	217e      	movs	r1, #126	; 0x7e
 80049c2:	187b      	adds	r3, r7, r1
 80049c4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80049c6:	187b      	adds	r3, r7, r1
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d100      	bne.n	80049d0 <HAL_UART_IRQHandler+0x324>
 80049ce:	e185      	b.n	8004cdc <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	225c      	movs	r2, #92	; 0x5c
 80049d4:	5a9b      	ldrh	r3, [r3, r2]
 80049d6:	187a      	adds	r2, r7, r1
 80049d8:	8812      	ldrh	r2, [r2, #0]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d300      	bcc.n	80049e0 <HAL_UART_IRQHandler+0x334>
 80049de:	e17d      	b.n	8004cdc <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	187a      	adds	r2, r7, r1
 80049e4:	215e      	movs	r1, #94	; 0x5e
 80049e6:	8812      	ldrh	r2, [r2, #0]
 80049e8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2280      	movs	r2, #128	; 0x80
 80049ee:	589b      	ldr	r3, [r3, r2]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2220      	movs	r2, #32
 80049f6:	4013      	ands	r3, r2
 80049f8:	d170      	bne.n	8004adc <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049fa:	f3ef 8310 	mrs	r3, PRIMASK
 80049fe:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a02:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a04:	2301      	movs	r3, #1
 8004a06:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a0a:	f383 8810 	msr	PRIMASK, r3
}
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	49b4      	ldr	r1, [pc, #720]	; (8004cec <HAL_UART_IRQHandler+0x640>)
 8004a1c:	400a      	ands	r2, r1
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a22:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a26:	f383 8810 	msr	PRIMASK, r3
}
 8004a2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a30:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a34:	677b      	str	r3, [r7, #116]	; 0x74
 8004a36:	2301      	movs	r3, #1
 8004a38:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a3c:	f383 8810 	msr	PRIMASK, r3
}
 8004a40:	46c0      	nop			; (mov r8, r8)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	438a      	bics	r2, r1
 8004a50:	609a      	str	r2, [r3, #8]
 8004a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a54:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a58:	f383 8810 	msr	PRIMASK, r3
}
 8004a5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a5e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a62:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a66:	673b      	str	r3, [r7, #112]	; 0x70
 8004a68:	2301      	movs	r3, #1
 8004a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a6e:	f383 8810 	msr	PRIMASK, r3
}
 8004a72:	46c0      	nop			; (mov r8, r8)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689a      	ldr	r2, [r3, #8]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2140      	movs	r1, #64	; 0x40
 8004a80:	438a      	bics	r2, r1
 8004a82:	609a      	str	r2, [r3, #8]
 8004a84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a86:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a8a:	f383 8810 	msr	PRIMASK, r3
}
 8004a8e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	228c      	movs	r2, #140	; 0x8c
 8004a94:	2120      	movs	r1, #32
 8004a96:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004aa2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004aae:	f383 8810 	msr	PRIMASK, r3
}
 8004ab2:	46c0      	nop			; (mov r8, r8)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2110      	movs	r1, #16
 8004ac0:	438a      	bics	r2, r1
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ac8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aca:	f383 8810 	msr	PRIMASK, r3
}
 8004ace:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2280      	movs	r2, #128	; 0x80
 8004ad4:	589b      	ldr	r3, [r3, r2]
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	f7fd fc98 	bl	800240c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	225c      	movs	r2, #92	; 0x5c
 8004ae6:	5a9a      	ldrh	r2, [r3, r2]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	215e      	movs	r1, #94	; 0x5e
 8004aec:	5a5b      	ldrh	r3, [r3, r1]
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	0011      	movs	r1, r2
 8004af8:	0018      	movs	r0, r3
 8004afa:	f7fb fd75 	bl	80005e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004afe:	e0ed      	b.n	8004cdc <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	225c      	movs	r2, #92	; 0x5c
 8004b04:	5a99      	ldrh	r1, [r3, r2]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	225e      	movs	r2, #94	; 0x5e
 8004b0a:	5a9b      	ldrh	r3, [r3, r2]
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	208e      	movs	r0, #142	; 0x8e
 8004b10:	183b      	adds	r3, r7, r0
 8004b12:	1a8a      	subs	r2, r1, r2
 8004b14:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	225e      	movs	r2, #94	; 0x5e
 8004b1a:	5a9b      	ldrh	r3, [r3, r2]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d100      	bne.n	8004b24 <HAL_UART_IRQHandler+0x478>
 8004b22:	e0dd      	b.n	8004ce0 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004b24:	183b      	adds	r3, r7, r0
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d100      	bne.n	8004b2e <HAL_UART_IRQHandler+0x482>
 8004b2c:	e0d8      	b.n	8004ce0 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b32:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b34:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b36:	2488      	movs	r4, #136	; 0x88
 8004b38:	193a      	adds	r2, r7, r4
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f383 8810 	msr	PRIMASK, r3
}
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4967      	ldr	r1, [pc, #412]	; (8004cf0 <HAL_UART_IRQHandler+0x644>)
 8004b54:	400a      	ands	r2, r1
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	193b      	adds	r3, r7, r4
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f383 8810 	msr	PRIMASK, r3
}
 8004b64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b66:	f3ef 8310 	mrs	r3, PRIMASK
 8004b6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b6c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b6e:	2484      	movs	r4, #132	; 0x84
 8004b70:	193a      	adds	r2, r7, r4
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	2301      	movs	r3, #1
 8004b76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	f383 8810 	msr	PRIMASK, r3
}
 8004b7e:	46c0      	nop			; (mov r8, r8)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689a      	ldr	r2, [r3, #8]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	495a      	ldr	r1, [pc, #360]	; (8004cf4 <HAL_UART_IRQHandler+0x648>)
 8004b8c:	400a      	ands	r2, r1
 8004b8e:	609a      	str	r2, [r3, #8]
 8004b90:	193b      	adds	r3, r7, r4
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	f383 8810 	msr	PRIMASK, r3
}
 8004b9c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	228c      	movs	r2, #140	; 0x8c
 8004ba2:	2120      	movs	r1, #32
 8004ba4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bba:	2480      	movs	r4, #128	; 0x80
 8004bbc:	193a      	adds	r2, r7, r4
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc6:	f383 8810 	msr	PRIMASK, r3
}
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2110      	movs	r1, #16
 8004bd8:	438a      	bics	r2, r1
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	193b      	adds	r3, r7, r4
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be4:	f383 8810 	msr	PRIMASK, r3
}
 8004be8:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2202      	movs	r2, #2
 8004bee:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bf0:	183b      	adds	r3, r7, r0
 8004bf2:	881a      	ldrh	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	0011      	movs	r1, r2
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f7fb fcf5 	bl	80005e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bfe:	e06f      	b.n	8004ce0 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c00:	23a4      	movs	r3, #164	; 0xa4
 8004c02:	18fb      	adds	r3, r7, r3
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	2380      	movs	r3, #128	; 0x80
 8004c08:	035b      	lsls	r3, r3, #13
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	d010      	beq.n	8004c30 <HAL_UART_IRQHandler+0x584>
 8004c0e:	239c      	movs	r3, #156	; 0x9c
 8004c10:	18fb      	adds	r3, r7, r3
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	2380      	movs	r3, #128	; 0x80
 8004c16:	03db      	lsls	r3, r3, #15
 8004c18:	4013      	ands	r3, r2
 8004c1a:	d009      	beq.n	8004c30 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2280      	movs	r2, #128	; 0x80
 8004c22:	0352      	lsls	r2, r2, #13
 8004c24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f001 fa57 	bl	80060dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c2e:	e05a      	b.n	8004ce6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004c30:	23a4      	movs	r3, #164	; 0xa4
 8004c32:	18fb      	adds	r3, r7, r3
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2280      	movs	r2, #128	; 0x80
 8004c38:	4013      	ands	r3, r2
 8004c3a:	d016      	beq.n	8004c6a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004c3c:	23a0      	movs	r3, #160	; 0xa0
 8004c3e:	18fb      	adds	r3, r7, r3
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2280      	movs	r2, #128	; 0x80
 8004c44:	4013      	ands	r3, r2
 8004c46:	d106      	bne.n	8004c56 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004c48:	239c      	movs	r3, #156	; 0x9c
 8004c4a:	18fb      	adds	r3, r7, r3
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	2380      	movs	r3, #128	; 0x80
 8004c50:	041b      	lsls	r3, r3, #16
 8004c52:	4013      	ands	r3, r2
 8004c54:	d009      	beq.n	8004c6a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d042      	beq.n	8004ce4 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	0010      	movs	r0, r2
 8004c66:	4798      	blx	r3
    }
    return;
 8004c68:	e03c      	b.n	8004ce4 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c6a:	23a4      	movs	r3, #164	; 0xa4
 8004c6c:	18fb      	adds	r3, r7, r3
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2240      	movs	r2, #64	; 0x40
 8004c72:	4013      	ands	r3, r2
 8004c74:	d00a      	beq.n	8004c8c <HAL_UART_IRQHandler+0x5e0>
 8004c76:	23a0      	movs	r3, #160	; 0xa0
 8004c78:	18fb      	adds	r3, r7, r3
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2240      	movs	r2, #64	; 0x40
 8004c7e:	4013      	ands	r3, r2
 8004c80:	d004      	beq.n	8004c8c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	0018      	movs	r0, r3
 8004c86:	f000 fd9c 	bl	80057c2 <UART_EndTransmit_IT>
    return;
 8004c8a:	e02c      	b.n	8004ce6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004c8c:	23a4      	movs	r3, #164	; 0xa4
 8004c8e:	18fb      	adds	r3, r7, r3
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	2380      	movs	r3, #128	; 0x80
 8004c94:	041b      	lsls	r3, r3, #16
 8004c96:	4013      	ands	r3, r2
 8004c98:	d00b      	beq.n	8004cb2 <HAL_UART_IRQHandler+0x606>
 8004c9a:	23a0      	movs	r3, #160	; 0xa0
 8004c9c:	18fb      	adds	r3, r7, r3
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	2380      	movs	r3, #128	; 0x80
 8004ca2:	05db      	lsls	r3, r3, #23
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	d004      	beq.n	8004cb2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	0018      	movs	r0, r3
 8004cac:	f001 fa26 	bl	80060fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cb0:	e019      	b.n	8004ce6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004cb2:	23a4      	movs	r3, #164	; 0xa4
 8004cb4:	18fb      	adds	r3, r7, r3
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	2380      	movs	r3, #128	; 0x80
 8004cba:	045b      	lsls	r3, r3, #17
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	d012      	beq.n	8004ce6 <HAL_UART_IRQHandler+0x63a>
 8004cc0:	23a0      	movs	r3, #160	; 0xa0
 8004cc2:	18fb      	adds	r3, r7, r3
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	da0d      	bge.n	8004ce6 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	0018      	movs	r0, r3
 8004cce:	f001 fa0d 	bl	80060ec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cd2:	e008      	b.n	8004ce6 <HAL_UART_IRQHandler+0x63a>
      return;
 8004cd4:	46c0      	nop			; (mov r8, r8)
 8004cd6:	e006      	b.n	8004ce6 <HAL_UART_IRQHandler+0x63a>
    return;
 8004cd8:	46c0      	nop			; (mov r8, r8)
 8004cda:	e004      	b.n	8004ce6 <HAL_UART_IRQHandler+0x63a>
      return;
 8004cdc:	46c0      	nop			; (mov r8, r8)
 8004cde:	e002      	b.n	8004ce6 <HAL_UART_IRQHandler+0x63a>
      return;
 8004ce0:	46c0      	nop			; (mov r8, r8)
 8004ce2:	e000      	b.n	8004ce6 <HAL_UART_IRQHandler+0x63a>
    return;
 8004ce4:	46c0      	nop			; (mov r8, r8)
  }
}
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	b02a      	add	sp, #168	; 0xa8
 8004cea:	bdb0      	pop	{r4, r5, r7, pc}
 8004cec:	fffffeff 	.word	0xfffffeff
 8004cf0:	fffffedf 	.word	0xfffffedf
 8004cf4:	effffffe 	.word	0xeffffffe

08004cf8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d00:	46c0      	nop			; (mov r8, r8)
 8004d02:	46bd      	mov	sp, r7
 8004d04:	b002      	add	sp, #8
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004d10:	46c0      	nop			; (mov r8, r8)
 8004d12:	46bd      	mov	sp, r7
 8004d14:	b002      	add	sp, #8
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d20:	46c0      	nop			; (mov r8, r8)
 8004d22:	46bd      	mov	sp, r7
 8004d24:	b002      	add	sp, #8
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d30:	231b      	movs	r3, #27
 8004d32:	18fb      	adds	r3, r7, r3
 8004d34:	2200      	movs	r2, #0
 8004d36:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4ab4      	ldr	r2, [pc, #720]	; (8005028 <UART_SetConfig+0x300>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	0019      	movs	r1, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	69fa      	ldr	r2, [r7, #28]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	4aaf      	ldr	r2, [pc, #700]	; (800502c <UART_SetConfig+0x304>)
 8004d6e:	4013      	ands	r3, r2
 8004d70:	0019      	movs	r1, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	69fa      	ldr	r2, [r7, #28]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	4aa6      	ldr	r2, [pc, #664]	; (8005030 <UART_SetConfig+0x308>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	0019      	movs	r1, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69fa      	ldr	r2, [r7, #28]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004daa:	220f      	movs	r2, #15
 8004dac:	4393      	bics	r3, r2
 8004dae:	0019      	movs	r1, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a9c      	ldr	r2, [pc, #624]	; (8005034 <UART_SetConfig+0x30c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d127      	bne.n	8004e16 <UART_SetConfig+0xee>
 8004dc6:	4b9c      	ldr	r3, [pc, #624]	; (8005038 <UART_SetConfig+0x310>)
 8004dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dca:	2203      	movs	r2, #3
 8004dcc:	4013      	ands	r3, r2
 8004dce:	2b03      	cmp	r3, #3
 8004dd0:	d017      	beq.n	8004e02 <UART_SetConfig+0xda>
 8004dd2:	d81b      	bhi.n	8004e0c <UART_SetConfig+0xe4>
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d00a      	beq.n	8004dee <UART_SetConfig+0xc6>
 8004dd8:	d818      	bhi.n	8004e0c <UART_SetConfig+0xe4>
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <UART_SetConfig+0xbc>
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d00a      	beq.n	8004df8 <UART_SetConfig+0xd0>
 8004de2:	e013      	b.n	8004e0c <UART_SetConfig+0xe4>
 8004de4:	231a      	movs	r3, #26
 8004de6:	18fb      	adds	r3, r7, r3
 8004de8:	2200      	movs	r2, #0
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	e08f      	b.n	8004f0e <UART_SetConfig+0x1e6>
 8004dee:	231a      	movs	r3, #26
 8004df0:	18fb      	adds	r3, r7, r3
 8004df2:	2202      	movs	r2, #2
 8004df4:	701a      	strb	r2, [r3, #0]
 8004df6:	e08a      	b.n	8004f0e <UART_SetConfig+0x1e6>
 8004df8:	231a      	movs	r3, #26
 8004dfa:	18fb      	adds	r3, r7, r3
 8004dfc:	2204      	movs	r2, #4
 8004dfe:	701a      	strb	r2, [r3, #0]
 8004e00:	e085      	b.n	8004f0e <UART_SetConfig+0x1e6>
 8004e02:	231a      	movs	r3, #26
 8004e04:	18fb      	adds	r3, r7, r3
 8004e06:	2208      	movs	r2, #8
 8004e08:	701a      	strb	r2, [r3, #0]
 8004e0a:	e080      	b.n	8004f0e <UART_SetConfig+0x1e6>
 8004e0c:	231a      	movs	r3, #26
 8004e0e:	18fb      	adds	r3, r7, r3
 8004e10:	2210      	movs	r2, #16
 8004e12:	701a      	strb	r2, [r3, #0]
 8004e14:	e07b      	b.n	8004f0e <UART_SetConfig+0x1e6>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a88      	ldr	r2, [pc, #544]	; (800503c <UART_SetConfig+0x314>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d127      	bne.n	8004e70 <UART_SetConfig+0x148>
 8004e20:	4b85      	ldr	r3, [pc, #532]	; (8005038 <UART_SetConfig+0x310>)
 8004e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e24:	220c      	movs	r2, #12
 8004e26:	4013      	ands	r3, r2
 8004e28:	2b0c      	cmp	r3, #12
 8004e2a:	d017      	beq.n	8004e5c <UART_SetConfig+0x134>
 8004e2c:	d81b      	bhi.n	8004e66 <UART_SetConfig+0x13e>
 8004e2e:	2b08      	cmp	r3, #8
 8004e30:	d00a      	beq.n	8004e48 <UART_SetConfig+0x120>
 8004e32:	d818      	bhi.n	8004e66 <UART_SetConfig+0x13e>
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <UART_SetConfig+0x116>
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d00a      	beq.n	8004e52 <UART_SetConfig+0x12a>
 8004e3c:	e013      	b.n	8004e66 <UART_SetConfig+0x13e>
 8004e3e:	231a      	movs	r3, #26
 8004e40:	18fb      	adds	r3, r7, r3
 8004e42:	2200      	movs	r2, #0
 8004e44:	701a      	strb	r2, [r3, #0]
 8004e46:	e062      	b.n	8004f0e <UART_SetConfig+0x1e6>
 8004e48:	231a      	movs	r3, #26
 8004e4a:	18fb      	adds	r3, r7, r3
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	701a      	strb	r2, [r3, #0]
 8004e50:	e05d      	b.n	8004f0e <UART_SetConfig+0x1e6>
 8004e52:	231a      	movs	r3, #26
 8004e54:	18fb      	adds	r3, r7, r3
 8004e56:	2204      	movs	r2, #4
 8004e58:	701a      	strb	r2, [r3, #0]
 8004e5a:	e058      	b.n	8004f0e <UART_SetConfig+0x1e6>
 8004e5c:	231a      	movs	r3, #26
 8004e5e:	18fb      	adds	r3, r7, r3
 8004e60:	2208      	movs	r2, #8
 8004e62:	701a      	strb	r2, [r3, #0]
 8004e64:	e053      	b.n	8004f0e <UART_SetConfig+0x1e6>
 8004e66:	231a      	movs	r3, #26
 8004e68:	18fb      	adds	r3, r7, r3
 8004e6a:	2210      	movs	r2, #16
 8004e6c:	701a      	strb	r2, [r3, #0]
 8004e6e:	e04e      	b.n	8004f0e <UART_SetConfig+0x1e6>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a72      	ldr	r2, [pc, #456]	; (8005040 <UART_SetConfig+0x318>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d127      	bne.n	8004eca <UART_SetConfig+0x1a2>
 8004e7a:	4b6f      	ldr	r3, [pc, #444]	; (8005038 <UART_SetConfig+0x310>)
 8004e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7e:	2230      	movs	r2, #48	; 0x30
 8004e80:	4013      	ands	r3, r2
 8004e82:	2b30      	cmp	r3, #48	; 0x30
 8004e84:	d017      	beq.n	8004eb6 <UART_SetConfig+0x18e>
 8004e86:	d81b      	bhi.n	8004ec0 <UART_SetConfig+0x198>
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	d00a      	beq.n	8004ea2 <UART_SetConfig+0x17a>
 8004e8c:	d818      	bhi.n	8004ec0 <UART_SetConfig+0x198>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <UART_SetConfig+0x170>
 8004e92:	2b10      	cmp	r3, #16
 8004e94:	d00a      	beq.n	8004eac <UART_SetConfig+0x184>
 8004e96:	e013      	b.n	8004ec0 <UART_SetConfig+0x198>
 8004e98:	231a      	movs	r3, #26
 8004e9a:	18fb      	adds	r3, r7, r3
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	701a      	strb	r2, [r3, #0]
 8004ea0:	e035      	b.n	8004f0e <UART_SetConfig+0x1e6>
 8004ea2:	231a      	movs	r3, #26
 8004ea4:	18fb      	adds	r3, r7, r3
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	701a      	strb	r2, [r3, #0]
 8004eaa:	e030      	b.n	8004f0e <UART_SetConfig+0x1e6>
 8004eac:	231a      	movs	r3, #26
 8004eae:	18fb      	adds	r3, r7, r3
 8004eb0:	2204      	movs	r2, #4
 8004eb2:	701a      	strb	r2, [r3, #0]
 8004eb4:	e02b      	b.n	8004f0e <UART_SetConfig+0x1e6>
 8004eb6:	231a      	movs	r3, #26
 8004eb8:	18fb      	adds	r3, r7, r3
 8004eba:	2208      	movs	r2, #8
 8004ebc:	701a      	strb	r2, [r3, #0]
 8004ebe:	e026      	b.n	8004f0e <UART_SetConfig+0x1e6>
 8004ec0:	231a      	movs	r3, #26
 8004ec2:	18fb      	adds	r3, r7, r3
 8004ec4:	2210      	movs	r2, #16
 8004ec6:	701a      	strb	r2, [r3, #0]
 8004ec8:	e021      	b.n	8004f0e <UART_SetConfig+0x1e6>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a5d      	ldr	r2, [pc, #372]	; (8005044 <UART_SetConfig+0x31c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d104      	bne.n	8004ede <UART_SetConfig+0x1b6>
 8004ed4:	231a      	movs	r3, #26
 8004ed6:	18fb      	adds	r3, r7, r3
 8004ed8:	2200      	movs	r2, #0
 8004eda:	701a      	strb	r2, [r3, #0]
 8004edc:	e017      	b.n	8004f0e <UART_SetConfig+0x1e6>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a59      	ldr	r2, [pc, #356]	; (8005048 <UART_SetConfig+0x320>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d104      	bne.n	8004ef2 <UART_SetConfig+0x1ca>
 8004ee8:	231a      	movs	r3, #26
 8004eea:	18fb      	adds	r3, r7, r3
 8004eec:	2200      	movs	r2, #0
 8004eee:	701a      	strb	r2, [r3, #0]
 8004ef0:	e00d      	b.n	8004f0e <UART_SetConfig+0x1e6>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a55      	ldr	r2, [pc, #340]	; (800504c <UART_SetConfig+0x324>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d104      	bne.n	8004f06 <UART_SetConfig+0x1de>
 8004efc:	231a      	movs	r3, #26
 8004efe:	18fb      	adds	r3, r7, r3
 8004f00:	2200      	movs	r2, #0
 8004f02:	701a      	strb	r2, [r3, #0]
 8004f04:	e003      	b.n	8004f0e <UART_SetConfig+0x1e6>
 8004f06:	231a      	movs	r3, #26
 8004f08:	18fb      	adds	r3, r7, r3
 8004f0a:	2210      	movs	r2, #16
 8004f0c:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69da      	ldr	r2, [r3, #28]
 8004f12:	2380      	movs	r3, #128	; 0x80
 8004f14:	021b      	lsls	r3, r3, #8
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d000      	beq.n	8004f1c <UART_SetConfig+0x1f4>
 8004f1a:	e065      	b.n	8004fe8 <UART_SetConfig+0x2c0>
  {
    switch (clocksource)
 8004f1c:	231a      	movs	r3, #26
 8004f1e:	18fb      	adds	r3, r7, r3
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	2b08      	cmp	r3, #8
 8004f24:	d015      	beq.n	8004f52 <UART_SetConfig+0x22a>
 8004f26:	dc18      	bgt.n	8004f5a <UART_SetConfig+0x232>
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d00d      	beq.n	8004f48 <UART_SetConfig+0x220>
 8004f2c:	dc15      	bgt.n	8004f5a <UART_SetConfig+0x232>
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <UART_SetConfig+0x210>
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d005      	beq.n	8004f42 <UART_SetConfig+0x21a>
 8004f36:	e010      	b.n	8004f5a <UART_SetConfig+0x232>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f38:	f7fe fb98 	bl	800366c <HAL_RCC_GetPCLK1Freq>
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	617b      	str	r3, [r7, #20]
        break;
 8004f40:	e012      	b.n	8004f68 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f42:	4b43      	ldr	r3, [pc, #268]	; (8005050 <UART_SetConfig+0x328>)
 8004f44:	617b      	str	r3, [r7, #20]
        break;
 8004f46:	e00f      	b.n	8004f68 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f48:	f7fe fb04 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8004f4c:	0003      	movs	r3, r0
 8004f4e:	617b      	str	r3, [r7, #20]
        break;
 8004f50:	e00a      	b.n	8004f68 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f52:	2380      	movs	r3, #128	; 0x80
 8004f54:	021b      	lsls	r3, r3, #8
 8004f56:	617b      	str	r3, [r7, #20]
        break;
 8004f58:	e006      	b.n	8004f68 <UART_SetConfig+0x240>
      default:
        pclk = 0U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f5e:	231b      	movs	r3, #27
 8004f60:	18fb      	adds	r3, r7, r3
 8004f62:	2201      	movs	r2, #1
 8004f64:	701a      	strb	r2, [r3, #0]
        break;
 8004f66:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d100      	bne.n	8004f70 <UART_SetConfig+0x248>
 8004f6e:	e0a6      	b.n	80050be <UART_SetConfig+0x396>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f74:	4b37      	ldr	r3, [pc, #220]	; (8005054 <UART_SetConfig+0x32c>)
 8004f76:	0052      	lsls	r2, r2, #1
 8004f78:	5ad3      	ldrh	r3, [r2, r3]
 8004f7a:	0019      	movs	r1, r3
 8004f7c:	6978      	ldr	r0, [r7, #20]
 8004f7e:	f7fb f8d1 	bl	8000124 <__udivsi3>
 8004f82:	0003      	movs	r3, r0
 8004f84:	005a      	lsls	r2, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	085b      	lsrs	r3, r3, #1
 8004f8c:	18d2      	adds	r2, r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	0019      	movs	r1, r3
 8004f94:	0010      	movs	r0, r2
 8004f96:	f7fb f8c5 	bl	8000124 <__udivsi3>
 8004f9a:	0003      	movs	r3, r0
 8004f9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	2b0f      	cmp	r3, #15
 8004fa2:	d91c      	bls.n	8004fde <UART_SetConfig+0x2b6>
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	2380      	movs	r3, #128	; 0x80
 8004fa8:	025b      	lsls	r3, r3, #9
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d217      	bcs.n	8004fde <UART_SetConfig+0x2b6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	200e      	movs	r0, #14
 8004fb4:	183b      	adds	r3, r7, r0
 8004fb6:	210f      	movs	r1, #15
 8004fb8:	438a      	bics	r2, r1
 8004fba:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	085b      	lsrs	r3, r3, #1
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2207      	movs	r2, #7
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	b299      	uxth	r1, r3
 8004fc8:	183b      	adds	r3, r7, r0
 8004fca:	183a      	adds	r2, r7, r0
 8004fcc:	8812      	ldrh	r2, [r2, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	183a      	adds	r2, r7, r0
 8004fd8:	8812      	ldrh	r2, [r2, #0]
 8004fda:	60da      	str	r2, [r3, #12]
 8004fdc:	e06f      	b.n	80050be <UART_SetConfig+0x396>
      }
      else
      {
        ret = HAL_ERROR;
 8004fde:	231b      	movs	r3, #27
 8004fe0:	18fb      	adds	r3, r7, r3
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	701a      	strb	r2, [r3, #0]
 8004fe6:	e06a      	b.n	80050be <UART_SetConfig+0x396>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fe8:	231a      	movs	r3, #26
 8004fea:	18fb      	adds	r3, r7, r3
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	2b08      	cmp	r3, #8
 8004ff0:	d015      	beq.n	800501e <UART_SetConfig+0x2f6>
 8004ff2:	dc31      	bgt.n	8005058 <UART_SetConfig+0x330>
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d00d      	beq.n	8005014 <UART_SetConfig+0x2ec>
 8004ff8:	dc2e      	bgt.n	8005058 <UART_SetConfig+0x330>
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <UART_SetConfig+0x2dc>
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d005      	beq.n	800500e <UART_SetConfig+0x2e6>
 8005002:	e029      	b.n	8005058 <UART_SetConfig+0x330>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005004:	f7fe fb32 	bl	800366c <HAL_RCC_GetPCLK1Freq>
 8005008:	0003      	movs	r3, r0
 800500a:	617b      	str	r3, [r7, #20]
        break;
 800500c:	e02b      	b.n	8005066 <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800500e:	4b10      	ldr	r3, [pc, #64]	; (8005050 <UART_SetConfig+0x328>)
 8005010:	617b      	str	r3, [r7, #20]
        break;
 8005012:	e028      	b.n	8005066 <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005014:	f7fe fa9e 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8005018:	0003      	movs	r3, r0
 800501a:	617b      	str	r3, [r7, #20]
        break;
 800501c:	e023      	b.n	8005066 <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800501e:	2380      	movs	r3, #128	; 0x80
 8005020:	021b      	lsls	r3, r3, #8
 8005022:	617b      	str	r3, [r7, #20]
        break;
 8005024:	e01f      	b.n	8005066 <UART_SetConfig+0x33e>
 8005026:	46c0      	nop			; (mov r8, r8)
 8005028:	cfff69f3 	.word	0xcfff69f3
 800502c:	ffffcfff 	.word	0xffffcfff
 8005030:	11fff4ff 	.word	0x11fff4ff
 8005034:	40013800 	.word	0x40013800
 8005038:	40021000 	.word	0x40021000
 800503c:	40004400 	.word	0x40004400
 8005040:	40004800 	.word	0x40004800
 8005044:	40004c00 	.word	0x40004c00
 8005048:	40005000 	.word	0x40005000
 800504c:	40013c00 	.word	0x40013c00
 8005050:	00f42400 	.word	0x00f42400
 8005054:	08007d94 	.word	0x08007d94
      default:
        pclk = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800505c:	231b      	movs	r3, #27
 800505e:	18fb      	adds	r3, r7, r3
 8005060:	2201      	movs	r2, #1
 8005062:	701a      	strb	r2, [r3, #0]
        break;
 8005064:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d028      	beq.n	80050be <UART_SetConfig+0x396>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005070:	4b1d      	ldr	r3, [pc, #116]	; (80050e8 <UART_SetConfig+0x3c0>)
 8005072:	0052      	lsls	r2, r2, #1
 8005074:	5ad3      	ldrh	r3, [r2, r3]
 8005076:	0019      	movs	r1, r3
 8005078:	6978      	ldr	r0, [r7, #20]
 800507a:	f7fb f853 	bl	8000124 <__udivsi3>
 800507e:	0003      	movs	r3, r0
 8005080:	001a      	movs	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	085b      	lsrs	r3, r3, #1
 8005088:	18d2      	adds	r2, r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	0019      	movs	r1, r3
 8005090:	0010      	movs	r0, r2
 8005092:	f7fb f847 	bl	8000124 <__udivsi3>
 8005096:	0003      	movs	r3, r0
 8005098:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	2b0f      	cmp	r3, #15
 800509e:	d90a      	bls.n	80050b6 <UART_SetConfig+0x38e>
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	2380      	movs	r3, #128	; 0x80
 80050a4:	025b      	lsls	r3, r3, #9
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d205      	bcs.n	80050b6 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60da      	str	r2, [r3, #12]
 80050b4:	e003      	b.n	80050be <UART_SetConfig+0x396>
      }
      else
      {
        ret = HAL_ERROR;
 80050b6:	231b      	movs	r3, #27
 80050b8:	18fb      	adds	r3, r7, r3
 80050ba:	2201      	movs	r2, #1
 80050bc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	226a      	movs	r2, #106	; 0x6a
 80050c2:	2101      	movs	r1, #1
 80050c4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2268      	movs	r2, #104	; 0x68
 80050ca:	2101      	movs	r1, #1
 80050cc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80050da:	231b      	movs	r3, #27
 80050dc:	18fb      	adds	r3, r7, r3
 80050de:	781b      	ldrb	r3, [r3, #0]
}
 80050e0:	0018      	movs	r0, r3
 80050e2:	46bd      	mov	sp, r7
 80050e4:	b008      	add	sp, #32
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	08007d94 	.word	0x08007d94

080050ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f8:	2201      	movs	r2, #1
 80050fa:	4013      	ands	r3, r2
 80050fc:	d00b      	beq.n	8005116 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	4a4a      	ldr	r2, [pc, #296]	; (8005230 <UART_AdvFeatureConfig+0x144>)
 8005106:	4013      	ands	r3, r2
 8005108:	0019      	movs	r1, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511a:	2202      	movs	r2, #2
 800511c:	4013      	ands	r3, r2
 800511e:	d00b      	beq.n	8005138 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	4a43      	ldr	r2, [pc, #268]	; (8005234 <UART_AdvFeatureConfig+0x148>)
 8005128:	4013      	ands	r3, r2
 800512a:	0019      	movs	r1, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513c:	2204      	movs	r2, #4
 800513e:	4013      	ands	r3, r2
 8005140:	d00b      	beq.n	800515a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	4a3b      	ldr	r2, [pc, #236]	; (8005238 <UART_AdvFeatureConfig+0x14c>)
 800514a:	4013      	ands	r3, r2
 800514c:	0019      	movs	r1, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515e:	2208      	movs	r2, #8
 8005160:	4013      	ands	r3, r2
 8005162:	d00b      	beq.n	800517c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	4a34      	ldr	r2, [pc, #208]	; (800523c <UART_AdvFeatureConfig+0x150>)
 800516c:	4013      	ands	r3, r2
 800516e:	0019      	movs	r1, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005180:	2210      	movs	r2, #16
 8005182:	4013      	ands	r3, r2
 8005184:	d00b      	beq.n	800519e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	4a2c      	ldr	r2, [pc, #176]	; (8005240 <UART_AdvFeatureConfig+0x154>)
 800518e:	4013      	ands	r3, r2
 8005190:	0019      	movs	r1, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a2:	2220      	movs	r2, #32
 80051a4:	4013      	ands	r3, r2
 80051a6:	d00b      	beq.n	80051c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	4a25      	ldr	r2, [pc, #148]	; (8005244 <UART_AdvFeatureConfig+0x158>)
 80051b0:	4013      	ands	r3, r2
 80051b2:	0019      	movs	r1, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c4:	2240      	movs	r2, #64	; 0x40
 80051c6:	4013      	ands	r3, r2
 80051c8:	d01d      	beq.n	8005206 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	4a1d      	ldr	r2, [pc, #116]	; (8005248 <UART_AdvFeatureConfig+0x15c>)
 80051d2:	4013      	ands	r3, r2
 80051d4:	0019      	movs	r1, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051e6:	2380      	movs	r3, #128	; 0x80
 80051e8:	035b      	lsls	r3, r3, #13
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d10b      	bne.n	8005206 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	4a15      	ldr	r2, [pc, #84]	; (800524c <UART_AdvFeatureConfig+0x160>)
 80051f6:	4013      	ands	r3, r2
 80051f8:	0019      	movs	r1, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520a:	2280      	movs	r2, #128	; 0x80
 800520c:	4013      	ands	r3, r2
 800520e:	d00b      	beq.n	8005228 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	4a0e      	ldr	r2, [pc, #56]	; (8005250 <UART_AdvFeatureConfig+0x164>)
 8005218:	4013      	ands	r3, r2
 800521a:	0019      	movs	r1, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	605a      	str	r2, [r3, #4]
  }
}
 8005228:	46c0      	nop			; (mov r8, r8)
 800522a:	46bd      	mov	sp, r7
 800522c:	b002      	add	sp, #8
 800522e:	bd80      	pop	{r7, pc}
 8005230:	fffdffff 	.word	0xfffdffff
 8005234:	fffeffff 	.word	0xfffeffff
 8005238:	fffbffff 	.word	0xfffbffff
 800523c:	ffff7fff 	.word	0xffff7fff
 8005240:	ffffefff 	.word	0xffffefff
 8005244:	ffffdfff 	.word	0xffffdfff
 8005248:	ffefffff 	.word	0xffefffff
 800524c:	ff9fffff 	.word	0xff9fffff
 8005250:	fff7ffff 	.word	0xfff7ffff

08005254 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af02      	add	r7, sp, #8
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2290      	movs	r2, #144	; 0x90
 8005260:	2100      	movs	r1, #0
 8005262:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005264:	f7fc ffb0 	bl	80021c8 <HAL_GetTick>
 8005268:	0003      	movs	r3, r0
 800526a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2208      	movs	r2, #8
 8005274:	4013      	ands	r3, r2
 8005276:	2b08      	cmp	r3, #8
 8005278:	d10c      	bne.n	8005294 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2280      	movs	r2, #128	; 0x80
 800527e:	0391      	lsls	r1, r2, #14
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	4a1a      	ldr	r2, [pc, #104]	; (80052ec <UART_CheckIdleState+0x98>)
 8005284:	9200      	str	r2, [sp, #0]
 8005286:	2200      	movs	r2, #0
 8005288:	f000 f832 	bl	80052f0 <UART_WaitOnFlagUntilTimeout>
 800528c:	1e03      	subs	r3, r0, #0
 800528e:	d001      	beq.n	8005294 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e026      	b.n	80052e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2204      	movs	r2, #4
 800529c:	4013      	ands	r3, r2
 800529e:	2b04      	cmp	r3, #4
 80052a0:	d10c      	bne.n	80052bc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2280      	movs	r2, #128	; 0x80
 80052a6:	03d1      	lsls	r1, r2, #15
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	4a10      	ldr	r2, [pc, #64]	; (80052ec <UART_CheckIdleState+0x98>)
 80052ac:	9200      	str	r2, [sp, #0]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f000 f81e 	bl	80052f0 <UART_WaitOnFlagUntilTimeout>
 80052b4:	1e03      	subs	r3, r0, #0
 80052b6:	d001      	beq.n	80052bc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e012      	b.n	80052e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2288      	movs	r2, #136	; 0x88
 80052c0:	2120      	movs	r1, #32
 80052c2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	228c      	movs	r2, #140	; 0x8c
 80052c8:	2120      	movs	r1, #32
 80052ca:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2284      	movs	r2, #132	; 0x84
 80052dc:	2100      	movs	r1, #0
 80052de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	0018      	movs	r0, r3
 80052e4:	46bd      	mov	sp, r7
 80052e6:	b004      	add	sp, #16
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	46c0      	nop			; (mov r8, r8)
 80052ec:	01ffffff 	.word	0x01ffffff

080052f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b094      	sub	sp, #80	; 0x50
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	1dfb      	adds	r3, r7, #7
 80052fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005300:	e0a7      	b.n	8005452 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005302:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005304:	3301      	adds	r3, #1
 8005306:	d100      	bne.n	800530a <UART_WaitOnFlagUntilTimeout+0x1a>
 8005308:	e0a3      	b.n	8005452 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800530a:	f7fc ff5d 	bl	80021c8 <HAL_GetTick>
 800530e:	0002      	movs	r2, r0
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005316:	429a      	cmp	r2, r3
 8005318:	d302      	bcc.n	8005320 <UART_WaitOnFlagUntilTimeout+0x30>
 800531a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800531c:	2b00      	cmp	r3, #0
 800531e:	d13f      	bne.n	80053a0 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005320:	f3ef 8310 	mrs	r3, PRIMASK
 8005324:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005326:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005328:	647b      	str	r3, [r7, #68]	; 0x44
 800532a:	2301      	movs	r3, #1
 800532c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800532e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005330:	f383 8810 	msr	PRIMASK, r3
}
 8005334:	46c0      	nop			; (mov r8, r8)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	494e      	ldr	r1, [pc, #312]	; (800547c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005342:	400a      	ands	r2, r1
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005348:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534c:	f383 8810 	msr	PRIMASK, r3
}
 8005350:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005352:	f3ef 8310 	mrs	r3, PRIMASK
 8005356:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535a:	643b      	str	r3, [r7, #64]	; 0x40
 800535c:	2301      	movs	r3, #1
 800535e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005362:	f383 8810 	msr	PRIMASK, r3
}
 8005366:	46c0      	nop			; (mov r8, r8)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689a      	ldr	r2, [r3, #8]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2101      	movs	r1, #1
 8005374:	438a      	bics	r2, r1
 8005376:	609a      	str	r2, [r3, #8]
 8005378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800537a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800537c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800537e:	f383 8810 	msr	PRIMASK, r3
}
 8005382:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2288      	movs	r2, #136	; 0x88
 8005388:	2120      	movs	r1, #32
 800538a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	228c      	movs	r2, #140	; 0x8c
 8005390:	2120      	movs	r1, #32
 8005392:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2284      	movs	r2, #132	; 0x84
 8005398:	2100      	movs	r1, #0
 800539a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e069      	b.n	8005474 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2204      	movs	r2, #4
 80053a8:	4013      	ands	r3, r2
 80053aa:	d052      	beq.n	8005452 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69da      	ldr	r2, [r3, #28]
 80053b2:	2380      	movs	r3, #128	; 0x80
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	401a      	ands	r2, r3
 80053b8:	2380      	movs	r3, #128	; 0x80
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	429a      	cmp	r2, r3
 80053be:	d148      	bne.n	8005452 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2280      	movs	r2, #128	; 0x80
 80053c6:	0112      	lsls	r2, r2, #4
 80053c8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ca:	f3ef 8310 	mrs	r3, PRIMASK
 80053ce:	613b      	str	r3, [r7, #16]
  return(result);
 80053d0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80053d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053d4:	2301      	movs	r3, #1
 80053d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f383 8810 	msr	PRIMASK, r3
}
 80053de:	46c0      	nop			; (mov r8, r8)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4924      	ldr	r1, [pc, #144]	; (800547c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80053ec:	400a      	ands	r2, r1
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	f383 8810 	msr	PRIMASK, r3
}
 80053fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005400:	61fb      	str	r3, [r7, #28]
  return(result);
 8005402:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005404:	64bb      	str	r3, [r7, #72]	; 0x48
 8005406:	2301      	movs	r3, #1
 8005408:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	f383 8810 	msr	PRIMASK, r3
}
 8005410:	46c0      	nop			; (mov r8, r8)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2101      	movs	r1, #1
 800541e:	438a      	bics	r2, r1
 8005420:	609a      	str	r2, [r3, #8]
 8005422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005424:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	f383 8810 	msr	PRIMASK, r3
}
 800542c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2288      	movs	r2, #136	; 0x88
 8005432:	2120      	movs	r1, #32
 8005434:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	228c      	movs	r2, #140	; 0x8c
 800543a:	2120      	movs	r1, #32
 800543c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2290      	movs	r2, #144	; 0x90
 8005442:	2120      	movs	r1, #32
 8005444:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2284      	movs	r2, #132	; 0x84
 800544a:	2100      	movs	r1, #0
 800544c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e010      	b.n	8005474 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	4013      	ands	r3, r2
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	425a      	negs	r2, r3
 8005462:	4153      	adcs	r3, r2
 8005464:	b2db      	uxtb	r3, r3
 8005466:	001a      	movs	r2, r3
 8005468:	1dfb      	adds	r3, r7, #7
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	429a      	cmp	r2, r3
 800546e:	d100      	bne.n	8005472 <UART_WaitOnFlagUntilTimeout+0x182>
 8005470:	e747      	b.n	8005302 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	0018      	movs	r0, r3
 8005476:	46bd      	mov	sp, r7
 8005478:	b014      	add	sp, #80	; 0x50
 800547a:	bd80      	pop	{r7, pc}
 800547c:	fffffe5f 	.word	0xfffffe5f

08005480 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b098      	sub	sp, #96	; 0x60
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	1dbb      	adds	r3, r7, #6
 800548c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	1dba      	adds	r2, r7, #6
 8005498:	215c      	movs	r1, #92	; 0x5c
 800549a:	8812      	ldrh	r2, [r2, #0]
 800549c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	1dba      	adds	r2, r7, #6
 80054a2:	215e      	movs	r1, #94	; 0x5e
 80054a4:	8812      	ldrh	r2, [r2, #0]
 80054a6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	689a      	ldr	r2, [r3, #8]
 80054b2:	2380      	movs	r3, #128	; 0x80
 80054b4:	015b      	lsls	r3, r3, #5
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d10d      	bne.n	80054d6 <UART_Start_Receive_IT+0x56>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d104      	bne.n	80054cc <UART_Start_Receive_IT+0x4c>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2260      	movs	r2, #96	; 0x60
 80054c6:	497b      	ldr	r1, [pc, #492]	; (80056b4 <UART_Start_Receive_IT+0x234>)
 80054c8:	5299      	strh	r1, [r3, r2]
 80054ca:	e02e      	b.n	800552a <UART_Start_Receive_IT+0xaa>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2260      	movs	r2, #96	; 0x60
 80054d0:	21ff      	movs	r1, #255	; 0xff
 80054d2:	5299      	strh	r1, [r3, r2]
 80054d4:	e029      	b.n	800552a <UART_Start_Receive_IT+0xaa>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10d      	bne.n	80054fa <UART_Start_Receive_IT+0x7a>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d104      	bne.n	80054f0 <UART_Start_Receive_IT+0x70>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2260      	movs	r2, #96	; 0x60
 80054ea:	21ff      	movs	r1, #255	; 0xff
 80054ec:	5299      	strh	r1, [r3, r2]
 80054ee:	e01c      	b.n	800552a <UART_Start_Receive_IT+0xaa>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2260      	movs	r2, #96	; 0x60
 80054f4:	217f      	movs	r1, #127	; 0x7f
 80054f6:	5299      	strh	r1, [r3, r2]
 80054f8:	e017      	b.n	800552a <UART_Start_Receive_IT+0xaa>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	2380      	movs	r3, #128	; 0x80
 8005500:	055b      	lsls	r3, r3, #21
 8005502:	429a      	cmp	r2, r3
 8005504:	d10d      	bne.n	8005522 <UART_Start_Receive_IT+0xa2>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d104      	bne.n	8005518 <UART_Start_Receive_IT+0x98>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2260      	movs	r2, #96	; 0x60
 8005512:	217f      	movs	r1, #127	; 0x7f
 8005514:	5299      	strh	r1, [r3, r2]
 8005516:	e008      	b.n	800552a <UART_Start_Receive_IT+0xaa>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2260      	movs	r2, #96	; 0x60
 800551c:	213f      	movs	r1, #63	; 0x3f
 800551e:	5299      	strh	r1, [r3, r2]
 8005520:	e003      	b.n	800552a <UART_Start_Receive_IT+0xaa>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2260      	movs	r2, #96	; 0x60
 8005526:	2100      	movs	r1, #0
 8005528:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2290      	movs	r2, #144	; 0x90
 800552e:	2100      	movs	r1, #0
 8005530:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	228c      	movs	r2, #140	; 0x8c
 8005536:	2122      	movs	r1, #34	; 0x22
 8005538:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800553a:	f3ef 8310 	mrs	r3, PRIMASK
 800553e:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8005540:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005542:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005544:	2301      	movs	r3, #1
 8005546:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800554a:	f383 8810 	msr	PRIMASK, r3
}
 800554e:	46c0      	nop			; (mov r8, r8)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2101      	movs	r1, #1
 800555c:	430a      	orrs	r2, r1
 800555e:	609a      	str	r2, [r3, #8]
 8005560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005562:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005566:	f383 8810 	msr	PRIMASK, r3
}
 800556a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005570:	2380      	movs	r3, #128	; 0x80
 8005572:	059b      	lsls	r3, r3, #22
 8005574:	429a      	cmp	r2, r3
 8005576:	d150      	bne.n	800561a <UART_Start_Receive_IT+0x19a>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2268      	movs	r2, #104	; 0x68
 800557c:	5a9b      	ldrh	r3, [r3, r2]
 800557e:	1dba      	adds	r2, r7, #6
 8005580:	8812      	ldrh	r2, [r2, #0]
 8005582:	429a      	cmp	r2, r3
 8005584:	d349      	bcc.n	800561a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	2380      	movs	r3, #128	; 0x80
 800558c:	015b      	lsls	r3, r3, #5
 800558e:	429a      	cmp	r2, r3
 8005590:	d107      	bne.n	80055a2 <UART_Start_Receive_IT+0x122>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d103      	bne.n	80055a2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4a46      	ldr	r2, [pc, #280]	; (80056b8 <UART_Start_Receive_IT+0x238>)
 800559e:	675a      	str	r2, [r3, #116]	; 0x74
 80055a0:	e002      	b.n	80055a8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4a45      	ldr	r2, [pc, #276]	; (80056bc <UART_Start_Receive_IT+0x23c>)
 80055a6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d019      	beq.n	80055e4 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055b0:	f3ef 8310 	mrs	r3, PRIMASK
 80055b4:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80055b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80055ba:	2301      	movs	r3, #1
 80055bc:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	f383 8810 	msr	PRIMASK, r3
}
 80055c4:	46c0      	nop			; (mov r8, r8)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2180      	movs	r1, #128	; 0x80
 80055d2:	0049      	lsls	r1, r1, #1
 80055d4:	430a      	orrs	r2, r1
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055da:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055de:	f383 8810 	msr	PRIMASK, r3
}
 80055e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055e4:	f3ef 8310 	mrs	r3, PRIMASK
 80055e8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80055ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80055ec:	657b      	str	r3, [r7, #84]	; 0x54
 80055ee:	2301      	movs	r3, #1
 80055f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f4:	f383 8810 	msr	PRIMASK, r3
}
 80055f8:	46c0      	nop			; (mov r8, r8)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2180      	movs	r1, #128	; 0x80
 8005606:	0549      	lsls	r1, r1, #21
 8005608:	430a      	orrs	r2, r1
 800560a:	609a      	str	r2, [r3, #8]
 800560c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800560e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005612:	f383 8810 	msr	PRIMASK, r3
}
 8005616:	46c0      	nop			; (mov r8, r8)
 8005618:	e047      	b.n	80056aa <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	689a      	ldr	r2, [r3, #8]
 800561e:	2380      	movs	r3, #128	; 0x80
 8005620:	015b      	lsls	r3, r3, #5
 8005622:	429a      	cmp	r2, r3
 8005624:	d107      	bne.n	8005636 <UART_Start_Receive_IT+0x1b6>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d103      	bne.n	8005636 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4a23      	ldr	r2, [pc, #140]	; (80056c0 <UART_Start_Receive_IT+0x240>)
 8005632:	675a      	str	r2, [r3, #116]	; 0x74
 8005634:	e002      	b.n	800563c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	4a22      	ldr	r2, [pc, #136]	; (80056c4 <UART_Start_Receive_IT+0x244>)
 800563a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d019      	beq.n	8005678 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005644:	f3ef 8310 	mrs	r3, PRIMASK
 8005648:	61fb      	str	r3, [r7, #28]
  return(result);
 800564a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800564c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800564e:	2301      	movs	r3, #1
 8005650:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	f383 8810 	msr	PRIMASK, r3
}
 8005658:	46c0      	nop			; (mov r8, r8)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2190      	movs	r1, #144	; 0x90
 8005666:	0049      	lsls	r1, r1, #1
 8005668:	430a      	orrs	r2, r1
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800566e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	f383 8810 	msr	PRIMASK, r3
}
 8005676:	e018      	b.n	80056aa <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005678:	f3ef 8310 	mrs	r3, PRIMASK
 800567c:	613b      	str	r3, [r7, #16]
  return(result);
 800567e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005680:	653b      	str	r3, [r7, #80]	; 0x50
 8005682:	2301      	movs	r3, #1
 8005684:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f383 8810 	msr	PRIMASK, r3
}
 800568c:	46c0      	nop			; (mov r8, r8)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2120      	movs	r1, #32
 800569a:	430a      	orrs	r2, r1
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	f383 8810 	msr	PRIMASK, r3
}
 80056a8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	0018      	movs	r0, r3
 80056ae:	46bd      	mov	sp, r7
 80056b0:	b018      	add	sp, #96	; 0x60
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	000001ff 	.word	0x000001ff
 80056b8:	08005df1 	.word	0x08005df1
 80056bc:	08005b05 	.word	0x08005b05
 80056c0:	08005991 	.word	0x08005991
 80056c4:	0800581d 	.word	0x0800581d

080056c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08e      	sub	sp, #56	; 0x38
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056d0:	f3ef 8310 	mrs	r3, PRIMASK
 80056d4:	617b      	str	r3, [r7, #20]
  return(result);
 80056d6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056d8:	637b      	str	r3, [r7, #52]	; 0x34
 80056da:	2301      	movs	r3, #1
 80056dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	f383 8810 	msr	PRIMASK, r3
}
 80056e4:	46c0      	nop			; (mov r8, r8)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4926      	ldr	r1, [pc, #152]	; (800578c <UART_EndRxTransfer+0xc4>)
 80056f2:	400a      	ands	r2, r1
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	f383 8810 	msr	PRIMASK, r3
}
 8005700:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005702:	f3ef 8310 	mrs	r3, PRIMASK
 8005706:	623b      	str	r3, [r7, #32]
  return(result);
 8005708:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800570a:	633b      	str	r3, [r7, #48]	; 0x30
 800570c:	2301      	movs	r3, #1
 800570e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	f383 8810 	msr	PRIMASK, r3
}
 8005716:	46c0      	nop			; (mov r8, r8)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	491b      	ldr	r1, [pc, #108]	; (8005790 <UART_EndRxTransfer+0xc8>)
 8005724:	400a      	ands	r2, r1
 8005726:	609a      	str	r2, [r3, #8]
 8005728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	f383 8810 	msr	PRIMASK, r3
}
 8005732:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005738:	2b01      	cmp	r3, #1
 800573a:	d118      	bne.n	800576e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800573c:	f3ef 8310 	mrs	r3, PRIMASK
 8005740:	60bb      	str	r3, [r7, #8]
  return(result);
 8005742:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005744:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005746:	2301      	movs	r3, #1
 8005748:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f383 8810 	msr	PRIMASK, r3
}
 8005750:	46c0      	nop			; (mov r8, r8)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2110      	movs	r1, #16
 800575e:	438a      	bics	r2, r1
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005764:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f383 8810 	msr	PRIMASK, r3
}
 800576c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	228c      	movs	r2, #140	; 0x8c
 8005772:	2120      	movs	r1, #32
 8005774:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005782:	46c0      	nop			; (mov r8, r8)
 8005784:	46bd      	mov	sp, r7
 8005786:	b00e      	add	sp, #56	; 0x38
 8005788:	bd80      	pop	{r7, pc}
 800578a:	46c0      	nop			; (mov r8, r8)
 800578c:	fffffedf 	.word	0xfffffedf
 8005790:	effffffe 	.word	0xeffffffe

08005794 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	225e      	movs	r2, #94	; 0x5e
 80057a6:	2100      	movs	r1, #0
 80057a8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2256      	movs	r2, #86	; 0x56
 80057ae:	2100      	movs	r1, #0
 80057b0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	0018      	movs	r0, r3
 80057b6:	f7ff faaf 	bl	8004d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057ba:	46c0      	nop			; (mov r8, r8)
 80057bc:	46bd      	mov	sp, r7
 80057be:	b004      	add	sp, #16
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b086      	sub	sp, #24
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057ca:	f3ef 8310 	mrs	r3, PRIMASK
 80057ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80057d0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	2301      	movs	r3, #1
 80057d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f383 8810 	msr	PRIMASK, r3
}
 80057de:	46c0      	nop			; (mov r8, r8)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2140      	movs	r1, #64	; 0x40
 80057ec:	438a      	bics	r2, r1
 80057ee:	601a      	str	r2, [r3, #0]
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f383 8810 	msr	PRIMASK, r3
}
 80057fa:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2288      	movs	r2, #136	; 0x88
 8005800:	2120      	movs	r1, #32
 8005802:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	0018      	movs	r0, r3
 800580e:	f7ff fa73 	bl	8004cf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005812:	46c0      	nop			; (mov r8, r8)
 8005814:	46bd      	mov	sp, r7
 8005816:	b006      	add	sp, #24
 8005818:	bd80      	pop	{r7, pc}
	...

0800581c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b090      	sub	sp, #64	; 0x40
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005824:	203e      	movs	r0, #62	; 0x3e
 8005826:	183b      	adds	r3, r7, r0
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	2160      	movs	r1, #96	; 0x60
 800582c:	5a52      	ldrh	r2, [r2, r1]
 800582e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	228c      	movs	r2, #140	; 0x8c
 8005834:	589b      	ldr	r3, [r3, r2]
 8005836:	2b22      	cmp	r3, #34	; 0x22
 8005838:	d000      	beq.n	800583c <UART_RxISR_8BIT+0x20>
 800583a:	e09a      	b.n	8005972 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005842:	213c      	movs	r1, #60	; 0x3c
 8005844:	187b      	adds	r3, r7, r1
 8005846:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005848:	187b      	adds	r3, r7, r1
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	b2da      	uxtb	r2, r3
 800584e:	183b      	adds	r3, r7, r0
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	b2d9      	uxtb	r1, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005858:	400a      	ands	r2, r1
 800585a:	b2d2      	uxtb	r2, r2
 800585c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	225e      	movs	r2, #94	; 0x5e
 800586c:	5a9b      	ldrh	r3, [r3, r2]
 800586e:	b29b      	uxth	r3, r3
 8005870:	3b01      	subs	r3, #1
 8005872:	b299      	uxth	r1, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	225e      	movs	r2, #94	; 0x5e
 8005878:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	225e      	movs	r2, #94	; 0x5e
 800587e:	5a9b      	ldrh	r3, [r3, r2]
 8005880:	b29b      	uxth	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d000      	beq.n	8005888 <UART_RxISR_8BIT+0x6c>
 8005886:	e07c      	b.n	8005982 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005888:	f3ef 8310 	mrs	r3, PRIMASK
 800588c:	61bb      	str	r3, [r7, #24]
  return(result);
 800588e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005890:	63bb      	str	r3, [r7, #56]	; 0x38
 8005892:	2301      	movs	r3, #1
 8005894:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	f383 8810 	msr	PRIMASK, r3
}
 800589c:	46c0      	nop			; (mov r8, r8)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4938      	ldr	r1, [pc, #224]	; (800598c <UART_RxISR_8BIT+0x170>)
 80058aa:	400a      	ands	r2, r1
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	f383 8810 	msr	PRIMASK, r3
}
 80058b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ba:	f3ef 8310 	mrs	r3, PRIMASK
 80058be:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c2:	637b      	str	r3, [r7, #52]	; 0x34
 80058c4:	2301      	movs	r3, #1
 80058c6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	f383 8810 	msr	PRIMASK, r3
}
 80058ce:	46c0      	nop			; (mov r8, r8)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689a      	ldr	r2, [r3, #8]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2101      	movs	r1, #1
 80058dc:	438a      	bics	r2, r1
 80058de:	609a      	str	r2, [r3, #8]
 80058e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e6:	f383 8810 	msr	PRIMASK, r3
}
 80058ea:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	228c      	movs	r2, #140	; 0x8c
 80058f0:	2120      	movs	r1, #32
 80058f2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005904:	2b01      	cmp	r3, #1
 8005906:	d12f      	bne.n	8005968 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800590e:	f3ef 8310 	mrs	r3, PRIMASK
 8005912:	60fb      	str	r3, [r7, #12]
  return(result);
 8005914:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005916:	633b      	str	r3, [r7, #48]	; 0x30
 8005918:	2301      	movs	r3, #1
 800591a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f383 8810 	msr	PRIMASK, r3
}
 8005922:	46c0      	nop			; (mov r8, r8)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2110      	movs	r1, #16
 8005930:	438a      	bics	r2, r1
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005936:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	f383 8810 	msr	PRIMASK, r3
}
 800593e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	2210      	movs	r2, #16
 8005948:	4013      	ands	r3, r2
 800594a:	2b10      	cmp	r3, #16
 800594c:	d103      	bne.n	8005956 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2210      	movs	r2, #16
 8005954:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	225c      	movs	r2, #92	; 0x5c
 800595a:	5a9a      	ldrh	r2, [r3, r2]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	0011      	movs	r1, r2
 8005960:	0018      	movs	r0, r3
 8005962:	f7fa fe41 	bl	80005e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005966:	e00c      	b.n	8005982 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	0018      	movs	r0, r3
 800596c:	f7ff f9cc 	bl	8004d08 <HAL_UART_RxCpltCallback>
}
 8005970:	e007      	b.n	8005982 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	699a      	ldr	r2, [r3, #24]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2108      	movs	r1, #8
 800597e:	430a      	orrs	r2, r1
 8005980:	619a      	str	r2, [r3, #24]
}
 8005982:	46c0      	nop			; (mov r8, r8)
 8005984:	46bd      	mov	sp, r7
 8005986:	b010      	add	sp, #64	; 0x40
 8005988:	bd80      	pop	{r7, pc}
 800598a:	46c0      	nop			; (mov r8, r8)
 800598c:	fffffedf 	.word	0xfffffedf

08005990 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b090      	sub	sp, #64	; 0x40
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005998:	203e      	movs	r0, #62	; 0x3e
 800599a:	183b      	adds	r3, r7, r0
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	2160      	movs	r1, #96	; 0x60
 80059a0:	5a52      	ldrh	r2, [r2, r1]
 80059a2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	228c      	movs	r2, #140	; 0x8c
 80059a8:	589b      	ldr	r3, [r3, r2]
 80059aa:	2b22      	cmp	r3, #34	; 0x22
 80059ac:	d000      	beq.n	80059b0 <UART_RxISR_16BIT+0x20>
 80059ae:	e09a      	b.n	8005ae6 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059b6:	213c      	movs	r1, #60	; 0x3c
 80059b8:	187b      	adds	r3, r7, r1
 80059ba:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c0:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80059c2:	187b      	adds	r3, r7, r1
 80059c4:	183a      	adds	r2, r7, r0
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	8812      	ldrh	r2, [r2, #0]
 80059ca:	4013      	ands	r3, r2
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d6:	1c9a      	adds	r2, r3, #2
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	225e      	movs	r2, #94	; 0x5e
 80059e0:	5a9b      	ldrh	r3, [r3, r2]
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b299      	uxth	r1, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	225e      	movs	r2, #94	; 0x5e
 80059ec:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	225e      	movs	r2, #94	; 0x5e
 80059f2:	5a9b      	ldrh	r3, [r3, r2]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d000      	beq.n	80059fc <UART_RxISR_16BIT+0x6c>
 80059fa:	e07c      	b.n	8005af6 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005a00:	617b      	str	r3, [r7, #20]
  return(result);
 8005a02:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a04:	637b      	str	r3, [r7, #52]	; 0x34
 8005a06:	2301      	movs	r3, #1
 8005a08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	f383 8810 	msr	PRIMASK, r3
}
 8005a10:	46c0      	nop			; (mov r8, r8)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4938      	ldr	r1, [pc, #224]	; (8005b00 <UART_RxISR_16BIT+0x170>)
 8005a1e:	400a      	ands	r2, r1
 8005a20:	601a      	str	r2, [r3, #0]
 8005a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	f383 8810 	msr	PRIMASK, r3
}
 8005a2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a32:	623b      	str	r3, [r7, #32]
  return(result);
 8005a34:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a36:	633b      	str	r3, [r7, #48]	; 0x30
 8005a38:	2301      	movs	r3, #1
 8005a3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3e:	f383 8810 	msr	PRIMASK, r3
}
 8005a42:	46c0      	nop			; (mov r8, r8)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2101      	movs	r1, #1
 8005a50:	438a      	bics	r2, r1
 8005a52:	609a      	str	r2, [r3, #8]
 8005a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a56:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	f383 8810 	msr	PRIMASK, r3
}
 8005a5e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	228c      	movs	r2, #140	; 0x8c
 8005a64:	2120      	movs	r1, #32
 8005a66:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d12f      	bne.n	8005adc <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a82:	f3ef 8310 	mrs	r3, PRIMASK
 8005a86:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a88:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f383 8810 	msr	PRIMASK, r3
}
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2110      	movs	r1, #16
 8005aa4:	438a      	bics	r2, r1
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	f383 8810 	msr	PRIMASK, r3
}
 8005ab2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	2210      	movs	r2, #16
 8005abc:	4013      	ands	r3, r2
 8005abe:	2b10      	cmp	r3, #16
 8005ac0:	d103      	bne.n	8005aca <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2210      	movs	r2, #16
 8005ac8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	225c      	movs	r2, #92	; 0x5c
 8005ace:	5a9a      	ldrh	r2, [r3, r2]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	0011      	movs	r1, r2
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	f7fa fd87 	bl	80005e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ada:	e00c      	b.n	8005af6 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	0018      	movs	r0, r3
 8005ae0:	f7ff f912 	bl	8004d08 <HAL_UART_RxCpltCallback>
}
 8005ae4:	e007      	b.n	8005af6 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699a      	ldr	r2, [r3, #24]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2108      	movs	r1, #8
 8005af2:	430a      	orrs	r2, r1
 8005af4:	619a      	str	r2, [r3, #24]
}
 8005af6:	46c0      	nop			; (mov r8, r8)
 8005af8:	46bd      	mov	sp, r7
 8005afa:	b010      	add	sp, #64	; 0x40
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	46c0      	nop			; (mov r8, r8)
 8005b00:	fffffedf 	.word	0xfffffedf

08005b04 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b09c      	sub	sp, #112	; 0x70
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005b0c:	236a      	movs	r3, #106	; 0x6a
 8005b0e:	18fb      	adds	r3, r7, r3
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	2160      	movs	r1, #96	; 0x60
 8005b14:	5a52      	ldrh	r2, [r2, r1]
 8005b16:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	228c      	movs	r2, #140	; 0x8c
 8005b34:	589b      	ldr	r3, [r3, r2]
 8005b36:	2b22      	cmp	r3, #34	; 0x22
 8005b38:	d000      	beq.n	8005b3c <UART_RxISR_8BIT_FIFOEN+0x38>
 8005b3a:	e144      	b.n	8005dc6 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005b3c:	235e      	movs	r3, #94	; 0x5e
 8005b3e:	18fb      	adds	r3, r7, r3
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	2168      	movs	r1, #104	; 0x68
 8005b44:	5a52      	ldrh	r2, [r2, r1]
 8005b46:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005b48:	e0eb      	b.n	8005d22 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b50:	215c      	movs	r1, #92	; 0x5c
 8005b52:	187b      	adds	r3, r7, r1
 8005b54:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005b56:	187b      	adds	r3, r7, r1
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	236a      	movs	r3, #106	; 0x6a
 8005b5e:	18fb      	adds	r3, r7, r3
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	b2d9      	uxtb	r1, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b68:	400a      	ands	r2, r1
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b72:	1c5a      	adds	r2, r3, #1
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	225e      	movs	r2, #94	; 0x5e
 8005b7c:	5a9b      	ldrh	r3, [r3, r2]
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	3b01      	subs	r3, #1
 8005b82:	b299      	uxth	r1, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	225e      	movs	r2, #94	; 0x5e
 8005b88:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b94:	2207      	movs	r2, #7
 8005b96:	4013      	ands	r3, r2
 8005b98:	d049      	beq.n	8005c2e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	d010      	beq.n	8005bc4 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005ba2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005ba4:	2380      	movs	r3, #128	; 0x80
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	4013      	ands	r3, r2
 8005baa:	d00b      	beq.n	8005bc4 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2290      	movs	r2, #144	; 0x90
 8005bb8:	589b      	ldr	r3, [r3, r2]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2190      	movs	r1, #144	; 0x90
 8005bc2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	4013      	ands	r3, r2
 8005bca:	d00f      	beq.n	8005bec <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005bcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bce:	2201      	movs	r2, #1
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	d00b      	beq.n	8005bec <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2202      	movs	r2, #2
 8005bda:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2290      	movs	r2, #144	; 0x90
 8005be0:	589b      	ldr	r3, [r3, r2]
 8005be2:	2204      	movs	r2, #4
 8005be4:	431a      	orrs	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2190      	movs	r1, #144	; 0x90
 8005bea:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bee:	2204      	movs	r2, #4
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	d00f      	beq.n	8005c14 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005bf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	d00b      	beq.n	8005c14 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2204      	movs	r2, #4
 8005c02:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2290      	movs	r2, #144	; 0x90
 8005c08:	589b      	ldr	r3, [r3, r2]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2190      	movs	r1, #144	; 0x90
 8005c12:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2290      	movs	r2, #144	; 0x90
 8005c18:	589b      	ldr	r3, [r3, r2]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d007      	beq.n	8005c2e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	0018      	movs	r0, r3
 8005c22:	f7ff f879 	bl	8004d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2290      	movs	r2, #144	; 0x90
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	225e      	movs	r2, #94	; 0x5e
 8005c32:	5a9b      	ldrh	r3, [r3, r2]
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d173      	bne.n	8005d22 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c42:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c44:	2301      	movs	r3, #1
 8005c46:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4a:	f383 8810 	msr	PRIMASK, r3
}
 8005c4e:	46c0      	nop			; (mov r8, r8)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4961      	ldr	r1, [pc, #388]	; (8005de0 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8005c5c:	400a      	ands	r2, r1
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c62:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c66:	f383 8810 	msr	PRIMASK, r3
}
 8005c6a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8005c70:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8005c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c74:	657b      	str	r3, [r7, #84]	; 0x54
 8005c76:	2301      	movs	r3, #1
 8005c78:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7c:	f383 8810 	msr	PRIMASK, r3
}
 8005c80:	46c0      	nop			; (mov r8, r8)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689a      	ldr	r2, [r3, #8]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4955      	ldr	r1, [pc, #340]	; (8005de4 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8005c8e:	400a      	ands	r2, r1
 8005c90:	609a      	str	r2, [r3, #8]
 8005c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c94:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c98:	f383 8810 	msr	PRIMASK, r3
}
 8005c9c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	228c      	movs	r2, #140	; 0x8c
 8005ca2:	2120      	movs	r1, #32
 8005ca4:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d12f      	bne.n	8005d1a <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cc0:	f3ef 8310 	mrs	r3, PRIMASK
 8005cc4:	623b      	str	r3, [r7, #32]
  return(result);
 8005cc6:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc8:	653b      	str	r3, [r7, #80]	; 0x50
 8005cca:	2301      	movs	r3, #1
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	f383 8810 	msr	PRIMASK, r3
}
 8005cd4:	46c0      	nop			; (mov r8, r8)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2110      	movs	r1, #16
 8005ce2:	438a      	bics	r2, r1
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cec:	f383 8810 	msr	PRIMASK, r3
}
 8005cf0:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	2210      	movs	r2, #16
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	2b10      	cmp	r3, #16
 8005cfe:	d103      	bne.n	8005d08 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2210      	movs	r2, #16
 8005d06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	225c      	movs	r2, #92	; 0x5c
 8005d0c:	5a9a      	ldrh	r2, [r3, r2]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	0011      	movs	r1, r2
 8005d12:	0018      	movs	r0, r3
 8005d14:	f7fa fc68 	bl	80005e8 <HAL_UARTEx_RxEventCallback>
 8005d18:	e003      	b.n	8005d22 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	f7fe fff3 	bl	8004d08 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d22:	235e      	movs	r3, #94	; 0x5e
 8005d24:	18fb      	adds	r3, r7, r3
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d004      	beq.n	8005d36 <UART_RxISR_8BIT_FIFOEN+0x232>
 8005d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d2e:	2220      	movs	r2, #32
 8005d30:	4013      	ands	r3, r2
 8005d32:	d000      	beq.n	8005d36 <UART_RxISR_8BIT_FIFOEN+0x232>
 8005d34:	e709      	b.n	8005b4a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005d36:	204e      	movs	r0, #78	; 0x4e
 8005d38:	183b      	adds	r3, r7, r0
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	215e      	movs	r1, #94	; 0x5e
 8005d3e:	5a52      	ldrh	r2, [r2, r1]
 8005d40:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005d42:	0001      	movs	r1, r0
 8005d44:	187b      	adds	r3, r7, r1
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d044      	beq.n	8005dd6 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2268      	movs	r2, #104	; 0x68
 8005d50:	5a9b      	ldrh	r3, [r3, r2]
 8005d52:	187a      	adds	r2, r7, r1
 8005d54:	8812      	ldrh	r2, [r2, #0]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d23d      	bcs.n	8005dd6 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d60:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005d62:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d64:	2301      	movs	r3, #1
 8005d66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f383 8810 	msr	PRIMASK, r3
}
 8005d6e:	46c0      	nop			; (mov r8, r8)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689a      	ldr	r2, [r3, #8]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	491b      	ldr	r1, [pc, #108]	; (8005de8 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8005d7c:	400a      	ands	r2, r1
 8005d7e:	609a      	str	r2, [r3, #8]
 8005d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	f383 8810 	msr	PRIMASK, r3
}
 8005d8a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a17      	ldr	r2, [pc, #92]	; (8005dec <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8005d90:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d92:	f3ef 8310 	mrs	r3, PRIMASK
 8005d96:	617b      	str	r3, [r7, #20]
  return(result);
 8005d98:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005d9a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	f383 8810 	msr	PRIMASK, r3
}
 8005da6:	46c0      	nop			; (mov r8, r8)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2120      	movs	r1, #32
 8005db4:	430a      	orrs	r2, r1
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f383 8810 	msr	PRIMASK, r3
}
 8005dc2:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005dc4:	e007      	b.n	8005dd6 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	699a      	ldr	r2, [r3, #24]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2108      	movs	r1, #8
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	619a      	str	r2, [r3, #24]
}
 8005dd6:	46c0      	nop			; (mov r8, r8)
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	b01c      	add	sp, #112	; 0x70
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	46c0      	nop			; (mov r8, r8)
 8005de0:	fffffeff 	.word	0xfffffeff
 8005de4:	effffffe 	.word	0xeffffffe
 8005de8:	efffffff 	.word	0xefffffff
 8005dec:	0800581d 	.word	0x0800581d

08005df0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b09e      	sub	sp, #120	; 0x78
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005df8:	2372      	movs	r3, #114	; 0x72
 8005dfa:	18fb      	adds	r3, r7, r3
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	2160      	movs	r1, #96	; 0x60
 8005e00:	5a52      	ldrh	r2, [r2, r1]
 8005e02:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	228c      	movs	r2, #140	; 0x8c
 8005e20:	589b      	ldr	r3, [r3, r2]
 8005e22:	2b22      	cmp	r3, #34	; 0x22
 8005e24:	d000      	beq.n	8005e28 <UART_RxISR_16BIT_FIFOEN+0x38>
 8005e26:	e144      	b.n	80060b2 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005e28:	2366      	movs	r3, #102	; 0x66
 8005e2a:	18fb      	adds	r3, r7, r3
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	2168      	movs	r1, #104	; 0x68
 8005e30:	5a52      	ldrh	r2, [r2, r1]
 8005e32:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005e34:	e0eb      	b.n	800600e <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e3c:	2164      	movs	r1, #100	; 0x64
 8005e3e:	187b      	adds	r3, r7, r1
 8005e40:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e46:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8005e48:	187b      	adds	r3, r7, r1
 8005e4a:	2272      	movs	r2, #114	; 0x72
 8005e4c:	18ba      	adds	r2, r7, r2
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	8812      	ldrh	r2, [r2, #0]
 8005e52:	4013      	ands	r3, r2
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e5e:	1c9a      	adds	r2, r3, #2
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	225e      	movs	r2, #94	; 0x5e
 8005e68:	5a9b      	ldrh	r3, [r3, r2]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	b299      	uxth	r1, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	225e      	movs	r2, #94	; 0x5e
 8005e74:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005e7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e80:	2207      	movs	r2, #7
 8005e82:	4013      	ands	r3, r2
 8005e84:	d049      	beq.n	8005f1a <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e88:	2201      	movs	r2, #1
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	d010      	beq.n	8005eb0 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8005e8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e90:	2380      	movs	r3, #128	; 0x80
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	4013      	ands	r3, r2
 8005e96:	d00b      	beq.n	8005eb0 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2290      	movs	r2, #144	; 0x90
 8005ea4:	589b      	ldr	r3, [r3, r2]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	431a      	orrs	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2190      	movs	r1, #144	; 0x90
 8005eae:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005eb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	d00f      	beq.n	8005ed8 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8005eb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005eba:	2201      	movs	r2, #1
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	d00b      	beq.n	8005ed8 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2290      	movs	r2, #144	; 0x90
 8005ecc:	589b      	ldr	r3, [r3, r2]
 8005ece:	2204      	movs	r2, #4
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2190      	movs	r1, #144	; 0x90
 8005ed6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eda:	2204      	movs	r2, #4
 8005edc:	4013      	ands	r3, r2
 8005ede:	d00f      	beq.n	8005f00 <UART_RxISR_16BIT_FIFOEN+0x110>
 8005ee0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	d00b      	beq.n	8005f00 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2204      	movs	r2, #4
 8005eee:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2290      	movs	r2, #144	; 0x90
 8005ef4:	589b      	ldr	r3, [r3, r2]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	431a      	orrs	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2190      	movs	r1, #144	; 0x90
 8005efe:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2290      	movs	r2, #144	; 0x90
 8005f04:	589b      	ldr	r3, [r3, r2]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d007      	beq.n	8005f1a <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	0018      	movs	r0, r3
 8005f0e:	f7fe ff03 	bl	8004d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2290      	movs	r2, #144	; 0x90
 8005f16:	2100      	movs	r1, #0
 8005f18:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	225e      	movs	r2, #94	; 0x5e
 8005f1e:	5a9b      	ldrh	r3, [r3, r2]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d173      	bne.n	800600e <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f26:	f3ef 8310 	mrs	r3, PRIMASK
 8005f2a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f30:	2301      	movs	r3, #1
 8005f32:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f36:	f383 8810 	msr	PRIMASK, r3
}
 8005f3a:	46c0      	nop			; (mov r8, r8)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4961      	ldr	r1, [pc, #388]	; (80060cc <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8005f48:	400a      	ands	r2, r1
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f4e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f52:	f383 8810 	msr	PRIMASK, r3
}
 8005f56:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f58:	f3ef 8310 	mrs	r3, PRIMASK
 8005f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f60:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f62:	2301      	movs	r3, #1
 8005f64:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f68:	f383 8810 	msr	PRIMASK, r3
}
 8005f6c:	46c0      	nop			; (mov r8, r8)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4955      	ldr	r1, [pc, #340]	; (80060d0 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8005f7a:	400a      	ands	r2, r1
 8005f7c:	609a      	str	r2, [r3, #8]
 8005f7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f80:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f84:	f383 8810 	msr	PRIMASK, r3
}
 8005f88:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	228c      	movs	r2, #140	; 0x8c
 8005f8e:	2120      	movs	r1, #32
 8005f90:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d12f      	bne.n	8006006 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fac:	f3ef 8310 	mrs	r3, PRIMASK
 8005fb0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb4:	657b      	str	r3, [r7, #84]	; 0x54
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbc:	f383 8810 	msr	PRIMASK, r3
}
 8005fc0:	46c0      	nop			; (mov r8, r8)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2110      	movs	r1, #16
 8005fce:	438a      	bics	r2, r1
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd8:	f383 8810 	msr	PRIMASK, r3
}
 8005fdc:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	2210      	movs	r2, #16
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	2b10      	cmp	r3, #16
 8005fea:	d103      	bne.n	8005ff4 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2210      	movs	r2, #16
 8005ff2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	225c      	movs	r2, #92	; 0x5c
 8005ff8:	5a9a      	ldrh	r2, [r3, r2]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	0011      	movs	r1, r2
 8005ffe:	0018      	movs	r0, r3
 8006000:	f7fa faf2 	bl	80005e8 <HAL_UARTEx_RxEventCallback>
 8006004:	e003      	b.n	800600e <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	0018      	movs	r0, r3
 800600a:	f7fe fe7d 	bl	8004d08 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800600e:	2366      	movs	r3, #102	; 0x66
 8006010:	18fb      	adds	r3, r7, r3
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d004      	beq.n	8006022 <UART_RxISR_16BIT_FIFOEN+0x232>
 8006018:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800601a:	2220      	movs	r2, #32
 800601c:	4013      	ands	r3, r2
 800601e:	d000      	beq.n	8006022 <UART_RxISR_16BIT_FIFOEN+0x232>
 8006020:	e709      	b.n	8005e36 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006022:	2052      	movs	r0, #82	; 0x52
 8006024:	183b      	adds	r3, r7, r0
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	215e      	movs	r1, #94	; 0x5e
 800602a:	5a52      	ldrh	r2, [r2, r1]
 800602c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800602e:	0001      	movs	r1, r0
 8006030:	187b      	adds	r3, r7, r1
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d044      	beq.n	80060c2 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2268      	movs	r2, #104	; 0x68
 800603c:	5a9b      	ldrh	r3, [r3, r2]
 800603e:	187a      	adds	r2, r7, r1
 8006040:	8812      	ldrh	r2, [r2, #0]
 8006042:	429a      	cmp	r2, r3
 8006044:	d23d      	bcs.n	80060c2 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006046:	f3ef 8310 	mrs	r3, PRIMASK
 800604a:	60fb      	str	r3, [r7, #12]
  return(result);
 800604c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800604e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006050:	2301      	movs	r3, #1
 8006052:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f383 8810 	msr	PRIMASK, r3
}
 800605a:	46c0      	nop			; (mov r8, r8)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689a      	ldr	r2, [r3, #8]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	491b      	ldr	r1, [pc, #108]	; (80060d4 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8006068:	400a      	ands	r2, r1
 800606a:	609a      	str	r2, [r3, #8]
 800606c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800606e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f383 8810 	msr	PRIMASK, r3
}
 8006076:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a17      	ldr	r2, [pc, #92]	; (80060d8 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 800607c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800607e:	f3ef 8310 	mrs	r3, PRIMASK
 8006082:	61bb      	str	r3, [r7, #24]
  return(result);
 8006084:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006086:	64bb      	str	r3, [r7, #72]	; 0x48
 8006088:	2301      	movs	r3, #1
 800608a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	f383 8810 	msr	PRIMASK, r3
}
 8006092:	46c0      	nop			; (mov r8, r8)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2120      	movs	r1, #32
 80060a0:	430a      	orrs	r2, r1
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	f383 8810 	msr	PRIMASK, r3
}
 80060ae:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060b0:	e007      	b.n	80060c2 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	699a      	ldr	r2, [r3, #24]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2108      	movs	r1, #8
 80060be:	430a      	orrs	r2, r1
 80060c0:	619a      	str	r2, [r3, #24]
}
 80060c2:	46c0      	nop			; (mov r8, r8)
 80060c4:	46bd      	mov	sp, r7
 80060c6:	b01e      	add	sp, #120	; 0x78
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	46c0      	nop			; (mov r8, r8)
 80060cc:	fffffeff 	.word	0xfffffeff
 80060d0:	effffffe 	.word	0xeffffffe
 80060d4:	efffffff 	.word	0xefffffff
 80060d8:	08005991 	.word	0x08005991

080060dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80060e4:	46c0      	nop			; (mov r8, r8)
 80060e6:	46bd      	mov	sp, r7
 80060e8:	b002      	add	sp, #8
 80060ea:	bd80      	pop	{r7, pc}

080060ec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80060f4:	46c0      	nop			; (mov r8, r8)
 80060f6:	46bd      	mov	sp, r7
 80060f8:	b002      	add	sp, #8
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006104:	46c0      	nop			; (mov r8, r8)
 8006106:	46bd      	mov	sp, r7
 8006108:	b002      	add	sp, #8
 800610a:	bd80      	pop	{r7, pc}

0800610c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2284      	movs	r2, #132	; 0x84
 8006118:	5c9b      	ldrb	r3, [r3, r2]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d101      	bne.n	8006122 <HAL_UARTEx_DisableFifoMode+0x16>
 800611e:	2302      	movs	r3, #2
 8006120:	e027      	b.n	8006172 <HAL_UARTEx_DisableFifoMode+0x66>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2284      	movs	r2, #132	; 0x84
 8006126:	2101      	movs	r1, #1
 8006128:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2288      	movs	r2, #136	; 0x88
 800612e:	2124      	movs	r1, #36	; 0x24
 8006130:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2101      	movs	r1, #1
 8006146:	438a      	bics	r2, r1
 8006148:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4a0b      	ldr	r2, [pc, #44]	; (800617c <HAL_UARTEx_DisableFifoMode+0x70>)
 800614e:	4013      	ands	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2288      	movs	r2, #136	; 0x88
 8006164:	2120      	movs	r1, #32
 8006166:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2284      	movs	r2, #132	; 0x84
 800616c:	2100      	movs	r1, #0
 800616e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	0018      	movs	r0, r3
 8006174:	46bd      	mov	sp, r7
 8006176:	b004      	add	sp, #16
 8006178:	bd80      	pop	{r7, pc}
 800617a:	46c0      	nop			; (mov r8, r8)
 800617c:	dfffffff 	.word	0xdfffffff

08006180 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2284      	movs	r2, #132	; 0x84
 800618e:	5c9b      	ldrb	r3, [r3, r2]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d101      	bne.n	8006198 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006194:	2302      	movs	r3, #2
 8006196:	e02e      	b.n	80061f6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2284      	movs	r2, #132	; 0x84
 800619c:	2101      	movs	r1, #1
 800619e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2288      	movs	r2, #136	; 0x88
 80061a4:	2124      	movs	r1, #36	; 0x24
 80061a6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2101      	movs	r1, #1
 80061bc:	438a      	bics	r2, r1
 80061be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	00db      	lsls	r3, r3, #3
 80061c8:	08d9      	lsrs	r1, r3, #3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	0018      	movs	r0, r3
 80061d8:	f000 f8bc 	bl	8006354 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2288      	movs	r2, #136	; 0x88
 80061e8:	2120      	movs	r1, #32
 80061ea:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2284      	movs	r2, #132	; 0x84
 80061f0:	2100      	movs	r1, #0
 80061f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	0018      	movs	r0, r3
 80061f8:	46bd      	mov	sp, r7
 80061fa:	b004      	add	sp, #16
 80061fc:	bd80      	pop	{r7, pc}
	...

08006200 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2284      	movs	r2, #132	; 0x84
 800620e:	5c9b      	ldrb	r3, [r3, r2]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006214:	2302      	movs	r3, #2
 8006216:	e02f      	b.n	8006278 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2284      	movs	r2, #132	; 0x84
 800621c:	2101      	movs	r1, #1
 800621e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2288      	movs	r2, #136	; 0x88
 8006224:	2124      	movs	r1, #36	; 0x24
 8006226:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2101      	movs	r1, #1
 800623c:	438a      	bics	r2, r1
 800623e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	4a0e      	ldr	r2, [pc, #56]	; (8006280 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006248:	4013      	ands	r3, r2
 800624a:	0019      	movs	r1, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	0018      	movs	r0, r3
 800625a:	f000 f87b 	bl	8006354 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2288      	movs	r2, #136	; 0x88
 800626a:	2120      	movs	r1, #32
 800626c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2284      	movs	r2, #132	; 0x84
 8006272:	2100      	movs	r1, #0
 8006274:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	0018      	movs	r0, r3
 800627a:	46bd      	mov	sp, r7
 800627c:	b004      	add	sp, #16
 800627e:	bd80      	pop	{r7, pc}
 8006280:	f1ffffff 	.word	0xf1ffffff

08006284 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006284:	b5b0      	push	{r4, r5, r7, lr}
 8006286:	b08a      	sub	sp, #40	; 0x28
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	1dbb      	adds	r3, r7, #6
 8006290:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	228c      	movs	r2, #140	; 0x8c
 8006296:	589b      	ldr	r3, [r3, r2]
 8006298:	2b20      	cmp	r3, #32
 800629a:	d156      	bne.n	800634a <HAL_UARTEx_ReceiveToIdle_IT+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80062a2:	1dbb      	adds	r3, r7, #6
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e04e      	b.n	800634c <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	689a      	ldr	r2, [r3, #8]
 80062b2:	2380      	movs	r3, #128	; 0x80
 80062b4:	015b      	lsls	r3, r3, #5
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d109      	bne.n	80062ce <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d105      	bne.n	80062ce <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2201      	movs	r2, #1
 80062c6:	4013      	ands	r3, r2
 80062c8:	d001      	beq.n	80062ce <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
      {
        return  HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e03e      	b.n	800634c <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2201      	movs	r2, #1
 80062d2:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80062da:	2527      	movs	r5, #39	; 0x27
 80062dc:	197c      	adds	r4, r7, r5
 80062de:	1dbb      	adds	r3, r7, #6
 80062e0:	881a      	ldrh	r2, [r3, #0]
 80062e2:	68b9      	ldr	r1, [r7, #8]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	0018      	movs	r0, r3
 80062e8:	f7ff f8ca 	bl	8005480 <UART_Start_Receive_IT>
 80062ec:	0003      	movs	r3, r0
 80062ee:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80062f0:	197b      	adds	r3, r7, r5
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d124      	bne.n	8006342 <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d11c      	bne.n	800633a <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2210      	movs	r2, #16
 8006306:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006308:	f3ef 8310 	mrs	r3, PRIMASK
 800630c:	617b      	str	r3, [r7, #20]
  return(result);
 800630e:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006310:	623b      	str	r3, [r7, #32]
 8006312:	2301      	movs	r3, #1
 8006314:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	f383 8810 	msr	PRIMASK, r3
}
 800631c:	46c0      	nop			; (mov r8, r8)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2110      	movs	r1, #16
 800632a:	430a      	orrs	r2, r1
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	f383 8810 	msr	PRIMASK, r3
}
 8006338:	e003      	b.n	8006342 <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800633a:	2327      	movs	r3, #39	; 0x27
 800633c:	18fb      	adds	r3, r7, r3
 800633e:	2201      	movs	r2, #1
 8006340:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8006342:	2327      	movs	r3, #39	; 0x27
 8006344:	18fb      	adds	r3, r7, r3
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	e000      	b.n	800634c <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800634a:	2302      	movs	r3, #2
  }
}
 800634c:	0018      	movs	r0, r3
 800634e:	46bd      	mov	sp, r7
 8006350:	b00a      	add	sp, #40	; 0x28
 8006352:	bdb0      	pop	{r4, r5, r7, pc}

08006354 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006360:	2b00      	cmp	r3, #0
 8006362:	d108      	bne.n	8006376 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	226a      	movs	r2, #106	; 0x6a
 8006368:	2101      	movs	r1, #1
 800636a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2268      	movs	r2, #104	; 0x68
 8006370:	2101      	movs	r1, #1
 8006372:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006374:	e043      	b.n	80063fe <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006376:	260f      	movs	r6, #15
 8006378:	19bb      	adds	r3, r7, r6
 800637a:	2208      	movs	r2, #8
 800637c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800637e:	200e      	movs	r0, #14
 8006380:	183b      	adds	r3, r7, r0
 8006382:	2208      	movs	r2, #8
 8006384:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	0e5b      	lsrs	r3, r3, #25
 800638e:	b2da      	uxtb	r2, r3
 8006390:	240d      	movs	r4, #13
 8006392:	193b      	adds	r3, r7, r4
 8006394:	2107      	movs	r1, #7
 8006396:	400a      	ands	r2, r1
 8006398:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	0f5b      	lsrs	r3, r3, #29
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	250c      	movs	r5, #12
 80063a6:	197b      	adds	r3, r7, r5
 80063a8:	2107      	movs	r1, #7
 80063aa:	400a      	ands	r2, r1
 80063ac:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063ae:	183b      	adds	r3, r7, r0
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	197a      	adds	r2, r7, r5
 80063b4:	7812      	ldrb	r2, [r2, #0]
 80063b6:	4914      	ldr	r1, [pc, #80]	; (8006408 <UARTEx_SetNbDataToProcess+0xb4>)
 80063b8:	5c8a      	ldrb	r2, [r1, r2]
 80063ba:	435a      	muls	r2, r3
 80063bc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80063be:	197b      	adds	r3, r7, r5
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	4a12      	ldr	r2, [pc, #72]	; (800640c <UARTEx_SetNbDataToProcess+0xb8>)
 80063c4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063c6:	0019      	movs	r1, r3
 80063c8:	f7f9 ff36 	bl	8000238 <__divsi3>
 80063cc:	0003      	movs	r3, r0
 80063ce:	b299      	uxth	r1, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	226a      	movs	r2, #106	; 0x6a
 80063d4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063d6:	19bb      	adds	r3, r7, r6
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	193a      	adds	r2, r7, r4
 80063dc:	7812      	ldrb	r2, [r2, #0]
 80063de:	490a      	ldr	r1, [pc, #40]	; (8006408 <UARTEx_SetNbDataToProcess+0xb4>)
 80063e0:	5c8a      	ldrb	r2, [r1, r2]
 80063e2:	435a      	muls	r2, r3
 80063e4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80063e6:	193b      	adds	r3, r7, r4
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	4a08      	ldr	r2, [pc, #32]	; (800640c <UARTEx_SetNbDataToProcess+0xb8>)
 80063ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063ee:	0019      	movs	r1, r3
 80063f0:	f7f9 ff22 	bl	8000238 <__divsi3>
 80063f4:	0003      	movs	r3, r0
 80063f6:	b299      	uxth	r1, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2268      	movs	r2, #104	; 0x68
 80063fc:	5299      	strh	r1, [r3, r2]
}
 80063fe:	46c0      	nop			; (mov r8, r8)
 8006400:	46bd      	mov	sp, r7
 8006402:	b005      	add	sp, #20
 8006404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006406:	46c0      	nop			; (mov r8, r8)
 8006408:	08007dac 	.word	0x08007dac
 800640c:	08007db4 	.word	0x08007db4

08006410 <__errno>:
 8006410:	4b01      	ldr	r3, [pc, #4]	; (8006418 <__errno+0x8>)
 8006412:	6818      	ldr	r0, [r3, #0]
 8006414:	4770      	bx	lr
 8006416:	46c0      	nop			; (mov r8, r8)
 8006418:	2000040c 	.word	0x2000040c

0800641c <__libc_init_array>:
 800641c:	b570      	push	{r4, r5, r6, lr}
 800641e:	2600      	movs	r6, #0
 8006420:	4d0c      	ldr	r5, [pc, #48]	; (8006454 <__libc_init_array+0x38>)
 8006422:	4c0d      	ldr	r4, [pc, #52]	; (8006458 <__libc_init_array+0x3c>)
 8006424:	1b64      	subs	r4, r4, r5
 8006426:	10a4      	asrs	r4, r4, #2
 8006428:	42a6      	cmp	r6, r4
 800642a:	d109      	bne.n	8006440 <__libc_init_array+0x24>
 800642c:	2600      	movs	r6, #0
 800642e:	f001 fb31 	bl	8007a94 <_init>
 8006432:	4d0a      	ldr	r5, [pc, #40]	; (800645c <__libc_init_array+0x40>)
 8006434:	4c0a      	ldr	r4, [pc, #40]	; (8006460 <__libc_init_array+0x44>)
 8006436:	1b64      	subs	r4, r4, r5
 8006438:	10a4      	asrs	r4, r4, #2
 800643a:	42a6      	cmp	r6, r4
 800643c:	d105      	bne.n	800644a <__libc_init_array+0x2e>
 800643e:	bd70      	pop	{r4, r5, r6, pc}
 8006440:	00b3      	lsls	r3, r6, #2
 8006442:	58eb      	ldr	r3, [r5, r3]
 8006444:	4798      	blx	r3
 8006446:	3601      	adds	r6, #1
 8006448:	e7ee      	b.n	8006428 <__libc_init_array+0xc>
 800644a:	00b3      	lsls	r3, r6, #2
 800644c:	58eb      	ldr	r3, [r5, r3]
 800644e:	4798      	blx	r3
 8006450:	3601      	adds	r6, #1
 8006452:	e7f2      	b.n	800643a <__libc_init_array+0x1e>
 8006454:	08007e54 	.word	0x08007e54
 8006458:	08007e54 	.word	0x08007e54
 800645c:	08007e54 	.word	0x08007e54
 8006460:	08007e58 	.word	0x08007e58

08006464 <memcpy>:
 8006464:	2300      	movs	r3, #0
 8006466:	b510      	push	{r4, lr}
 8006468:	429a      	cmp	r2, r3
 800646a:	d100      	bne.n	800646e <memcpy+0xa>
 800646c:	bd10      	pop	{r4, pc}
 800646e:	5ccc      	ldrb	r4, [r1, r3]
 8006470:	54c4      	strb	r4, [r0, r3]
 8006472:	3301      	adds	r3, #1
 8006474:	e7f8      	b.n	8006468 <memcpy+0x4>

08006476 <memset>:
 8006476:	0003      	movs	r3, r0
 8006478:	1882      	adds	r2, r0, r2
 800647a:	4293      	cmp	r3, r2
 800647c:	d100      	bne.n	8006480 <memset+0xa>
 800647e:	4770      	bx	lr
 8006480:	7019      	strb	r1, [r3, #0]
 8006482:	3301      	adds	r3, #1
 8006484:	e7f9      	b.n	800647a <memset+0x4>
	...

08006488 <iprintf>:
 8006488:	b40f      	push	{r0, r1, r2, r3}
 800648a:	4b0b      	ldr	r3, [pc, #44]	; (80064b8 <iprintf+0x30>)
 800648c:	b513      	push	{r0, r1, r4, lr}
 800648e:	681c      	ldr	r4, [r3, #0]
 8006490:	2c00      	cmp	r4, #0
 8006492:	d005      	beq.n	80064a0 <iprintf+0x18>
 8006494:	69a3      	ldr	r3, [r4, #24]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d102      	bne.n	80064a0 <iprintf+0x18>
 800649a:	0020      	movs	r0, r4
 800649c:	f000 fb82 	bl	8006ba4 <__sinit>
 80064a0:	ab05      	add	r3, sp, #20
 80064a2:	0020      	movs	r0, r4
 80064a4:	9a04      	ldr	r2, [sp, #16]
 80064a6:	68a1      	ldr	r1, [r4, #8]
 80064a8:	9301      	str	r3, [sp, #4]
 80064aa:	f000 ff01 	bl	80072b0 <_vfiprintf_r>
 80064ae:	bc16      	pop	{r1, r2, r4}
 80064b0:	bc08      	pop	{r3}
 80064b2:	b004      	add	sp, #16
 80064b4:	4718      	bx	r3
 80064b6:	46c0      	nop			; (mov r8, r8)
 80064b8:	2000040c 	.word	0x2000040c

080064bc <_puts_r>:
 80064bc:	b570      	push	{r4, r5, r6, lr}
 80064be:	0005      	movs	r5, r0
 80064c0:	000e      	movs	r6, r1
 80064c2:	2800      	cmp	r0, #0
 80064c4:	d004      	beq.n	80064d0 <_puts_r+0x14>
 80064c6:	6983      	ldr	r3, [r0, #24]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <_puts_r+0x14>
 80064cc:	f000 fb6a 	bl	8006ba4 <__sinit>
 80064d0:	69ab      	ldr	r3, [r5, #24]
 80064d2:	68ac      	ldr	r4, [r5, #8]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d102      	bne.n	80064de <_puts_r+0x22>
 80064d8:	0028      	movs	r0, r5
 80064da:	f000 fb63 	bl	8006ba4 <__sinit>
 80064de:	4b2d      	ldr	r3, [pc, #180]	; (8006594 <_puts_r+0xd8>)
 80064e0:	429c      	cmp	r4, r3
 80064e2:	d122      	bne.n	800652a <_puts_r+0x6e>
 80064e4:	686c      	ldr	r4, [r5, #4]
 80064e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064e8:	07db      	lsls	r3, r3, #31
 80064ea:	d405      	bmi.n	80064f8 <_puts_r+0x3c>
 80064ec:	89a3      	ldrh	r3, [r4, #12]
 80064ee:	059b      	lsls	r3, r3, #22
 80064f0:	d402      	bmi.n	80064f8 <_puts_r+0x3c>
 80064f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064f4:	f000 fbf7 	bl	8006ce6 <__retarget_lock_acquire_recursive>
 80064f8:	89a3      	ldrh	r3, [r4, #12]
 80064fa:	071b      	lsls	r3, r3, #28
 80064fc:	d502      	bpl.n	8006504 <_puts_r+0x48>
 80064fe:	6923      	ldr	r3, [r4, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d129      	bne.n	8006558 <_puts_r+0x9c>
 8006504:	0021      	movs	r1, r4
 8006506:	0028      	movs	r0, r5
 8006508:	f000 f9a6 	bl	8006858 <__swsetup_r>
 800650c:	2800      	cmp	r0, #0
 800650e:	d023      	beq.n	8006558 <_puts_r+0x9c>
 8006510:	2501      	movs	r5, #1
 8006512:	426d      	negs	r5, r5
 8006514:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006516:	07db      	lsls	r3, r3, #31
 8006518:	d405      	bmi.n	8006526 <_puts_r+0x6a>
 800651a:	89a3      	ldrh	r3, [r4, #12]
 800651c:	059b      	lsls	r3, r3, #22
 800651e:	d402      	bmi.n	8006526 <_puts_r+0x6a>
 8006520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006522:	f000 fbe1 	bl	8006ce8 <__retarget_lock_release_recursive>
 8006526:	0028      	movs	r0, r5
 8006528:	bd70      	pop	{r4, r5, r6, pc}
 800652a:	4b1b      	ldr	r3, [pc, #108]	; (8006598 <_puts_r+0xdc>)
 800652c:	429c      	cmp	r4, r3
 800652e:	d101      	bne.n	8006534 <_puts_r+0x78>
 8006530:	68ac      	ldr	r4, [r5, #8]
 8006532:	e7d8      	b.n	80064e6 <_puts_r+0x2a>
 8006534:	4b19      	ldr	r3, [pc, #100]	; (800659c <_puts_r+0xe0>)
 8006536:	429c      	cmp	r4, r3
 8006538:	d1d5      	bne.n	80064e6 <_puts_r+0x2a>
 800653a:	68ec      	ldr	r4, [r5, #12]
 800653c:	e7d3      	b.n	80064e6 <_puts_r+0x2a>
 800653e:	3601      	adds	r6, #1
 8006540:	60a3      	str	r3, [r4, #8]
 8006542:	2b00      	cmp	r3, #0
 8006544:	da04      	bge.n	8006550 <_puts_r+0x94>
 8006546:	69a2      	ldr	r2, [r4, #24]
 8006548:	429a      	cmp	r2, r3
 800654a:	dc16      	bgt.n	800657a <_puts_r+0xbe>
 800654c:	290a      	cmp	r1, #10
 800654e:	d014      	beq.n	800657a <_puts_r+0xbe>
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	6022      	str	r2, [r4, #0]
 8006556:	7019      	strb	r1, [r3, #0]
 8006558:	68a3      	ldr	r3, [r4, #8]
 800655a:	7831      	ldrb	r1, [r6, #0]
 800655c:	3b01      	subs	r3, #1
 800655e:	2900      	cmp	r1, #0
 8006560:	d1ed      	bne.n	800653e <_puts_r+0x82>
 8006562:	60a3      	str	r3, [r4, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	da0f      	bge.n	8006588 <_puts_r+0xcc>
 8006568:	0028      	movs	r0, r5
 800656a:	0022      	movs	r2, r4
 800656c:	310a      	adds	r1, #10
 800656e:	f000 f91d 	bl	80067ac <__swbuf_r>
 8006572:	250a      	movs	r5, #10
 8006574:	1c43      	adds	r3, r0, #1
 8006576:	d1cd      	bne.n	8006514 <_puts_r+0x58>
 8006578:	e7ca      	b.n	8006510 <_puts_r+0x54>
 800657a:	0022      	movs	r2, r4
 800657c:	0028      	movs	r0, r5
 800657e:	f000 f915 	bl	80067ac <__swbuf_r>
 8006582:	1c43      	adds	r3, r0, #1
 8006584:	d1e8      	bne.n	8006558 <_puts_r+0x9c>
 8006586:	e7c3      	b.n	8006510 <_puts_r+0x54>
 8006588:	250a      	movs	r5, #10
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	6022      	str	r2, [r4, #0]
 8006590:	701d      	strb	r5, [r3, #0]
 8006592:	e7bf      	b.n	8006514 <_puts_r+0x58>
 8006594:	08007de0 	.word	0x08007de0
 8006598:	08007e00 	.word	0x08007e00
 800659c:	08007dc0 	.word	0x08007dc0

080065a0 <puts>:
 80065a0:	b510      	push	{r4, lr}
 80065a2:	4b03      	ldr	r3, [pc, #12]	; (80065b0 <puts+0x10>)
 80065a4:	0001      	movs	r1, r0
 80065a6:	6818      	ldr	r0, [r3, #0]
 80065a8:	f7ff ff88 	bl	80064bc <_puts_r>
 80065ac:	bd10      	pop	{r4, pc}
 80065ae:	46c0      	nop			; (mov r8, r8)
 80065b0:	2000040c 	.word	0x2000040c

080065b4 <setvbuf>:
 80065b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065b6:	001d      	movs	r5, r3
 80065b8:	4b5d      	ldr	r3, [pc, #372]	; (8006730 <setvbuf+0x17c>)
 80065ba:	b085      	sub	sp, #20
 80065bc:	681e      	ldr	r6, [r3, #0]
 80065be:	0004      	movs	r4, r0
 80065c0:	000f      	movs	r7, r1
 80065c2:	9200      	str	r2, [sp, #0]
 80065c4:	2e00      	cmp	r6, #0
 80065c6:	d005      	beq.n	80065d4 <setvbuf+0x20>
 80065c8:	69b3      	ldr	r3, [r6, #24]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d102      	bne.n	80065d4 <setvbuf+0x20>
 80065ce:	0030      	movs	r0, r6
 80065d0:	f000 fae8 	bl	8006ba4 <__sinit>
 80065d4:	4b57      	ldr	r3, [pc, #348]	; (8006734 <setvbuf+0x180>)
 80065d6:	429c      	cmp	r4, r3
 80065d8:	d161      	bne.n	800669e <setvbuf+0xea>
 80065da:	6874      	ldr	r4, [r6, #4]
 80065dc:	9b00      	ldr	r3, [sp, #0]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d005      	beq.n	80065ee <setvbuf+0x3a>
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d900      	bls.n	80065e8 <setvbuf+0x34>
 80065e6:	e09d      	b.n	8006724 <setvbuf+0x170>
 80065e8:	2d00      	cmp	r5, #0
 80065ea:	da00      	bge.n	80065ee <setvbuf+0x3a>
 80065ec:	e09a      	b.n	8006724 <setvbuf+0x170>
 80065ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065f0:	07db      	lsls	r3, r3, #31
 80065f2:	d405      	bmi.n	8006600 <setvbuf+0x4c>
 80065f4:	89a3      	ldrh	r3, [r4, #12]
 80065f6:	059b      	lsls	r3, r3, #22
 80065f8:	d402      	bmi.n	8006600 <setvbuf+0x4c>
 80065fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065fc:	f000 fb73 	bl	8006ce6 <__retarget_lock_acquire_recursive>
 8006600:	0021      	movs	r1, r4
 8006602:	0030      	movs	r0, r6
 8006604:	f000 fa2c 	bl	8006a60 <_fflush_r>
 8006608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800660a:	2900      	cmp	r1, #0
 800660c:	d008      	beq.n	8006620 <setvbuf+0x6c>
 800660e:	0023      	movs	r3, r4
 8006610:	3344      	adds	r3, #68	; 0x44
 8006612:	4299      	cmp	r1, r3
 8006614:	d002      	beq.n	800661c <setvbuf+0x68>
 8006616:	0030      	movs	r0, r6
 8006618:	f000 fbde 	bl	8006dd8 <_free_r>
 800661c:	2300      	movs	r3, #0
 800661e:	6363      	str	r3, [r4, #52]	; 0x34
 8006620:	2300      	movs	r3, #0
 8006622:	61a3      	str	r3, [r4, #24]
 8006624:	6063      	str	r3, [r4, #4]
 8006626:	89a3      	ldrh	r3, [r4, #12]
 8006628:	061b      	lsls	r3, r3, #24
 800662a:	d503      	bpl.n	8006634 <setvbuf+0x80>
 800662c:	0030      	movs	r0, r6
 800662e:	6921      	ldr	r1, [r4, #16]
 8006630:	f000 fbd2 	bl	8006dd8 <_free_r>
 8006634:	89a3      	ldrh	r3, [r4, #12]
 8006636:	4a40      	ldr	r2, [pc, #256]	; (8006738 <setvbuf+0x184>)
 8006638:	4013      	ands	r3, r2
 800663a:	81a3      	strh	r3, [r4, #12]
 800663c:	9b00      	ldr	r3, [sp, #0]
 800663e:	2b02      	cmp	r3, #2
 8006640:	d100      	bne.n	8006644 <setvbuf+0x90>
 8006642:	e069      	b.n	8006718 <setvbuf+0x164>
 8006644:	ab03      	add	r3, sp, #12
 8006646:	0021      	movs	r1, r4
 8006648:	0030      	movs	r0, r6
 800664a:	aa02      	add	r2, sp, #8
 800664c:	f000 fb4e 	bl	8006cec <__swhatbuf_r>
 8006650:	89a3      	ldrh	r3, [r4, #12]
 8006652:	4303      	orrs	r3, r0
 8006654:	81a3      	strh	r3, [r4, #12]
 8006656:	2d00      	cmp	r5, #0
 8006658:	d12b      	bne.n	80066b2 <setvbuf+0xfe>
 800665a:	9d02      	ldr	r5, [sp, #8]
 800665c:	0028      	movs	r0, r5
 800665e:	f000 fbb1 	bl	8006dc4 <malloc>
 8006662:	1e07      	subs	r7, r0, #0
 8006664:	d153      	bne.n	800670e <setvbuf+0x15a>
 8006666:	9b02      	ldr	r3, [sp, #8]
 8006668:	9301      	str	r3, [sp, #4]
 800666a:	42ab      	cmp	r3, r5
 800666c:	d149      	bne.n	8006702 <setvbuf+0x14e>
 800666e:	2501      	movs	r5, #1
 8006670:	426d      	negs	r5, r5
 8006672:	2302      	movs	r3, #2
 8006674:	89a2      	ldrh	r2, [r4, #12]
 8006676:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006678:	4313      	orrs	r3, r2
 800667a:	2200      	movs	r2, #0
 800667c:	60a2      	str	r2, [r4, #8]
 800667e:	0022      	movs	r2, r4
 8006680:	3247      	adds	r2, #71	; 0x47
 8006682:	6022      	str	r2, [r4, #0]
 8006684:	6122      	str	r2, [r4, #16]
 8006686:	2201      	movs	r2, #1
 8006688:	b21b      	sxth	r3, r3
 800668a:	81a3      	strh	r3, [r4, #12]
 800668c:	6162      	str	r2, [r4, #20]
 800668e:	4211      	tst	r1, r2
 8006690:	d134      	bne.n	80066fc <setvbuf+0x148>
 8006692:	059b      	lsls	r3, r3, #22
 8006694:	d432      	bmi.n	80066fc <setvbuf+0x148>
 8006696:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006698:	f000 fb26 	bl	8006ce8 <__retarget_lock_release_recursive>
 800669c:	e02e      	b.n	80066fc <setvbuf+0x148>
 800669e:	4b27      	ldr	r3, [pc, #156]	; (800673c <setvbuf+0x188>)
 80066a0:	429c      	cmp	r4, r3
 80066a2:	d101      	bne.n	80066a8 <setvbuf+0xf4>
 80066a4:	68b4      	ldr	r4, [r6, #8]
 80066a6:	e799      	b.n	80065dc <setvbuf+0x28>
 80066a8:	4b25      	ldr	r3, [pc, #148]	; (8006740 <setvbuf+0x18c>)
 80066aa:	429c      	cmp	r4, r3
 80066ac:	d196      	bne.n	80065dc <setvbuf+0x28>
 80066ae:	68f4      	ldr	r4, [r6, #12]
 80066b0:	e794      	b.n	80065dc <setvbuf+0x28>
 80066b2:	2f00      	cmp	r7, #0
 80066b4:	d0d2      	beq.n	800665c <setvbuf+0xa8>
 80066b6:	69b3      	ldr	r3, [r6, #24]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d102      	bne.n	80066c2 <setvbuf+0x10e>
 80066bc:	0030      	movs	r0, r6
 80066be:	f000 fa71 	bl	8006ba4 <__sinit>
 80066c2:	9b00      	ldr	r3, [sp, #0]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d102      	bne.n	80066ce <setvbuf+0x11a>
 80066c8:	89a2      	ldrh	r2, [r4, #12]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	81a3      	strh	r3, [r4, #12]
 80066ce:	89a2      	ldrh	r2, [r4, #12]
 80066d0:	2308      	movs	r3, #8
 80066d2:	0011      	movs	r1, r2
 80066d4:	6027      	str	r7, [r4, #0]
 80066d6:	6127      	str	r7, [r4, #16]
 80066d8:	6165      	str	r5, [r4, #20]
 80066da:	4019      	ands	r1, r3
 80066dc:	421a      	tst	r2, r3
 80066de:	d01f      	beq.n	8006720 <setvbuf+0x16c>
 80066e0:	07d3      	lsls	r3, r2, #31
 80066e2:	d51b      	bpl.n	800671c <setvbuf+0x168>
 80066e4:	2300      	movs	r3, #0
 80066e6:	426d      	negs	r5, r5
 80066e8:	60a3      	str	r3, [r4, #8]
 80066ea:	61a5      	str	r5, [r4, #24]
 80066ec:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80066ee:	2301      	movs	r3, #1
 80066f0:	000d      	movs	r5, r1
 80066f2:	401d      	ands	r5, r3
 80066f4:	4219      	tst	r1, r3
 80066f6:	d118      	bne.n	800672a <setvbuf+0x176>
 80066f8:	0593      	lsls	r3, r2, #22
 80066fa:	d5cc      	bpl.n	8006696 <setvbuf+0xe2>
 80066fc:	0028      	movs	r0, r5
 80066fe:	b005      	add	sp, #20
 8006700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006702:	9801      	ldr	r0, [sp, #4]
 8006704:	f000 fb5e 	bl	8006dc4 <malloc>
 8006708:	9d01      	ldr	r5, [sp, #4]
 800670a:	1e07      	subs	r7, r0, #0
 800670c:	d0af      	beq.n	800666e <setvbuf+0xba>
 800670e:	2380      	movs	r3, #128	; 0x80
 8006710:	89a2      	ldrh	r2, [r4, #12]
 8006712:	4313      	orrs	r3, r2
 8006714:	81a3      	strh	r3, [r4, #12]
 8006716:	e7ce      	b.n	80066b6 <setvbuf+0x102>
 8006718:	2500      	movs	r5, #0
 800671a:	e7aa      	b.n	8006672 <setvbuf+0xbe>
 800671c:	60a5      	str	r5, [r4, #8]
 800671e:	e7e5      	b.n	80066ec <setvbuf+0x138>
 8006720:	60a1      	str	r1, [r4, #8]
 8006722:	e7e3      	b.n	80066ec <setvbuf+0x138>
 8006724:	2501      	movs	r5, #1
 8006726:	426d      	negs	r5, r5
 8006728:	e7e8      	b.n	80066fc <setvbuf+0x148>
 800672a:	2500      	movs	r5, #0
 800672c:	e7e6      	b.n	80066fc <setvbuf+0x148>
 800672e:	46c0      	nop			; (mov r8, r8)
 8006730:	2000040c 	.word	0x2000040c
 8006734:	08007de0 	.word	0x08007de0
 8006738:	fffff35c 	.word	0xfffff35c
 800673c:	08007e00 	.word	0x08007e00
 8006740:	08007dc0 	.word	0x08007dc0

08006744 <sniprintf>:
 8006744:	b40c      	push	{r2, r3}
 8006746:	b530      	push	{r4, r5, lr}
 8006748:	4b17      	ldr	r3, [pc, #92]	; (80067a8 <sniprintf+0x64>)
 800674a:	000c      	movs	r4, r1
 800674c:	681d      	ldr	r5, [r3, #0]
 800674e:	b09d      	sub	sp, #116	; 0x74
 8006750:	2900      	cmp	r1, #0
 8006752:	da08      	bge.n	8006766 <sniprintf+0x22>
 8006754:	238b      	movs	r3, #139	; 0x8b
 8006756:	2001      	movs	r0, #1
 8006758:	602b      	str	r3, [r5, #0]
 800675a:	4240      	negs	r0, r0
 800675c:	b01d      	add	sp, #116	; 0x74
 800675e:	bc30      	pop	{r4, r5}
 8006760:	bc08      	pop	{r3}
 8006762:	b002      	add	sp, #8
 8006764:	4718      	bx	r3
 8006766:	2382      	movs	r3, #130	; 0x82
 8006768:	466a      	mov	r2, sp
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	8293      	strh	r3, [r2, #20]
 800676e:	2300      	movs	r3, #0
 8006770:	9002      	str	r0, [sp, #8]
 8006772:	9006      	str	r0, [sp, #24]
 8006774:	4299      	cmp	r1, r3
 8006776:	d000      	beq.n	800677a <sniprintf+0x36>
 8006778:	1e4b      	subs	r3, r1, #1
 800677a:	9304      	str	r3, [sp, #16]
 800677c:	9307      	str	r3, [sp, #28]
 800677e:	2301      	movs	r3, #1
 8006780:	466a      	mov	r2, sp
 8006782:	425b      	negs	r3, r3
 8006784:	82d3      	strh	r3, [r2, #22]
 8006786:	0028      	movs	r0, r5
 8006788:	ab21      	add	r3, sp, #132	; 0x84
 800678a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800678c:	a902      	add	r1, sp, #8
 800678e:	9301      	str	r3, [sp, #4]
 8006790:	f000 fc66 	bl	8007060 <_svfiprintf_r>
 8006794:	1c43      	adds	r3, r0, #1
 8006796:	da01      	bge.n	800679c <sniprintf+0x58>
 8006798:	238b      	movs	r3, #139	; 0x8b
 800679a:	602b      	str	r3, [r5, #0]
 800679c:	2c00      	cmp	r4, #0
 800679e:	d0dd      	beq.n	800675c <sniprintf+0x18>
 80067a0:	2300      	movs	r3, #0
 80067a2:	9a02      	ldr	r2, [sp, #8]
 80067a4:	7013      	strb	r3, [r2, #0]
 80067a6:	e7d9      	b.n	800675c <sniprintf+0x18>
 80067a8:	2000040c 	.word	0x2000040c

080067ac <__swbuf_r>:
 80067ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ae:	0005      	movs	r5, r0
 80067b0:	000e      	movs	r6, r1
 80067b2:	0014      	movs	r4, r2
 80067b4:	2800      	cmp	r0, #0
 80067b6:	d004      	beq.n	80067c2 <__swbuf_r+0x16>
 80067b8:	6983      	ldr	r3, [r0, #24]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <__swbuf_r+0x16>
 80067be:	f000 f9f1 	bl	8006ba4 <__sinit>
 80067c2:	4b22      	ldr	r3, [pc, #136]	; (800684c <__swbuf_r+0xa0>)
 80067c4:	429c      	cmp	r4, r3
 80067c6:	d12e      	bne.n	8006826 <__swbuf_r+0x7a>
 80067c8:	686c      	ldr	r4, [r5, #4]
 80067ca:	69a3      	ldr	r3, [r4, #24]
 80067cc:	60a3      	str	r3, [r4, #8]
 80067ce:	89a3      	ldrh	r3, [r4, #12]
 80067d0:	071b      	lsls	r3, r3, #28
 80067d2:	d532      	bpl.n	800683a <__swbuf_r+0x8e>
 80067d4:	6923      	ldr	r3, [r4, #16]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d02f      	beq.n	800683a <__swbuf_r+0x8e>
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	6922      	ldr	r2, [r4, #16]
 80067de:	b2f7      	uxtb	r7, r6
 80067e0:	1a98      	subs	r0, r3, r2
 80067e2:	6963      	ldr	r3, [r4, #20]
 80067e4:	b2f6      	uxtb	r6, r6
 80067e6:	4283      	cmp	r3, r0
 80067e8:	dc05      	bgt.n	80067f6 <__swbuf_r+0x4a>
 80067ea:	0021      	movs	r1, r4
 80067ec:	0028      	movs	r0, r5
 80067ee:	f000 f937 	bl	8006a60 <_fflush_r>
 80067f2:	2800      	cmp	r0, #0
 80067f4:	d127      	bne.n	8006846 <__swbuf_r+0x9a>
 80067f6:	68a3      	ldr	r3, [r4, #8]
 80067f8:	3001      	adds	r0, #1
 80067fa:	3b01      	subs	r3, #1
 80067fc:	60a3      	str	r3, [r4, #8]
 80067fe:	6823      	ldr	r3, [r4, #0]
 8006800:	1c5a      	adds	r2, r3, #1
 8006802:	6022      	str	r2, [r4, #0]
 8006804:	701f      	strb	r7, [r3, #0]
 8006806:	6963      	ldr	r3, [r4, #20]
 8006808:	4283      	cmp	r3, r0
 800680a:	d004      	beq.n	8006816 <__swbuf_r+0x6a>
 800680c:	89a3      	ldrh	r3, [r4, #12]
 800680e:	07db      	lsls	r3, r3, #31
 8006810:	d507      	bpl.n	8006822 <__swbuf_r+0x76>
 8006812:	2e0a      	cmp	r6, #10
 8006814:	d105      	bne.n	8006822 <__swbuf_r+0x76>
 8006816:	0021      	movs	r1, r4
 8006818:	0028      	movs	r0, r5
 800681a:	f000 f921 	bl	8006a60 <_fflush_r>
 800681e:	2800      	cmp	r0, #0
 8006820:	d111      	bne.n	8006846 <__swbuf_r+0x9a>
 8006822:	0030      	movs	r0, r6
 8006824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006826:	4b0a      	ldr	r3, [pc, #40]	; (8006850 <__swbuf_r+0xa4>)
 8006828:	429c      	cmp	r4, r3
 800682a:	d101      	bne.n	8006830 <__swbuf_r+0x84>
 800682c:	68ac      	ldr	r4, [r5, #8]
 800682e:	e7cc      	b.n	80067ca <__swbuf_r+0x1e>
 8006830:	4b08      	ldr	r3, [pc, #32]	; (8006854 <__swbuf_r+0xa8>)
 8006832:	429c      	cmp	r4, r3
 8006834:	d1c9      	bne.n	80067ca <__swbuf_r+0x1e>
 8006836:	68ec      	ldr	r4, [r5, #12]
 8006838:	e7c7      	b.n	80067ca <__swbuf_r+0x1e>
 800683a:	0021      	movs	r1, r4
 800683c:	0028      	movs	r0, r5
 800683e:	f000 f80b 	bl	8006858 <__swsetup_r>
 8006842:	2800      	cmp	r0, #0
 8006844:	d0c9      	beq.n	80067da <__swbuf_r+0x2e>
 8006846:	2601      	movs	r6, #1
 8006848:	4276      	negs	r6, r6
 800684a:	e7ea      	b.n	8006822 <__swbuf_r+0x76>
 800684c:	08007de0 	.word	0x08007de0
 8006850:	08007e00 	.word	0x08007e00
 8006854:	08007dc0 	.word	0x08007dc0

08006858 <__swsetup_r>:
 8006858:	4b37      	ldr	r3, [pc, #220]	; (8006938 <__swsetup_r+0xe0>)
 800685a:	b570      	push	{r4, r5, r6, lr}
 800685c:	681d      	ldr	r5, [r3, #0]
 800685e:	0006      	movs	r6, r0
 8006860:	000c      	movs	r4, r1
 8006862:	2d00      	cmp	r5, #0
 8006864:	d005      	beq.n	8006872 <__swsetup_r+0x1a>
 8006866:	69ab      	ldr	r3, [r5, #24]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d102      	bne.n	8006872 <__swsetup_r+0x1a>
 800686c:	0028      	movs	r0, r5
 800686e:	f000 f999 	bl	8006ba4 <__sinit>
 8006872:	4b32      	ldr	r3, [pc, #200]	; (800693c <__swsetup_r+0xe4>)
 8006874:	429c      	cmp	r4, r3
 8006876:	d10f      	bne.n	8006898 <__swsetup_r+0x40>
 8006878:	686c      	ldr	r4, [r5, #4]
 800687a:	230c      	movs	r3, #12
 800687c:	5ee2      	ldrsh	r2, [r4, r3]
 800687e:	b293      	uxth	r3, r2
 8006880:	0711      	lsls	r1, r2, #28
 8006882:	d42d      	bmi.n	80068e0 <__swsetup_r+0x88>
 8006884:	06d9      	lsls	r1, r3, #27
 8006886:	d411      	bmi.n	80068ac <__swsetup_r+0x54>
 8006888:	2309      	movs	r3, #9
 800688a:	2001      	movs	r0, #1
 800688c:	6033      	str	r3, [r6, #0]
 800688e:	3337      	adds	r3, #55	; 0x37
 8006890:	4313      	orrs	r3, r2
 8006892:	81a3      	strh	r3, [r4, #12]
 8006894:	4240      	negs	r0, r0
 8006896:	bd70      	pop	{r4, r5, r6, pc}
 8006898:	4b29      	ldr	r3, [pc, #164]	; (8006940 <__swsetup_r+0xe8>)
 800689a:	429c      	cmp	r4, r3
 800689c:	d101      	bne.n	80068a2 <__swsetup_r+0x4a>
 800689e:	68ac      	ldr	r4, [r5, #8]
 80068a0:	e7eb      	b.n	800687a <__swsetup_r+0x22>
 80068a2:	4b28      	ldr	r3, [pc, #160]	; (8006944 <__swsetup_r+0xec>)
 80068a4:	429c      	cmp	r4, r3
 80068a6:	d1e8      	bne.n	800687a <__swsetup_r+0x22>
 80068a8:	68ec      	ldr	r4, [r5, #12]
 80068aa:	e7e6      	b.n	800687a <__swsetup_r+0x22>
 80068ac:	075b      	lsls	r3, r3, #29
 80068ae:	d513      	bpl.n	80068d8 <__swsetup_r+0x80>
 80068b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068b2:	2900      	cmp	r1, #0
 80068b4:	d008      	beq.n	80068c8 <__swsetup_r+0x70>
 80068b6:	0023      	movs	r3, r4
 80068b8:	3344      	adds	r3, #68	; 0x44
 80068ba:	4299      	cmp	r1, r3
 80068bc:	d002      	beq.n	80068c4 <__swsetup_r+0x6c>
 80068be:	0030      	movs	r0, r6
 80068c0:	f000 fa8a 	bl	8006dd8 <_free_r>
 80068c4:	2300      	movs	r3, #0
 80068c6:	6363      	str	r3, [r4, #52]	; 0x34
 80068c8:	2224      	movs	r2, #36	; 0x24
 80068ca:	89a3      	ldrh	r3, [r4, #12]
 80068cc:	4393      	bics	r3, r2
 80068ce:	81a3      	strh	r3, [r4, #12]
 80068d0:	2300      	movs	r3, #0
 80068d2:	6063      	str	r3, [r4, #4]
 80068d4:	6923      	ldr	r3, [r4, #16]
 80068d6:	6023      	str	r3, [r4, #0]
 80068d8:	2308      	movs	r3, #8
 80068da:	89a2      	ldrh	r2, [r4, #12]
 80068dc:	4313      	orrs	r3, r2
 80068de:	81a3      	strh	r3, [r4, #12]
 80068e0:	6923      	ldr	r3, [r4, #16]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10b      	bne.n	80068fe <__swsetup_r+0xa6>
 80068e6:	21a0      	movs	r1, #160	; 0xa0
 80068e8:	2280      	movs	r2, #128	; 0x80
 80068ea:	89a3      	ldrh	r3, [r4, #12]
 80068ec:	0089      	lsls	r1, r1, #2
 80068ee:	0092      	lsls	r2, r2, #2
 80068f0:	400b      	ands	r3, r1
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d003      	beq.n	80068fe <__swsetup_r+0xa6>
 80068f6:	0021      	movs	r1, r4
 80068f8:	0030      	movs	r0, r6
 80068fa:	f000 fa1f 	bl	8006d3c <__smakebuf_r>
 80068fe:	220c      	movs	r2, #12
 8006900:	5ea3      	ldrsh	r3, [r4, r2]
 8006902:	2001      	movs	r0, #1
 8006904:	001a      	movs	r2, r3
 8006906:	b299      	uxth	r1, r3
 8006908:	4002      	ands	r2, r0
 800690a:	4203      	tst	r3, r0
 800690c:	d00f      	beq.n	800692e <__swsetup_r+0xd6>
 800690e:	2200      	movs	r2, #0
 8006910:	60a2      	str	r2, [r4, #8]
 8006912:	6962      	ldr	r2, [r4, #20]
 8006914:	4252      	negs	r2, r2
 8006916:	61a2      	str	r2, [r4, #24]
 8006918:	2000      	movs	r0, #0
 800691a:	6922      	ldr	r2, [r4, #16]
 800691c:	4282      	cmp	r2, r0
 800691e:	d1ba      	bne.n	8006896 <__swsetup_r+0x3e>
 8006920:	060a      	lsls	r2, r1, #24
 8006922:	d5b8      	bpl.n	8006896 <__swsetup_r+0x3e>
 8006924:	2240      	movs	r2, #64	; 0x40
 8006926:	4313      	orrs	r3, r2
 8006928:	81a3      	strh	r3, [r4, #12]
 800692a:	3801      	subs	r0, #1
 800692c:	e7b3      	b.n	8006896 <__swsetup_r+0x3e>
 800692e:	0788      	lsls	r0, r1, #30
 8006930:	d400      	bmi.n	8006934 <__swsetup_r+0xdc>
 8006932:	6962      	ldr	r2, [r4, #20]
 8006934:	60a2      	str	r2, [r4, #8]
 8006936:	e7ef      	b.n	8006918 <__swsetup_r+0xc0>
 8006938:	2000040c 	.word	0x2000040c
 800693c:	08007de0 	.word	0x08007de0
 8006940:	08007e00 	.word	0x08007e00
 8006944:	08007dc0 	.word	0x08007dc0

08006948 <__sflush_r>:
 8006948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800694a:	898b      	ldrh	r3, [r1, #12]
 800694c:	0005      	movs	r5, r0
 800694e:	000c      	movs	r4, r1
 8006950:	071a      	lsls	r2, r3, #28
 8006952:	d45f      	bmi.n	8006a14 <__sflush_r+0xcc>
 8006954:	684a      	ldr	r2, [r1, #4]
 8006956:	2a00      	cmp	r2, #0
 8006958:	dc04      	bgt.n	8006964 <__sflush_r+0x1c>
 800695a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800695c:	2a00      	cmp	r2, #0
 800695e:	dc01      	bgt.n	8006964 <__sflush_r+0x1c>
 8006960:	2000      	movs	r0, #0
 8006962:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006964:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006966:	2f00      	cmp	r7, #0
 8006968:	d0fa      	beq.n	8006960 <__sflush_r+0x18>
 800696a:	2200      	movs	r2, #0
 800696c:	2180      	movs	r1, #128	; 0x80
 800696e:	682e      	ldr	r6, [r5, #0]
 8006970:	602a      	str	r2, [r5, #0]
 8006972:	001a      	movs	r2, r3
 8006974:	0149      	lsls	r1, r1, #5
 8006976:	400a      	ands	r2, r1
 8006978:	420b      	tst	r3, r1
 800697a:	d034      	beq.n	80069e6 <__sflush_r+0x9e>
 800697c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800697e:	89a3      	ldrh	r3, [r4, #12]
 8006980:	075b      	lsls	r3, r3, #29
 8006982:	d506      	bpl.n	8006992 <__sflush_r+0x4a>
 8006984:	6863      	ldr	r3, [r4, #4]
 8006986:	1ac0      	subs	r0, r0, r3
 8006988:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800698a:	2b00      	cmp	r3, #0
 800698c:	d001      	beq.n	8006992 <__sflush_r+0x4a>
 800698e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006990:	1ac0      	subs	r0, r0, r3
 8006992:	0002      	movs	r2, r0
 8006994:	6a21      	ldr	r1, [r4, #32]
 8006996:	2300      	movs	r3, #0
 8006998:	0028      	movs	r0, r5
 800699a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800699c:	47b8      	blx	r7
 800699e:	89a1      	ldrh	r1, [r4, #12]
 80069a0:	1c43      	adds	r3, r0, #1
 80069a2:	d106      	bne.n	80069b2 <__sflush_r+0x6a>
 80069a4:	682b      	ldr	r3, [r5, #0]
 80069a6:	2b1d      	cmp	r3, #29
 80069a8:	d831      	bhi.n	8006a0e <__sflush_r+0xc6>
 80069aa:	4a2c      	ldr	r2, [pc, #176]	; (8006a5c <__sflush_r+0x114>)
 80069ac:	40da      	lsrs	r2, r3
 80069ae:	07d3      	lsls	r3, r2, #31
 80069b0:	d52d      	bpl.n	8006a0e <__sflush_r+0xc6>
 80069b2:	2300      	movs	r3, #0
 80069b4:	6063      	str	r3, [r4, #4]
 80069b6:	6923      	ldr	r3, [r4, #16]
 80069b8:	6023      	str	r3, [r4, #0]
 80069ba:	04cb      	lsls	r3, r1, #19
 80069bc:	d505      	bpl.n	80069ca <__sflush_r+0x82>
 80069be:	1c43      	adds	r3, r0, #1
 80069c0:	d102      	bne.n	80069c8 <__sflush_r+0x80>
 80069c2:	682b      	ldr	r3, [r5, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d100      	bne.n	80069ca <__sflush_r+0x82>
 80069c8:	6560      	str	r0, [r4, #84]	; 0x54
 80069ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069cc:	602e      	str	r6, [r5, #0]
 80069ce:	2900      	cmp	r1, #0
 80069d0:	d0c6      	beq.n	8006960 <__sflush_r+0x18>
 80069d2:	0023      	movs	r3, r4
 80069d4:	3344      	adds	r3, #68	; 0x44
 80069d6:	4299      	cmp	r1, r3
 80069d8:	d002      	beq.n	80069e0 <__sflush_r+0x98>
 80069da:	0028      	movs	r0, r5
 80069dc:	f000 f9fc 	bl	8006dd8 <_free_r>
 80069e0:	2000      	movs	r0, #0
 80069e2:	6360      	str	r0, [r4, #52]	; 0x34
 80069e4:	e7bd      	b.n	8006962 <__sflush_r+0x1a>
 80069e6:	2301      	movs	r3, #1
 80069e8:	0028      	movs	r0, r5
 80069ea:	6a21      	ldr	r1, [r4, #32]
 80069ec:	47b8      	blx	r7
 80069ee:	1c43      	adds	r3, r0, #1
 80069f0:	d1c5      	bne.n	800697e <__sflush_r+0x36>
 80069f2:	682b      	ldr	r3, [r5, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d0c2      	beq.n	800697e <__sflush_r+0x36>
 80069f8:	2b1d      	cmp	r3, #29
 80069fa:	d001      	beq.n	8006a00 <__sflush_r+0xb8>
 80069fc:	2b16      	cmp	r3, #22
 80069fe:	d101      	bne.n	8006a04 <__sflush_r+0xbc>
 8006a00:	602e      	str	r6, [r5, #0]
 8006a02:	e7ad      	b.n	8006960 <__sflush_r+0x18>
 8006a04:	2340      	movs	r3, #64	; 0x40
 8006a06:	89a2      	ldrh	r2, [r4, #12]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	81a3      	strh	r3, [r4, #12]
 8006a0c:	e7a9      	b.n	8006962 <__sflush_r+0x1a>
 8006a0e:	2340      	movs	r3, #64	; 0x40
 8006a10:	430b      	orrs	r3, r1
 8006a12:	e7fa      	b.n	8006a0a <__sflush_r+0xc2>
 8006a14:	690f      	ldr	r7, [r1, #16]
 8006a16:	2f00      	cmp	r7, #0
 8006a18:	d0a2      	beq.n	8006960 <__sflush_r+0x18>
 8006a1a:	680a      	ldr	r2, [r1, #0]
 8006a1c:	600f      	str	r7, [r1, #0]
 8006a1e:	1bd2      	subs	r2, r2, r7
 8006a20:	9201      	str	r2, [sp, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	079b      	lsls	r3, r3, #30
 8006a26:	d100      	bne.n	8006a2a <__sflush_r+0xe2>
 8006a28:	694a      	ldr	r2, [r1, #20]
 8006a2a:	60a2      	str	r2, [r4, #8]
 8006a2c:	9b01      	ldr	r3, [sp, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	dc00      	bgt.n	8006a34 <__sflush_r+0xec>
 8006a32:	e795      	b.n	8006960 <__sflush_r+0x18>
 8006a34:	003a      	movs	r2, r7
 8006a36:	0028      	movs	r0, r5
 8006a38:	9b01      	ldr	r3, [sp, #4]
 8006a3a:	6a21      	ldr	r1, [r4, #32]
 8006a3c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a3e:	47b0      	blx	r6
 8006a40:	2800      	cmp	r0, #0
 8006a42:	dc06      	bgt.n	8006a52 <__sflush_r+0x10a>
 8006a44:	2340      	movs	r3, #64	; 0x40
 8006a46:	2001      	movs	r0, #1
 8006a48:	89a2      	ldrh	r2, [r4, #12]
 8006a4a:	4240      	negs	r0, r0
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	81a3      	strh	r3, [r4, #12]
 8006a50:	e787      	b.n	8006962 <__sflush_r+0x1a>
 8006a52:	9b01      	ldr	r3, [sp, #4]
 8006a54:	183f      	adds	r7, r7, r0
 8006a56:	1a1b      	subs	r3, r3, r0
 8006a58:	9301      	str	r3, [sp, #4]
 8006a5a:	e7e7      	b.n	8006a2c <__sflush_r+0xe4>
 8006a5c:	20400001 	.word	0x20400001

08006a60 <_fflush_r>:
 8006a60:	690b      	ldr	r3, [r1, #16]
 8006a62:	b570      	push	{r4, r5, r6, lr}
 8006a64:	0005      	movs	r5, r0
 8006a66:	000c      	movs	r4, r1
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d102      	bne.n	8006a72 <_fflush_r+0x12>
 8006a6c:	2500      	movs	r5, #0
 8006a6e:	0028      	movs	r0, r5
 8006a70:	bd70      	pop	{r4, r5, r6, pc}
 8006a72:	2800      	cmp	r0, #0
 8006a74:	d004      	beq.n	8006a80 <_fflush_r+0x20>
 8006a76:	6983      	ldr	r3, [r0, #24]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <_fflush_r+0x20>
 8006a7c:	f000 f892 	bl	8006ba4 <__sinit>
 8006a80:	4b14      	ldr	r3, [pc, #80]	; (8006ad4 <_fflush_r+0x74>)
 8006a82:	429c      	cmp	r4, r3
 8006a84:	d11b      	bne.n	8006abe <_fflush_r+0x5e>
 8006a86:	686c      	ldr	r4, [r5, #4]
 8006a88:	220c      	movs	r2, #12
 8006a8a:	5ea3      	ldrsh	r3, [r4, r2]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d0ed      	beq.n	8006a6c <_fflush_r+0xc>
 8006a90:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a92:	07d2      	lsls	r2, r2, #31
 8006a94:	d404      	bmi.n	8006aa0 <_fflush_r+0x40>
 8006a96:	059b      	lsls	r3, r3, #22
 8006a98:	d402      	bmi.n	8006aa0 <_fflush_r+0x40>
 8006a9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a9c:	f000 f923 	bl	8006ce6 <__retarget_lock_acquire_recursive>
 8006aa0:	0028      	movs	r0, r5
 8006aa2:	0021      	movs	r1, r4
 8006aa4:	f7ff ff50 	bl	8006948 <__sflush_r>
 8006aa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006aaa:	0005      	movs	r5, r0
 8006aac:	07db      	lsls	r3, r3, #31
 8006aae:	d4de      	bmi.n	8006a6e <_fflush_r+0xe>
 8006ab0:	89a3      	ldrh	r3, [r4, #12]
 8006ab2:	059b      	lsls	r3, r3, #22
 8006ab4:	d4db      	bmi.n	8006a6e <_fflush_r+0xe>
 8006ab6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ab8:	f000 f916 	bl	8006ce8 <__retarget_lock_release_recursive>
 8006abc:	e7d7      	b.n	8006a6e <_fflush_r+0xe>
 8006abe:	4b06      	ldr	r3, [pc, #24]	; (8006ad8 <_fflush_r+0x78>)
 8006ac0:	429c      	cmp	r4, r3
 8006ac2:	d101      	bne.n	8006ac8 <_fflush_r+0x68>
 8006ac4:	68ac      	ldr	r4, [r5, #8]
 8006ac6:	e7df      	b.n	8006a88 <_fflush_r+0x28>
 8006ac8:	4b04      	ldr	r3, [pc, #16]	; (8006adc <_fflush_r+0x7c>)
 8006aca:	429c      	cmp	r4, r3
 8006acc:	d1dc      	bne.n	8006a88 <_fflush_r+0x28>
 8006ace:	68ec      	ldr	r4, [r5, #12]
 8006ad0:	e7da      	b.n	8006a88 <_fflush_r+0x28>
 8006ad2:	46c0      	nop			; (mov r8, r8)
 8006ad4:	08007de0 	.word	0x08007de0
 8006ad8:	08007e00 	.word	0x08007e00
 8006adc:	08007dc0 	.word	0x08007dc0

08006ae0 <std>:
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	b510      	push	{r4, lr}
 8006ae4:	0004      	movs	r4, r0
 8006ae6:	6003      	str	r3, [r0, #0]
 8006ae8:	6043      	str	r3, [r0, #4]
 8006aea:	6083      	str	r3, [r0, #8]
 8006aec:	8181      	strh	r1, [r0, #12]
 8006aee:	6643      	str	r3, [r0, #100]	; 0x64
 8006af0:	0019      	movs	r1, r3
 8006af2:	81c2      	strh	r2, [r0, #14]
 8006af4:	6103      	str	r3, [r0, #16]
 8006af6:	6143      	str	r3, [r0, #20]
 8006af8:	6183      	str	r3, [r0, #24]
 8006afa:	2208      	movs	r2, #8
 8006afc:	305c      	adds	r0, #92	; 0x5c
 8006afe:	f7ff fcba 	bl	8006476 <memset>
 8006b02:	4b05      	ldr	r3, [pc, #20]	; (8006b18 <std+0x38>)
 8006b04:	6224      	str	r4, [r4, #32]
 8006b06:	6263      	str	r3, [r4, #36]	; 0x24
 8006b08:	4b04      	ldr	r3, [pc, #16]	; (8006b1c <std+0x3c>)
 8006b0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b0c:	4b04      	ldr	r3, [pc, #16]	; (8006b20 <std+0x40>)
 8006b0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b10:	4b04      	ldr	r3, [pc, #16]	; (8006b24 <std+0x44>)
 8006b12:	6323      	str	r3, [r4, #48]	; 0x30
 8006b14:	bd10      	pop	{r4, pc}
 8006b16:	46c0      	nop			; (mov r8, r8)
 8006b18:	0800784d 	.word	0x0800784d
 8006b1c:	08007875 	.word	0x08007875
 8006b20:	080078ad 	.word	0x080078ad
 8006b24:	080078d9 	.word	0x080078d9

08006b28 <_cleanup_r>:
 8006b28:	b510      	push	{r4, lr}
 8006b2a:	4902      	ldr	r1, [pc, #8]	; (8006b34 <_cleanup_r+0xc>)
 8006b2c:	f000 f8ba 	bl	8006ca4 <_fwalk_reent>
 8006b30:	bd10      	pop	{r4, pc}
 8006b32:	46c0      	nop			; (mov r8, r8)
 8006b34:	08006a61 	.word	0x08006a61

08006b38 <__sfmoreglue>:
 8006b38:	b570      	push	{r4, r5, r6, lr}
 8006b3a:	2568      	movs	r5, #104	; 0x68
 8006b3c:	1e4a      	subs	r2, r1, #1
 8006b3e:	4355      	muls	r5, r2
 8006b40:	000e      	movs	r6, r1
 8006b42:	0029      	movs	r1, r5
 8006b44:	3174      	adds	r1, #116	; 0x74
 8006b46:	f000 f9b3 	bl	8006eb0 <_malloc_r>
 8006b4a:	1e04      	subs	r4, r0, #0
 8006b4c:	d008      	beq.n	8006b60 <__sfmoreglue+0x28>
 8006b4e:	2100      	movs	r1, #0
 8006b50:	002a      	movs	r2, r5
 8006b52:	6001      	str	r1, [r0, #0]
 8006b54:	6046      	str	r6, [r0, #4]
 8006b56:	300c      	adds	r0, #12
 8006b58:	60a0      	str	r0, [r4, #8]
 8006b5a:	3268      	adds	r2, #104	; 0x68
 8006b5c:	f7ff fc8b 	bl	8006476 <memset>
 8006b60:	0020      	movs	r0, r4
 8006b62:	bd70      	pop	{r4, r5, r6, pc}

08006b64 <__sfp_lock_acquire>:
 8006b64:	b510      	push	{r4, lr}
 8006b66:	4802      	ldr	r0, [pc, #8]	; (8006b70 <__sfp_lock_acquire+0xc>)
 8006b68:	f000 f8bd 	bl	8006ce6 <__retarget_lock_acquire_recursive>
 8006b6c:	bd10      	pop	{r4, pc}
 8006b6e:	46c0      	nop			; (mov r8, r8)
 8006b70:	20000e95 	.word	0x20000e95

08006b74 <__sfp_lock_release>:
 8006b74:	b510      	push	{r4, lr}
 8006b76:	4802      	ldr	r0, [pc, #8]	; (8006b80 <__sfp_lock_release+0xc>)
 8006b78:	f000 f8b6 	bl	8006ce8 <__retarget_lock_release_recursive>
 8006b7c:	bd10      	pop	{r4, pc}
 8006b7e:	46c0      	nop			; (mov r8, r8)
 8006b80:	20000e95 	.word	0x20000e95

08006b84 <__sinit_lock_acquire>:
 8006b84:	b510      	push	{r4, lr}
 8006b86:	4802      	ldr	r0, [pc, #8]	; (8006b90 <__sinit_lock_acquire+0xc>)
 8006b88:	f000 f8ad 	bl	8006ce6 <__retarget_lock_acquire_recursive>
 8006b8c:	bd10      	pop	{r4, pc}
 8006b8e:	46c0      	nop			; (mov r8, r8)
 8006b90:	20000e96 	.word	0x20000e96

08006b94 <__sinit_lock_release>:
 8006b94:	b510      	push	{r4, lr}
 8006b96:	4802      	ldr	r0, [pc, #8]	; (8006ba0 <__sinit_lock_release+0xc>)
 8006b98:	f000 f8a6 	bl	8006ce8 <__retarget_lock_release_recursive>
 8006b9c:	bd10      	pop	{r4, pc}
 8006b9e:	46c0      	nop			; (mov r8, r8)
 8006ba0:	20000e96 	.word	0x20000e96

08006ba4 <__sinit>:
 8006ba4:	b513      	push	{r0, r1, r4, lr}
 8006ba6:	0004      	movs	r4, r0
 8006ba8:	f7ff ffec 	bl	8006b84 <__sinit_lock_acquire>
 8006bac:	69a3      	ldr	r3, [r4, #24]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d002      	beq.n	8006bb8 <__sinit+0x14>
 8006bb2:	f7ff ffef 	bl	8006b94 <__sinit_lock_release>
 8006bb6:	bd13      	pop	{r0, r1, r4, pc}
 8006bb8:	64a3      	str	r3, [r4, #72]	; 0x48
 8006bba:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006bbc:	6523      	str	r3, [r4, #80]	; 0x50
 8006bbe:	4b13      	ldr	r3, [pc, #76]	; (8006c0c <__sinit+0x68>)
 8006bc0:	4a13      	ldr	r2, [pc, #76]	; (8006c10 <__sinit+0x6c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006bc6:	9301      	str	r3, [sp, #4]
 8006bc8:	42a3      	cmp	r3, r4
 8006bca:	d101      	bne.n	8006bd0 <__sinit+0x2c>
 8006bcc:	2301      	movs	r3, #1
 8006bce:	61a3      	str	r3, [r4, #24]
 8006bd0:	0020      	movs	r0, r4
 8006bd2:	f000 f81f 	bl	8006c14 <__sfp>
 8006bd6:	6060      	str	r0, [r4, #4]
 8006bd8:	0020      	movs	r0, r4
 8006bda:	f000 f81b 	bl	8006c14 <__sfp>
 8006bde:	60a0      	str	r0, [r4, #8]
 8006be0:	0020      	movs	r0, r4
 8006be2:	f000 f817 	bl	8006c14 <__sfp>
 8006be6:	2200      	movs	r2, #0
 8006be8:	2104      	movs	r1, #4
 8006bea:	60e0      	str	r0, [r4, #12]
 8006bec:	6860      	ldr	r0, [r4, #4]
 8006bee:	f7ff ff77 	bl	8006ae0 <std>
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	2109      	movs	r1, #9
 8006bf6:	68a0      	ldr	r0, [r4, #8]
 8006bf8:	f7ff ff72 	bl	8006ae0 <std>
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	2112      	movs	r1, #18
 8006c00:	68e0      	ldr	r0, [r4, #12]
 8006c02:	f7ff ff6d 	bl	8006ae0 <std>
 8006c06:	2301      	movs	r3, #1
 8006c08:	61a3      	str	r3, [r4, #24]
 8006c0a:	e7d2      	b.n	8006bb2 <__sinit+0xe>
 8006c0c:	08007dbc 	.word	0x08007dbc
 8006c10:	08006b29 	.word	0x08006b29

08006c14 <__sfp>:
 8006c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c16:	0007      	movs	r7, r0
 8006c18:	f7ff ffa4 	bl	8006b64 <__sfp_lock_acquire>
 8006c1c:	4b1f      	ldr	r3, [pc, #124]	; (8006c9c <__sfp+0x88>)
 8006c1e:	681e      	ldr	r6, [r3, #0]
 8006c20:	69b3      	ldr	r3, [r6, #24]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d102      	bne.n	8006c2c <__sfp+0x18>
 8006c26:	0030      	movs	r0, r6
 8006c28:	f7ff ffbc 	bl	8006ba4 <__sinit>
 8006c2c:	3648      	adds	r6, #72	; 0x48
 8006c2e:	68b4      	ldr	r4, [r6, #8]
 8006c30:	6873      	ldr	r3, [r6, #4]
 8006c32:	3b01      	subs	r3, #1
 8006c34:	d504      	bpl.n	8006c40 <__sfp+0x2c>
 8006c36:	6833      	ldr	r3, [r6, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d022      	beq.n	8006c82 <__sfp+0x6e>
 8006c3c:	6836      	ldr	r6, [r6, #0]
 8006c3e:	e7f6      	b.n	8006c2e <__sfp+0x1a>
 8006c40:	220c      	movs	r2, #12
 8006c42:	5ea5      	ldrsh	r5, [r4, r2]
 8006c44:	2d00      	cmp	r5, #0
 8006c46:	d11a      	bne.n	8006c7e <__sfp+0x6a>
 8006c48:	0020      	movs	r0, r4
 8006c4a:	4b15      	ldr	r3, [pc, #84]	; (8006ca0 <__sfp+0x8c>)
 8006c4c:	3058      	adds	r0, #88	; 0x58
 8006c4e:	60e3      	str	r3, [r4, #12]
 8006c50:	6665      	str	r5, [r4, #100]	; 0x64
 8006c52:	f000 f847 	bl	8006ce4 <__retarget_lock_init_recursive>
 8006c56:	f7ff ff8d 	bl	8006b74 <__sfp_lock_release>
 8006c5a:	0020      	movs	r0, r4
 8006c5c:	2208      	movs	r2, #8
 8006c5e:	0029      	movs	r1, r5
 8006c60:	6025      	str	r5, [r4, #0]
 8006c62:	60a5      	str	r5, [r4, #8]
 8006c64:	6065      	str	r5, [r4, #4]
 8006c66:	6125      	str	r5, [r4, #16]
 8006c68:	6165      	str	r5, [r4, #20]
 8006c6a:	61a5      	str	r5, [r4, #24]
 8006c6c:	305c      	adds	r0, #92	; 0x5c
 8006c6e:	f7ff fc02 	bl	8006476 <memset>
 8006c72:	6365      	str	r5, [r4, #52]	; 0x34
 8006c74:	63a5      	str	r5, [r4, #56]	; 0x38
 8006c76:	64a5      	str	r5, [r4, #72]	; 0x48
 8006c78:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006c7a:	0020      	movs	r0, r4
 8006c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c7e:	3468      	adds	r4, #104	; 0x68
 8006c80:	e7d7      	b.n	8006c32 <__sfp+0x1e>
 8006c82:	2104      	movs	r1, #4
 8006c84:	0038      	movs	r0, r7
 8006c86:	f7ff ff57 	bl	8006b38 <__sfmoreglue>
 8006c8a:	1e04      	subs	r4, r0, #0
 8006c8c:	6030      	str	r0, [r6, #0]
 8006c8e:	d1d5      	bne.n	8006c3c <__sfp+0x28>
 8006c90:	f7ff ff70 	bl	8006b74 <__sfp_lock_release>
 8006c94:	230c      	movs	r3, #12
 8006c96:	603b      	str	r3, [r7, #0]
 8006c98:	e7ef      	b.n	8006c7a <__sfp+0x66>
 8006c9a:	46c0      	nop			; (mov r8, r8)
 8006c9c:	08007dbc 	.word	0x08007dbc
 8006ca0:	ffff0001 	.word	0xffff0001

08006ca4 <_fwalk_reent>:
 8006ca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ca6:	0004      	movs	r4, r0
 8006ca8:	0006      	movs	r6, r0
 8006caa:	2700      	movs	r7, #0
 8006cac:	9101      	str	r1, [sp, #4]
 8006cae:	3448      	adds	r4, #72	; 0x48
 8006cb0:	6863      	ldr	r3, [r4, #4]
 8006cb2:	68a5      	ldr	r5, [r4, #8]
 8006cb4:	9300      	str	r3, [sp, #0]
 8006cb6:	9b00      	ldr	r3, [sp, #0]
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	d504      	bpl.n	8006cc8 <_fwalk_reent+0x24>
 8006cbe:	6824      	ldr	r4, [r4, #0]
 8006cc0:	2c00      	cmp	r4, #0
 8006cc2:	d1f5      	bne.n	8006cb0 <_fwalk_reent+0xc>
 8006cc4:	0038      	movs	r0, r7
 8006cc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006cc8:	89ab      	ldrh	r3, [r5, #12]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d908      	bls.n	8006ce0 <_fwalk_reent+0x3c>
 8006cce:	220e      	movs	r2, #14
 8006cd0:	5eab      	ldrsh	r3, [r5, r2]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	d004      	beq.n	8006ce0 <_fwalk_reent+0x3c>
 8006cd6:	0029      	movs	r1, r5
 8006cd8:	0030      	movs	r0, r6
 8006cda:	9b01      	ldr	r3, [sp, #4]
 8006cdc:	4798      	blx	r3
 8006cde:	4307      	orrs	r7, r0
 8006ce0:	3568      	adds	r5, #104	; 0x68
 8006ce2:	e7e8      	b.n	8006cb6 <_fwalk_reent+0x12>

08006ce4 <__retarget_lock_init_recursive>:
 8006ce4:	4770      	bx	lr

08006ce6 <__retarget_lock_acquire_recursive>:
 8006ce6:	4770      	bx	lr

08006ce8 <__retarget_lock_release_recursive>:
 8006ce8:	4770      	bx	lr
	...

08006cec <__swhatbuf_r>:
 8006cec:	b570      	push	{r4, r5, r6, lr}
 8006cee:	000e      	movs	r6, r1
 8006cf0:	001d      	movs	r5, r3
 8006cf2:	230e      	movs	r3, #14
 8006cf4:	5ec9      	ldrsh	r1, [r1, r3]
 8006cf6:	0014      	movs	r4, r2
 8006cf8:	b096      	sub	sp, #88	; 0x58
 8006cfa:	2900      	cmp	r1, #0
 8006cfc:	da08      	bge.n	8006d10 <__swhatbuf_r+0x24>
 8006cfe:	220c      	movs	r2, #12
 8006d00:	5eb3      	ldrsh	r3, [r6, r2]
 8006d02:	2200      	movs	r2, #0
 8006d04:	602a      	str	r2, [r5, #0]
 8006d06:	061b      	lsls	r3, r3, #24
 8006d08:	d411      	bmi.n	8006d2e <__swhatbuf_r+0x42>
 8006d0a:	2380      	movs	r3, #128	; 0x80
 8006d0c:	00db      	lsls	r3, r3, #3
 8006d0e:	e00f      	b.n	8006d30 <__swhatbuf_r+0x44>
 8006d10:	466a      	mov	r2, sp
 8006d12:	f000 fe0d 	bl	8007930 <_fstat_r>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	dbf1      	blt.n	8006cfe <__swhatbuf_r+0x12>
 8006d1a:	23f0      	movs	r3, #240	; 0xf0
 8006d1c:	9901      	ldr	r1, [sp, #4]
 8006d1e:	021b      	lsls	r3, r3, #8
 8006d20:	4019      	ands	r1, r3
 8006d22:	4b05      	ldr	r3, [pc, #20]	; (8006d38 <__swhatbuf_r+0x4c>)
 8006d24:	18c9      	adds	r1, r1, r3
 8006d26:	424b      	negs	r3, r1
 8006d28:	4159      	adcs	r1, r3
 8006d2a:	6029      	str	r1, [r5, #0]
 8006d2c:	e7ed      	b.n	8006d0a <__swhatbuf_r+0x1e>
 8006d2e:	2340      	movs	r3, #64	; 0x40
 8006d30:	2000      	movs	r0, #0
 8006d32:	6023      	str	r3, [r4, #0]
 8006d34:	b016      	add	sp, #88	; 0x58
 8006d36:	bd70      	pop	{r4, r5, r6, pc}
 8006d38:	ffffe000 	.word	0xffffe000

08006d3c <__smakebuf_r>:
 8006d3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d3e:	2602      	movs	r6, #2
 8006d40:	898b      	ldrh	r3, [r1, #12]
 8006d42:	0005      	movs	r5, r0
 8006d44:	000c      	movs	r4, r1
 8006d46:	4233      	tst	r3, r6
 8006d48:	d006      	beq.n	8006d58 <__smakebuf_r+0x1c>
 8006d4a:	0023      	movs	r3, r4
 8006d4c:	3347      	adds	r3, #71	; 0x47
 8006d4e:	6023      	str	r3, [r4, #0]
 8006d50:	6123      	str	r3, [r4, #16]
 8006d52:	2301      	movs	r3, #1
 8006d54:	6163      	str	r3, [r4, #20]
 8006d56:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006d58:	466a      	mov	r2, sp
 8006d5a:	ab01      	add	r3, sp, #4
 8006d5c:	f7ff ffc6 	bl	8006cec <__swhatbuf_r>
 8006d60:	9900      	ldr	r1, [sp, #0]
 8006d62:	0007      	movs	r7, r0
 8006d64:	0028      	movs	r0, r5
 8006d66:	f000 f8a3 	bl	8006eb0 <_malloc_r>
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	d108      	bne.n	8006d80 <__smakebuf_r+0x44>
 8006d6e:	220c      	movs	r2, #12
 8006d70:	5ea3      	ldrsh	r3, [r4, r2]
 8006d72:	059a      	lsls	r2, r3, #22
 8006d74:	d4ef      	bmi.n	8006d56 <__smakebuf_r+0x1a>
 8006d76:	2203      	movs	r2, #3
 8006d78:	4393      	bics	r3, r2
 8006d7a:	431e      	orrs	r6, r3
 8006d7c:	81a6      	strh	r6, [r4, #12]
 8006d7e:	e7e4      	b.n	8006d4a <__smakebuf_r+0xe>
 8006d80:	4b0f      	ldr	r3, [pc, #60]	; (8006dc0 <__smakebuf_r+0x84>)
 8006d82:	62ab      	str	r3, [r5, #40]	; 0x28
 8006d84:	2380      	movs	r3, #128	; 0x80
 8006d86:	89a2      	ldrh	r2, [r4, #12]
 8006d88:	6020      	str	r0, [r4, #0]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	81a3      	strh	r3, [r4, #12]
 8006d8e:	9b00      	ldr	r3, [sp, #0]
 8006d90:	6120      	str	r0, [r4, #16]
 8006d92:	6163      	str	r3, [r4, #20]
 8006d94:	9b01      	ldr	r3, [sp, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00d      	beq.n	8006db6 <__smakebuf_r+0x7a>
 8006d9a:	0028      	movs	r0, r5
 8006d9c:	230e      	movs	r3, #14
 8006d9e:	5ee1      	ldrsh	r1, [r4, r3]
 8006da0:	f000 fdd8 	bl	8007954 <_isatty_r>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	d006      	beq.n	8006db6 <__smakebuf_r+0x7a>
 8006da8:	2203      	movs	r2, #3
 8006daa:	89a3      	ldrh	r3, [r4, #12]
 8006dac:	4393      	bics	r3, r2
 8006dae:	001a      	movs	r2, r3
 8006db0:	2301      	movs	r3, #1
 8006db2:	4313      	orrs	r3, r2
 8006db4:	81a3      	strh	r3, [r4, #12]
 8006db6:	89a0      	ldrh	r0, [r4, #12]
 8006db8:	4307      	orrs	r7, r0
 8006dba:	81a7      	strh	r7, [r4, #12]
 8006dbc:	e7cb      	b.n	8006d56 <__smakebuf_r+0x1a>
 8006dbe:	46c0      	nop			; (mov r8, r8)
 8006dc0:	08006b29 	.word	0x08006b29

08006dc4 <malloc>:
 8006dc4:	b510      	push	{r4, lr}
 8006dc6:	4b03      	ldr	r3, [pc, #12]	; (8006dd4 <malloc+0x10>)
 8006dc8:	0001      	movs	r1, r0
 8006dca:	6818      	ldr	r0, [r3, #0]
 8006dcc:	f000 f870 	bl	8006eb0 <_malloc_r>
 8006dd0:	bd10      	pop	{r4, pc}
 8006dd2:	46c0      	nop			; (mov r8, r8)
 8006dd4:	2000040c 	.word	0x2000040c

08006dd8 <_free_r>:
 8006dd8:	b570      	push	{r4, r5, r6, lr}
 8006dda:	0005      	movs	r5, r0
 8006ddc:	2900      	cmp	r1, #0
 8006dde:	d010      	beq.n	8006e02 <_free_r+0x2a>
 8006de0:	1f0c      	subs	r4, r1, #4
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	da00      	bge.n	8006dea <_free_r+0x12>
 8006de8:	18e4      	adds	r4, r4, r3
 8006dea:	0028      	movs	r0, r5
 8006dec:	f000 fdf6 	bl	80079dc <__malloc_lock>
 8006df0:	4a1d      	ldr	r2, [pc, #116]	; (8006e68 <_free_r+0x90>)
 8006df2:	6813      	ldr	r3, [r2, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d105      	bne.n	8006e04 <_free_r+0x2c>
 8006df8:	6063      	str	r3, [r4, #4]
 8006dfa:	6014      	str	r4, [r2, #0]
 8006dfc:	0028      	movs	r0, r5
 8006dfe:	f000 fdf5 	bl	80079ec <__malloc_unlock>
 8006e02:	bd70      	pop	{r4, r5, r6, pc}
 8006e04:	42a3      	cmp	r3, r4
 8006e06:	d908      	bls.n	8006e1a <_free_r+0x42>
 8006e08:	6821      	ldr	r1, [r4, #0]
 8006e0a:	1860      	adds	r0, r4, r1
 8006e0c:	4283      	cmp	r3, r0
 8006e0e:	d1f3      	bne.n	8006df8 <_free_r+0x20>
 8006e10:	6818      	ldr	r0, [r3, #0]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	1841      	adds	r1, r0, r1
 8006e16:	6021      	str	r1, [r4, #0]
 8006e18:	e7ee      	b.n	8006df8 <_free_r+0x20>
 8006e1a:	001a      	movs	r2, r3
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <_free_r+0x4e>
 8006e22:	42a3      	cmp	r3, r4
 8006e24:	d9f9      	bls.n	8006e1a <_free_r+0x42>
 8006e26:	6811      	ldr	r1, [r2, #0]
 8006e28:	1850      	adds	r0, r2, r1
 8006e2a:	42a0      	cmp	r0, r4
 8006e2c:	d10b      	bne.n	8006e46 <_free_r+0x6e>
 8006e2e:	6820      	ldr	r0, [r4, #0]
 8006e30:	1809      	adds	r1, r1, r0
 8006e32:	1850      	adds	r0, r2, r1
 8006e34:	6011      	str	r1, [r2, #0]
 8006e36:	4283      	cmp	r3, r0
 8006e38:	d1e0      	bne.n	8006dfc <_free_r+0x24>
 8006e3a:	6818      	ldr	r0, [r3, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	1841      	adds	r1, r0, r1
 8006e40:	6011      	str	r1, [r2, #0]
 8006e42:	6053      	str	r3, [r2, #4]
 8006e44:	e7da      	b.n	8006dfc <_free_r+0x24>
 8006e46:	42a0      	cmp	r0, r4
 8006e48:	d902      	bls.n	8006e50 <_free_r+0x78>
 8006e4a:	230c      	movs	r3, #12
 8006e4c:	602b      	str	r3, [r5, #0]
 8006e4e:	e7d5      	b.n	8006dfc <_free_r+0x24>
 8006e50:	6821      	ldr	r1, [r4, #0]
 8006e52:	1860      	adds	r0, r4, r1
 8006e54:	4283      	cmp	r3, r0
 8006e56:	d103      	bne.n	8006e60 <_free_r+0x88>
 8006e58:	6818      	ldr	r0, [r3, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	1841      	adds	r1, r0, r1
 8006e5e:	6021      	str	r1, [r4, #0]
 8006e60:	6063      	str	r3, [r4, #4]
 8006e62:	6054      	str	r4, [r2, #4]
 8006e64:	e7ca      	b.n	8006dfc <_free_r+0x24>
 8006e66:	46c0      	nop			; (mov r8, r8)
 8006e68:	20000e98 	.word	0x20000e98

08006e6c <sbrk_aligned>:
 8006e6c:	b570      	push	{r4, r5, r6, lr}
 8006e6e:	4e0f      	ldr	r6, [pc, #60]	; (8006eac <sbrk_aligned+0x40>)
 8006e70:	000d      	movs	r5, r1
 8006e72:	6831      	ldr	r1, [r6, #0]
 8006e74:	0004      	movs	r4, r0
 8006e76:	2900      	cmp	r1, #0
 8006e78:	d102      	bne.n	8006e80 <sbrk_aligned+0x14>
 8006e7a:	f000 fcd5 	bl	8007828 <_sbrk_r>
 8006e7e:	6030      	str	r0, [r6, #0]
 8006e80:	0029      	movs	r1, r5
 8006e82:	0020      	movs	r0, r4
 8006e84:	f000 fcd0 	bl	8007828 <_sbrk_r>
 8006e88:	1c43      	adds	r3, r0, #1
 8006e8a:	d00a      	beq.n	8006ea2 <sbrk_aligned+0x36>
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	1cc5      	adds	r5, r0, #3
 8006e90:	439d      	bics	r5, r3
 8006e92:	42a8      	cmp	r0, r5
 8006e94:	d007      	beq.n	8006ea6 <sbrk_aligned+0x3a>
 8006e96:	1a29      	subs	r1, r5, r0
 8006e98:	0020      	movs	r0, r4
 8006e9a:	f000 fcc5 	bl	8007828 <_sbrk_r>
 8006e9e:	1c43      	adds	r3, r0, #1
 8006ea0:	d101      	bne.n	8006ea6 <sbrk_aligned+0x3a>
 8006ea2:	2501      	movs	r5, #1
 8006ea4:	426d      	negs	r5, r5
 8006ea6:	0028      	movs	r0, r5
 8006ea8:	bd70      	pop	{r4, r5, r6, pc}
 8006eaa:	46c0      	nop			; (mov r8, r8)
 8006eac:	20000e9c 	.word	0x20000e9c

08006eb0 <_malloc_r>:
 8006eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006eb2:	2203      	movs	r2, #3
 8006eb4:	1ccb      	adds	r3, r1, #3
 8006eb6:	4393      	bics	r3, r2
 8006eb8:	3308      	adds	r3, #8
 8006eba:	0006      	movs	r6, r0
 8006ebc:	001f      	movs	r7, r3
 8006ebe:	2b0c      	cmp	r3, #12
 8006ec0:	d232      	bcs.n	8006f28 <_malloc_r+0x78>
 8006ec2:	270c      	movs	r7, #12
 8006ec4:	42b9      	cmp	r1, r7
 8006ec6:	d831      	bhi.n	8006f2c <_malloc_r+0x7c>
 8006ec8:	0030      	movs	r0, r6
 8006eca:	f000 fd87 	bl	80079dc <__malloc_lock>
 8006ece:	4d32      	ldr	r5, [pc, #200]	; (8006f98 <_malloc_r+0xe8>)
 8006ed0:	682b      	ldr	r3, [r5, #0]
 8006ed2:	001c      	movs	r4, r3
 8006ed4:	2c00      	cmp	r4, #0
 8006ed6:	d12e      	bne.n	8006f36 <_malloc_r+0x86>
 8006ed8:	0039      	movs	r1, r7
 8006eda:	0030      	movs	r0, r6
 8006edc:	f7ff ffc6 	bl	8006e6c <sbrk_aligned>
 8006ee0:	0004      	movs	r4, r0
 8006ee2:	1c43      	adds	r3, r0, #1
 8006ee4:	d11e      	bne.n	8006f24 <_malloc_r+0x74>
 8006ee6:	682c      	ldr	r4, [r5, #0]
 8006ee8:	0025      	movs	r5, r4
 8006eea:	2d00      	cmp	r5, #0
 8006eec:	d14a      	bne.n	8006f84 <_malloc_r+0xd4>
 8006eee:	6823      	ldr	r3, [r4, #0]
 8006ef0:	0029      	movs	r1, r5
 8006ef2:	18e3      	adds	r3, r4, r3
 8006ef4:	0030      	movs	r0, r6
 8006ef6:	9301      	str	r3, [sp, #4]
 8006ef8:	f000 fc96 	bl	8007828 <_sbrk_r>
 8006efc:	9b01      	ldr	r3, [sp, #4]
 8006efe:	4283      	cmp	r3, r0
 8006f00:	d143      	bne.n	8006f8a <_malloc_r+0xda>
 8006f02:	6823      	ldr	r3, [r4, #0]
 8006f04:	3703      	adds	r7, #3
 8006f06:	1aff      	subs	r7, r7, r3
 8006f08:	2303      	movs	r3, #3
 8006f0a:	439f      	bics	r7, r3
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	2f0c      	cmp	r7, #12
 8006f10:	d200      	bcs.n	8006f14 <_malloc_r+0x64>
 8006f12:	270c      	movs	r7, #12
 8006f14:	0039      	movs	r1, r7
 8006f16:	0030      	movs	r0, r6
 8006f18:	f7ff ffa8 	bl	8006e6c <sbrk_aligned>
 8006f1c:	1c43      	adds	r3, r0, #1
 8006f1e:	d034      	beq.n	8006f8a <_malloc_r+0xda>
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	19df      	adds	r7, r3, r7
 8006f24:	6027      	str	r7, [r4, #0]
 8006f26:	e013      	b.n	8006f50 <_malloc_r+0xa0>
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	dacb      	bge.n	8006ec4 <_malloc_r+0x14>
 8006f2c:	230c      	movs	r3, #12
 8006f2e:	2500      	movs	r5, #0
 8006f30:	6033      	str	r3, [r6, #0]
 8006f32:	0028      	movs	r0, r5
 8006f34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006f36:	6822      	ldr	r2, [r4, #0]
 8006f38:	1bd1      	subs	r1, r2, r7
 8006f3a:	d420      	bmi.n	8006f7e <_malloc_r+0xce>
 8006f3c:	290b      	cmp	r1, #11
 8006f3e:	d917      	bls.n	8006f70 <_malloc_r+0xc0>
 8006f40:	19e2      	adds	r2, r4, r7
 8006f42:	6027      	str	r7, [r4, #0]
 8006f44:	42a3      	cmp	r3, r4
 8006f46:	d111      	bne.n	8006f6c <_malloc_r+0xbc>
 8006f48:	602a      	str	r2, [r5, #0]
 8006f4a:	6863      	ldr	r3, [r4, #4]
 8006f4c:	6011      	str	r1, [r2, #0]
 8006f4e:	6053      	str	r3, [r2, #4]
 8006f50:	0030      	movs	r0, r6
 8006f52:	0025      	movs	r5, r4
 8006f54:	f000 fd4a 	bl	80079ec <__malloc_unlock>
 8006f58:	2207      	movs	r2, #7
 8006f5a:	350b      	adds	r5, #11
 8006f5c:	1d23      	adds	r3, r4, #4
 8006f5e:	4395      	bics	r5, r2
 8006f60:	1aea      	subs	r2, r5, r3
 8006f62:	429d      	cmp	r5, r3
 8006f64:	d0e5      	beq.n	8006f32 <_malloc_r+0x82>
 8006f66:	1b5b      	subs	r3, r3, r5
 8006f68:	50a3      	str	r3, [r4, r2]
 8006f6a:	e7e2      	b.n	8006f32 <_malloc_r+0x82>
 8006f6c:	605a      	str	r2, [r3, #4]
 8006f6e:	e7ec      	b.n	8006f4a <_malloc_r+0x9a>
 8006f70:	6862      	ldr	r2, [r4, #4]
 8006f72:	42a3      	cmp	r3, r4
 8006f74:	d101      	bne.n	8006f7a <_malloc_r+0xca>
 8006f76:	602a      	str	r2, [r5, #0]
 8006f78:	e7ea      	b.n	8006f50 <_malloc_r+0xa0>
 8006f7a:	605a      	str	r2, [r3, #4]
 8006f7c:	e7e8      	b.n	8006f50 <_malloc_r+0xa0>
 8006f7e:	0023      	movs	r3, r4
 8006f80:	6864      	ldr	r4, [r4, #4]
 8006f82:	e7a7      	b.n	8006ed4 <_malloc_r+0x24>
 8006f84:	002c      	movs	r4, r5
 8006f86:	686d      	ldr	r5, [r5, #4]
 8006f88:	e7af      	b.n	8006eea <_malloc_r+0x3a>
 8006f8a:	230c      	movs	r3, #12
 8006f8c:	0030      	movs	r0, r6
 8006f8e:	6033      	str	r3, [r6, #0]
 8006f90:	f000 fd2c 	bl	80079ec <__malloc_unlock>
 8006f94:	e7cd      	b.n	8006f32 <_malloc_r+0x82>
 8006f96:	46c0      	nop			; (mov r8, r8)
 8006f98:	20000e98 	.word	0x20000e98

08006f9c <__ssputs_r>:
 8006f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f9e:	688e      	ldr	r6, [r1, #8]
 8006fa0:	b085      	sub	sp, #20
 8006fa2:	0007      	movs	r7, r0
 8006fa4:	000c      	movs	r4, r1
 8006fa6:	9203      	str	r2, [sp, #12]
 8006fa8:	9301      	str	r3, [sp, #4]
 8006faa:	429e      	cmp	r6, r3
 8006fac:	d83c      	bhi.n	8007028 <__ssputs_r+0x8c>
 8006fae:	2390      	movs	r3, #144	; 0x90
 8006fb0:	898a      	ldrh	r2, [r1, #12]
 8006fb2:	00db      	lsls	r3, r3, #3
 8006fb4:	421a      	tst	r2, r3
 8006fb6:	d034      	beq.n	8007022 <__ssputs_r+0x86>
 8006fb8:	6909      	ldr	r1, [r1, #16]
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	6960      	ldr	r0, [r4, #20]
 8006fbe:	1a5b      	subs	r3, r3, r1
 8006fc0:	9302      	str	r3, [sp, #8]
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	4343      	muls	r3, r0
 8006fc6:	0fdd      	lsrs	r5, r3, #31
 8006fc8:	18ed      	adds	r5, r5, r3
 8006fca:	9b01      	ldr	r3, [sp, #4]
 8006fcc:	9802      	ldr	r0, [sp, #8]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	181b      	adds	r3, r3, r0
 8006fd2:	106d      	asrs	r5, r5, #1
 8006fd4:	42ab      	cmp	r3, r5
 8006fd6:	d900      	bls.n	8006fda <__ssputs_r+0x3e>
 8006fd8:	001d      	movs	r5, r3
 8006fda:	0553      	lsls	r3, r2, #21
 8006fdc:	d532      	bpl.n	8007044 <__ssputs_r+0xa8>
 8006fde:	0029      	movs	r1, r5
 8006fe0:	0038      	movs	r0, r7
 8006fe2:	f7ff ff65 	bl	8006eb0 <_malloc_r>
 8006fe6:	1e06      	subs	r6, r0, #0
 8006fe8:	d109      	bne.n	8006ffe <__ssputs_r+0x62>
 8006fea:	230c      	movs	r3, #12
 8006fec:	603b      	str	r3, [r7, #0]
 8006fee:	2340      	movs	r3, #64	; 0x40
 8006ff0:	2001      	movs	r0, #1
 8006ff2:	89a2      	ldrh	r2, [r4, #12]
 8006ff4:	4240      	negs	r0, r0
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	81a3      	strh	r3, [r4, #12]
 8006ffa:	b005      	add	sp, #20
 8006ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ffe:	9a02      	ldr	r2, [sp, #8]
 8007000:	6921      	ldr	r1, [r4, #16]
 8007002:	f7ff fa2f 	bl	8006464 <memcpy>
 8007006:	89a3      	ldrh	r3, [r4, #12]
 8007008:	4a14      	ldr	r2, [pc, #80]	; (800705c <__ssputs_r+0xc0>)
 800700a:	401a      	ands	r2, r3
 800700c:	2380      	movs	r3, #128	; 0x80
 800700e:	4313      	orrs	r3, r2
 8007010:	81a3      	strh	r3, [r4, #12]
 8007012:	9b02      	ldr	r3, [sp, #8]
 8007014:	6126      	str	r6, [r4, #16]
 8007016:	18f6      	adds	r6, r6, r3
 8007018:	6026      	str	r6, [r4, #0]
 800701a:	6165      	str	r5, [r4, #20]
 800701c:	9e01      	ldr	r6, [sp, #4]
 800701e:	1aed      	subs	r5, r5, r3
 8007020:	60a5      	str	r5, [r4, #8]
 8007022:	9b01      	ldr	r3, [sp, #4]
 8007024:	429e      	cmp	r6, r3
 8007026:	d900      	bls.n	800702a <__ssputs_r+0x8e>
 8007028:	9e01      	ldr	r6, [sp, #4]
 800702a:	0032      	movs	r2, r6
 800702c:	9903      	ldr	r1, [sp, #12]
 800702e:	6820      	ldr	r0, [r4, #0]
 8007030:	f000 fcc1 	bl	80079b6 <memmove>
 8007034:	68a3      	ldr	r3, [r4, #8]
 8007036:	2000      	movs	r0, #0
 8007038:	1b9b      	subs	r3, r3, r6
 800703a:	60a3      	str	r3, [r4, #8]
 800703c:	6823      	ldr	r3, [r4, #0]
 800703e:	199e      	adds	r6, r3, r6
 8007040:	6026      	str	r6, [r4, #0]
 8007042:	e7da      	b.n	8006ffa <__ssputs_r+0x5e>
 8007044:	002a      	movs	r2, r5
 8007046:	0038      	movs	r0, r7
 8007048:	f000 fcd8 	bl	80079fc <_realloc_r>
 800704c:	1e06      	subs	r6, r0, #0
 800704e:	d1e0      	bne.n	8007012 <__ssputs_r+0x76>
 8007050:	0038      	movs	r0, r7
 8007052:	6921      	ldr	r1, [r4, #16]
 8007054:	f7ff fec0 	bl	8006dd8 <_free_r>
 8007058:	e7c7      	b.n	8006fea <__ssputs_r+0x4e>
 800705a:	46c0      	nop			; (mov r8, r8)
 800705c:	fffffb7f 	.word	0xfffffb7f

08007060 <_svfiprintf_r>:
 8007060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007062:	b0a1      	sub	sp, #132	; 0x84
 8007064:	9003      	str	r0, [sp, #12]
 8007066:	001d      	movs	r5, r3
 8007068:	898b      	ldrh	r3, [r1, #12]
 800706a:	000f      	movs	r7, r1
 800706c:	0016      	movs	r6, r2
 800706e:	061b      	lsls	r3, r3, #24
 8007070:	d511      	bpl.n	8007096 <_svfiprintf_r+0x36>
 8007072:	690b      	ldr	r3, [r1, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10e      	bne.n	8007096 <_svfiprintf_r+0x36>
 8007078:	2140      	movs	r1, #64	; 0x40
 800707a:	f7ff ff19 	bl	8006eb0 <_malloc_r>
 800707e:	6038      	str	r0, [r7, #0]
 8007080:	6138      	str	r0, [r7, #16]
 8007082:	2800      	cmp	r0, #0
 8007084:	d105      	bne.n	8007092 <_svfiprintf_r+0x32>
 8007086:	230c      	movs	r3, #12
 8007088:	9a03      	ldr	r2, [sp, #12]
 800708a:	3801      	subs	r0, #1
 800708c:	6013      	str	r3, [r2, #0]
 800708e:	b021      	add	sp, #132	; 0x84
 8007090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007092:	2340      	movs	r3, #64	; 0x40
 8007094:	617b      	str	r3, [r7, #20]
 8007096:	2300      	movs	r3, #0
 8007098:	ac08      	add	r4, sp, #32
 800709a:	6163      	str	r3, [r4, #20]
 800709c:	3320      	adds	r3, #32
 800709e:	7663      	strb	r3, [r4, #25]
 80070a0:	3310      	adds	r3, #16
 80070a2:	76a3      	strb	r3, [r4, #26]
 80070a4:	9507      	str	r5, [sp, #28]
 80070a6:	0035      	movs	r5, r6
 80070a8:	782b      	ldrb	r3, [r5, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d001      	beq.n	80070b2 <_svfiprintf_r+0x52>
 80070ae:	2b25      	cmp	r3, #37	; 0x25
 80070b0:	d147      	bne.n	8007142 <_svfiprintf_r+0xe2>
 80070b2:	1bab      	subs	r3, r5, r6
 80070b4:	9305      	str	r3, [sp, #20]
 80070b6:	42b5      	cmp	r5, r6
 80070b8:	d00c      	beq.n	80070d4 <_svfiprintf_r+0x74>
 80070ba:	0032      	movs	r2, r6
 80070bc:	0039      	movs	r1, r7
 80070be:	9803      	ldr	r0, [sp, #12]
 80070c0:	f7ff ff6c 	bl	8006f9c <__ssputs_r>
 80070c4:	1c43      	adds	r3, r0, #1
 80070c6:	d100      	bne.n	80070ca <_svfiprintf_r+0x6a>
 80070c8:	e0ae      	b.n	8007228 <_svfiprintf_r+0x1c8>
 80070ca:	6962      	ldr	r2, [r4, #20]
 80070cc:	9b05      	ldr	r3, [sp, #20]
 80070ce:	4694      	mov	ip, r2
 80070d0:	4463      	add	r3, ip
 80070d2:	6163      	str	r3, [r4, #20]
 80070d4:	782b      	ldrb	r3, [r5, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d100      	bne.n	80070dc <_svfiprintf_r+0x7c>
 80070da:	e0a5      	b.n	8007228 <_svfiprintf_r+0x1c8>
 80070dc:	2201      	movs	r2, #1
 80070de:	2300      	movs	r3, #0
 80070e0:	4252      	negs	r2, r2
 80070e2:	6062      	str	r2, [r4, #4]
 80070e4:	a904      	add	r1, sp, #16
 80070e6:	3254      	adds	r2, #84	; 0x54
 80070e8:	1852      	adds	r2, r2, r1
 80070ea:	1c6e      	adds	r6, r5, #1
 80070ec:	6023      	str	r3, [r4, #0]
 80070ee:	60e3      	str	r3, [r4, #12]
 80070f0:	60a3      	str	r3, [r4, #8]
 80070f2:	7013      	strb	r3, [r2, #0]
 80070f4:	65a3      	str	r3, [r4, #88]	; 0x58
 80070f6:	2205      	movs	r2, #5
 80070f8:	7831      	ldrb	r1, [r6, #0]
 80070fa:	4854      	ldr	r0, [pc, #336]	; (800724c <_svfiprintf_r+0x1ec>)
 80070fc:	f000 fc50 	bl	80079a0 <memchr>
 8007100:	1c75      	adds	r5, r6, #1
 8007102:	2800      	cmp	r0, #0
 8007104:	d11f      	bne.n	8007146 <_svfiprintf_r+0xe6>
 8007106:	6822      	ldr	r2, [r4, #0]
 8007108:	06d3      	lsls	r3, r2, #27
 800710a:	d504      	bpl.n	8007116 <_svfiprintf_r+0xb6>
 800710c:	2353      	movs	r3, #83	; 0x53
 800710e:	a904      	add	r1, sp, #16
 8007110:	185b      	adds	r3, r3, r1
 8007112:	2120      	movs	r1, #32
 8007114:	7019      	strb	r1, [r3, #0]
 8007116:	0713      	lsls	r3, r2, #28
 8007118:	d504      	bpl.n	8007124 <_svfiprintf_r+0xc4>
 800711a:	2353      	movs	r3, #83	; 0x53
 800711c:	a904      	add	r1, sp, #16
 800711e:	185b      	adds	r3, r3, r1
 8007120:	212b      	movs	r1, #43	; 0x2b
 8007122:	7019      	strb	r1, [r3, #0]
 8007124:	7833      	ldrb	r3, [r6, #0]
 8007126:	2b2a      	cmp	r3, #42	; 0x2a
 8007128:	d016      	beq.n	8007158 <_svfiprintf_r+0xf8>
 800712a:	0035      	movs	r5, r6
 800712c:	2100      	movs	r1, #0
 800712e:	200a      	movs	r0, #10
 8007130:	68e3      	ldr	r3, [r4, #12]
 8007132:	782a      	ldrb	r2, [r5, #0]
 8007134:	1c6e      	adds	r6, r5, #1
 8007136:	3a30      	subs	r2, #48	; 0x30
 8007138:	2a09      	cmp	r2, #9
 800713a:	d94e      	bls.n	80071da <_svfiprintf_r+0x17a>
 800713c:	2900      	cmp	r1, #0
 800713e:	d111      	bne.n	8007164 <_svfiprintf_r+0x104>
 8007140:	e017      	b.n	8007172 <_svfiprintf_r+0x112>
 8007142:	3501      	adds	r5, #1
 8007144:	e7b0      	b.n	80070a8 <_svfiprintf_r+0x48>
 8007146:	4b41      	ldr	r3, [pc, #260]	; (800724c <_svfiprintf_r+0x1ec>)
 8007148:	6822      	ldr	r2, [r4, #0]
 800714a:	1ac0      	subs	r0, r0, r3
 800714c:	2301      	movs	r3, #1
 800714e:	4083      	lsls	r3, r0
 8007150:	4313      	orrs	r3, r2
 8007152:	002e      	movs	r6, r5
 8007154:	6023      	str	r3, [r4, #0]
 8007156:	e7ce      	b.n	80070f6 <_svfiprintf_r+0x96>
 8007158:	9b07      	ldr	r3, [sp, #28]
 800715a:	1d19      	adds	r1, r3, #4
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	9107      	str	r1, [sp, #28]
 8007160:	2b00      	cmp	r3, #0
 8007162:	db01      	blt.n	8007168 <_svfiprintf_r+0x108>
 8007164:	930b      	str	r3, [sp, #44]	; 0x2c
 8007166:	e004      	b.n	8007172 <_svfiprintf_r+0x112>
 8007168:	425b      	negs	r3, r3
 800716a:	60e3      	str	r3, [r4, #12]
 800716c:	2302      	movs	r3, #2
 800716e:	4313      	orrs	r3, r2
 8007170:	6023      	str	r3, [r4, #0]
 8007172:	782b      	ldrb	r3, [r5, #0]
 8007174:	2b2e      	cmp	r3, #46	; 0x2e
 8007176:	d10a      	bne.n	800718e <_svfiprintf_r+0x12e>
 8007178:	786b      	ldrb	r3, [r5, #1]
 800717a:	2b2a      	cmp	r3, #42	; 0x2a
 800717c:	d135      	bne.n	80071ea <_svfiprintf_r+0x18a>
 800717e:	9b07      	ldr	r3, [sp, #28]
 8007180:	3502      	adds	r5, #2
 8007182:	1d1a      	adds	r2, r3, #4
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	9207      	str	r2, [sp, #28]
 8007188:	2b00      	cmp	r3, #0
 800718a:	db2b      	blt.n	80071e4 <_svfiprintf_r+0x184>
 800718c:	9309      	str	r3, [sp, #36]	; 0x24
 800718e:	4e30      	ldr	r6, [pc, #192]	; (8007250 <_svfiprintf_r+0x1f0>)
 8007190:	2203      	movs	r2, #3
 8007192:	0030      	movs	r0, r6
 8007194:	7829      	ldrb	r1, [r5, #0]
 8007196:	f000 fc03 	bl	80079a0 <memchr>
 800719a:	2800      	cmp	r0, #0
 800719c:	d006      	beq.n	80071ac <_svfiprintf_r+0x14c>
 800719e:	2340      	movs	r3, #64	; 0x40
 80071a0:	1b80      	subs	r0, r0, r6
 80071a2:	4083      	lsls	r3, r0
 80071a4:	6822      	ldr	r2, [r4, #0]
 80071a6:	3501      	adds	r5, #1
 80071a8:	4313      	orrs	r3, r2
 80071aa:	6023      	str	r3, [r4, #0]
 80071ac:	7829      	ldrb	r1, [r5, #0]
 80071ae:	2206      	movs	r2, #6
 80071b0:	4828      	ldr	r0, [pc, #160]	; (8007254 <_svfiprintf_r+0x1f4>)
 80071b2:	1c6e      	adds	r6, r5, #1
 80071b4:	7621      	strb	r1, [r4, #24]
 80071b6:	f000 fbf3 	bl	80079a0 <memchr>
 80071ba:	2800      	cmp	r0, #0
 80071bc:	d03c      	beq.n	8007238 <_svfiprintf_r+0x1d8>
 80071be:	4b26      	ldr	r3, [pc, #152]	; (8007258 <_svfiprintf_r+0x1f8>)
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d125      	bne.n	8007210 <_svfiprintf_r+0x1b0>
 80071c4:	2207      	movs	r2, #7
 80071c6:	9b07      	ldr	r3, [sp, #28]
 80071c8:	3307      	adds	r3, #7
 80071ca:	4393      	bics	r3, r2
 80071cc:	3308      	adds	r3, #8
 80071ce:	9307      	str	r3, [sp, #28]
 80071d0:	6963      	ldr	r3, [r4, #20]
 80071d2:	9a04      	ldr	r2, [sp, #16]
 80071d4:	189b      	adds	r3, r3, r2
 80071d6:	6163      	str	r3, [r4, #20]
 80071d8:	e765      	b.n	80070a6 <_svfiprintf_r+0x46>
 80071da:	4343      	muls	r3, r0
 80071dc:	0035      	movs	r5, r6
 80071de:	2101      	movs	r1, #1
 80071e0:	189b      	adds	r3, r3, r2
 80071e2:	e7a6      	b.n	8007132 <_svfiprintf_r+0xd2>
 80071e4:	2301      	movs	r3, #1
 80071e6:	425b      	negs	r3, r3
 80071e8:	e7d0      	b.n	800718c <_svfiprintf_r+0x12c>
 80071ea:	2300      	movs	r3, #0
 80071ec:	200a      	movs	r0, #10
 80071ee:	001a      	movs	r2, r3
 80071f0:	3501      	adds	r5, #1
 80071f2:	6063      	str	r3, [r4, #4]
 80071f4:	7829      	ldrb	r1, [r5, #0]
 80071f6:	1c6e      	adds	r6, r5, #1
 80071f8:	3930      	subs	r1, #48	; 0x30
 80071fa:	2909      	cmp	r1, #9
 80071fc:	d903      	bls.n	8007206 <_svfiprintf_r+0x1a6>
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d0c5      	beq.n	800718e <_svfiprintf_r+0x12e>
 8007202:	9209      	str	r2, [sp, #36]	; 0x24
 8007204:	e7c3      	b.n	800718e <_svfiprintf_r+0x12e>
 8007206:	4342      	muls	r2, r0
 8007208:	0035      	movs	r5, r6
 800720a:	2301      	movs	r3, #1
 800720c:	1852      	adds	r2, r2, r1
 800720e:	e7f1      	b.n	80071f4 <_svfiprintf_r+0x194>
 8007210:	ab07      	add	r3, sp, #28
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	003a      	movs	r2, r7
 8007216:	0021      	movs	r1, r4
 8007218:	4b10      	ldr	r3, [pc, #64]	; (800725c <_svfiprintf_r+0x1fc>)
 800721a:	9803      	ldr	r0, [sp, #12]
 800721c:	e000      	b.n	8007220 <_svfiprintf_r+0x1c0>
 800721e:	bf00      	nop
 8007220:	9004      	str	r0, [sp, #16]
 8007222:	9b04      	ldr	r3, [sp, #16]
 8007224:	3301      	adds	r3, #1
 8007226:	d1d3      	bne.n	80071d0 <_svfiprintf_r+0x170>
 8007228:	89bb      	ldrh	r3, [r7, #12]
 800722a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800722c:	065b      	lsls	r3, r3, #25
 800722e:	d400      	bmi.n	8007232 <_svfiprintf_r+0x1d2>
 8007230:	e72d      	b.n	800708e <_svfiprintf_r+0x2e>
 8007232:	2001      	movs	r0, #1
 8007234:	4240      	negs	r0, r0
 8007236:	e72a      	b.n	800708e <_svfiprintf_r+0x2e>
 8007238:	ab07      	add	r3, sp, #28
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	003a      	movs	r2, r7
 800723e:	0021      	movs	r1, r4
 8007240:	4b06      	ldr	r3, [pc, #24]	; (800725c <_svfiprintf_r+0x1fc>)
 8007242:	9803      	ldr	r0, [sp, #12]
 8007244:	f000 f9de 	bl	8007604 <_printf_i>
 8007248:	e7ea      	b.n	8007220 <_svfiprintf_r+0x1c0>
 800724a:	46c0      	nop			; (mov r8, r8)
 800724c:	08007e20 	.word	0x08007e20
 8007250:	08007e26 	.word	0x08007e26
 8007254:	08007e2a 	.word	0x08007e2a
 8007258:	00000000 	.word	0x00000000
 800725c:	08006f9d 	.word	0x08006f9d

08007260 <__sfputc_r>:
 8007260:	6893      	ldr	r3, [r2, #8]
 8007262:	b510      	push	{r4, lr}
 8007264:	3b01      	subs	r3, #1
 8007266:	6093      	str	r3, [r2, #8]
 8007268:	2b00      	cmp	r3, #0
 800726a:	da04      	bge.n	8007276 <__sfputc_r+0x16>
 800726c:	6994      	ldr	r4, [r2, #24]
 800726e:	42a3      	cmp	r3, r4
 8007270:	db07      	blt.n	8007282 <__sfputc_r+0x22>
 8007272:	290a      	cmp	r1, #10
 8007274:	d005      	beq.n	8007282 <__sfputc_r+0x22>
 8007276:	6813      	ldr	r3, [r2, #0]
 8007278:	1c58      	adds	r0, r3, #1
 800727a:	6010      	str	r0, [r2, #0]
 800727c:	7019      	strb	r1, [r3, #0]
 800727e:	0008      	movs	r0, r1
 8007280:	bd10      	pop	{r4, pc}
 8007282:	f7ff fa93 	bl	80067ac <__swbuf_r>
 8007286:	0001      	movs	r1, r0
 8007288:	e7f9      	b.n	800727e <__sfputc_r+0x1e>

0800728a <__sfputs_r>:
 800728a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800728c:	0006      	movs	r6, r0
 800728e:	000f      	movs	r7, r1
 8007290:	0014      	movs	r4, r2
 8007292:	18d5      	adds	r5, r2, r3
 8007294:	42ac      	cmp	r4, r5
 8007296:	d101      	bne.n	800729c <__sfputs_r+0x12>
 8007298:	2000      	movs	r0, #0
 800729a:	e007      	b.n	80072ac <__sfputs_r+0x22>
 800729c:	7821      	ldrb	r1, [r4, #0]
 800729e:	003a      	movs	r2, r7
 80072a0:	0030      	movs	r0, r6
 80072a2:	f7ff ffdd 	bl	8007260 <__sfputc_r>
 80072a6:	3401      	adds	r4, #1
 80072a8:	1c43      	adds	r3, r0, #1
 80072aa:	d1f3      	bne.n	8007294 <__sfputs_r+0xa>
 80072ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072b0 <_vfiprintf_r>:
 80072b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072b2:	b0a1      	sub	sp, #132	; 0x84
 80072b4:	0006      	movs	r6, r0
 80072b6:	000c      	movs	r4, r1
 80072b8:	001f      	movs	r7, r3
 80072ba:	9203      	str	r2, [sp, #12]
 80072bc:	2800      	cmp	r0, #0
 80072be:	d004      	beq.n	80072ca <_vfiprintf_r+0x1a>
 80072c0:	6983      	ldr	r3, [r0, #24]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <_vfiprintf_r+0x1a>
 80072c6:	f7ff fc6d 	bl	8006ba4 <__sinit>
 80072ca:	4b8e      	ldr	r3, [pc, #568]	; (8007504 <_vfiprintf_r+0x254>)
 80072cc:	429c      	cmp	r4, r3
 80072ce:	d11c      	bne.n	800730a <_vfiprintf_r+0x5a>
 80072d0:	6874      	ldr	r4, [r6, #4]
 80072d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072d4:	07db      	lsls	r3, r3, #31
 80072d6:	d405      	bmi.n	80072e4 <_vfiprintf_r+0x34>
 80072d8:	89a3      	ldrh	r3, [r4, #12]
 80072da:	059b      	lsls	r3, r3, #22
 80072dc:	d402      	bmi.n	80072e4 <_vfiprintf_r+0x34>
 80072de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072e0:	f7ff fd01 	bl	8006ce6 <__retarget_lock_acquire_recursive>
 80072e4:	89a3      	ldrh	r3, [r4, #12]
 80072e6:	071b      	lsls	r3, r3, #28
 80072e8:	d502      	bpl.n	80072f0 <_vfiprintf_r+0x40>
 80072ea:	6923      	ldr	r3, [r4, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d11d      	bne.n	800732c <_vfiprintf_r+0x7c>
 80072f0:	0021      	movs	r1, r4
 80072f2:	0030      	movs	r0, r6
 80072f4:	f7ff fab0 	bl	8006858 <__swsetup_r>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	d017      	beq.n	800732c <_vfiprintf_r+0x7c>
 80072fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072fe:	07db      	lsls	r3, r3, #31
 8007300:	d50d      	bpl.n	800731e <_vfiprintf_r+0x6e>
 8007302:	2001      	movs	r0, #1
 8007304:	4240      	negs	r0, r0
 8007306:	b021      	add	sp, #132	; 0x84
 8007308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800730a:	4b7f      	ldr	r3, [pc, #508]	; (8007508 <_vfiprintf_r+0x258>)
 800730c:	429c      	cmp	r4, r3
 800730e:	d101      	bne.n	8007314 <_vfiprintf_r+0x64>
 8007310:	68b4      	ldr	r4, [r6, #8]
 8007312:	e7de      	b.n	80072d2 <_vfiprintf_r+0x22>
 8007314:	4b7d      	ldr	r3, [pc, #500]	; (800750c <_vfiprintf_r+0x25c>)
 8007316:	429c      	cmp	r4, r3
 8007318:	d1db      	bne.n	80072d2 <_vfiprintf_r+0x22>
 800731a:	68f4      	ldr	r4, [r6, #12]
 800731c:	e7d9      	b.n	80072d2 <_vfiprintf_r+0x22>
 800731e:	89a3      	ldrh	r3, [r4, #12]
 8007320:	059b      	lsls	r3, r3, #22
 8007322:	d4ee      	bmi.n	8007302 <_vfiprintf_r+0x52>
 8007324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007326:	f7ff fcdf 	bl	8006ce8 <__retarget_lock_release_recursive>
 800732a:	e7ea      	b.n	8007302 <_vfiprintf_r+0x52>
 800732c:	2300      	movs	r3, #0
 800732e:	ad08      	add	r5, sp, #32
 8007330:	616b      	str	r3, [r5, #20]
 8007332:	3320      	adds	r3, #32
 8007334:	766b      	strb	r3, [r5, #25]
 8007336:	3310      	adds	r3, #16
 8007338:	76ab      	strb	r3, [r5, #26]
 800733a:	9707      	str	r7, [sp, #28]
 800733c:	9f03      	ldr	r7, [sp, #12]
 800733e:	783b      	ldrb	r3, [r7, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d001      	beq.n	8007348 <_vfiprintf_r+0x98>
 8007344:	2b25      	cmp	r3, #37	; 0x25
 8007346:	d14e      	bne.n	80073e6 <_vfiprintf_r+0x136>
 8007348:	9b03      	ldr	r3, [sp, #12]
 800734a:	1afb      	subs	r3, r7, r3
 800734c:	9305      	str	r3, [sp, #20]
 800734e:	9b03      	ldr	r3, [sp, #12]
 8007350:	429f      	cmp	r7, r3
 8007352:	d00d      	beq.n	8007370 <_vfiprintf_r+0xc0>
 8007354:	9b05      	ldr	r3, [sp, #20]
 8007356:	0021      	movs	r1, r4
 8007358:	0030      	movs	r0, r6
 800735a:	9a03      	ldr	r2, [sp, #12]
 800735c:	f7ff ff95 	bl	800728a <__sfputs_r>
 8007360:	1c43      	adds	r3, r0, #1
 8007362:	d100      	bne.n	8007366 <_vfiprintf_r+0xb6>
 8007364:	e0b5      	b.n	80074d2 <_vfiprintf_r+0x222>
 8007366:	696a      	ldr	r2, [r5, #20]
 8007368:	9b05      	ldr	r3, [sp, #20]
 800736a:	4694      	mov	ip, r2
 800736c:	4463      	add	r3, ip
 800736e:	616b      	str	r3, [r5, #20]
 8007370:	783b      	ldrb	r3, [r7, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d100      	bne.n	8007378 <_vfiprintf_r+0xc8>
 8007376:	e0ac      	b.n	80074d2 <_vfiprintf_r+0x222>
 8007378:	2201      	movs	r2, #1
 800737a:	1c7b      	adds	r3, r7, #1
 800737c:	9303      	str	r3, [sp, #12]
 800737e:	2300      	movs	r3, #0
 8007380:	4252      	negs	r2, r2
 8007382:	606a      	str	r2, [r5, #4]
 8007384:	a904      	add	r1, sp, #16
 8007386:	3254      	adds	r2, #84	; 0x54
 8007388:	1852      	adds	r2, r2, r1
 800738a:	602b      	str	r3, [r5, #0]
 800738c:	60eb      	str	r3, [r5, #12]
 800738e:	60ab      	str	r3, [r5, #8]
 8007390:	7013      	strb	r3, [r2, #0]
 8007392:	65ab      	str	r3, [r5, #88]	; 0x58
 8007394:	9b03      	ldr	r3, [sp, #12]
 8007396:	2205      	movs	r2, #5
 8007398:	7819      	ldrb	r1, [r3, #0]
 800739a:	485d      	ldr	r0, [pc, #372]	; (8007510 <_vfiprintf_r+0x260>)
 800739c:	f000 fb00 	bl	80079a0 <memchr>
 80073a0:	9b03      	ldr	r3, [sp, #12]
 80073a2:	1c5f      	adds	r7, r3, #1
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d120      	bne.n	80073ea <_vfiprintf_r+0x13a>
 80073a8:	682a      	ldr	r2, [r5, #0]
 80073aa:	06d3      	lsls	r3, r2, #27
 80073ac:	d504      	bpl.n	80073b8 <_vfiprintf_r+0x108>
 80073ae:	2353      	movs	r3, #83	; 0x53
 80073b0:	a904      	add	r1, sp, #16
 80073b2:	185b      	adds	r3, r3, r1
 80073b4:	2120      	movs	r1, #32
 80073b6:	7019      	strb	r1, [r3, #0]
 80073b8:	0713      	lsls	r3, r2, #28
 80073ba:	d504      	bpl.n	80073c6 <_vfiprintf_r+0x116>
 80073bc:	2353      	movs	r3, #83	; 0x53
 80073be:	a904      	add	r1, sp, #16
 80073c0:	185b      	adds	r3, r3, r1
 80073c2:	212b      	movs	r1, #43	; 0x2b
 80073c4:	7019      	strb	r1, [r3, #0]
 80073c6:	9b03      	ldr	r3, [sp, #12]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	2b2a      	cmp	r3, #42	; 0x2a
 80073cc:	d016      	beq.n	80073fc <_vfiprintf_r+0x14c>
 80073ce:	2100      	movs	r1, #0
 80073d0:	68eb      	ldr	r3, [r5, #12]
 80073d2:	9f03      	ldr	r7, [sp, #12]
 80073d4:	783a      	ldrb	r2, [r7, #0]
 80073d6:	1c78      	adds	r0, r7, #1
 80073d8:	3a30      	subs	r2, #48	; 0x30
 80073da:	4684      	mov	ip, r0
 80073dc:	2a09      	cmp	r2, #9
 80073de:	d94f      	bls.n	8007480 <_vfiprintf_r+0x1d0>
 80073e0:	2900      	cmp	r1, #0
 80073e2:	d111      	bne.n	8007408 <_vfiprintf_r+0x158>
 80073e4:	e017      	b.n	8007416 <_vfiprintf_r+0x166>
 80073e6:	3701      	adds	r7, #1
 80073e8:	e7a9      	b.n	800733e <_vfiprintf_r+0x8e>
 80073ea:	4b49      	ldr	r3, [pc, #292]	; (8007510 <_vfiprintf_r+0x260>)
 80073ec:	682a      	ldr	r2, [r5, #0]
 80073ee:	1ac0      	subs	r0, r0, r3
 80073f0:	2301      	movs	r3, #1
 80073f2:	4083      	lsls	r3, r0
 80073f4:	4313      	orrs	r3, r2
 80073f6:	602b      	str	r3, [r5, #0]
 80073f8:	9703      	str	r7, [sp, #12]
 80073fa:	e7cb      	b.n	8007394 <_vfiprintf_r+0xe4>
 80073fc:	9b07      	ldr	r3, [sp, #28]
 80073fe:	1d19      	adds	r1, r3, #4
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	9107      	str	r1, [sp, #28]
 8007404:	2b00      	cmp	r3, #0
 8007406:	db01      	blt.n	800740c <_vfiprintf_r+0x15c>
 8007408:	930b      	str	r3, [sp, #44]	; 0x2c
 800740a:	e004      	b.n	8007416 <_vfiprintf_r+0x166>
 800740c:	425b      	negs	r3, r3
 800740e:	60eb      	str	r3, [r5, #12]
 8007410:	2302      	movs	r3, #2
 8007412:	4313      	orrs	r3, r2
 8007414:	602b      	str	r3, [r5, #0]
 8007416:	783b      	ldrb	r3, [r7, #0]
 8007418:	2b2e      	cmp	r3, #46	; 0x2e
 800741a:	d10a      	bne.n	8007432 <_vfiprintf_r+0x182>
 800741c:	787b      	ldrb	r3, [r7, #1]
 800741e:	2b2a      	cmp	r3, #42	; 0x2a
 8007420:	d137      	bne.n	8007492 <_vfiprintf_r+0x1e2>
 8007422:	9b07      	ldr	r3, [sp, #28]
 8007424:	3702      	adds	r7, #2
 8007426:	1d1a      	adds	r2, r3, #4
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	9207      	str	r2, [sp, #28]
 800742c:	2b00      	cmp	r3, #0
 800742e:	db2d      	blt.n	800748c <_vfiprintf_r+0x1dc>
 8007430:	9309      	str	r3, [sp, #36]	; 0x24
 8007432:	2203      	movs	r2, #3
 8007434:	7839      	ldrb	r1, [r7, #0]
 8007436:	4837      	ldr	r0, [pc, #220]	; (8007514 <_vfiprintf_r+0x264>)
 8007438:	f000 fab2 	bl	80079a0 <memchr>
 800743c:	2800      	cmp	r0, #0
 800743e:	d007      	beq.n	8007450 <_vfiprintf_r+0x1a0>
 8007440:	4b34      	ldr	r3, [pc, #208]	; (8007514 <_vfiprintf_r+0x264>)
 8007442:	682a      	ldr	r2, [r5, #0]
 8007444:	1ac0      	subs	r0, r0, r3
 8007446:	2340      	movs	r3, #64	; 0x40
 8007448:	4083      	lsls	r3, r0
 800744a:	4313      	orrs	r3, r2
 800744c:	3701      	adds	r7, #1
 800744e:	602b      	str	r3, [r5, #0]
 8007450:	7839      	ldrb	r1, [r7, #0]
 8007452:	1c7b      	adds	r3, r7, #1
 8007454:	2206      	movs	r2, #6
 8007456:	4830      	ldr	r0, [pc, #192]	; (8007518 <_vfiprintf_r+0x268>)
 8007458:	9303      	str	r3, [sp, #12]
 800745a:	7629      	strb	r1, [r5, #24]
 800745c:	f000 faa0 	bl	80079a0 <memchr>
 8007460:	2800      	cmp	r0, #0
 8007462:	d045      	beq.n	80074f0 <_vfiprintf_r+0x240>
 8007464:	4b2d      	ldr	r3, [pc, #180]	; (800751c <_vfiprintf_r+0x26c>)
 8007466:	2b00      	cmp	r3, #0
 8007468:	d127      	bne.n	80074ba <_vfiprintf_r+0x20a>
 800746a:	2207      	movs	r2, #7
 800746c:	9b07      	ldr	r3, [sp, #28]
 800746e:	3307      	adds	r3, #7
 8007470:	4393      	bics	r3, r2
 8007472:	3308      	adds	r3, #8
 8007474:	9307      	str	r3, [sp, #28]
 8007476:	696b      	ldr	r3, [r5, #20]
 8007478:	9a04      	ldr	r2, [sp, #16]
 800747a:	189b      	adds	r3, r3, r2
 800747c:	616b      	str	r3, [r5, #20]
 800747e:	e75d      	b.n	800733c <_vfiprintf_r+0x8c>
 8007480:	210a      	movs	r1, #10
 8007482:	434b      	muls	r3, r1
 8007484:	4667      	mov	r7, ip
 8007486:	189b      	adds	r3, r3, r2
 8007488:	3909      	subs	r1, #9
 800748a:	e7a3      	b.n	80073d4 <_vfiprintf_r+0x124>
 800748c:	2301      	movs	r3, #1
 800748e:	425b      	negs	r3, r3
 8007490:	e7ce      	b.n	8007430 <_vfiprintf_r+0x180>
 8007492:	2300      	movs	r3, #0
 8007494:	001a      	movs	r2, r3
 8007496:	3701      	adds	r7, #1
 8007498:	606b      	str	r3, [r5, #4]
 800749a:	7839      	ldrb	r1, [r7, #0]
 800749c:	1c78      	adds	r0, r7, #1
 800749e:	3930      	subs	r1, #48	; 0x30
 80074a0:	4684      	mov	ip, r0
 80074a2:	2909      	cmp	r1, #9
 80074a4:	d903      	bls.n	80074ae <_vfiprintf_r+0x1fe>
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d0c3      	beq.n	8007432 <_vfiprintf_r+0x182>
 80074aa:	9209      	str	r2, [sp, #36]	; 0x24
 80074ac:	e7c1      	b.n	8007432 <_vfiprintf_r+0x182>
 80074ae:	230a      	movs	r3, #10
 80074b0:	435a      	muls	r2, r3
 80074b2:	4667      	mov	r7, ip
 80074b4:	1852      	adds	r2, r2, r1
 80074b6:	3b09      	subs	r3, #9
 80074b8:	e7ef      	b.n	800749a <_vfiprintf_r+0x1ea>
 80074ba:	ab07      	add	r3, sp, #28
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	0022      	movs	r2, r4
 80074c0:	0029      	movs	r1, r5
 80074c2:	0030      	movs	r0, r6
 80074c4:	4b16      	ldr	r3, [pc, #88]	; (8007520 <_vfiprintf_r+0x270>)
 80074c6:	e000      	b.n	80074ca <_vfiprintf_r+0x21a>
 80074c8:	bf00      	nop
 80074ca:	9004      	str	r0, [sp, #16]
 80074cc:	9b04      	ldr	r3, [sp, #16]
 80074ce:	3301      	adds	r3, #1
 80074d0:	d1d1      	bne.n	8007476 <_vfiprintf_r+0x1c6>
 80074d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074d4:	07db      	lsls	r3, r3, #31
 80074d6:	d405      	bmi.n	80074e4 <_vfiprintf_r+0x234>
 80074d8:	89a3      	ldrh	r3, [r4, #12]
 80074da:	059b      	lsls	r3, r3, #22
 80074dc:	d402      	bmi.n	80074e4 <_vfiprintf_r+0x234>
 80074de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074e0:	f7ff fc02 	bl	8006ce8 <__retarget_lock_release_recursive>
 80074e4:	89a3      	ldrh	r3, [r4, #12]
 80074e6:	065b      	lsls	r3, r3, #25
 80074e8:	d500      	bpl.n	80074ec <_vfiprintf_r+0x23c>
 80074ea:	e70a      	b.n	8007302 <_vfiprintf_r+0x52>
 80074ec:	980d      	ldr	r0, [sp, #52]	; 0x34
 80074ee:	e70a      	b.n	8007306 <_vfiprintf_r+0x56>
 80074f0:	ab07      	add	r3, sp, #28
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	0022      	movs	r2, r4
 80074f6:	0029      	movs	r1, r5
 80074f8:	0030      	movs	r0, r6
 80074fa:	4b09      	ldr	r3, [pc, #36]	; (8007520 <_vfiprintf_r+0x270>)
 80074fc:	f000 f882 	bl	8007604 <_printf_i>
 8007500:	e7e3      	b.n	80074ca <_vfiprintf_r+0x21a>
 8007502:	46c0      	nop			; (mov r8, r8)
 8007504:	08007de0 	.word	0x08007de0
 8007508:	08007e00 	.word	0x08007e00
 800750c:	08007dc0 	.word	0x08007dc0
 8007510:	08007e20 	.word	0x08007e20
 8007514:	08007e26 	.word	0x08007e26
 8007518:	08007e2a 	.word	0x08007e2a
 800751c:	00000000 	.word	0x00000000
 8007520:	0800728b 	.word	0x0800728b

08007524 <_printf_common>:
 8007524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007526:	0015      	movs	r5, r2
 8007528:	9301      	str	r3, [sp, #4]
 800752a:	688a      	ldr	r2, [r1, #8]
 800752c:	690b      	ldr	r3, [r1, #16]
 800752e:	000c      	movs	r4, r1
 8007530:	9000      	str	r0, [sp, #0]
 8007532:	4293      	cmp	r3, r2
 8007534:	da00      	bge.n	8007538 <_printf_common+0x14>
 8007536:	0013      	movs	r3, r2
 8007538:	0022      	movs	r2, r4
 800753a:	602b      	str	r3, [r5, #0]
 800753c:	3243      	adds	r2, #67	; 0x43
 800753e:	7812      	ldrb	r2, [r2, #0]
 8007540:	2a00      	cmp	r2, #0
 8007542:	d001      	beq.n	8007548 <_printf_common+0x24>
 8007544:	3301      	adds	r3, #1
 8007546:	602b      	str	r3, [r5, #0]
 8007548:	6823      	ldr	r3, [r4, #0]
 800754a:	069b      	lsls	r3, r3, #26
 800754c:	d502      	bpl.n	8007554 <_printf_common+0x30>
 800754e:	682b      	ldr	r3, [r5, #0]
 8007550:	3302      	adds	r3, #2
 8007552:	602b      	str	r3, [r5, #0]
 8007554:	6822      	ldr	r2, [r4, #0]
 8007556:	2306      	movs	r3, #6
 8007558:	0017      	movs	r7, r2
 800755a:	401f      	ands	r7, r3
 800755c:	421a      	tst	r2, r3
 800755e:	d027      	beq.n	80075b0 <_printf_common+0x8c>
 8007560:	0023      	movs	r3, r4
 8007562:	3343      	adds	r3, #67	; 0x43
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	1e5a      	subs	r2, r3, #1
 8007568:	4193      	sbcs	r3, r2
 800756a:	6822      	ldr	r2, [r4, #0]
 800756c:	0692      	lsls	r2, r2, #26
 800756e:	d430      	bmi.n	80075d2 <_printf_common+0xae>
 8007570:	0022      	movs	r2, r4
 8007572:	9901      	ldr	r1, [sp, #4]
 8007574:	9800      	ldr	r0, [sp, #0]
 8007576:	9e08      	ldr	r6, [sp, #32]
 8007578:	3243      	adds	r2, #67	; 0x43
 800757a:	47b0      	blx	r6
 800757c:	1c43      	adds	r3, r0, #1
 800757e:	d025      	beq.n	80075cc <_printf_common+0xa8>
 8007580:	2306      	movs	r3, #6
 8007582:	6820      	ldr	r0, [r4, #0]
 8007584:	682a      	ldr	r2, [r5, #0]
 8007586:	68e1      	ldr	r1, [r4, #12]
 8007588:	2500      	movs	r5, #0
 800758a:	4003      	ands	r3, r0
 800758c:	2b04      	cmp	r3, #4
 800758e:	d103      	bne.n	8007598 <_printf_common+0x74>
 8007590:	1a8d      	subs	r5, r1, r2
 8007592:	43eb      	mvns	r3, r5
 8007594:	17db      	asrs	r3, r3, #31
 8007596:	401d      	ands	r5, r3
 8007598:	68a3      	ldr	r3, [r4, #8]
 800759a:	6922      	ldr	r2, [r4, #16]
 800759c:	4293      	cmp	r3, r2
 800759e:	dd01      	ble.n	80075a4 <_printf_common+0x80>
 80075a0:	1a9b      	subs	r3, r3, r2
 80075a2:	18ed      	adds	r5, r5, r3
 80075a4:	2700      	movs	r7, #0
 80075a6:	42bd      	cmp	r5, r7
 80075a8:	d120      	bne.n	80075ec <_printf_common+0xc8>
 80075aa:	2000      	movs	r0, #0
 80075ac:	e010      	b.n	80075d0 <_printf_common+0xac>
 80075ae:	3701      	adds	r7, #1
 80075b0:	68e3      	ldr	r3, [r4, #12]
 80075b2:	682a      	ldr	r2, [r5, #0]
 80075b4:	1a9b      	subs	r3, r3, r2
 80075b6:	42bb      	cmp	r3, r7
 80075b8:	ddd2      	ble.n	8007560 <_printf_common+0x3c>
 80075ba:	0022      	movs	r2, r4
 80075bc:	2301      	movs	r3, #1
 80075be:	9901      	ldr	r1, [sp, #4]
 80075c0:	9800      	ldr	r0, [sp, #0]
 80075c2:	9e08      	ldr	r6, [sp, #32]
 80075c4:	3219      	adds	r2, #25
 80075c6:	47b0      	blx	r6
 80075c8:	1c43      	adds	r3, r0, #1
 80075ca:	d1f0      	bne.n	80075ae <_printf_common+0x8a>
 80075cc:	2001      	movs	r0, #1
 80075ce:	4240      	negs	r0, r0
 80075d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80075d2:	2030      	movs	r0, #48	; 0x30
 80075d4:	18e1      	adds	r1, r4, r3
 80075d6:	3143      	adds	r1, #67	; 0x43
 80075d8:	7008      	strb	r0, [r1, #0]
 80075da:	0021      	movs	r1, r4
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	3145      	adds	r1, #69	; 0x45
 80075e0:	7809      	ldrb	r1, [r1, #0]
 80075e2:	18a2      	adds	r2, r4, r2
 80075e4:	3243      	adds	r2, #67	; 0x43
 80075e6:	3302      	adds	r3, #2
 80075e8:	7011      	strb	r1, [r2, #0]
 80075ea:	e7c1      	b.n	8007570 <_printf_common+0x4c>
 80075ec:	0022      	movs	r2, r4
 80075ee:	2301      	movs	r3, #1
 80075f0:	9901      	ldr	r1, [sp, #4]
 80075f2:	9800      	ldr	r0, [sp, #0]
 80075f4:	9e08      	ldr	r6, [sp, #32]
 80075f6:	321a      	adds	r2, #26
 80075f8:	47b0      	blx	r6
 80075fa:	1c43      	adds	r3, r0, #1
 80075fc:	d0e6      	beq.n	80075cc <_printf_common+0xa8>
 80075fe:	3701      	adds	r7, #1
 8007600:	e7d1      	b.n	80075a6 <_printf_common+0x82>
	...

08007604 <_printf_i>:
 8007604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007606:	b08b      	sub	sp, #44	; 0x2c
 8007608:	9206      	str	r2, [sp, #24]
 800760a:	000a      	movs	r2, r1
 800760c:	3243      	adds	r2, #67	; 0x43
 800760e:	9307      	str	r3, [sp, #28]
 8007610:	9005      	str	r0, [sp, #20]
 8007612:	9204      	str	r2, [sp, #16]
 8007614:	7e0a      	ldrb	r2, [r1, #24]
 8007616:	000c      	movs	r4, r1
 8007618:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800761a:	2a78      	cmp	r2, #120	; 0x78
 800761c:	d807      	bhi.n	800762e <_printf_i+0x2a>
 800761e:	2a62      	cmp	r2, #98	; 0x62
 8007620:	d809      	bhi.n	8007636 <_printf_i+0x32>
 8007622:	2a00      	cmp	r2, #0
 8007624:	d100      	bne.n	8007628 <_printf_i+0x24>
 8007626:	e0c1      	b.n	80077ac <_printf_i+0x1a8>
 8007628:	2a58      	cmp	r2, #88	; 0x58
 800762a:	d100      	bne.n	800762e <_printf_i+0x2a>
 800762c:	e08c      	b.n	8007748 <_printf_i+0x144>
 800762e:	0026      	movs	r6, r4
 8007630:	3642      	adds	r6, #66	; 0x42
 8007632:	7032      	strb	r2, [r6, #0]
 8007634:	e022      	b.n	800767c <_printf_i+0x78>
 8007636:	0010      	movs	r0, r2
 8007638:	3863      	subs	r0, #99	; 0x63
 800763a:	2815      	cmp	r0, #21
 800763c:	d8f7      	bhi.n	800762e <_printf_i+0x2a>
 800763e:	f7f8 fd67 	bl	8000110 <__gnu_thumb1_case_shi>
 8007642:	0016      	.short	0x0016
 8007644:	fff6001f 	.word	0xfff6001f
 8007648:	fff6fff6 	.word	0xfff6fff6
 800764c:	001ffff6 	.word	0x001ffff6
 8007650:	fff6fff6 	.word	0xfff6fff6
 8007654:	fff6fff6 	.word	0xfff6fff6
 8007658:	003600a8 	.word	0x003600a8
 800765c:	fff6009a 	.word	0xfff6009a
 8007660:	00b9fff6 	.word	0x00b9fff6
 8007664:	0036fff6 	.word	0x0036fff6
 8007668:	fff6fff6 	.word	0xfff6fff6
 800766c:	009e      	.short	0x009e
 800766e:	0026      	movs	r6, r4
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	3642      	adds	r6, #66	; 0x42
 8007674:	1d11      	adds	r1, r2, #4
 8007676:	6019      	str	r1, [r3, #0]
 8007678:	6813      	ldr	r3, [r2, #0]
 800767a:	7033      	strb	r3, [r6, #0]
 800767c:	2301      	movs	r3, #1
 800767e:	e0a7      	b.n	80077d0 <_printf_i+0x1cc>
 8007680:	6808      	ldr	r0, [r1, #0]
 8007682:	6819      	ldr	r1, [r3, #0]
 8007684:	1d0a      	adds	r2, r1, #4
 8007686:	0605      	lsls	r5, r0, #24
 8007688:	d50b      	bpl.n	80076a2 <_printf_i+0x9e>
 800768a:	680d      	ldr	r5, [r1, #0]
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	2d00      	cmp	r5, #0
 8007690:	da03      	bge.n	800769a <_printf_i+0x96>
 8007692:	232d      	movs	r3, #45	; 0x2d
 8007694:	9a04      	ldr	r2, [sp, #16]
 8007696:	426d      	negs	r5, r5
 8007698:	7013      	strb	r3, [r2, #0]
 800769a:	4b61      	ldr	r3, [pc, #388]	; (8007820 <_printf_i+0x21c>)
 800769c:	270a      	movs	r7, #10
 800769e:	9303      	str	r3, [sp, #12]
 80076a0:	e01b      	b.n	80076da <_printf_i+0xd6>
 80076a2:	680d      	ldr	r5, [r1, #0]
 80076a4:	601a      	str	r2, [r3, #0]
 80076a6:	0641      	lsls	r1, r0, #25
 80076a8:	d5f1      	bpl.n	800768e <_printf_i+0x8a>
 80076aa:	b22d      	sxth	r5, r5
 80076ac:	e7ef      	b.n	800768e <_printf_i+0x8a>
 80076ae:	680d      	ldr	r5, [r1, #0]
 80076b0:	6819      	ldr	r1, [r3, #0]
 80076b2:	1d08      	adds	r0, r1, #4
 80076b4:	6018      	str	r0, [r3, #0]
 80076b6:	062e      	lsls	r6, r5, #24
 80076b8:	d501      	bpl.n	80076be <_printf_i+0xba>
 80076ba:	680d      	ldr	r5, [r1, #0]
 80076bc:	e003      	b.n	80076c6 <_printf_i+0xc2>
 80076be:	066d      	lsls	r5, r5, #25
 80076c0:	d5fb      	bpl.n	80076ba <_printf_i+0xb6>
 80076c2:	680d      	ldr	r5, [r1, #0]
 80076c4:	b2ad      	uxth	r5, r5
 80076c6:	4b56      	ldr	r3, [pc, #344]	; (8007820 <_printf_i+0x21c>)
 80076c8:	2708      	movs	r7, #8
 80076ca:	9303      	str	r3, [sp, #12]
 80076cc:	2a6f      	cmp	r2, #111	; 0x6f
 80076ce:	d000      	beq.n	80076d2 <_printf_i+0xce>
 80076d0:	3702      	adds	r7, #2
 80076d2:	0023      	movs	r3, r4
 80076d4:	2200      	movs	r2, #0
 80076d6:	3343      	adds	r3, #67	; 0x43
 80076d8:	701a      	strb	r2, [r3, #0]
 80076da:	6863      	ldr	r3, [r4, #4]
 80076dc:	60a3      	str	r3, [r4, #8]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	db03      	blt.n	80076ea <_printf_i+0xe6>
 80076e2:	2204      	movs	r2, #4
 80076e4:	6821      	ldr	r1, [r4, #0]
 80076e6:	4391      	bics	r1, r2
 80076e8:	6021      	str	r1, [r4, #0]
 80076ea:	2d00      	cmp	r5, #0
 80076ec:	d102      	bne.n	80076f4 <_printf_i+0xf0>
 80076ee:	9e04      	ldr	r6, [sp, #16]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00c      	beq.n	800770e <_printf_i+0x10a>
 80076f4:	9e04      	ldr	r6, [sp, #16]
 80076f6:	0028      	movs	r0, r5
 80076f8:	0039      	movs	r1, r7
 80076fa:	f7f8 fd99 	bl	8000230 <__aeabi_uidivmod>
 80076fe:	9b03      	ldr	r3, [sp, #12]
 8007700:	3e01      	subs	r6, #1
 8007702:	5c5b      	ldrb	r3, [r3, r1]
 8007704:	7033      	strb	r3, [r6, #0]
 8007706:	002b      	movs	r3, r5
 8007708:	0005      	movs	r5, r0
 800770a:	429f      	cmp	r7, r3
 800770c:	d9f3      	bls.n	80076f6 <_printf_i+0xf2>
 800770e:	2f08      	cmp	r7, #8
 8007710:	d109      	bne.n	8007726 <_printf_i+0x122>
 8007712:	6823      	ldr	r3, [r4, #0]
 8007714:	07db      	lsls	r3, r3, #31
 8007716:	d506      	bpl.n	8007726 <_printf_i+0x122>
 8007718:	6863      	ldr	r3, [r4, #4]
 800771a:	6922      	ldr	r2, [r4, #16]
 800771c:	4293      	cmp	r3, r2
 800771e:	dc02      	bgt.n	8007726 <_printf_i+0x122>
 8007720:	2330      	movs	r3, #48	; 0x30
 8007722:	3e01      	subs	r6, #1
 8007724:	7033      	strb	r3, [r6, #0]
 8007726:	9b04      	ldr	r3, [sp, #16]
 8007728:	1b9b      	subs	r3, r3, r6
 800772a:	6123      	str	r3, [r4, #16]
 800772c:	9b07      	ldr	r3, [sp, #28]
 800772e:	0021      	movs	r1, r4
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	9805      	ldr	r0, [sp, #20]
 8007734:	9b06      	ldr	r3, [sp, #24]
 8007736:	aa09      	add	r2, sp, #36	; 0x24
 8007738:	f7ff fef4 	bl	8007524 <_printf_common>
 800773c:	1c43      	adds	r3, r0, #1
 800773e:	d14c      	bne.n	80077da <_printf_i+0x1d6>
 8007740:	2001      	movs	r0, #1
 8007742:	4240      	negs	r0, r0
 8007744:	b00b      	add	sp, #44	; 0x2c
 8007746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007748:	3145      	adds	r1, #69	; 0x45
 800774a:	700a      	strb	r2, [r1, #0]
 800774c:	4a34      	ldr	r2, [pc, #208]	; (8007820 <_printf_i+0x21c>)
 800774e:	9203      	str	r2, [sp, #12]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	6821      	ldr	r1, [r4, #0]
 8007754:	ca20      	ldmia	r2!, {r5}
 8007756:	601a      	str	r2, [r3, #0]
 8007758:	0608      	lsls	r0, r1, #24
 800775a:	d516      	bpl.n	800778a <_printf_i+0x186>
 800775c:	07cb      	lsls	r3, r1, #31
 800775e:	d502      	bpl.n	8007766 <_printf_i+0x162>
 8007760:	2320      	movs	r3, #32
 8007762:	4319      	orrs	r1, r3
 8007764:	6021      	str	r1, [r4, #0]
 8007766:	2710      	movs	r7, #16
 8007768:	2d00      	cmp	r5, #0
 800776a:	d1b2      	bne.n	80076d2 <_printf_i+0xce>
 800776c:	2320      	movs	r3, #32
 800776e:	6822      	ldr	r2, [r4, #0]
 8007770:	439a      	bics	r2, r3
 8007772:	6022      	str	r2, [r4, #0]
 8007774:	e7ad      	b.n	80076d2 <_printf_i+0xce>
 8007776:	2220      	movs	r2, #32
 8007778:	6809      	ldr	r1, [r1, #0]
 800777a:	430a      	orrs	r2, r1
 800777c:	6022      	str	r2, [r4, #0]
 800777e:	0022      	movs	r2, r4
 8007780:	2178      	movs	r1, #120	; 0x78
 8007782:	3245      	adds	r2, #69	; 0x45
 8007784:	7011      	strb	r1, [r2, #0]
 8007786:	4a27      	ldr	r2, [pc, #156]	; (8007824 <_printf_i+0x220>)
 8007788:	e7e1      	b.n	800774e <_printf_i+0x14a>
 800778a:	0648      	lsls	r0, r1, #25
 800778c:	d5e6      	bpl.n	800775c <_printf_i+0x158>
 800778e:	b2ad      	uxth	r5, r5
 8007790:	e7e4      	b.n	800775c <_printf_i+0x158>
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	680d      	ldr	r5, [r1, #0]
 8007796:	1d10      	adds	r0, r2, #4
 8007798:	6949      	ldr	r1, [r1, #20]
 800779a:	6018      	str	r0, [r3, #0]
 800779c:	6813      	ldr	r3, [r2, #0]
 800779e:	062e      	lsls	r6, r5, #24
 80077a0:	d501      	bpl.n	80077a6 <_printf_i+0x1a2>
 80077a2:	6019      	str	r1, [r3, #0]
 80077a4:	e002      	b.n	80077ac <_printf_i+0x1a8>
 80077a6:	066d      	lsls	r5, r5, #25
 80077a8:	d5fb      	bpl.n	80077a2 <_printf_i+0x19e>
 80077aa:	8019      	strh	r1, [r3, #0]
 80077ac:	2300      	movs	r3, #0
 80077ae:	9e04      	ldr	r6, [sp, #16]
 80077b0:	6123      	str	r3, [r4, #16]
 80077b2:	e7bb      	b.n	800772c <_printf_i+0x128>
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	1d11      	adds	r1, r2, #4
 80077b8:	6019      	str	r1, [r3, #0]
 80077ba:	6816      	ldr	r6, [r2, #0]
 80077bc:	2100      	movs	r1, #0
 80077be:	0030      	movs	r0, r6
 80077c0:	6862      	ldr	r2, [r4, #4]
 80077c2:	f000 f8ed 	bl	80079a0 <memchr>
 80077c6:	2800      	cmp	r0, #0
 80077c8:	d001      	beq.n	80077ce <_printf_i+0x1ca>
 80077ca:	1b80      	subs	r0, r0, r6
 80077cc:	6060      	str	r0, [r4, #4]
 80077ce:	6863      	ldr	r3, [r4, #4]
 80077d0:	6123      	str	r3, [r4, #16]
 80077d2:	2300      	movs	r3, #0
 80077d4:	9a04      	ldr	r2, [sp, #16]
 80077d6:	7013      	strb	r3, [r2, #0]
 80077d8:	e7a8      	b.n	800772c <_printf_i+0x128>
 80077da:	6923      	ldr	r3, [r4, #16]
 80077dc:	0032      	movs	r2, r6
 80077de:	9906      	ldr	r1, [sp, #24]
 80077e0:	9805      	ldr	r0, [sp, #20]
 80077e2:	9d07      	ldr	r5, [sp, #28]
 80077e4:	47a8      	blx	r5
 80077e6:	1c43      	adds	r3, r0, #1
 80077e8:	d0aa      	beq.n	8007740 <_printf_i+0x13c>
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	079b      	lsls	r3, r3, #30
 80077ee:	d415      	bmi.n	800781c <_printf_i+0x218>
 80077f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f2:	68e0      	ldr	r0, [r4, #12]
 80077f4:	4298      	cmp	r0, r3
 80077f6:	daa5      	bge.n	8007744 <_printf_i+0x140>
 80077f8:	0018      	movs	r0, r3
 80077fa:	e7a3      	b.n	8007744 <_printf_i+0x140>
 80077fc:	0022      	movs	r2, r4
 80077fe:	2301      	movs	r3, #1
 8007800:	9906      	ldr	r1, [sp, #24]
 8007802:	9805      	ldr	r0, [sp, #20]
 8007804:	9e07      	ldr	r6, [sp, #28]
 8007806:	3219      	adds	r2, #25
 8007808:	47b0      	blx	r6
 800780a:	1c43      	adds	r3, r0, #1
 800780c:	d098      	beq.n	8007740 <_printf_i+0x13c>
 800780e:	3501      	adds	r5, #1
 8007810:	68e3      	ldr	r3, [r4, #12]
 8007812:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007814:	1a9b      	subs	r3, r3, r2
 8007816:	42ab      	cmp	r3, r5
 8007818:	dcf0      	bgt.n	80077fc <_printf_i+0x1f8>
 800781a:	e7e9      	b.n	80077f0 <_printf_i+0x1ec>
 800781c:	2500      	movs	r5, #0
 800781e:	e7f7      	b.n	8007810 <_printf_i+0x20c>
 8007820:	08007e31 	.word	0x08007e31
 8007824:	08007e42 	.word	0x08007e42

08007828 <_sbrk_r>:
 8007828:	2300      	movs	r3, #0
 800782a:	b570      	push	{r4, r5, r6, lr}
 800782c:	4d06      	ldr	r5, [pc, #24]	; (8007848 <_sbrk_r+0x20>)
 800782e:	0004      	movs	r4, r0
 8007830:	0008      	movs	r0, r1
 8007832:	602b      	str	r3, [r5, #0]
 8007834:	f7fa fbe6 	bl	8002004 <_sbrk>
 8007838:	1c43      	adds	r3, r0, #1
 800783a:	d103      	bne.n	8007844 <_sbrk_r+0x1c>
 800783c:	682b      	ldr	r3, [r5, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d000      	beq.n	8007844 <_sbrk_r+0x1c>
 8007842:	6023      	str	r3, [r4, #0]
 8007844:	bd70      	pop	{r4, r5, r6, pc}
 8007846:	46c0      	nop			; (mov r8, r8)
 8007848:	20000ea0 	.word	0x20000ea0

0800784c <__sread>:
 800784c:	b570      	push	{r4, r5, r6, lr}
 800784e:	000c      	movs	r4, r1
 8007850:	250e      	movs	r5, #14
 8007852:	5f49      	ldrsh	r1, [r1, r5]
 8007854:	f000 f902 	bl	8007a5c <_read_r>
 8007858:	2800      	cmp	r0, #0
 800785a:	db03      	blt.n	8007864 <__sread+0x18>
 800785c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800785e:	181b      	adds	r3, r3, r0
 8007860:	6563      	str	r3, [r4, #84]	; 0x54
 8007862:	bd70      	pop	{r4, r5, r6, pc}
 8007864:	89a3      	ldrh	r3, [r4, #12]
 8007866:	4a02      	ldr	r2, [pc, #8]	; (8007870 <__sread+0x24>)
 8007868:	4013      	ands	r3, r2
 800786a:	81a3      	strh	r3, [r4, #12]
 800786c:	e7f9      	b.n	8007862 <__sread+0x16>
 800786e:	46c0      	nop			; (mov r8, r8)
 8007870:	ffffefff 	.word	0xffffefff

08007874 <__swrite>:
 8007874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007876:	001f      	movs	r7, r3
 8007878:	898b      	ldrh	r3, [r1, #12]
 800787a:	0005      	movs	r5, r0
 800787c:	000c      	movs	r4, r1
 800787e:	0016      	movs	r6, r2
 8007880:	05db      	lsls	r3, r3, #23
 8007882:	d505      	bpl.n	8007890 <__swrite+0x1c>
 8007884:	230e      	movs	r3, #14
 8007886:	5ec9      	ldrsh	r1, [r1, r3]
 8007888:	2200      	movs	r2, #0
 800788a:	2302      	movs	r3, #2
 800788c:	f000 f874 	bl	8007978 <_lseek_r>
 8007890:	89a3      	ldrh	r3, [r4, #12]
 8007892:	4a05      	ldr	r2, [pc, #20]	; (80078a8 <__swrite+0x34>)
 8007894:	0028      	movs	r0, r5
 8007896:	4013      	ands	r3, r2
 8007898:	81a3      	strh	r3, [r4, #12]
 800789a:	0032      	movs	r2, r6
 800789c:	230e      	movs	r3, #14
 800789e:	5ee1      	ldrsh	r1, [r4, r3]
 80078a0:	003b      	movs	r3, r7
 80078a2:	f000 f81f 	bl	80078e4 <_write_r>
 80078a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078a8:	ffffefff 	.word	0xffffefff

080078ac <__sseek>:
 80078ac:	b570      	push	{r4, r5, r6, lr}
 80078ae:	000c      	movs	r4, r1
 80078b0:	250e      	movs	r5, #14
 80078b2:	5f49      	ldrsh	r1, [r1, r5]
 80078b4:	f000 f860 	bl	8007978 <_lseek_r>
 80078b8:	89a3      	ldrh	r3, [r4, #12]
 80078ba:	1c42      	adds	r2, r0, #1
 80078bc:	d103      	bne.n	80078c6 <__sseek+0x1a>
 80078be:	4a05      	ldr	r2, [pc, #20]	; (80078d4 <__sseek+0x28>)
 80078c0:	4013      	ands	r3, r2
 80078c2:	81a3      	strh	r3, [r4, #12]
 80078c4:	bd70      	pop	{r4, r5, r6, pc}
 80078c6:	2280      	movs	r2, #128	; 0x80
 80078c8:	0152      	lsls	r2, r2, #5
 80078ca:	4313      	orrs	r3, r2
 80078cc:	81a3      	strh	r3, [r4, #12]
 80078ce:	6560      	str	r0, [r4, #84]	; 0x54
 80078d0:	e7f8      	b.n	80078c4 <__sseek+0x18>
 80078d2:	46c0      	nop			; (mov r8, r8)
 80078d4:	ffffefff 	.word	0xffffefff

080078d8 <__sclose>:
 80078d8:	b510      	push	{r4, lr}
 80078da:	230e      	movs	r3, #14
 80078dc:	5ec9      	ldrsh	r1, [r1, r3]
 80078de:	f000 f815 	bl	800790c <_close_r>
 80078e2:	bd10      	pop	{r4, pc}

080078e4 <_write_r>:
 80078e4:	b570      	push	{r4, r5, r6, lr}
 80078e6:	0004      	movs	r4, r0
 80078e8:	0008      	movs	r0, r1
 80078ea:	0011      	movs	r1, r2
 80078ec:	001a      	movs	r2, r3
 80078ee:	2300      	movs	r3, #0
 80078f0:	4d05      	ldr	r5, [pc, #20]	; (8007908 <_write_r+0x24>)
 80078f2:	602b      	str	r3, [r5, #0]
 80078f4:	f7fa f8d2 	bl	8001a9c <_write>
 80078f8:	1c43      	adds	r3, r0, #1
 80078fa:	d103      	bne.n	8007904 <_write_r+0x20>
 80078fc:	682b      	ldr	r3, [r5, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d000      	beq.n	8007904 <_write_r+0x20>
 8007902:	6023      	str	r3, [r4, #0]
 8007904:	bd70      	pop	{r4, r5, r6, pc}
 8007906:	46c0      	nop			; (mov r8, r8)
 8007908:	20000ea0 	.word	0x20000ea0

0800790c <_close_r>:
 800790c:	2300      	movs	r3, #0
 800790e:	b570      	push	{r4, r5, r6, lr}
 8007910:	4d06      	ldr	r5, [pc, #24]	; (800792c <_close_r+0x20>)
 8007912:	0004      	movs	r4, r0
 8007914:	0008      	movs	r0, r1
 8007916:	602b      	str	r3, [r5, #0]
 8007918:	f7fa f8ee 	bl	8001af8 <_close>
 800791c:	1c43      	adds	r3, r0, #1
 800791e:	d103      	bne.n	8007928 <_close_r+0x1c>
 8007920:	682b      	ldr	r3, [r5, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d000      	beq.n	8007928 <_close_r+0x1c>
 8007926:	6023      	str	r3, [r4, #0]
 8007928:	bd70      	pop	{r4, r5, r6, pc}
 800792a:	46c0      	nop			; (mov r8, r8)
 800792c:	20000ea0 	.word	0x20000ea0

08007930 <_fstat_r>:
 8007930:	2300      	movs	r3, #0
 8007932:	b570      	push	{r4, r5, r6, lr}
 8007934:	4d06      	ldr	r5, [pc, #24]	; (8007950 <_fstat_r+0x20>)
 8007936:	0004      	movs	r4, r0
 8007938:	0008      	movs	r0, r1
 800793a:	0011      	movs	r1, r2
 800793c:	602b      	str	r3, [r5, #0]
 800793e:	f7fa f92d 	bl	8001b9c <_fstat>
 8007942:	1c43      	adds	r3, r0, #1
 8007944:	d103      	bne.n	800794e <_fstat_r+0x1e>
 8007946:	682b      	ldr	r3, [r5, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d000      	beq.n	800794e <_fstat_r+0x1e>
 800794c:	6023      	str	r3, [r4, #0]
 800794e:	bd70      	pop	{r4, r5, r6, pc}
 8007950:	20000ea0 	.word	0x20000ea0

08007954 <_isatty_r>:
 8007954:	2300      	movs	r3, #0
 8007956:	b570      	push	{r4, r5, r6, lr}
 8007958:	4d06      	ldr	r5, [pc, #24]	; (8007974 <_isatty_r+0x20>)
 800795a:	0004      	movs	r4, r0
 800795c:	0008      	movs	r0, r1
 800795e:	602b      	str	r3, [r5, #0]
 8007960:	f7fa f886 	bl	8001a70 <_isatty>
 8007964:	1c43      	adds	r3, r0, #1
 8007966:	d103      	bne.n	8007970 <_isatty_r+0x1c>
 8007968:	682b      	ldr	r3, [r5, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d000      	beq.n	8007970 <_isatty_r+0x1c>
 800796e:	6023      	str	r3, [r4, #0]
 8007970:	bd70      	pop	{r4, r5, r6, pc}
 8007972:	46c0      	nop			; (mov r8, r8)
 8007974:	20000ea0 	.word	0x20000ea0

08007978 <_lseek_r>:
 8007978:	b570      	push	{r4, r5, r6, lr}
 800797a:	0004      	movs	r4, r0
 800797c:	0008      	movs	r0, r1
 800797e:	0011      	movs	r1, r2
 8007980:	001a      	movs	r2, r3
 8007982:	2300      	movs	r3, #0
 8007984:	4d05      	ldr	r5, [pc, #20]	; (800799c <_lseek_r+0x24>)
 8007986:	602b      	str	r3, [r5, #0]
 8007988:	f7fa f8cd 	bl	8001b26 <_lseek>
 800798c:	1c43      	adds	r3, r0, #1
 800798e:	d103      	bne.n	8007998 <_lseek_r+0x20>
 8007990:	682b      	ldr	r3, [r5, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d000      	beq.n	8007998 <_lseek_r+0x20>
 8007996:	6023      	str	r3, [r4, #0]
 8007998:	bd70      	pop	{r4, r5, r6, pc}
 800799a:	46c0      	nop			; (mov r8, r8)
 800799c:	20000ea0 	.word	0x20000ea0

080079a0 <memchr>:
 80079a0:	b2c9      	uxtb	r1, r1
 80079a2:	1882      	adds	r2, r0, r2
 80079a4:	4290      	cmp	r0, r2
 80079a6:	d101      	bne.n	80079ac <memchr+0xc>
 80079a8:	2000      	movs	r0, #0
 80079aa:	4770      	bx	lr
 80079ac:	7803      	ldrb	r3, [r0, #0]
 80079ae:	428b      	cmp	r3, r1
 80079b0:	d0fb      	beq.n	80079aa <memchr+0xa>
 80079b2:	3001      	adds	r0, #1
 80079b4:	e7f6      	b.n	80079a4 <memchr+0x4>

080079b6 <memmove>:
 80079b6:	b510      	push	{r4, lr}
 80079b8:	4288      	cmp	r0, r1
 80079ba:	d902      	bls.n	80079c2 <memmove+0xc>
 80079bc:	188b      	adds	r3, r1, r2
 80079be:	4298      	cmp	r0, r3
 80079c0:	d303      	bcc.n	80079ca <memmove+0x14>
 80079c2:	2300      	movs	r3, #0
 80079c4:	e007      	b.n	80079d6 <memmove+0x20>
 80079c6:	5c8b      	ldrb	r3, [r1, r2]
 80079c8:	5483      	strb	r3, [r0, r2]
 80079ca:	3a01      	subs	r2, #1
 80079cc:	d2fb      	bcs.n	80079c6 <memmove+0x10>
 80079ce:	bd10      	pop	{r4, pc}
 80079d0:	5ccc      	ldrb	r4, [r1, r3]
 80079d2:	54c4      	strb	r4, [r0, r3]
 80079d4:	3301      	adds	r3, #1
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d1fa      	bne.n	80079d0 <memmove+0x1a>
 80079da:	e7f8      	b.n	80079ce <memmove+0x18>

080079dc <__malloc_lock>:
 80079dc:	b510      	push	{r4, lr}
 80079de:	4802      	ldr	r0, [pc, #8]	; (80079e8 <__malloc_lock+0xc>)
 80079e0:	f7ff f981 	bl	8006ce6 <__retarget_lock_acquire_recursive>
 80079e4:	bd10      	pop	{r4, pc}
 80079e6:	46c0      	nop			; (mov r8, r8)
 80079e8:	20000e94 	.word	0x20000e94

080079ec <__malloc_unlock>:
 80079ec:	b510      	push	{r4, lr}
 80079ee:	4802      	ldr	r0, [pc, #8]	; (80079f8 <__malloc_unlock+0xc>)
 80079f0:	f7ff f97a 	bl	8006ce8 <__retarget_lock_release_recursive>
 80079f4:	bd10      	pop	{r4, pc}
 80079f6:	46c0      	nop			; (mov r8, r8)
 80079f8:	20000e94 	.word	0x20000e94

080079fc <_realloc_r>:
 80079fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079fe:	0007      	movs	r7, r0
 8007a00:	000e      	movs	r6, r1
 8007a02:	0014      	movs	r4, r2
 8007a04:	2900      	cmp	r1, #0
 8007a06:	d105      	bne.n	8007a14 <_realloc_r+0x18>
 8007a08:	0011      	movs	r1, r2
 8007a0a:	f7ff fa51 	bl	8006eb0 <_malloc_r>
 8007a0e:	0005      	movs	r5, r0
 8007a10:	0028      	movs	r0, r5
 8007a12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a14:	2a00      	cmp	r2, #0
 8007a16:	d103      	bne.n	8007a20 <_realloc_r+0x24>
 8007a18:	f7ff f9de 	bl	8006dd8 <_free_r>
 8007a1c:	0025      	movs	r5, r4
 8007a1e:	e7f7      	b.n	8007a10 <_realloc_r+0x14>
 8007a20:	f000 f830 	bl	8007a84 <_malloc_usable_size_r>
 8007a24:	9001      	str	r0, [sp, #4]
 8007a26:	4284      	cmp	r4, r0
 8007a28:	d803      	bhi.n	8007a32 <_realloc_r+0x36>
 8007a2a:	0035      	movs	r5, r6
 8007a2c:	0843      	lsrs	r3, r0, #1
 8007a2e:	42a3      	cmp	r3, r4
 8007a30:	d3ee      	bcc.n	8007a10 <_realloc_r+0x14>
 8007a32:	0021      	movs	r1, r4
 8007a34:	0038      	movs	r0, r7
 8007a36:	f7ff fa3b 	bl	8006eb0 <_malloc_r>
 8007a3a:	1e05      	subs	r5, r0, #0
 8007a3c:	d0e8      	beq.n	8007a10 <_realloc_r+0x14>
 8007a3e:	9b01      	ldr	r3, [sp, #4]
 8007a40:	0022      	movs	r2, r4
 8007a42:	429c      	cmp	r4, r3
 8007a44:	d900      	bls.n	8007a48 <_realloc_r+0x4c>
 8007a46:	001a      	movs	r2, r3
 8007a48:	0031      	movs	r1, r6
 8007a4a:	0028      	movs	r0, r5
 8007a4c:	f7fe fd0a 	bl	8006464 <memcpy>
 8007a50:	0031      	movs	r1, r6
 8007a52:	0038      	movs	r0, r7
 8007a54:	f7ff f9c0 	bl	8006dd8 <_free_r>
 8007a58:	e7da      	b.n	8007a10 <_realloc_r+0x14>
	...

08007a5c <_read_r>:
 8007a5c:	b570      	push	{r4, r5, r6, lr}
 8007a5e:	0004      	movs	r4, r0
 8007a60:	0008      	movs	r0, r1
 8007a62:	0011      	movs	r1, r2
 8007a64:	001a      	movs	r2, r3
 8007a66:	2300      	movs	r3, #0
 8007a68:	4d05      	ldr	r5, [pc, #20]	; (8007a80 <_read_r+0x24>)
 8007a6a:	602b      	str	r3, [r5, #0]
 8007a6c:	f7fa f86c 	bl	8001b48 <_read>
 8007a70:	1c43      	adds	r3, r0, #1
 8007a72:	d103      	bne.n	8007a7c <_read_r+0x20>
 8007a74:	682b      	ldr	r3, [r5, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d000      	beq.n	8007a7c <_read_r+0x20>
 8007a7a:	6023      	str	r3, [r4, #0]
 8007a7c:	bd70      	pop	{r4, r5, r6, pc}
 8007a7e:	46c0      	nop			; (mov r8, r8)
 8007a80:	20000ea0 	.word	0x20000ea0

08007a84 <_malloc_usable_size_r>:
 8007a84:	1f0b      	subs	r3, r1, #4
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	1f18      	subs	r0, r3, #4
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	da01      	bge.n	8007a92 <_malloc_usable_size_r+0xe>
 8007a8e:	580b      	ldr	r3, [r1, r0]
 8007a90:	18c0      	adds	r0, r0, r3
 8007a92:	4770      	bx	lr

08007a94 <_init>:
 8007a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a96:	46c0      	nop			; (mov r8, r8)
 8007a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a9a:	bc08      	pop	{r3}
 8007a9c:	469e      	mov	lr, r3
 8007a9e:	4770      	bx	lr

08007aa0 <_fini>:
 8007aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa2:	46c0      	nop			; (mov r8, r8)
 8007aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aa6:	bc08      	pop	{r3}
 8007aa8:	469e      	mov	lr, r3
 8007aaa:	4770      	bx	lr
 8007aac:	0000      	movs	r0, r0
	...

08007ab0 <__FLASH_Program_Fast_veneer>:
 8007ab0:	b401      	push	{r0}
 8007ab2:	4802      	ldr	r0, [pc, #8]	; (8007abc <__FLASH_Program_Fast_veneer+0xc>)
 8007ab4:	4684      	mov	ip, r0
 8007ab6:	bc01      	pop	{r0}
 8007ab8:	4760      	bx	ip
 8007aba:	bf00      	nop
 8007abc:	20000471 	.word	0x20000471

Disassembly of section .data:

20000400 <SystemCoreClock>:
20000400:	00f42400                                .$..

20000404 <uwTickPrio>:
20000404:	00000004                                ....

20000408 <uwTickFreq>:
20000408:	00000001                                ....

2000040c <_impure_ptr>:
2000040c:	20000410                                ... 

20000410 <impure_data>:
20000410:	00000000 08007de0 08007e00 08007dc0     .....}...~...}..
	...

20000470 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000470:	b580      	push	{r7, lr}
20000472:	b088      	sub	sp, #32
20000474:	af00      	add	r7, sp, #0
20000476:	6078      	str	r0, [r7, #4]
20000478:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000047a:	231f      	movs	r3, #31
2000047c:	18fb      	adds	r3, r7, r3
2000047e:	2200      	movs	r2, #0
20000480:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000482:	687b      	ldr	r3, [r7, #4]
20000484:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000486:	683b      	ldr	r3, [r7, #0]
20000488:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000048a:	4b1a      	ldr	r3, [pc, #104]	; (200004f4 <FLASH_Program_Fast+0x84>)
2000048c:	695a      	ldr	r2, [r3, #20]
2000048e:	4b19      	ldr	r3, [pc, #100]	; (200004f4 <FLASH_Program_Fast+0x84>)
20000490:	2180      	movs	r1, #128	; 0x80
20000492:	02c9      	lsls	r1, r1, #11
20000494:	430a      	orrs	r2, r1
20000496:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000498:	f3ef 8310 	mrs	r3, PRIMASK
2000049c:	60fb      	str	r3, [r7, #12]
  return(result);
2000049e:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200004a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200004a2:	b672      	cpsid	i
}
200004a4:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200004a6:	e00f      	b.n	200004c8 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200004a8:	697a      	ldr	r2, [r7, #20]
200004aa:	69bb      	ldr	r3, [r7, #24]
200004ac:	6812      	ldr	r2, [r2, #0]
200004ae:	601a      	str	r2, [r3, #0]
    src += 4U;
200004b0:	697b      	ldr	r3, [r7, #20]
200004b2:	3304      	adds	r3, #4
200004b4:	617b      	str	r3, [r7, #20]
    dest += 4U;
200004b6:	69bb      	ldr	r3, [r7, #24]
200004b8:	3304      	adds	r3, #4
200004ba:	61bb      	str	r3, [r7, #24]
    index++;
200004bc:	211f      	movs	r1, #31
200004be:	187b      	adds	r3, r7, r1
200004c0:	781a      	ldrb	r2, [r3, #0]
200004c2:	187b      	adds	r3, r7, r1
200004c4:	3201      	adds	r2, #1
200004c6:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200004c8:	231f      	movs	r3, #31
200004ca:	18fb      	adds	r3, r7, r3
200004cc:	781b      	ldrb	r3, [r3, #0]
200004ce:	2b3f      	cmp	r3, #63	; 0x3f
200004d0:	d9ea      	bls.n	200004a8 <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
200004d2:	46c0      	nop			; (mov r8, r8)
200004d4:	4b07      	ldr	r3, [pc, #28]	; (200004f4 <FLASH_Program_Fast+0x84>)
200004d6:	691a      	ldr	r2, [r3, #16]
200004d8:	23c0      	movs	r3, #192	; 0xc0
200004da:	029b      	lsls	r3, r3, #10
200004dc:	4013      	ands	r3, r2
200004de:	d1f9      	bne.n	200004d4 <FLASH_Program_Fast+0x64>
200004e0:	693b      	ldr	r3, [r7, #16]
200004e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200004e4:	68bb      	ldr	r3, [r7, #8]
200004e6:	f383 8810 	msr	PRIMASK, r3
}
200004ea:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200004ec:	46c0      	nop			; (mov r8, r8)
200004ee:	46bd      	mov	sp, r7
200004f0:	b008      	add	sp, #32
200004f2:	bd80      	pop	{r7, pc}
200004f4:	40022000 	.word	0x40022000
