
BL_RIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c00  080000b8  080000b8  000100b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000894  08007cb8  08007cb8  00017cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800854c  0800854c  0002050a  2**0
                  CONTENTS
  4 .ARM          00000000  0800854c  0800854c  0002050a  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800854c  0800854c  0002050a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800854c  0800854c  0001854c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008550  08008550  00018550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000400  08008554  00020400  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .shared_mem   00000012  200004f8  0800864c  000204f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000008b4  20000510  0800865e  00020510  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000dc4  0800865e  00020dc4  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  0002050a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c8a  00000000  00000000  00020532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fdf  00000000  00000000  000351bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  000381a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fe8  00000000  00000000  000392a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b319  00000000  00000000  0003a288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015162  00000000  00000000  000555a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a65ea  00000000  00000000  0006a703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00110ced  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046c8  00000000  00000000  00110d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000510 	.word	0x20000510
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08007c8c 	.word	0x08007c8c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000514 	.word	0x20000514
 80000fc:	08007c8c 	.word	0x08007c8c

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	; 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	; 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	; 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <crc32_for_byte>:
 * Invalid file names and files that cause errors are silently skipped.
 * The program reads from stdin if it is called with no arguments.
 *
 * From http://home.thep.lu.se/~bjorn/crc/ */

uint32_t crc32_for_byte(uint32_t r) {
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  for(int j = 0; j < 8; ++j)
 8000418:	2300      	movs	r3, #0
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	e00d      	b.n	800043a <crc32_for_byte+0x2a>
    r = (r & 1? 0: (uint32_t)0xEDB88320L) ^ r >> 1;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2201      	movs	r2, #1
 8000422:	4013      	ands	r3, r2
 8000424:	d001      	beq.n	800042a <crc32_for_byte+0x1a>
 8000426:	2300      	movs	r3, #0
 8000428:	e000      	b.n	800042c <crc32_for_byte+0x1c>
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <crc32_for_byte+0x40>)
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	0852      	lsrs	r2, r2, #1
 8000430:	4053      	eors	r3, r2
 8000432:	607b      	str	r3, [r7, #4]
  for(int j = 0; j < 8; ++j)
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	3301      	adds	r3, #1
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	2b07      	cmp	r3, #7
 800043e:	ddee      	ble.n	800041e <crc32_for_byte+0xe>
  return r ^ (uint32_t)0xFF000000L;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	22ff      	movs	r2, #255	; 0xff
 8000444:	0612      	lsls	r2, r2, #24
 8000446:	4053      	eors	r3, r2
}
 8000448:	0018      	movs	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	b004      	add	sp, #16
 800044e:	bd80      	pop	{r7, pc}
 8000450:	edb88320 	.word	0xedb88320

08000454 <crc32>:

uint32_t crc32(const void *data, uint32_t n_bytes) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0;
 800045e:	2300      	movs	r3, #0
 8000460:	617b      	str	r3, [r7, #20]
  static uint32_t table[0x100];
  if(!*table)
 8000462:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <crc32+0x78>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d111      	bne.n	800048e <crc32+0x3a>
    for(size_t i = 0; i < 0x100; ++i)
 800046a:	2300      	movs	r3, #0
 800046c:	613b      	str	r3, [r7, #16]
 800046e:	e00b      	b.n	8000488 <crc32+0x34>
      table[i] = crc32_for_byte(i);
 8000470:	693b      	ldr	r3, [r7, #16]
 8000472:	0018      	movs	r0, r3
 8000474:	f7ff ffcc 	bl	8000410 <crc32_for_byte>
 8000478:	0001      	movs	r1, r0
 800047a:	4b14      	ldr	r3, [pc, #80]	; (80004cc <crc32+0x78>)
 800047c:	693a      	ldr	r2, [r7, #16]
 800047e:	0092      	lsls	r2, r2, #2
 8000480:	50d1      	str	r1, [r2, r3]
    for(size_t i = 0; i < 0x100; ++i)
 8000482:	693b      	ldr	r3, [r7, #16]
 8000484:	3301      	adds	r3, #1
 8000486:	613b      	str	r3, [r7, #16]
 8000488:	693b      	ldr	r3, [r7, #16]
 800048a:	2bff      	cmp	r3, #255	; 0xff
 800048c:	d9f0      	bls.n	8000470 <crc32+0x1c>
  for(size_t i = 0; i < n_bytes; ++i)
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	e012      	b.n	80004ba <crc32+0x66>
    crc = table[(uint8_t)crc ^ ((uint8_t*)data)[i]] ^ crc >> 8;
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	b2da      	uxtb	r2, r3
 8000498:	6879      	ldr	r1, [r7, #4]
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	18cb      	adds	r3, r1, r3
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	4053      	eors	r3, r2
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	001a      	movs	r2, r3
 80004a6:	4b09      	ldr	r3, [pc, #36]	; (80004cc <crc32+0x78>)
 80004a8:	0092      	lsls	r2, r2, #2
 80004aa:	58d2      	ldr	r2, [r2, r3]
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	0a1b      	lsrs	r3, r3, #8
 80004b0:	4053      	eors	r3, r2
 80004b2:	617b      	str	r3, [r7, #20]
  for(size_t i = 0; i < n_bytes; ++i)
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	3301      	adds	r3, #1
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	68fa      	ldr	r2, [r7, #12]
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	429a      	cmp	r2, r3
 80004c0:	d3e8      	bcc.n	8000494 <crc32+0x40>

  return crc;
 80004c2:	697b      	ldr	r3, [r7, #20]
}
 80004c4:	0018      	movs	r0, r3
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b006      	add	sp, #24
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	2000052c 	.word	0x2000052c

080004d0 <image_get_header>:
#include "image.h"
#include "memoryMap.h"
#include "crc32.h"

const image_hdr_t *image_get_header(image_slot_t slot)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	0002      	movs	r2, r0
 80004d8:	1dfb      	adds	r3, r7, #7
 80004da:	701a      	strb	r2, [r3, #0]
    const image_hdr_t *hdr = NULL;
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]

    switch (slot)
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d002      	beq.n	80004ee <image_get_header+0x1e>
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	d003      	beq.n	80004f4 <image_get_header+0x24>
        break;
    case IMAGE_SLOT_2:
        hdr = (const image_hdr_t *) &__loader_rom_start__;
        break;
    default:
        break;
 80004ec:	e005      	b.n	80004fa <image_get_header+0x2a>
        hdr = (const image_hdr_t *) &__app_rom_start__;
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <image_get_header+0x54>)
 80004f0:	60fb      	str	r3, [r7, #12]
        break;
 80004f2:	e002      	b.n	80004fa <image_get_header+0x2a>
        hdr = (const image_hdr_t *) &__loader_rom_start__;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <image_get_header+0x58>)
 80004f6:	60fb      	str	r3, [r7, #12]
        break;
 80004f8:	46c0      	nop			; (mov r8, r8)
    }

    if (hdr && hdr->image_magic == IMAGE_MAGIC)
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d00b      	beq.n	8000518 <image_get_header+0x48>
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	781a      	ldrb	r2, [r3, #0]
 8000504:	785b      	ldrb	r3, [r3, #1]
 8000506:	021b      	lsls	r3, r3, #8
 8000508:	4313      	orrs	r3, r2
 800050a:	b29a      	uxth	r2, r3
 800050c:	23e7      	movs	r3, #231	; 0xe7
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	429a      	cmp	r2, r3
 8000512:	d101      	bne.n	8000518 <image_get_header+0x48>
    {
        return hdr;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	e000      	b.n	800051a <image_get_header+0x4a>
    }
    else
    {
        return NULL;
 8000518:	2300      	movs	r3, #0
    }
}
 800051a:	0018      	movs	r0, r3
 800051c:	46bd      	mov	sp, r7
 800051e:	b004      	add	sp, #16
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	0800c800 	.word	0x0800c800
 8000528:	08046800 	.word	0x08046800

0800052c <image_validate>:

int image_validate(image_slot_t slot, const image_hdr_t *hdr)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
 8000532:	0002      	movs	r2, r0
 8000534:	6039      	str	r1, [r7, #0]
 8000536:	1dfb      	adds	r3, r7, #7
 8000538:	701a      	strb	r2, [r3, #0]
    // void *addr = (slot == IMAGE_SLOT_1 ? &__apparom_start__ : &__appbrom_start__);
    void *addr = NULL;
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]

    switch (slot)
 800053e:	1dfb      	adds	r3, r7, #7
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d002      	beq.n	800054c <image_validate+0x20>
 8000546:	2b02      	cmp	r3, #2
 8000548:	d003      	beq.n	8000552 <image_validate+0x26>
 800054a:	e005      	b.n	8000558 <image_validate+0x2c>
    {
    case IMAGE_SLOT_1:
        addr = &__app_rom_start__;
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <image_validate+0xac>)
 800054e:	617b      	str	r3, [r7, #20]
        break;
 8000550:	e007      	b.n	8000562 <image_validate+0x36>
    case IMAGE_SLOT_2:
        addr = &__loader_rom_start__;
 8000552:	4b22      	ldr	r3, [pc, #136]	; (80005dc <image_validate+0xb0>)
 8000554:	617b      	str	r3, [r7, #20]
        break;
 8000556:	e004      	b.n	8000562 <image_validate+0x36>
    default:
        addr = NULL;
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
        return -1;
 800055c:	2301      	movs	r3, #1
 800055e:	425b      	negs	r3, r3
 8000560:	e036      	b.n	80005d0 <image_validate+0xa4>
    }

    addr += sizeof(image_hdr_t);
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	3320      	adds	r3, #32
 8000566:	617b      	str	r3, [r7, #20]
    uint32_t len = hdr->data_size;
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	7a1a      	ldrb	r2, [r3, #8]
 800056c:	7a59      	ldrb	r1, [r3, #9]
 800056e:	0209      	lsls	r1, r1, #8
 8000570:	430a      	orrs	r2, r1
 8000572:	7a99      	ldrb	r1, [r3, #10]
 8000574:	0409      	lsls	r1, r1, #16
 8000576:	430a      	orrs	r2, r1
 8000578:	7adb      	ldrb	r3, [r3, #11]
 800057a:	061b      	lsls	r3, r3, #24
 800057c:	4313      	orrs	r3, r2
 800057e:	613b      	str	r3, [r7, #16]
    uint32_t crc_calc = crc32(addr, len);
 8000580:	693a      	ldr	r2, [r7, #16]
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	0011      	movs	r1, r2
 8000586:	0018      	movs	r0, r3
 8000588:	f7ff ff64 	bl	8000454 <crc32>
 800058c:	0003      	movs	r3, r0
 800058e:	60fb      	str	r3, [r7, #12]
    uint32_t crc_image = hdr->crc;
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	791a      	ldrb	r2, [r3, #4]
 8000594:	7959      	ldrb	r1, [r3, #5]
 8000596:	0209      	lsls	r1, r1, #8
 8000598:	430a      	orrs	r2, r1
 800059a:	7999      	ldrb	r1, [r3, #6]
 800059c:	0409      	lsls	r1, r1, #16
 800059e:	430a      	orrs	r2, r1
 80005a0:	79db      	ldrb	r3, [r3, #7]
 80005a2:	061b      	lsls	r3, r3, #24
 80005a4:	4313      	orrs	r3, r2
 80005a6:	60bb      	str	r3, [r7, #8]

    if (crc_calc == crc_image) {
 80005a8:	68fa      	ldr	r2, [r7, #12]
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d107      	bne.n	80005c0 <image_validate+0x94>
        printf("CRC OK: %lx vs %lx\r\n", crc_image, crc_calc);
 80005b0:	68fa      	ldr	r2, [r7, #12]
 80005b2:	68b9      	ldr	r1, [r7, #8]
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <image_validate+0xb4>)
 80005b6:	0018      	movs	r0, r3
 80005b8:	f006 f804 	bl	80065c4 <iprintf>
        return 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	e007      	b.n	80005d0 <image_validate+0xa4>
    }
    else {
        printf("CRC mismatch: %lx vs %lx\r\n", crc_image, crc_calc);
 80005c0:	68fa      	ldr	r2, [r7, #12]
 80005c2:	68b9      	ldr	r1, [r7, #8]
 80005c4:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <image_validate+0xb8>)
 80005c6:	0018      	movs	r0, r3
 80005c8:	f005 fffc 	bl	80065c4 <iprintf>
        return -1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	425b      	negs	r3, r3
    }

}
 80005d0:	0018      	movs	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	b006      	add	sp, #24
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	0800c800 	.word	0x0800c800
 80005dc:	08046800 	.word	0x08046800
 80005e0:	08007cb8 	.word	0x08007cb8
 80005e4:	08007cd0 	.word	0x08007cd0

080005e8 <HAL_UARTEx_RxEventCallback>:
#define STRINGIFY(x) #x
#define ADD_QUOTES(y) STRINGIFY(y)


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	000a      	movs	r2, r1
 80005f2:	1cbb      	adds	r3, r7, #2
 80005f4:	801a      	strh	r2, [r3, #0]
	  HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx_buff, sizeof rx_buff);
 80005f6:	2382      	movs	r3, #130	; 0x82
 80005f8:	009a      	lsls	r2, r3, #2
 80005fa:	4913      	ldr	r1, [pc, #76]	; (8000648 <HAL_UARTEx_RxEventCallback+0x60>)
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <HAL_UARTEx_RxEventCallback+0x64>)
 80005fe:	0018      	movs	r0, r3
 8000600:	f005 fede 	bl	80063c0 <HAL_UARTEx_ReceiveToIdle_IT>
	  //memcpy(message,rx_buff,4);
	  if(transmit_data == false)
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <HAL_UARTEx_RxEventCallback+0x68>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2201      	movs	r2, #1
 800060a:	4053      	eors	r3, r2
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d002      	beq.n	8000618 <HAL_UARTEx_RxEventCallback+0x30>
		  dato_recivido = true;
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000614:	2201      	movs	r2, #1
 8000616:	701a      	strb	r2, [r3, #0]

	  if(Size == 520)
 8000618:	1cbb      	adds	r3, r7, #2
 800061a:	881a      	ldrh	r2, [r3, #0]
 800061c:	2382      	movs	r3, #130	; 0x82
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	429a      	cmp	r2, r3
 8000622:	d102      	bne.n	800062a <HAL_UARTEx_RxEventCallback+0x42>
		  dato_recivido = true;
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000626:	2201      	movs	r2, #1
 8000628:	701a      	strb	r2, [r3, #0]
	  if(Size == (offset+8))
 800062a:	1cbb      	adds	r3, r7, #2
 800062c:	881a      	ldrh	r2, [r3, #0]
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <HAL_UARTEx_RxEventCallback+0x70>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	3308      	adds	r3, #8
 8000634:	429a      	cmp	r2, r3
 8000636:	d102      	bne.n	800063e <HAL_UARTEx_RxEventCallback+0x56>
		  dato_recivido = true;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_UARTEx_RxEventCallback+0x6c>)
 800063a:	2201      	movs	r2, #1
 800063c:	701a      	strb	r2, [r3, #0]
	  //counter++;
}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	46bd      	mov	sp, r7
 8000642:	b002      	add	sp, #8
 8000644:	bd80      	pop	{r7, pc}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	20000b58 	.word	0x20000b58
 800064c:	20000a10 	.word	0x20000a10
 8000650:	20000b4a 	.word	0x20000b4a
 8000654:	20000b48 	.word	0x20000b48
 8000658:	20000b50 	.word	0x20000b50

0800065c <CRC16_X25>:
  0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,
  0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78
};

uint16_t CRC16_X25(const void * data, uint16_t sizeOfData, uint16_t startCrc)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	0008      	movs	r0, r1
 8000666:	0011      	movs	r1, r2
 8000668:	1cbb      	adds	r3, r7, #2
 800066a:	1c02      	adds	r2, r0, #0
 800066c:	801a      	strh	r2, [r3, #0]
 800066e:	003b      	movs	r3, r7
 8000670:	1c0a      	adds	r2, r1, #0
 8000672:	801a      	strh	r2, [r3, #0]
	  const uint8_t * dataPtr = (const uint8_t *) data;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	60fb      	str	r3, [r7, #12]

	  startCrc = startCrc ^ 0xffff;
 8000678:	003b      	movs	r3, r7
 800067a:	003a      	movs	r2, r7
 800067c:	8812      	ldrh	r2, [r2, #0]
 800067e:	43d2      	mvns	r2, r2
 8000680:	801a      	strh	r2, [r3, #0]

	  while (sizeOfData--) {
 8000682:	e012      	b.n	80006aa <CRC16_X25+0x4e>
	    startCrc = crc16Table[(startCrc ^ *dataPtr++) & 0xFF] ^ (startCrc >> 8);
 8000684:	003b      	movs	r3, r7
 8000686:	881a      	ldrh	r2, [r3, #0]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	1c59      	adds	r1, r3, #1
 800068c:	60f9      	str	r1, [r7, #12]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4053      	eors	r3, r2
 8000692:	22ff      	movs	r2, #255	; 0xff
 8000694:	401a      	ands	r2, r3
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <CRC16_X25+0x6c>)
 8000698:	0052      	lsls	r2, r2, #1
 800069a:	5ad1      	ldrh	r1, [r2, r3]
 800069c:	003b      	movs	r3, r7
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	0a1b      	lsrs	r3, r3, #8
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	003b      	movs	r3, r7
 80006a6:	404a      	eors	r2, r1
 80006a8:	801a      	strh	r2, [r3, #0]
	  while (sizeOfData--) {
 80006aa:	1cbb      	adds	r3, r7, #2
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	1cba      	adds	r2, r7, #2
 80006b0:	1e59      	subs	r1, r3, #1
 80006b2:	8011      	strh	r1, [r2, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d1e5      	bne.n	8000684 <CRC16_X25+0x28>
	  }

	  return (startCrc ^ 0xffff);
 80006b8:	003b      	movs	r3, r7
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	43db      	mvns	r3, r3
 80006be:	b29b      	uxth	r3, r3
}
 80006c0:	0018      	movs	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	b004      	add	sp, #16
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	0800822c 	.word	0x0800822c

080006cc <write>:


uint32_t write(uint8_t *data,uint32_t begin)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b087      	sub	sp, #28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
	uint32_t end = begin+64;// return the address to next 512 bytes
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	3340      	adds	r3, #64	; 0x40
 80006da:	60fb      	str	r3, [r7, #12]
	uint32_t _index;
	uint16_t k = 0;
 80006dc:	2316      	movs	r3, #22
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	2200      	movs	r2, #0
 80006e2:	801a      	strh	r2, [r3, #0]
	HAL_FLASH_Unlock();
 80006e4:	f002 f862 	bl	80027ac <HAL_FLASH_Unlock>
	for(uint32_t i = begin; i<end; i++)// 64*8 = 512 bytes
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	e023      	b.n	8000736 <write+0x6a>
	{
	  _index = 8*i;
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	4915      	ldr	r1, [pc, #84]	; (800074c <write+0x80>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	4252      	negs	r2, r2
 80006fa:	17d3      	asrs	r3, r2, #31
 80006fc:	600a      	str	r2, [r1, #0]
 80006fe:	604b      	str	r3, [r1, #4]
	  memset(&double_word,0xFF,8);
	  memcpy(&double_word,&data[k],8);
 8000700:	2416      	movs	r4, #22
 8000702:	193b      	adds	r3, r7, r4
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	18d1      	adds	r1, r2, r3
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <write+0x80>)
 800070c:	2208      	movs	r2, #8
 800070e:	0018      	movs	r0, r3
 8000710:	f005 ff46 	bl	80065a0 <memcpy>
	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,loader_rom+_index,double_word);
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <write+0x84>)
 8000718:	1899      	adds	r1, r3, r2
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <write+0x80>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	2001      	movs	r0, #1
 8000722:	f001 fff5 	bl	8002710 <HAL_FLASH_Program>
	  k+=8;
 8000726:	193b      	adds	r3, r7, r4
 8000728:	193a      	adds	r2, r7, r4
 800072a:	8812      	ldrh	r2, [r2, #0]
 800072c:	3208      	adds	r2, #8
 800072e:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = begin; i<end; i++)// 64*8 = 512 bytes
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	3301      	adds	r3, #1
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	693a      	ldr	r2, [r7, #16]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	429a      	cmp	r2, r3
 800073c:	d3d7      	bcc.n	80006ee <write+0x22>
	}
	HAL_FLASH_Lock();
 800073e:	f002 f859 	bl	80027f4 <HAL_FLASH_Lock>
	return end;
 8000742:	68fb      	ldr	r3, [r7, #12]
}
 8000744:	0018      	movs	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	b007      	add	sp, #28
 800074a:	bd90      	pop	{r4, r7, pc}
 800074c:	20000b40 	.word	0x20000b40
 8000750:	08046800 	.word	0x08046800

08000754 <clear_app_rom>:



void clear_app_rom(void)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b087      	sub	sp, #28
 8000758:	af00      	add	r7, sp, #0
	printf("\r Clean APP_Room \r\n");
 800075a:	4b24      	ldr	r3, [pc, #144]	; (80007ec <clear_app_rom+0x98>)
 800075c:	0018      	movs	r0, r3
 800075e:	f005 ffd1 	bl	8006704 <puts>
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]

	HAL_FLASH_Unlock();
 8000766:	f002 f821 	bl	80027ac <HAL_FLASH_Unlock>
	FLASH->OPTR |= FLASH_OPTR_DUAL_BANK_Msk;
 800076a:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <clear_app_rom+0x9c>)
 800076c:	6a1a      	ldr	r2, [r3, #32]
 800076e:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <clear_app_rom+0x9c>)
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	0389      	lsls	r1, r1, #14
 8000774:	430a      	orrs	r2, r1
 8000776:	621a      	str	r2, [r3, #32]
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000778:	2408      	movs	r4, #8
 800077a:	193b      	adds	r3, r7, r4
 800077c:	2202      	movs	r2, #2
 800077e:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.Page = 25;
 8000780:	193b      	adds	r3, r7, r4
 8000782:	2219      	movs	r2, #25
 8000784:	609a      	str	r2, [r3, #8]
	  EraseInitStruct.Banks = FLASH_BANK_1;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2204      	movs	r2, #4
 800078a:	605a      	str	r2, [r3, #4]
	  EraseInitStruct.NbPages = 103;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2267      	movs	r2, #103	; 0x67
 8000790:	60da      	str	r2, [r3, #12]
	  HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8000792:	1d3a      	adds	r2, r7, #4
 8000794:	193b      	adds	r3, r7, r4
 8000796:	0011      	movs	r1, r2
 8000798:	0018      	movs	r0, r3
 800079a:	f002 f8b5 	bl	8002908 <HAL_FLASHEx_Erase>
	  HAL_FLASH_Lock();
 800079e:	f002 f829 	bl	80027f4 <HAL_FLASH_Lock>

	  PageError = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
	  HAL_FLASH_Unlock();
 80007a6:	f002 f801 	bl	80027ac <HAL_FLASH_Unlock>
	  FLASH->OPTR |= FLASH_OPTR_DUAL_BANK_Msk;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <clear_app_rom+0x9c>)
 80007ac:	6a1a      	ldr	r2, [r3, #32]
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <clear_app_rom+0x9c>)
 80007b0:	2180      	movs	r1, #128	; 0x80
 80007b2:	0389      	lsls	r1, r1, #14
 80007b4:	430a      	orrs	r2, r1
 80007b6:	621a      	str	r2, [r3, #32]
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80007b8:	0021      	movs	r1, r4
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2202      	movs	r2, #2
 80007be:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.Page = 128;
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2280      	movs	r2, #128	; 0x80
 80007c4:	609a      	str	r2, [r3, #8]
	  EraseInitStruct.Banks = FLASH_BANK_2;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2280      	movs	r2, #128	; 0x80
 80007ca:	0212      	lsls	r2, r2, #8
 80007cc:	605a      	str	r2, [r3, #4]
	  EraseInitStruct.NbPages = 13;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	220d      	movs	r2, #13
 80007d2:	60da      	str	r2, [r3, #12]
	  HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80007d4:	1d3a      	adds	r2, r7, #4
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	0011      	movs	r1, r2
 80007da:	0018      	movs	r0, r3
 80007dc:	f002 f894 	bl	8002908 <HAL_FLASHEx_Erase>
	  HAL_FLASH_Lock();
 80007e0:	f002 f808 	bl	80027f4 <HAL_FLASH_Lock>
}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b007      	add	sp, #28
 80007ea:	bd90      	pop	{r4, r7, pc}
 80007ec:	08007cec 	.word	0x08007cec
 80007f0:	40022000 	.word	0x40022000

080007f4 <clear_loader_rom>:

void clear_loader_rom(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
	printf("\r Clean Loader_Room \r\n");
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <clear_loader_rom+0x5c>)
 80007fc:	0018      	movs	r0, r3
 80007fe:	f005 ff81 	bl	8006704 <puts>
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
	  PageError = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
	  HAL_FLASH_Unlock();
 800080a:	f001 ffcf 	bl	80027ac <HAL_FLASH_Unlock>
	  FLASH->OPTR |= FLASH_OPTR_DUAL_BANK_Msk;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <clear_loader_rom+0x60>)
 8000810:	6a1a      	ldr	r2, [r3, #32]
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <clear_loader_rom+0x60>)
 8000814:	2180      	movs	r1, #128	; 0x80
 8000816:	0389      	lsls	r1, r1, #14
 8000818:	430a      	orrs	r2, r1
 800081a:	621a      	str	r2, [r3, #32]
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800081c:	2108      	movs	r1, #8
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2202      	movs	r2, #2
 8000822:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.Page = 141;
 8000824:	187b      	adds	r3, r7, r1
 8000826:	228d      	movs	r2, #141	; 0x8d
 8000828:	609a      	str	r2, [r3, #8]
	  EraseInitStruct.Banks = FLASH_BANK_2;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2280      	movs	r2, #128	; 0x80
 800082e:	0212      	lsls	r2, r2, #8
 8000830:	605a      	str	r2, [r3, #4]
	  EraseInitStruct.NbPages = 115;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2273      	movs	r2, #115	; 0x73
 8000836:	60da      	str	r2, [r3, #12]
	  HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8000838:	1d3a      	adds	r2, r7, #4
 800083a:	187b      	adds	r3, r7, r1
 800083c:	0011      	movs	r1, r2
 800083e:	0018      	movs	r0, r3
 8000840:	f002 f862 	bl	8002908 <HAL_FLASHEx_Erase>
	  HAL_FLASH_Lock();
 8000844:	f001 ffd6 	bl	80027f4 <HAL_FLASH_Lock>
}
 8000848:	46c0      	nop			; (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	b006      	add	sp, #24
 800084e:	bd80      	pop	{r7, pc}
 8000850:	08007d00 	.word	0x08007d00
 8000854:	40022000 	.word	0x40022000

08000858 <clone_rom>:
	  		  printf("%02X",*(ptr++));
	  	  printf("|\r\r\n");
}

uint32_t clone_rom(uint32_t Firmware_zise)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	uint32_t rows = Firmware_zise/8;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	08db      	lsrs	r3, r3, #3
 8000864:	60fb      	str	r3, [r7, #12]
	uint32_t offset = Firmware_zise%8;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2207      	movs	r2, #7
 800086a:	4013      	ands	r3, r2
 800086c:	60bb      	str	r3, [r7, #8]
	uint32_t _index = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24

	for(int k = 0; k <5; k++)
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
 8000876:	e01e      	b.n	80008b6 <clone_rom+0x5e>
	{
		printf("\033\143");
 8000878:	4b6b      	ldr	r3, [pc, #428]	; (8000a28 <clone_rom+0x1d0>)
 800087a:	0018      	movs	r0, r3
 800087c:	f005 fea2 	bl	80065c4 <iprintf>
		printf("Cleaning app rom");
 8000880:	4b6a      	ldr	r3, [pc, #424]	; (8000a2c <clone_rom+0x1d4>)
 8000882:	0018      	movs	r0, r3
 8000884:	f005 fe9e 	bl	80065c4 <iprintf>
		for(int q = 0; q<=k; q++)
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
 800088c:	e008      	b.n	80008a0 <clone_rom+0x48>
		{
			printf(".");
 800088e:	202e      	movs	r0, #46	; 0x2e
 8000890:	f005 feb2 	bl	80065f8 <putchar>
			HAL_Delay(50);
 8000894:	2032      	movs	r0, #50	; 0x32
 8000896:	f001 fd5b 	bl	8002350 <HAL_Delay>
		for(int q = 0; q<=k; q++)
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	3301      	adds	r3, #1
 800089e:	61fb      	str	r3, [r7, #28]
 80008a0:	69fa      	ldr	r2, [r7, #28]
 80008a2:	6a3b      	ldr	r3, [r7, #32]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	ddf2      	ble.n	800088e <clone_rom+0x36>
		}
		printf("\r\n");
 80008a8:	4b61      	ldr	r3, [pc, #388]	; (8000a30 <clone_rom+0x1d8>)
 80008aa:	0018      	movs	r0, r3
 80008ac:	f005 ff2a 	bl	8006704 <puts>
	for(int k = 0; k <5; k++)
 80008b0:	6a3b      	ldr	r3, [r7, #32]
 80008b2:	3301      	adds	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
 80008b6:	6a3b      	ldr	r3, [r7, #32]
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	dddd      	ble.n	8000878 <clone_rom+0x20>
	}

	clear_app_rom();
 80008bc:	f7ff ff4a 	bl	8000754 <clear_app_rom>

	printf("\r ------ Reday to Clone to slot 1 ---------- \r\n");
 80008c0:	4b5c      	ldr	r3, [pc, #368]	; (8000a34 <clone_rom+0x1dc>)
 80008c2:	0018      	movs	r0, r3
 80008c4:	f005 ff1e 	bl	8006704 <puts>
	printf("\r rows: %ld \r\n",rows);
 80008c8:	68fa      	ldr	r2, [r7, #12]
 80008ca:	4b5b      	ldr	r3, [pc, #364]	; (8000a38 <clone_rom+0x1e0>)
 80008cc:	0011      	movs	r1, r2
 80008ce:	0018      	movs	r0, r3
 80008d0:	f005 fe78 	bl	80065c4 <iprintf>
	printf("\r offset: %ld \r\n",offset);
 80008d4:	68ba      	ldr	r2, [r7, #8]
 80008d6:	4b59      	ldr	r3, [pc, #356]	; (8000a3c <clone_rom+0x1e4>)
 80008d8:	0011      	movs	r1, r2
 80008da:	0018      	movs	r0, r3
 80008dc:	f005 fe72 	bl	80065c4 <iprintf>
	for(int k = 0; k <5; k++)
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
 80008e4:	e01e      	b.n	8000924 <clone_rom+0xcc>
	{
		printf("\033\143");
 80008e6:	4b50      	ldr	r3, [pc, #320]	; (8000a28 <clone_rom+0x1d0>)
 80008e8:	0018      	movs	r0, r3
 80008ea:	f005 fe6b 	bl	80065c4 <iprintf>
		printf(" waiting ");
 80008ee:	4b54      	ldr	r3, [pc, #336]	; (8000a40 <clone_rom+0x1e8>)
 80008f0:	0018      	movs	r0, r3
 80008f2:	f005 fe67 	bl	80065c4 <iprintf>
		for(int q = 0; q<=k; q++)
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	e008      	b.n	800090e <clone_rom+0xb6>
		{
			printf(".");
 80008fc:	202e      	movs	r0, #46	; 0x2e
 80008fe:	f005 fe7b 	bl	80065f8 <putchar>
			HAL_Delay(50);
 8000902:	2032      	movs	r0, #50	; 0x32
 8000904:	f001 fd24 	bl	8002350 <HAL_Delay>
		for(int q = 0; q<=k; q++)
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	3301      	adds	r3, #1
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	697a      	ldr	r2, [r7, #20]
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	429a      	cmp	r2, r3
 8000914:	ddf2      	ble.n	80008fc <clone_rom+0xa4>
		}
		printf("\r\n");
 8000916:	4b46      	ldr	r3, [pc, #280]	; (8000a30 <clone_rom+0x1d8>)
 8000918:	0018      	movs	r0, r3
 800091a:	f005 fef3 	bl	8006704 <puts>
	for(int k = 0; k <5; k++)
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	3301      	adds	r3, #1
 8000922:	61bb      	str	r3, [r7, #24]
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	2b04      	cmp	r3, #4
 8000928:	dddd      	ble.n	80008e6 <clone_rom+0x8e>
	}

	HAL_FLASH_Unlock();
 800092a:	f001 ff3f 	bl	80027ac <HAL_FLASH_Unlock>
    for(uint32_t i = 0; i<=rows-1; i++)// 12288 /8 -1 = =rows,   11532/8 =
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	e02e      	b.n	8000992 <clone_rom+0x13a>
    {
    	_index = 8*i;
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  	  RDAddr = (uint64_t *)(loader_rom + _index);
 800093a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093c:	4a41      	ldr	r2, [pc, #260]	; (8000a44 <clone_rom+0x1ec>)
 800093e:	4694      	mov	ip, r2
 8000940:	4463      	add	r3, ip
 8000942:	001a      	movs	r2, r3
 8000944:	4b40      	ldr	r3, [pc, #256]	; (8000a48 <clone_rom+0x1f0>)
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	4940      	ldr	r1, [pc, #256]	; (8000a4c <clone_rom+0x1f4>)
 800094a:	2201      	movs	r2, #1
 800094c:	4252      	negs	r2, r2
 800094e:	17d3      	asrs	r3, r2, #31
 8000950:	600a      	str	r2, [r1, #0]
 8000952:	604b      	str	r3, [r1, #4]
  	  memset(&double_word,0xFF,8);
  	  memcpy(&double_word,RDAddr,8);
 8000954:	4b3c      	ldr	r3, [pc, #240]	; (8000a48 <clone_rom+0x1f0>)
 8000956:	6819      	ldr	r1, [r3, #0]
 8000958:	4b3c      	ldr	r3, [pc, #240]	; (8000a4c <clone_rom+0x1f4>)
 800095a:	2208      	movs	r2, #8
 800095c:	0018      	movs	r0, r3
 800095e:	f005 fe1f 	bl	80065a0 <memcpy>
  	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,app_rom+_index,double_word);
 8000962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000964:	4a3a      	ldr	r2, [pc, #232]	; (8000a50 <clone_rom+0x1f8>)
 8000966:	1899      	adds	r1, r3, r2
 8000968:	4b38      	ldr	r3, [pc, #224]	; (8000a4c <clone_rom+0x1f4>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	2001      	movs	r0, #1
 8000970:	f001 fece 	bl	8002710 <HAL_FLASH_Program>
  	  crc_temp = CRC16_X25(RDAddr, 8, crc_temp);
 8000974:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <clone_rom+0x1f0>)
 8000976:	6818      	ldr	r0, [r3, #0]
 8000978:	4b36      	ldr	r3, [pc, #216]	; (8000a54 <clone_rom+0x1fc>)
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	001a      	movs	r2, r3
 800097e:	2108      	movs	r1, #8
 8000980:	f7ff fe6c 	bl	800065c <CRC16_X25>
 8000984:	0003      	movs	r3, r0
 8000986:	001a      	movs	r2, r3
 8000988:	4b32      	ldr	r3, [pc, #200]	; (8000a54 <clone_rom+0x1fc>)
 800098a:	801a      	strh	r2, [r3, #0]
    for(uint32_t i = 0; i<=rows-1; i++)// 12288 /8 -1 = =rows,   11532/8 =
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	3301      	adds	r3, #1
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	3b01      	subs	r3, #1
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	429a      	cmp	r2, r3
 800099a:	d9cb      	bls.n	8000934 <clone_rom+0xdc>
	  //printf(" \r crc parts_app_rom: %04X \n",crc_temp);
	  //print_double_word(loader_rom+_index,&double_word);
    }
    if(offset!=0)
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d031      	beq.n	8000a06 <clone_rom+0x1ae>
 80009a2:	492a      	ldr	r1, [pc, #168]	; (8000a4c <clone_rom+0x1f4>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	4252      	negs	r2, r2
 80009a8:	17d3      	asrs	r3, r2, #31
 80009aa:	600a      	str	r2, [r1, #0]
 80009ac:	604b      	str	r3, [r1, #4]
    {
    	memset(&double_word,0xFF,8);
		_index+= 8;
 80009ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b0:	3308      	adds	r3, #8
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
		RDAddr = (uint64_t *)(loader_rom + _index);
 80009b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b6:	4a23      	ldr	r2, [pc, #140]	; (8000a44 <clone_rom+0x1ec>)
 80009b8:	4694      	mov	ip, r2
 80009ba:	4463      	add	r3, ip
 80009bc:	001a      	movs	r2, r3
 80009be:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <clone_rom+0x1f0>)
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	4922      	ldr	r1, [pc, #136]	; (8000a4c <clone_rom+0x1f4>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	4252      	negs	r2, r2
 80009c8:	17d3      	asrs	r3, r2, #31
 80009ca:	600a      	str	r2, [r1, #0]
 80009cc:	604b      	str	r3, [r1, #4]
		memset(&double_word,0xFF,8);
		memcpy(&double_word,RDAddr,offset);
 80009ce:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <clone_rom+0x1f0>)
 80009d0:	6819      	ldr	r1, [r3, #0]
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <clone_rom+0x1f4>)
 80009d6:	0018      	movs	r0, r3
 80009d8:	f005 fde2 	bl	80065a0 <memcpy>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,app_rom+_index,double_word);
 80009dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009de:	4a1c      	ldr	r2, [pc, #112]	; (8000a50 <clone_rom+0x1f8>)
 80009e0:	1899      	adds	r1, r3, r2
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <clone_rom+0x1f4>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	2001      	movs	r0, #1
 80009ea:	f001 fe91 	bl	8002710 <HAL_FLASH_Program>
		crc_temp = CRC16_X25(&double_word,offset, crc_temp);
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	b299      	uxth	r1, r3
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <clone_rom+0x1fc>)
 80009f4:	881a      	ldrh	r2, [r3, #0]
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <clone_rom+0x1f4>)
 80009f8:	0018      	movs	r0, r3
 80009fa:	f7ff fe2f 	bl	800065c <CRC16_X25>
 80009fe:	0003      	movs	r3, r0
 8000a00:	001a      	movs	r2, r3
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <clone_rom+0x1fc>)
 8000a04:	801a      	strh	r2, [r3, #0]
		//printf(" \r crc parts_app_rom: %04X \n",crc_temp);
		//print_double_word(loader_rom+_index,&double_word);
    }
    HAL_FLASH_Lock();
 8000a06:	f001 fef5 	bl	80027f4 <HAL_FLASH_Lock>


    if(crc_temp == CRC_16)
 8000a0a:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <clone_rom+0x1fc>)
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	001a      	movs	r2, r3
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <clone_rom+0x200>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d101      	bne.n	8000a1c <clone_rom+0x1c4>
   		return 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	e000      	b.n	8000a1e <clone_rom+0x1c6>
    else
    	return 1;
 8000a1c:	2301      	movs	r3, #1
}
 8000a1e:	0018      	movs	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	b00a      	add	sp, #40	; 0x28
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	08007d40 	.word	0x08007d40
 8000a2c:	08007d44 	.word	0x08007d44
 8000a30:	08007d58 	.word	0x08007d58
 8000a34:	08007d5c 	.word	0x08007d5c
 8000a38:	08007d8c 	.word	0x08007d8c
 8000a3c:	08007d9c 	.word	0x08007d9c
 8000a40:	08007db0 	.word	0x08007db0
 8000a44:	08046800 	.word	0x08046800
 8000a48:	20000b38 	.word	0x20000b38
 8000a4c:	20000b40 	.word	0x20000b40
 8000a50:	0800c800 	.word	0x0800c800
 8000a54:	20000d6e 	.word	0x20000d6e
 8000a58:	20000d64 	.word	0x20000d64

08000a5c <wait>:

void wait(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
	 while(dato_recivido == false)
 8000a62:	e029      	b.n	8000ab8 <wait+0x5c>
	 {
			for(int z = 0; z <5; z++)
 8000a64:	2300      	movs	r3, #0
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	e023      	b.n	8000ab2 <wait+0x56>
			{
				printf("\033\143");
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <wait+0x7c>)
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f005 fda9 	bl	80065c4 <iprintf>
				printf("\r waiting ");
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <wait+0x80>)
 8000a74:	0018      	movs	r0, r3
 8000a76:	f005 fda5 	bl	80065c4 <iprintf>
				for(int q = 0; q<=z; q++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	e005      	b.n	8000a8c <wait+0x30>
					printf(".");
 8000a80:	202e      	movs	r0, #46	; 0x2e
 8000a82:	f005 fdb9 	bl	80065f8 <putchar>
				for(int q = 0; q<=z; q++)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683a      	ldr	r2, [r7, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	ddf5      	ble.n	8000a80 <wait+0x24>
				printf("\r\n");
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <wait+0x84>)
 8000a96:	0018      	movs	r0, r3
 8000a98:	f005 fe34 	bl	8006704 <puts>
				HAL_Delay(10);
 8000a9c:	200a      	movs	r0, #10
 8000a9e:	f001 fc57 	bl	8002350 <HAL_Delay>
				 if(flag_break)
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <wait+0x88>)
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d000      	beq.n	8000aac <wait+0x50>
				 {
					 break;
 8000aaa:	e005      	b.n	8000ab8 <wait+0x5c>
			for(int z = 0; z <5; z++)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b04      	cmp	r3, #4
 8000ab6:	ddd8      	ble.n	8000a6a <wait+0xe>
	 while(dato_recivido == false)
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <wait+0x8c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2201      	movs	r2, #1
 8000abe:	4053      	eors	r3, r2
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d1ce      	bne.n	8000a64 <wait+0x8>
				 }
			}

	 }
	HAL_TIM_Base_Stop_IT(&htim15);
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <wait+0x90>)
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f003 f8bf 	bl	8003c4c <HAL_TIM_Base_Stop_IT>

}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b002      	add	sp, #8
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	08007d40 	.word	0x08007d40
 8000adc:	08007dbc 	.word	0x08007dbc
 8000ae0:	08007d58 	.word	0x08007d58
 8000ae4:	20000d78 	.word	0x20000d78
 8000ae8:	20000b48 	.word	0x20000b48
 8000aec:	200009c4 	.word	0x200009c4

08000af0 <update_firmware>:

uint32_t update_firmware (void)
{
 8000af0:	b5b0      	push	{r4, r5, r7, lr}
 8000af2:	b08c      	sub	sp, #48	; 0x30
 8000af4:	af00      	add	r7, sp, #0
	 uint32_t err = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
		 //uint8_t len=0;
		 uint8_t buffer[10];
		 uint8_t strnum[10];
		 uint8_t OK[3] = {0x4F,0x4B,0x20};
 8000afa:	230c      	movs	r3, #12
 8000afc:	18fb      	adds	r3, r7, r3
 8000afe:	4a95      	ldr	r2, [pc, #596]	; (8000d54 <update_firmware+0x264>)
 8000b00:	8811      	ldrh	r1, [r2, #0]
 8000b02:	8019      	strh	r1, [r3, #0]
 8000b04:	7892      	ldrb	r2, [r2, #2]
 8000b06:	709a      	strb	r2, [r3, #2]
		 uint8_t ERR[4] = {0x45,0x52,0x52,0x20};
 8000b08:	2308      	movs	r3, #8
 8000b0a:	18fb      	adds	r3, r7, r3
 8000b0c:	4a92      	ldr	r2, [pc, #584]	; (8000d58 <update_firmware+0x268>)
 8000b0e:	601a      	str	r2, [r3, #0]
		 uint32_t cmd7 [2] = {0x00,0x00};
 8000b10:	003b      	movs	r3, r7
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	003b      	movs	r3, r7
 8000b18:	2200      	movs	r2, #0
 8000b1a:	605a      	str	r2, [r3, #4]
		 clear_loader_rom();
 8000b1c:	f7ff fe6a 	bl	80007f4 <clear_loader_rom>
		 //CMD 1
		 HAL_UART_Transmit(&huart2,"FZ\n", (sizeof("FZ\n")-1),500);// begin
 8000b20:	23fa      	movs	r3, #250	; 0xfa
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	498d      	ldr	r1, [pc, #564]	; (8000d5c <update_firmware+0x26c>)
 8000b26:	488e      	ldr	r0, [pc, #568]	; (8000d60 <update_firmware+0x270>)
 8000b28:	2203      	movs	r2, #3
 8000b2a:	f003 fcdf 	bl	80044ec <HAL_UART_Transmit>
		 printf("\r Send FZ ... \r\n");
 8000b2e:	4b8d      	ldr	r3, [pc, #564]	; (8000d64 <update_firmware+0x274>)
 8000b30:	0018      	movs	r0, r3
 8000b32:	f005 fde7 	bl	8006704 <puts>
		 wait();
 8000b36:	f7ff ff91 	bl	8000a5c <wait>
		 if(flag_break)
 8000b3a:	4b8b      	ldr	r3, [pc, #556]	; (8000d68 <update_firmware+0x278>)
 8000b3c:	881b      	ldrh	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <update_firmware+0x56>
		 {
			 return 1;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e372      	b.n	800122c <update_firmware+0x73c>
		 }
		 dato_recivido = false;
 8000b46:	4b89      	ldr	r3, [pc, #548]	; (8000d6c <update_firmware+0x27c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
 8000b4c:	4b88      	ldr	r3, [pc, #544]	; (8000d70 <update_firmware+0x280>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
		 //CMD2

		memcpy(&FW_SIZE,&rx_buff[0],4);
 8000b50:	4b88      	ldr	r3, [pc, #544]	; (8000d74 <update_firmware+0x284>)
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	4b86      	ldr	r3, [pc, #536]	; (8000d70 <update_firmware+0x280>)
 8000b56:	685a      	ldr	r2, [r3, #4]
		memcpy(&CRC_16,&rx_buff[4],4);
 8000b58:	4b87      	ldr	r3, [pc, #540]	; (8000d78 <update_firmware+0x288>)
 8000b5a:	601a      	str	r2, [r3, #0]
		pages = (uint32_t)(FW_SIZE/512);
 8000b5c:	4b85      	ldr	r3, [pc, #532]	; (8000d74 <update_firmware+0x284>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	0a5a      	lsrs	r2, r3, #9
 8000b62:	4b86      	ldr	r3, [pc, #536]	; (8000d7c <update_firmware+0x28c>)
 8000b64:	601a      	str	r2, [r3, #0]
		n_bytes = 512*pages;
 8000b66:	4b85      	ldr	r3, [pc, #532]	; (8000d7c <update_firmware+0x28c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	025a      	lsls	r2, r3, #9
 8000b6c:	4b84      	ldr	r3, [pc, #528]	; (8000d80 <update_firmware+0x290>)
 8000b6e:	601a      	str	r2, [r3, #0]
		offset = FW_SIZE - n_bytes;
 8000b70:	4b80      	ldr	r3, [pc, #512]	; (8000d74 <update_firmware+0x284>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b82      	ldr	r3, [pc, #520]	; (8000d80 <update_firmware+0x290>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	1ad2      	subs	r2, r2, r3
 8000b7a:	4b82      	ldr	r3, [pc, #520]	; (8000d84 <update_firmware+0x294>)
 8000b7c:	601a      	str	r2, [r3, #0]
		printf(" \r fw_size: %lX \n",FW_SIZE);
 8000b7e:	4b7d      	ldr	r3, [pc, #500]	; (8000d74 <update_firmware+0x284>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	4b81      	ldr	r3, [pc, #516]	; (8000d88 <update_firmware+0x298>)
 8000b84:	0011      	movs	r1, r2
 8000b86:	0018      	movs	r0, r3
 8000b88:	f005 fd1c 	bl	80065c4 <iprintf>
		printf(" \r crc_app: %lX \n",CRC_16);
 8000b8c:	4b7a      	ldr	r3, [pc, #488]	; (8000d78 <update_firmware+0x288>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b7e      	ldr	r3, [pc, #504]	; (8000d8c <update_firmware+0x29c>)
 8000b92:	0011      	movs	r1, r2
 8000b94:	0018      	movs	r0, r3
 8000b96:	f005 fd15 	bl	80065c4 <iprintf>
		printf(" \r pages: %ld \n",pages);
 8000b9a:	4b78      	ldr	r3, [pc, #480]	; (8000d7c <update_firmware+0x28c>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	4b7c      	ldr	r3, [pc, #496]	; (8000d90 <update_firmware+0x2a0>)
 8000ba0:	0011      	movs	r1, r2
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f005 fd0e 	bl	80065c4 <iprintf>
		printf(" \r n_bytes: %ld \n",n_bytes);
 8000ba8:	4b75      	ldr	r3, [pc, #468]	; (8000d80 <update_firmware+0x290>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b79      	ldr	r3, [pc, #484]	; (8000d94 <update_firmware+0x2a4>)
 8000bae:	0011      	movs	r1, r2
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f005 fd07 	bl	80065c4 <iprintf>
		printf(" \r offset: %ld \n",offset);
 8000bb6:	4b73      	ldr	r3, [pc, #460]	; (8000d84 <update_firmware+0x294>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	4b77      	ldr	r3, [pc, #476]	; (8000d98 <update_firmware+0x2a8>)
 8000bbc:	0011      	movs	r1, r2
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f005 fd00 	bl	80065c4 <iprintf>
		HAL_Delay(1000);
 8000bc4:	23fa      	movs	r3, #250	; 0xfa
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f001 fbc1 	bl	8002350 <HAL_Delay>

		printf("Send OK................. \n\r");
 8000bce:	4b73      	ldr	r3, [pc, #460]	; (8000d9c <update_firmware+0x2ac>)
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f005 fcf7 	bl	80065c4 <iprintf>
		HAL_UART_Transmit(&huart2,"OK\n", (sizeof("OK\n")-1),500);
 8000bd6:	23fa      	movs	r3, #250	; 0xfa
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	4971      	ldr	r1, [pc, #452]	; (8000da0 <update_firmware+0x2b0>)
 8000bdc:	4860      	ldr	r0, [pc, #384]	; (8000d60 <update_firmware+0x270>)
 8000bde:	2203      	movs	r2, #3
 8000be0:	f003 fc84 	bl	80044ec <HAL_UART_Transmit>
		memset(rx_buff,'\0',sizeof(rx_buff));
 8000be4:	2382      	movs	r3, #130	; 0x82
 8000be6:	009a      	lsls	r2, r3, #2
 8000be8:	4b61      	ldr	r3, [pc, #388]	; (8000d70 <update_firmware+0x280>)
 8000bea:	2100      	movs	r1, #0
 8000bec:	0018      	movs	r0, r3
 8000bee:	f005 fce0 	bl	80065b2 <memset>
		wait();
 8000bf2:	f7ff ff33 	bl	8000a5c <wait>
		 dato_recivido = false;
 8000bf6:	4b5d      	ldr	r3, [pc, #372]	; (8000d6c <update_firmware+0x27c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
	     transmit_data = true;
 8000bfc:	4b69      	ldr	r3, [pc, #420]	; (8000da4 <update_firmware+0x2b4>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]


		 printf(" \r Starting loader.......... \r\n");
 8000c02:	4b69      	ldr	r3, [pc, #420]	; (8000da8 <update_firmware+0x2b8>)
 8000c04:	0018      	movs	r0, r3
 8000c06:	f005 fd7d 	bl	8006704 <puts>
		while( j<=pages-1)
 8000c0a:	e129      	b.n	8000e60 <update_firmware+0x370>
 8000c0c:	4b58      	ldr	r3, [pc, #352]	; (8000d70 <update_firmware+0x280>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
		{
			memcpy(&index_page,&rx_buff[0],4);
 8000c10:	4b66      	ldr	r3, [pc, #408]	; (8000dac <update_firmware+0x2bc>)
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	4b56      	ldr	r3, [pc, #344]	; (8000d70 <update_firmware+0x280>)
 8000c16:	685a      	ldr	r2, [r3, #4]
			memcpy(&crc_part,&rx_buff[4],4);
 8000c18:	4b65      	ldr	r3, [pc, #404]	; (8000db0 <update_firmware+0x2c0>)
 8000c1a:	601a      	str	r2, [r3, #0]
			printf(" \r index: %ld \n",index_page);
 8000c1c:	4b63      	ldr	r3, [pc, #396]	; (8000dac <update_firmware+0x2bc>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b64      	ldr	r3, [pc, #400]	; (8000db4 <update_firmware+0x2c4>)
 8000c22:	0011      	movs	r1, r2
 8000c24:	0018      	movs	r0, r3
 8000c26:	f005 fccd 	bl	80065c4 <iprintf>
			printf(" \r crc_part: %lX \n",crc_part);
 8000c2a:	4b61      	ldr	r3, [pc, #388]	; (8000db0 <update_firmware+0x2c0>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	4b62      	ldr	r3, [pc, #392]	; (8000db8 <update_firmware+0x2c8>)
 8000c30:	0011      	movs	r1, r2
 8000c32:	0018      	movs	r0, r3
 8000c34:	f005 fcc6 	bl	80065c4 <iprintf>
			crc = CRC16_X25(&rx_buff[8], 512, 0);
 8000c38:	2380      	movs	r3, #128	; 0x80
 8000c3a:	0099      	lsls	r1, r3, #2
 8000c3c:	4b5f      	ldr	r3, [pc, #380]	; (8000dbc <update_firmware+0x2cc>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	0018      	movs	r0, r3
 8000c42:	f7ff fd0b 	bl	800065c <CRC16_X25>
 8000c46:	0003      	movs	r3, r0
 8000c48:	001a      	movs	r2, r3
 8000c4a:	4b5d      	ldr	r3, [pc, #372]	; (8000dc0 <update_firmware+0x2d0>)
 8000c4c:	801a      	strh	r2, [r3, #0]
			printf(" \r crc computed: %X \r\n",crc);
 8000c4e:	4b5c      	ldr	r3, [pc, #368]	; (8000dc0 <update_firmware+0x2d0>)
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	001a      	movs	r2, r3
 8000c54:	4b5b      	ldr	r3, [pc, #364]	; (8000dc4 <update_firmware+0x2d4>)
 8000c56:	0011      	movs	r1, r2
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f005 fcb3 	bl	80065c4 <iprintf>

			if((crc == crc_part) && (index_page < pages))
 8000c5e:	4b58      	ldr	r3, [pc, #352]	; (8000dc0 <update_firmware+0x2d0>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	001a      	movs	r2, r3
 8000c64:	4b52      	ldr	r3, [pc, #328]	; (8000db0 <update_firmware+0x2c0>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d000      	beq.n	8000c6e <update_firmware+0x17e>
 8000c6c:	e0ba      	b.n	8000de4 <update_firmware+0x2f4>
 8000c6e:	4b4f      	ldr	r3, [pc, #316]	; (8000dac <update_firmware+0x2bc>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	4b42      	ldr	r3, [pc, #264]	; (8000d7c <update_firmware+0x28c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d300      	bcc.n	8000c7c <update_firmware+0x18c>
 8000c7a:	e0b3      	b.n	8000de4 <update_firmware+0x2f4>
			{
			  a = write(&rx_buff[8],a);
 8000c7c:	4b52      	ldr	r3, [pc, #328]	; (8000dc8 <update_firmware+0x2d8>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	001a      	movs	r2, r3
 8000c82:	4b4e      	ldr	r3, [pc, #312]	; (8000dbc <update_firmware+0x2cc>)
 8000c84:	0011      	movs	r1, r2
 8000c86:	0018      	movs	r0, r3
 8000c88:	f7ff fd20 	bl	80006cc <write>
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	4b4d      	ldr	r3, [pc, #308]	; (8000dc8 <update_firmware+0x2d8>)
 8000c92:	801a      	strh	r2, [r3, #0]
			  crc_rec = CRC16_X25(&rx_buff[8], 512, crc_rec);
 8000c94:	4b4d      	ldr	r3, [pc, #308]	; (8000dcc <update_firmware+0x2dc>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	0099      	lsls	r1, r3, #2
 8000c9e:	4b47      	ldr	r3, [pc, #284]	; (8000dbc <update_firmware+0x2cc>)
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f7ff fcdb 	bl	800065c <CRC16_X25>
 8000ca6:	0003      	movs	r3, r0
 8000ca8:	001a      	movs	r2, r3
 8000caa:	4b48      	ldr	r3, [pc, #288]	; (8000dcc <update_firmware+0x2dc>)
 8000cac:	601a      	str	r2, [r3, #0]
			  printf(" \r crc_rec: %lX \r\n",crc_rec);
 8000cae:	4b47      	ldr	r3, [pc, #284]	; (8000dcc <update_firmware+0x2dc>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	4b47      	ldr	r3, [pc, #284]	; (8000dd0 <update_firmware+0x2e0>)
 8000cb4:	0011      	movs	r1, r2
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f005 fc84 	bl	80065c4 <iprintf>

			  memset(buffer,'\0',sizeof(buffer));
 8000cbc:	241c      	movs	r4, #28
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	220a      	movs	r2, #10
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f005 fc74 	bl	80065b2 <memset>
			  memset(strnum,'\0',sizeof(strnum));
 8000cca:	2510      	movs	r5, #16
 8000ccc:	197b      	adds	r3, r7, r5
 8000cce:	220a      	movs	r2, #10
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f005 fc6d 	bl	80065b2 <memset>
			  snprintf(strnum,sizeof(strnum), "%ld",index_page);
 8000cd8:	4b34      	ldr	r3, [pc, #208]	; (8000dac <update_firmware+0x2bc>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a3d      	ldr	r2, [pc, #244]	; (8000dd4 <update_firmware+0x2e4>)
 8000cde:	1978      	adds	r0, r7, r5
 8000ce0:	210a      	movs	r1, #10
 8000ce2:	f005 fde1 	bl	80068a8 <sniprintf>
			  memcpy(&buffer[0], OK, sizeof(OK));
 8000ce6:	193b      	adds	r3, r7, r4
 8000ce8:	220c      	movs	r2, #12
 8000cea:	18ba      	adds	r2, r7, r2
 8000cec:	8811      	ldrh	r1, [r2, #0]
 8000cee:	8019      	strh	r1, [r3, #0]
 8000cf0:	7892      	ldrb	r2, [r2, #2]
 8000cf2:	709a      	strb	r2, [r3, #2]
			  memcpy(&buffer[sizeof(OK)], strnum,strlen(strnum));
 8000cf4:	197b      	adds	r3, r7, r5
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f7ff fa02 	bl	8000100 <strlen>
 8000cfc:	0002      	movs	r2, r0
 8000cfe:	1979      	adds	r1, r7, r5
 8000d00:	193b      	adds	r3, r7, r4
 8000d02:	3303      	adds	r3, #3
 8000d04:	0018      	movs	r0, r3
 8000d06:	f005 fc4b 	bl	80065a0 <memcpy>
			  printf(" %s\n\r",buffer);
 8000d0a:	193a      	adds	r2, r7, r4
 8000d0c:	4b32      	ldr	r3, [pc, #200]	; (8000dd8 <update_firmware+0x2e8>)
 8000d0e:	0011      	movs	r1, r2
 8000d10:	0018      	movs	r0, r3
 8000d12:	f005 fc57 	bl	80065c4 <iprintf>
			  HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer),500);
 8000d16:	193b      	adds	r3, r7, r4
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f7ff f9f1 	bl	8000100 <strlen>
 8000d1e:	0003      	movs	r3, r0
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	23fa      	movs	r3, #250	; 0xfa
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	1939      	adds	r1, r7, r4
 8000d28:	480d      	ldr	r0, [pc, #52]	; (8000d60 <update_firmware+0x270>)
 8000d2a:	f003 fbdf 	bl	80044ec <HAL_UART_Transmit>
			  wait();
 8000d2e:	f7ff fe95 	bl	8000a5c <wait>
			  dato_recivido = false;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <update_firmware+0x27c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
			  j++;
 8000d38:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <update_firmware+0x2ec>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	1c5a      	adds	r2, r3, #1
 8000d3e:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <update_firmware+0x2ec>)
 8000d40:	601a      	str	r2, [r3, #0]
			  printf(" j: %d \n\r",j);
 8000d42:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <update_firmware+0x2ec>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <update_firmware+0x2f0>)
 8000d48:	0011      	movs	r1, r2
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f005 fc3a 	bl	80065c4 <iprintf>
 8000d50:	e086      	b.n	8000e60 <update_firmware+0x370>
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	08008058 	.word	0x08008058
 8000d58:	20525245 	.word	0x20525245
 8000d5c:	08007dc8 	.word	0x08007dc8
 8000d60:	20000a10 	.word	0x20000a10
 8000d64:	08007dcc 	.word	0x08007dcc
 8000d68:	20000d78 	.word	0x20000d78
 8000d6c:	20000b48 	.word	0x20000b48
 8000d70:	20000b58 	.word	0x20000b58
 8000d74:	20000d60 	.word	0x20000d60
 8000d78:	20000d64 	.word	0x20000d64
 8000d7c:	20000b4c 	.word	0x20000b4c
 8000d80:	20000b54 	.word	0x20000b54
 8000d84:	20000b50 	.word	0x20000b50
 8000d88:	08007ddc 	.word	0x08007ddc
 8000d8c:	08007df0 	.word	0x08007df0
 8000d90:	08007e04 	.word	0x08007e04
 8000d94:	08007e14 	.word	0x08007e14
 8000d98:	08007e28 	.word	0x08007e28
 8000d9c:	08007e3c 	.word	0x08007e3c
 8000da0:	08007e58 	.word	0x08007e58
 8000da4:	20000b4a 	.word	0x20000b4a
 8000da8:	08007e5c 	.word	0x08007e5c
 8000dac:	20000d68 	.word	0x20000d68
 8000db0:	20000d7c 	.word	0x20000d7c
 8000db4:	08007e7c 	.word	0x08007e7c
 8000db8:	08007e8c 	.word	0x08007e8c
 8000dbc:	20000b60 	.word	0x20000b60
 8000dc0:	20000d6c 	.word	0x20000d6c
 8000dc4:	08007ea0 	.word	0x08007ea0
 8000dc8:	20000d72 	.word	0x20000d72
 8000dcc:	20000d80 	.word	0x20000d80
 8000dd0:	08007eb8 	.word	0x08007eb8
 8000dd4:	08007ecc 	.word	0x08007ecc
 8000dd8:	08007ed0 	.word	0x08007ed0
 8000ddc:	20000d84 	.word	0x20000d84
 8000de0:	08007ed8 	.word	0x08007ed8
			}
			else
			{
				//i = i;
			  memset(buffer,'\0',sizeof(buffer));
 8000de4:	241c      	movs	r4, #28
 8000de6:	193b      	adds	r3, r7, r4
 8000de8:	220a      	movs	r2, #10
 8000dea:	2100      	movs	r1, #0
 8000dec:	0018      	movs	r0, r3
 8000dee:	f005 fbe0 	bl	80065b2 <memset>
			  memset(strnum,'\0',sizeof(strnum));
 8000df2:	2510      	movs	r5, #16
 8000df4:	197b      	adds	r3, r7, r5
 8000df6:	220a      	movs	r2, #10
 8000df8:	2100      	movs	r1, #0
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f005 fbd9 	bl	80065b2 <memset>
			  //snprintf(strnum,sizeof(strnum), "%ld",index_page);
			  snprintf(strnum,sizeof(strnum), "%d",j);
 8000e00:	4be4      	ldr	r3, [pc, #912]	; (8001194 <update_firmware+0x6a4>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4ae4      	ldr	r2, [pc, #912]	; (8001198 <update_firmware+0x6a8>)
 8000e06:	1978      	adds	r0, r7, r5
 8000e08:	210a      	movs	r1, #10
 8000e0a:	f005 fd4d 	bl	80068a8 <sniprintf>
			  memcpy(&buffer[0], ERR, sizeof(ERR));
 8000e0e:	193b      	adds	r3, r7, r4
 8000e10:	2208      	movs	r2, #8
 8000e12:	18ba      	adds	r2, r7, r2
 8000e14:	6812      	ldr	r2, [r2, #0]
 8000e16:	601a      	str	r2, [r3, #0]
			  memcpy(&buffer[sizeof(ERR)], strnum,strlen(strnum));
 8000e18:	197b      	adds	r3, r7, r5
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f7ff f970 	bl	8000100 <strlen>
 8000e20:	0002      	movs	r2, r0
 8000e22:	1979      	adds	r1, r7, r5
 8000e24:	193b      	adds	r3, r7, r4
 8000e26:	3304      	adds	r3, #4
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f005 fbb9 	bl	80065a0 <memcpy>
			  printf(" \r %s\r\n",buffer);
 8000e2e:	193a      	adds	r2, r7, r4
 8000e30:	4bda      	ldr	r3, [pc, #872]	; (800119c <update_firmware+0x6ac>)
 8000e32:	0011      	movs	r1, r2
 8000e34:	0018      	movs	r0, r3
 8000e36:	f005 fbc5 	bl	80065c4 <iprintf>
			  printf(" j: %d \n\r",j);
 8000e3a:	4bd6      	ldr	r3, [pc, #856]	; (8001194 <update_firmware+0x6a4>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	4bd8      	ldr	r3, [pc, #864]	; (80011a0 <update_firmware+0x6b0>)
 8000e40:	0011      	movs	r1, r2
 8000e42:	0018      	movs	r0, r3
 8000e44:	f005 fbbe 	bl	80065c4 <iprintf>
			  HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer),500);
 8000e48:	193b      	adds	r3, r7, r4
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f7ff f958 	bl	8000100 <strlen>
 8000e50:	0003      	movs	r3, r0
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	23fa      	movs	r3, #250	; 0xfa
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	1939      	adds	r1, r7, r4
 8000e5a:	48d2      	ldr	r0, [pc, #840]	; (80011a4 <update_firmware+0x6b4>)
 8000e5c:	f003 fb46 	bl	80044ec <HAL_UART_Transmit>
		while( j<=pages-1)
 8000e60:	4bd1      	ldr	r3, [pc, #836]	; (80011a8 <update_firmware+0x6b8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	1e5a      	subs	r2, r3, #1
 8000e66:	4bcb      	ldr	r3, [pc, #812]	; (8001194 <update_firmware+0x6a4>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d300      	bcc.n	8000e70 <update_firmware+0x380>
 8000e6e:	e6cd      	b.n	8000c0c <update_firmware+0x11c>
			}

		}// end while
	     transmit_data = true;
 8000e70:	4bce      	ldr	r3, [pc, #824]	; (80011ac <update_firmware+0x6bc>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	701a      	strb	r2, [r3, #0]

		if(offset!=0)
 8000e76:	4bce      	ldr	r3, [pc, #824]	; (80011b0 <update_firmware+0x6c0>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d100      	bne.n	8000e80 <update_firmware+0x390>
 8000e7e:	e0c9      	b.n	8001014 <update_firmware+0x524>
		{
			printf(" \r --------------Last Page ----------- \n");
 8000e80:	4bcc      	ldr	r3, [pc, #816]	; (80011b4 <update_firmware+0x6c4>)
 8000e82:	0018      	movs	r0, r3
 8000e84:	f005 fc3e 	bl	8006704 <puts>
 8000e88:	4bcb      	ldr	r3, [pc, #812]	; (80011b8 <update_firmware+0x6c8>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
			memcpy(&index_page,&rx_buff[0],4);
 8000e8c:	4bcb      	ldr	r3, [pc, #812]	; (80011bc <update_firmware+0x6cc>)
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	4bc9      	ldr	r3, [pc, #804]	; (80011b8 <update_firmware+0x6c8>)
 8000e92:	685a      	ldr	r2, [r3, #4]
			memcpy(&crc_part,&rx_buff[4],4);
 8000e94:	4bca      	ldr	r3, [pc, #808]	; (80011c0 <update_firmware+0x6d0>)
 8000e96:	601a      	str	r2, [r3, #0]
			printf(" \r index: %lX \n",index_page);
 8000e98:	4bc8      	ldr	r3, [pc, #800]	; (80011bc <update_firmware+0x6cc>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4bc9      	ldr	r3, [pc, #804]	; (80011c4 <update_firmware+0x6d4>)
 8000e9e:	0011      	movs	r1, r2
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f005 fb8f 	bl	80065c4 <iprintf>
			printf(" \r crc_part: %lX \n",crc_part);
 8000ea6:	4bc6      	ldr	r3, [pc, #792]	; (80011c0 <update_firmware+0x6d0>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	4bc7      	ldr	r3, [pc, #796]	; (80011c8 <update_firmware+0x6d8>)
 8000eac:	0011      	movs	r1, r2
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f005 fb88 	bl	80065c4 <iprintf>
			crc = CRC16_X25(&rx_buff[8], offset, 0);//offset
 8000eb4:	4bbe      	ldr	r3, [pc, #760]	; (80011b0 <update_firmware+0x6c0>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	b299      	uxth	r1, r3
 8000eba:	4bc4      	ldr	r3, [pc, #784]	; (80011cc <update_firmware+0x6dc>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f7ff fbcc 	bl	800065c <CRC16_X25>
 8000ec4:	0003      	movs	r3, r0
 8000ec6:	001a      	movs	r2, r3
 8000ec8:	4bc1      	ldr	r3, [pc, #772]	; (80011d0 <update_firmware+0x6e0>)
 8000eca:	801a      	strh	r2, [r3, #0]
			printf(" \r crc computed: %X \r\n",crc);
 8000ecc:	4bc0      	ldr	r3, [pc, #768]	; (80011d0 <update_firmware+0x6e0>)
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	001a      	movs	r2, r3
 8000ed2:	4bc0      	ldr	r3, [pc, #768]	; (80011d4 <update_firmware+0x6e4>)
 8000ed4:	0011      	movs	r1, r2
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f005 fb74 	bl	80065c4 <iprintf>
			printf(" \r crc_rec: %lX \r\n",crc_rec);
 8000edc:	4bbe      	ldr	r3, [pc, #760]	; (80011d8 <update_firmware+0x6e8>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4bbe      	ldr	r3, [pc, #760]	; (80011dc <update_firmware+0x6ec>)
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f005 fb6d 	bl	80065c4 <iprintf>


			if(crc == crc_part)
 8000eea:	4bb9      	ldr	r3, [pc, #740]	; (80011d0 <update_firmware+0x6e0>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	001a      	movs	r2, r3
 8000ef0:	4bb3      	ldr	r3, [pc, #716]	; (80011c0 <update_firmware+0x6d0>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d156      	bne.n	8000fa6 <update_firmware+0x4b6>
			{
			  a = write(&rx_buff[8],a);
 8000ef8:	4bb9      	ldr	r3, [pc, #740]	; (80011e0 <update_firmware+0x6f0>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	001a      	movs	r2, r3
 8000efe:	4bb3      	ldr	r3, [pc, #716]	; (80011cc <update_firmware+0x6dc>)
 8000f00:	0011      	movs	r1, r2
 8000f02:	0018      	movs	r0, r3
 8000f04:	f7ff fbe2 	bl	80006cc <write>
 8000f08:	0003      	movs	r3, r0
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	4bb4      	ldr	r3, [pc, #720]	; (80011e0 <update_firmware+0x6f0>)
 8000f0e:	801a      	strh	r2, [r3, #0]
			  crc_rec = CRC16_X25(&rx_buff[8], offset, crc_rec);
 8000f10:	4ba7      	ldr	r3, [pc, #668]	; (80011b0 <update_firmware+0x6c0>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	b299      	uxth	r1, r3
 8000f16:	4bb0      	ldr	r3, [pc, #704]	; (80011d8 <update_firmware+0x6e8>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	4bab      	ldr	r3, [pc, #684]	; (80011cc <update_firmware+0x6dc>)
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f7ff fb9c 	bl	800065c <CRC16_X25>
 8000f24:	0003      	movs	r3, r0
 8000f26:	001a      	movs	r2, r3
 8000f28:	4bab      	ldr	r3, [pc, #684]	; (80011d8 <update_firmware+0x6e8>)
 8000f2a:	601a      	str	r2, [r3, #0]
			  memset(buffer,'\0',sizeof(buffer));
 8000f2c:	241c      	movs	r4, #28
 8000f2e:	193b      	adds	r3, r7, r4
 8000f30:	220a      	movs	r2, #10
 8000f32:	2100      	movs	r1, #0
 8000f34:	0018      	movs	r0, r3
 8000f36:	f005 fb3c 	bl	80065b2 <memset>
			  memset(strnum,'\0',sizeof(strnum));
 8000f3a:	2510      	movs	r5, #16
 8000f3c:	197b      	adds	r3, r7, r5
 8000f3e:	220a      	movs	r2, #10
 8000f40:	2100      	movs	r1, #0
 8000f42:	0018      	movs	r0, r3
 8000f44:	f005 fb35 	bl	80065b2 <memset>
			  snprintf(strnum,sizeof(strnum), "%d",index_page);
 8000f48:	4b9c      	ldr	r3, [pc, #624]	; (80011bc <update_firmware+0x6cc>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a92      	ldr	r2, [pc, #584]	; (8001198 <update_firmware+0x6a8>)
 8000f4e:	1978      	adds	r0, r7, r5
 8000f50:	210a      	movs	r1, #10
 8000f52:	f005 fca9 	bl	80068a8 <sniprintf>
			  //printf("strnum: %s, len: %d \n",strnum,strlen(strnum));
			  memcpy(&buffer[0], OK, sizeof(OK));
 8000f56:	193b      	adds	r3, r7, r4
 8000f58:	220c      	movs	r2, #12
 8000f5a:	18ba      	adds	r2, r7, r2
 8000f5c:	8811      	ldrh	r1, [r2, #0]
 8000f5e:	8019      	strh	r1, [r3, #0]
 8000f60:	7892      	ldrb	r2, [r2, #2]
 8000f62:	709a      	strb	r2, [r3, #2]
			  memcpy(&buffer[sizeof(OK)], strnum,strlen(strnum));
 8000f64:	197b      	adds	r3, r7, r5
 8000f66:	0018      	movs	r0, r3
 8000f68:	f7ff f8ca 	bl	8000100 <strlen>
 8000f6c:	0002      	movs	r2, r0
 8000f6e:	1979      	adds	r1, r7, r5
 8000f70:	193b      	adds	r3, r7, r4
 8000f72:	3303      	adds	r3, #3
 8000f74:	0018      	movs	r0, r3
 8000f76:	f005 fb13 	bl	80065a0 <memcpy>
			  printf(" \r buffer: %s\r\n",buffer);
 8000f7a:	193a      	adds	r2, r7, r4
 8000f7c:	4b99      	ldr	r3, [pc, #612]	; (80011e4 <update_firmware+0x6f4>)
 8000f7e:	0011      	movs	r1, r2
 8000f80:	0018      	movs	r0, r3
 8000f82:	f005 fb1f 	bl	80065c4 <iprintf>
			  HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer),500);
 8000f86:	193b      	adds	r3, r7, r4
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f7ff f8b9 	bl	8000100 <strlen>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	23fa      	movs	r3, #250	; 0xfa
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	1939      	adds	r1, r7, r4
 8000f98:	4882      	ldr	r0, [pc, #520]	; (80011a4 <update_firmware+0x6b4>)
 8000f9a:	f003 faa7 	bl	80044ec <HAL_UART_Transmit>
			  HAL_Delay(200);
			  HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
			  HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
			  HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
			  */
			 dato_recivido = false;
 8000f9e:	4b92      	ldr	r3, [pc, #584]	; (80011e8 <update_firmware+0x6f8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
 8000fa4:	e036      	b.n	8001014 <update_firmware+0x524>
			}
			else
			{
			  memset(buffer,'\0',sizeof(buffer));
 8000fa6:	241c      	movs	r4, #28
 8000fa8:	193b      	adds	r3, r7, r4
 8000faa:	220a      	movs	r2, #10
 8000fac:	2100      	movs	r1, #0
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f005 faff 	bl	80065b2 <memset>
			  memset(strnum,'\0',sizeof(strnum));
 8000fb4:	2510      	movs	r5, #16
 8000fb6:	197b      	adds	r3, r7, r5
 8000fb8:	220a      	movs	r2, #10
 8000fba:	2100      	movs	r1, #0
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f005 faf8 	bl	80065b2 <memset>
			  snprintf(strnum,sizeof(strnum), "%d",index_page);
 8000fc2:	4b7e      	ldr	r3, [pc, #504]	; (80011bc <update_firmware+0x6cc>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a74      	ldr	r2, [pc, #464]	; (8001198 <update_firmware+0x6a8>)
 8000fc8:	1978      	adds	r0, r7, r5
 8000fca:	210a      	movs	r1, #10
 8000fcc:	f005 fc6c 	bl	80068a8 <sniprintf>
			  memcpy(&buffer[0], ERR, sizeof(ERR));
 8000fd0:	193b      	adds	r3, r7, r4
 8000fd2:	2208      	movs	r2, #8
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	6812      	ldr	r2, [r2, #0]
 8000fd8:	601a      	str	r2, [r3, #0]
			  memcpy(&buffer[sizeof(ERR)], strnum,strlen(strnum));
 8000fda:	197b      	adds	r3, r7, r5
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f7ff f88f 	bl	8000100 <strlen>
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	1979      	adds	r1, r7, r5
 8000fe6:	193b      	adds	r3, r7, r4
 8000fe8:	3304      	adds	r3, #4
 8000fea:	0018      	movs	r0, r3
 8000fec:	f005 fad8 	bl	80065a0 <memcpy>
			  printf(" \r buffer: %s\r\n",buffer);
 8000ff0:	193a      	adds	r2, r7, r4
 8000ff2:	4b7c      	ldr	r3, [pc, #496]	; (80011e4 <update_firmware+0x6f4>)
 8000ff4:	0011      	movs	r1, r2
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f005 fae4 	bl	80065c4 <iprintf>
			  HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer),500);
 8000ffc:	193b      	adds	r3, r7, r4
 8000ffe:	0018      	movs	r0, r3
 8001000:	f7ff f87e 	bl	8000100 <strlen>
 8001004:	0003      	movs	r3, r0
 8001006:	b29a      	uxth	r2, r3
 8001008:	23fa      	movs	r3, #250	; 0xfa
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	1939      	adds	r1, r7, r4
 800100e:	4865      	ldr	r0, [pc, #404]	; (80011a4 <update_firmware+0x6b4>)
 8001010:	f003 fa6c 	bl	80044ec <HAL_UART_Transmit>
				  //return -1;
			}
		}// offset

	//--------------------- Check Integration -----------------
		if(CRC_16 == crc_rec)
 8001014:	4b75      	ldr	r3, [pc, #468]	; (80011ec <update_firmware+0x6fc>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b6f      	ldr	r3, [pc, #444]	; (80011d8 <update_firmware+0x6e8>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	429a      	cmp	r2, r3
 800101e:	d13c      	bne.n	800109a <update_firmware+0x5aa>
		{
			printf("\r ************* CRC OK ****************** \r\n");
 8001020:	4b73      	ldr	r3, [pc, #460]	; (80011f0 <update_firmware+0x700>)
 8001022:	0018      	movs	r0, r3
 8001024:	f005 fb6e 	bl	8006704 <puts>
			printf(" \r crc rec: %lX \r\n",crc_rec);
 8001028:	4b6b      	ldr	r3, [pc, #428]	; (80011d8 <update_firmware+0x6e8>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b71      	ldr	r3, [pc, #452]	; (80011f4 <update_firmware+0x704>)
 800102e:	0011      	movs	r1, r2
 8001030:	0018      	movs	r0, r3
 8001032:	f005 fac7 	bl	80065c4 <iprintf>
			printf(" \r crc_app: %lX \n",CRC_16);
 8001036:	4b6d      	ldr	r3, [pc, #436]	; (80011ec <update_firmware+0x6fc>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4b6f      	ldr	r3, [pc, #444]	; (80011f8 <update_firmware+0x708>)
 800103c:	0011      	movs	r1, r2
 800103e:	0018      	movs	r0, r3
 8001040:	f005 fac0 	bl	80065c4 <iprintf>
			printf("\r ************************************* \r\n");
 8001044:	4b6d      	ldr	r3, [pc, #436]	; (80011fc <update_firmware+0x70c>)
 8001046:	0018      	movs	r0, r3
 8001048:	f005 fb5c 	bl	8006704 <puts>
			HAL_Delay(2000);
 800104c:	23fa      	movs	r3, #250	; 0xfa
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	0018      	movs	r0, r3
 8001052:	f001 f97d 	bl	8002350 <HAL_Delay>
			cmd7[0] = crc_rec;
 8001056:	4b60      	ldr	r3, [pc, #384]	; (80011d8 <update_firmware+0x6e8>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	003b      	movs	r3, r7
 800105c:	601a      	str	r2, [r3, #0]
			cmd7[1] = 0xFFFFFFFF;
 800105e:	003b      	movs	r3, r7
 8001060:	2201      	movs	r2, #1
 8001062:	4252      	negs	r2, r2
 8001064:	605a      	str	r2, [r3, #4]
			HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 8001066:	23fa      	movs	r3, #250	; 0xfa
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	0039      	movs	r1, r7
 800106c:	484d      	ldr	r0, [pc, #308]	; (80011a4 <update_firmware+0x6b4>)
 800106e:	2208      	movs	r2, #8
 8001070:	f003 fa3c 	bl	80044ec <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 8001074:	23fa      	movs	r3, #250	; 0xfa
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	0039      	movs	r1, r7
 800107a:	484a      	ldr	r0, [pc, #296]	; (80011a4 <update_firmware+0x6b4>)
 800107c:	2208      	movs	r2, #8
 800107e:	f003 fa35 	bl	80044ec <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 8001082:	23fa      	movs	r3, #250	; 0xfa
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	0039      	movs	r1, r7
 8001088:	4846      	ldr	r0, [pc, #280]	; (80011a4 <update_firmware+0x6b4>)
 800108a:	2208      	movs	r2, #8
 800108c:	f003 fa2e 	bl	80044ec <HAL_UART_Transmit>
			printf("LOADER OK\r\n");
 8001090:	4b5b      	ldr	r3, [pc, #364]	; (8001200 <update_firmware+0x710>)
 8001092:	0018      	movs	r0, r3
 8001094:	f005 fb36 	bl	8006704 <puts>
 8001098:	e03b      	b.n	8001112 <update_firmware+0x622>

		}
		else
		{
			printf("\r ************* CRC FAIL ****************** \r\n");
 800109a:	4b5a      	ldr	r3, [pc, #360]	; (8001204 <update_firmware+0x714>)
 800109c:	0018      	movs	r0, r3
 800109e:	f005 fb31 	bl	8006704 <puts>
			printf(" \r crc rec: %lX \r\n",crc_rec);
 80010a2:	4b4d      	ldr	r3, [pc, #308]	; (80011d8 <update_firmware+0x6e8>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	4b53      	ldr	r3, [pc, #332]	; (80011f4 <update_firmware+0x704>)
 80010a8:	0011      	movs	r1, r2
 80010aa:	0018      	movs	r0, r3
 80010ac:	f005 fa8a 	bl	80065c4 <iprintf>
			printf(" \r crc_app: %lX \n",CRC_16);
 80010b0:	4b4e      	ldr	r3, [pc, #312]	; (80011ec <update_firmware+0x6fc>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b50      	ldr	r3, [pc, #320]	; (80011f8 <update_firmware+0x708>)
 80010b6:	0011      	movs	r1, r2
 80010b8:	0018      	movs	r0, r3
 80010ba:	f005 fa83 	bl	80065c4 <iprintf>
			printf("\r ************************************* \r\n");
 80010be:	4b4f      	ldr	r3, [pc, #316]	; (80011fc <update_firmware+0x70c>)
 80010c0:	0018      	movs	r0, r3
 80010c2:	f005 fb1f 	bl	8006704 <puts>
			HAL_Delay(2000);
 80010c6:	23fa      	movs	r3, #250	; 0xfa
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	0018      	movs	r0, r3
 80010cc:	f001 f940 	bl	8002350 <HAL_Delay>
			cmd7[0] = 0xFFFFFFFF;
 80010d0:	003b      	movs	r3, r7
 80010d2:	2201      	movs	r2, #1
 80010d4:	4252      	negs	r2, r2
 80010d6:	601a      	str	r2, [r3, #0]
			cmd7[1] = 0xFFFFFFFF;
 80010d8:	003b      	movs	r3, r7
 80010da:	2201      	movs	r2, #1
 80010dc:	4252      	negs	r2, r2
 80010de:	605a      	str	r2, [r3, #4]
			HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 80010e0:	23fa      	movs	r3, #250	; 0xfa
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	0039      	movs	r1, r7
 80010e6:	482f      	ldr	r0, [pc, #188]	; (80011a4 <update_firmware+0x6b4>)
 80010e8:	2208      	movs	r2, #8
 80010ea:	f003 f9ff 	bl	80044ec <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 80010ee:	23fa      	movs	r3, #250	; 0xfa
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	0039      	movs	r1, r7
 80010f4:	482b      	ldr	r0, [pc, #172]	; (80011a4 <update_firmware+0x6b4>)
 80010f6:	2208      	movs	r2, #8
 80010f8:	f003 f9f8 	bl	80044ec <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 80010fc:	23fa      	movs	r3, #250	; 0xfa
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	0039      	movs	r1, r7
 8001102:	4828      	ldr	r0, [pc, #160]	; (80011a4 <update_firmware+0x6b4>)
 8001104:	2208      	movs	r2, #8
 8001106:	f003 f9f1 	bl	80044ec <HAL_UART_Transmit>
			printf("LOADER FAIL\r\n");
 800110a:	4b3f      	ldr	r3, [pc, #252]	; (8001208 <update_firmware+0x718>)
 800110c:	0018      	movs	r0, r3
 800110e:	f005 faf9 	bl	8006704 <puts>
			//return -1;
		}

	//---------------- Validate -------------------------
		const image_hdr_t *hdr = NULL;
 8001112:	2300      	movs	r3, #0
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
		hdr = image_get_header(IMAGE_SLOT_2);//magic
 8001116:	2002      	movs	r0, #2
 8001118:	f7ff f9da 	bl	80004d0 <image_get_header>
 800111c:	0003      	movs	r3, r0
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (hdr == NULL)
 8001120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001122:	2b00      	cmp	r3, #0
 8001124:	d106      	bne.n	8001134 <update_firmware+0x644>
		{
			printf("Magic incorrect \r\n");
 8001126:	4b39      	ldr	r3, [pc, #228]	; (800120c <update_firmware+0x71c>)
 8001128:	0018      	movs	r0, r3
 800112a:	f005 faeb 	bl	8006704 <puts>
			err =  -1;
 800112e:	2301      	movs	r3, #1
 8001130:	425b      	negs	r3, r3
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		if (image_validate(IMAGE_SLOT_2, hdr) != 0)//crc
 8001134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001136:	0019      	movs	r1, r3
 8001138:	2002      	movs	r0, #2
 800113a:	f7ff f9f7 	bl	800052c <image_validate>
 800113e:	1e03      	subs	r3, r0, #0
 8001140:	d006      	beq.n	8001150 <update_firmware+0x660>
		{
			printf("CRC incorrect \r\n");
 8001142:	4b33      	ldr	r3, [pc, #204]	; (8001210 <update_firmware+0x720>)
 8001144:	0018      	movs	r0, r3
 8001146:	f005 fadd 	bl	8006704 <puts>
			err = -1;
 800114a:	2301      	movs	r3, #1
 800114c:	425b      	negs	r3, r3
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
		}//*/
	// -------------------------- Clone ----------------------------

		if((CRC_16 == crc_rec) && (err == 0))
 8001150:	4b26      	ldr	r3, [pc, #152]	; (80011ec <update_firmware+0x6fc>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <update_firmware+0x6e8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	429a      	cmp	r2, r3
 800115a:	d112      	bne.n	8001182 <update_firmware+0x692>
 800115c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10f      	bne.n	8001182 <update_firmware+0x692>
		{
			printf("Ready to write to  Slot 1 \r\n");
 8001162:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <update_firmware+0x724>)
 8001164:	0018      	movs	r0, r3
 8001166:	f005 facd 	bl	8006704 <puts>
			HAL_Delay(2000);
 800116a:	23fa      	movs	r3, #250	; 0xfa
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	0018      	movs	r0, r3
 8001170:	f001 f8ee 	bl	8002350 <HAL_Delay>
			err = clone_rom(FW_SIZE);
 8001174:	4b28      	ldr	r3, [pc, #160]	; (8001218 <update_firmware+0x728>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	0018      	movs	r0, r3
 800117a:	f7ff fb6d 	bl	8000858 <clone_rom>
 800117e:	0003      	movs	r3, r0
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		if ( err == 0)
 8001182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001184:	2b00      	cmp	r3, #0
 8001186:	d14b      	bne.n	8001220 <update_firmware+0x730>
		{
			printf("UPDATE SUCCESSFULLY\r\n");
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <update_firmware+0x72c>)
 800118a:	0018      	movs	r0, r3
 800118c:	f005 faba 	bl	8006704 <puts>
			return 0;
 8001190:	2300      	movs	r3, #0
 8001192:	e04b      	b.n	800122c <update_firmware+0x73c>
 8001194:	20000d84 	.word	0x20000d84
 8001198:	08007ee4 	.word	0x08007ee4
 800119c:	08007ee8 	.word	0x08007ee8
 80011a0:	08007ed8 	.word	0x08007ed8
 80011a4:	20000a10 	.word	0x20000a10
 80011a8:	20000b4c 	.word	0x20000b4c
 80011ac:	20000b4a 	.word	0x20000b4a
 80011b0:	20000b50 	.word	0x20000b50
 80011b4:	08007ef0 	.word	0x08007ef0
 80011b8:	20000b58 	.word	0x20000b58
 80011bc:	20000d68 	.word	0x20000d68
 80011c0:	20000d7c 	.word	0x20000d7c
 80011c4:	08007f18 	.word	0x08007f18
 80011c8:	08007e8c 	.word	0x08007e8c
 80011cc:	20000b60 	.word	0x20000b60
 80011d0:	20000d6c 	.word	0x20000d6c
 80011d4:	08007ea0 	.word	0x08007ea0
 80011d8:	20000d80 	.word	0x20000d80
 80011dc:	08007eb8 	.word	0x08007eb8
 80011e0:	20000d72 	.word	0x20000d72
 80011e4:	08007f28 	.word	0x08007f28
 80011e8:	20000b48 	.word	0x20000b48
 80011ec:	20000d64 	.word	0x20000d64
 80011f0:	08007f38 	.word	0x08007f38
 80011f4:	08007f64 	.word	0x08007f64
 80011f8:	08007df0 	.word	0x08007df0
 80011fc:	08007f78 	.word	0x08007f78
 8001200:	08007fa4 	.word	0x08007fa4
 8001204:	08007fb0 	.word	0x08007fb0
 8001208:	08007fe0 	.word	0x08007fe0
 800120c:	08007ff0 	.word	0x08007ff0
 8001210:	08008004 	.word	0x08008004
 8001214:	08008014 	.word	0x08008014
 8001218:	20000d60 	.word	0x20000d60
 800121c:	08008030 	.word	0x08008030
		}
		else
		{
			printf("UPDATE FAIL\r\n");
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <update_firmware+0x744>)
 8001222:	0018      	movs	r0, r3
 8001224:	f005 fa6e 	bl	8006704 <puts>
			return -1;
 8001228:	2301      	movs	r3, #1
 800122a:	425b      	negs	r3, r3
		}//*/


}// get_Firmware()
 800122c:	0018      	movs	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	b00c      	add	sp, #48	; 0x30
 8001232:	bdb0      	pop	{r4, r5, r7, pc}
 8001234:	08008048 	.word	0x08008048

08001238 <BootJumpASM>:

__attribute__( (naked, noreturn) ) static void BootJumpASM(uint32_t PC, uint32_t SP) {
	__asm("           \n\
 8001238:	f381 8808 	msr	MSP, r1
 800123c:	4700      	bx	r0
			msr msp, r1 /* load r1 into MSP */\n\
			bx r0       /* branch to the address at r0 */\n\
	");
}
 800123e:	46c0      	nop			; (mov r8, r8)

08001240 <image_start>:

 void image_start(const image_hdr_t *hdr) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8001248:	200f      	movs	r0, #15
 800124a:	183b      	adds	r3, r7, r0
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
}
 8001252:	46c0      	nop			; (mov r8, r8)
	/* Disable interrupts */
	//Disable IRQ
	__disable_irq();

	//Disable the system timer
	SysTick->CTRL = 0;
 8001254:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <image_start+0xb8>)
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]

	//Clear the exception pending bit
	SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk ;
 800125a:	4b28      	ldr	r3, [pc, #160]	; (80012fc <image_start+0xbc>)
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	4b27      	ldr	r3, [pc, #156]	; (80012fc <image_start+0xbc>)
 8001260:	2180      	movs	r1, #128	; 0x80
 8001262:	0489      	lsls	r1, r1, #18
 8001264:	430a      	orrs	r2, r1
 8001266:	605a      	str	r2, [r3, #4]

	//Disable IRQs
    for (i = 0; i < 8; i++) {
 8001268:	183b      	adds	r3, r7, r0
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
 800126e:	e015      	b.n	800129c <image_start+0x5c>
        NVIC->ICER[i] = 0xFFFFFFFF; // disable IRQ
 8001270:	4923      	ldr	r1, [pc, #140]	; (8001300 <image_start+0xc0>)
 8001272:	200f      	movs	r0, #15
 8001274:	183b      	adds	r3, r7, r0
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	3320      	adds	r3, #32
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	2201      	movs	r2, #1
 800127e:	4252      	negs	r2, r2
 8001280:	505a      	str	r2, [r3, r1]
        NVIC->ICPR[i] = 0xFFFFFFFF; // clear pending IRQ
 8001282:	491f      	ldr	r1, [pc, #124]	; (8001300 <image_start+0xc0>)
 8001284:	183b      	adds	r3, r7, r0
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	3360      	adds	r3, #96	; 0x60
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	2201      	movs	r2, #1
 800128e:	4252      	negs	r2, r2
 8001290:	505a      	str	r2, [r3, r1]
    for (i = 0; i < 8; i++) {
 8001292:	183b      	adds	r3, r7, r0
 8001294:	781a      	ldrb	r2, [r3, #0]
 8001296:	183b      	adds	r3, r7, r0
 8001298:	3201      	adds	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]
 800129c:	230f      	movs	r3, #15
 800129e:	18fb      	adds	r3, r7, r3
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b07      	cmp	r3, #7
 80012a4:	d9e4      	bls.n	8001270 <image_start+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012a6:	f3bf 8f4f 	dsb	sy
}
 80012aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80012ac:	f3bf 8f6f 	isb	sy
}
 80012b0:	46c0      	nop			; (mov r8, r8)
	//Barriers
	__DSB();
	__ISB();

	//const DeviceVectors *vectors = (const DeviceVectors *) hdr->vector_addr;
	uint32_t *isr = (uint32_t *)hdr->vector_addr;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	7c1a      	ldrb	r2, [r3, #16]
 80012b6:	7c59      	ldrb	r1, [r3, #17]
 80012b8:	0209      	lsls	r1, r1, #8
 80012ba:	430a      	orrs	r2, r1
 80012bc:	7c99      	ldrb	r1, [r3, #18]
 80012be:	0409      	lsls	r1, r1, #16
 80012c0:	430a      	orrs	r2, r1
 80012c2:	7cdb      	ldrb	r3, [r3, #19]
 80012c4:	061b      	lsls	r3, r3, #24
 80012c6:	4313      	orrs	r3, r2
 80012c8:	60bb      	str	r3, [r7, #8]
    SCB->VTOR = (uint32_t)isr & SCB_VTOR_TBLOFF_Msk;
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <image_start+0xbc>)
 80012ce:	21ff      	movs	r1, #255	; 0xff
 80012d0:	438a      	bics	r2, r1
 80012d2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80012d4:	f3bf 8f4f 	dsb	sy
}
 80012d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80012da:	f3bf 8f6f 	isb	sy
}
 80012de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("cpsie i" : : : "memory");
 80012e0:	b662      	cpsie	i
}
 80012e2:	46c0      	nop			; (mov r8, r8)
	__ISB();

	/* Enable interrrupts */
	__enable_irq();

    BootJumpASM(isr[1], isr[0]);
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	3304      	adds	r3, #4
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	0019      	movs	r1, r3
 80012f0:	0010      	movs	r0, r2
 80012f2:	f7ff ffa1 	bl	8001238 <BootJumpASM>
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	e000e010 	.word	0xe000e010
 80012fc:	e000ed00 	.word	0xe000ed00
 8001300:	e000e100 	.word	0xe000e100

08001304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800130a:	f000 ff9b 	bl	8002244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800130e:	f000 f96f 	bl	80015f0 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  MX_USART2_UART_Init();
 8001312:	f000 fac1 	bl	8001898 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001316:	f000 f9b3 	bl	8001680 <MX_TIM1_Init>
  MX_TIM3_Init();
 800131a:	f000 fa0d 	bl	8001738 <MX_TIM3_Init>
  MX_USART5_UART_Init();
 800131e:	f000 fb09 	bl	8001934 <MX_USART5_UART_Init>
  MX_TIM15_Init();
 8001322:	f000 fa5f 	bl	80017e4 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  MX_GPIO_Init_user();
 8001326:	f000 fb89 	bl	8001a3c <MX_GPIO_Init_user>
   RetargetInit(&huart5);
 800132a:	4b96      	ldr	r3, [pc, #600]	; (8001584 <main+0x280>)
 800132c:	0018      	movs	r0, r3
 800132e:	f000 fcd5 	bl	8001cdc <RetargetInit>
   /*HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);// BOOT/*/

   printf("\r ------ Start Bootooader ----- \r\n");
 8001332:	4b95      	ldr	r3, [pc, #596]	; (8001588 <main+0x284>)
 8001334:	0018      	movs	r0, r3
 8001336:	f005 f9e5 	bl	8006704 <puts>
   HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx_buff, sizeof rx_buff);
 800133a:	2382      	movs	r3, #130	; 0x82
 800133c:	009a      	lsls	r2, r3, #2
 800133e:	4993      	ldr	r1, [pc, #588]	; (800158c <main+0x288>)
 8001340:	4b93      	ldr	r3, [pc, #588]	; (8001590 <main+0x28c>)
 8001342:	0018      	movs	r0, r3
 8001344:	f005 f83c 	bl	80063c0 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	shared_memory_init();
 8001348:	f000 fc3c 	bl	8001bc4 <shared_memory_init>
	timer_flag = 0;
 800134c:	4b91      	ldr	r3, [pc, #580]	; (8001594 <main+0x290>)
 800134e:	2200      	movs	r2, #0
 8001350:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim1);
 8001352:	4b91      	ldr	r3, [pc, #580]	; (8001598 <main+0x294>)
 8001354:	0018      	movs	r0, r3
 8001356:	f002 fc1d 	bl	8003b94 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim15);
 800135a:	4b90      	ldr	r3, [pc, #576]	; (800159c <main+0x298>)
 800135c:	0018      	movs	r0, r3
 800135e:	f002 fc19 	bl	8003b94 <HAL_TIM_Base_Start_IT>


	while (1)
	{
		HAL_Delay(5);
 8001362:	2005      	movs	r0, #5
 8001364:	f000 fff4 	bl	8002350 <HAL_Delay>
		boot = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_14);// 1/0
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	01da      	lsls	r2, r3, #7
 800136c:	23a0      	movs	r3, #160	; 0xa0
 800136e:	05db      	lsls	r3, r3, #23
 8001370:	0011      	movs	r1, r2
 8001372:	0018      	movs	r0, r3
 8001374:	f001 fce4 	bl	8002d40 <HAL_GPIO_ReadPin>
 8001378:	0003      	movs	r3, r0
 800137a:	b29a      	uxth	r2, r3
 800137c:	4b88      	ldr	r3, [pc, #544]	; (80015a0 <main+0x29c>)
 800137e:	801a      	strh	r2, [r3, #0]
		printf("\r boot: %d \r\n",boot);
 8001380:	4b87      	ldr	r3, [pc, #540]	; (80015a0 <main+0x29c>)
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	001a      	movs	r2, r3
 8001386:	4b87      	ldr	r3, [pc, #540]	; (80015a4 <main+0x2a0>)
 8001388:	0011      	movs	r1, r2
 800138a:	0018      	movs	r0, r3
 800138c:	f005 f91a 	bl	80065c4 <iprintf>
		bootloader = timer_flag & boot;
 8001390:	4b80      	ldr	r3, [pc, #512]	; (8001594 <main+0x290>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	4a82      	ldr	r2, [pc, #520]	; (80015a0 <main+0x29c>)
 8001396:	8812      	ldrh	r2, [r2, #0]
 8001398:	4013      	ands	r3, r2
 800139a:	b29b      	uxth	r3, r3
 800139c:	1e5a      	subs	r2, r3, #1
 800139e:	4193      	sbcs	r3, r2
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4b81      	ldr	r3, [pc, #516]	; (80015a8 <main+0x2a4>)
 80013a4:	701a      	strb	r2, [r3, #0]
		if(bootloader)
 80013a6:	4b80      	ldr	r3, [pc, #512]	; (80015a8 <main+0x2a4>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00a      	beq.n	80013c4 <main+0xc0>
		{
			printf(" App \n\r");
 80013ae:	4b7f      	ldr	r3, [pc, #508]	; (80015ac <main+0x2a8>)
 80013b0:	0018      	movs	r0, r3
 80013b2:	f005 f907 	bl	80065c4 <iprintf>
			HAL_TIM_Base_Stop_IT(&htim1);
 80013b6:	4b78      	ldr	r3, [pc, #480]	; (8001598 <main+0x294>)
 80013b8:	0018      	movs	r0, r3
 80013ba:	f002 fc47 	bl	8003c4c <HAL_TIM_Base_Stop_IT>
			shared_mem_set_app_update_requested(false);
 80013be:	2000      	movs	r0, #0
 80013c0:	f000 fc68 	bl	8001c94 <shared_mem_set_app_update_requested>
		}
		 if(bootloader == 0)
 80013c4:	4b78      	ldr	r3, [pc, #480]	; (80015a8 <main+0x2a4>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2201      	movs	r2, #1
 80013ca:	4053      	eors	r3, r2
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00a      	beq.n	80013e8 <main+0xe4>
		{
			printf(" \r Bootloader \r\n");
 80013d2:	4b77      	ldr	r3, [pc, #476]	; (80015b0 <main+0x2ac>)
 80013d4:	0018      	movs	r0, r3
 80013d6:	f005 f995 	bl	8006704 <puts>
			HAL_TIM_Base_Stop_IT(&htim1);
 80013da:	4b6f      	ldr	r3, [pc, #444]	; (8001598 <main+0x294>)
 80013dc:	0018      	movs	r0, r3
 80013de:	f002 fc35 	bl	8003c4c <HAL_TIM_Base_Stop_IT>
			shared_mem_set_app_update_requested(true);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f000 fc56 	bl	8001c94 <shared_mem_set_app_update_requested>
		}

	    if((flag_break == 1) && (bootloader==0))
 80013e8:	4b72      	ldr	r3, [pc, #456]	; (80015b4 <main+0x2b0>)
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d10d      	bne.n	800140c <main+0x108>
 80013f0:	4b6d      	ldr	r3, [pc, #436]	; (80015a8 <main+0x2a4>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2201      	movs	r2, #1
 80013f6:	4053      	eors	r3, r2
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d006      	beq.n	800140c <main+0x108>
		{
			printf(" \r App Timer \r\n");
 80013fe:	4b6e      	ldr	r3, [pc, #440]	; (80015b8 <main+0x2b4>)
 8001400:	0018      	movs	r0, r3
 8001402:	f005 f97f 	bl	8006704 <puts>
			shared_mem_set_app_update_requested(false);
 8001406:	2000      	movs	r0, #0
 8001408:	f000 fc44 	bl	8001c94 <shared_mem_set_app_update_requested>
		}

	if (shared_mem_is_bl_upd_requested()) {//bootloader
 800140c:	f000 fc01 	bl	8001c12 <shared_mem_is_bl_upd_requested>
 8001410:	1e03      	subs	r3, r0, #0
 8001412:	d01f      	beq.n	8001454 <main+0x150>
			hdr = image_get_header(IMAGE_SLOT_2); // get address y magic
 8001414:	2002      	movs	r0, #2
 8001416:	f7ff f85b 	bl	80004d0 <image_get_header>
 800141a:	0002      	movs	r2, r0
 800141c:	4b67      	ldr	r3, [pc, #412]	; (80015bc <main+0x2b8>)
 800141e:	601a      	str	r2, [r3, #0]

		// Load the updater (apparom)
		if (hdr == NULL)
 8001420:	4b66      	ldr	r3, [pc, #408]	; (80015bc <main+0x2b8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d104      	bne.n	8001432 <main+0x12e>
		{
			printf("No image found in slot 2\r\n");
 8001428:	4b65      	ldr	r3, [pc, #404]	; (80015c0 <main+0x2bc>)
 800142a:	0018      	movs	r0, r3
 800142c:	f005 f96a 	bl	8006704 <puts>
 8001430:	e005      	b.n	800143e <main+0x13a>
		}
		else
		{
			if (image_validate(IMAGE_SLOT_2, hdr) != 0) {// addr =  &__loader_rom_start__ + sizeof(image_hdr_t), len -> crc(add, len)
 8001432:	4b62      	ldr	r3, [pc, #392]	; (80015bc <main+0x2b8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	0019      	movs	r1, r3
 8001438:	2002      	movs	r0, #2
 800143a:	f7ff f877 	bl	800052c <image_validate>
			}
		}
		//ioport_set_pin_level(RED_LED, false);
		//ioport_set_pin_level(GREEN_LED, false);
		//ioport_set_pin_level(BLUE_LED, false);
		printf("Jumping to updater\r\n");
 800143e:	4b61      	ldr	r3, [pc, #388]	; (80015c4 <main+0x2c0>)
 8001440:	0018      	movs	r0, r3
 8001442:	f005 f95f 	bl	8006704 <puts>
		shared_mem_increment_boot_counter();
 8001446:	f000 fbed 	bl	8001c24 <shared_mem_increment_boot_counter>
		//printf("Boot count: %d \r\n",shared_mem_get_boot_counter());
		image_start(hdr);
 800144a:	4b5c      	ldr	r3, [pc, #368]	; (80015bc <main+0x2b8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	0018      	movs	r0, r3
 8001450:	f7ff fef6 	bl	8001240 <image_start>

	}

	if (!shared_mem_is_app_upd_requested()) {//app //boot 1
 8001454:	f000 fbd4 	bl	8001c00 <shared_mem_is_app_upd_requested>
 8001458:	0003      	movs	r3, r0
 800145a:	001a      	movs	r2, r3
 800145c:	2301      	movs	r3, #1
 800145e:	4053      	eors	r3, r2
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d037      	beq.n	80014d6 <main+0x1d2>
		// Boot count, maybe not neccessary or implement a better thing to handle this
		const uint8_t max_boot_attemps = 4;
 8001466:	1dfb      	adds	r3, r7, #7
 8001468:	2204      	movs	r2, #4
 800146a:	701a      	strb	r2, [r3, #0]
		if (shared_mem_get_boot_counter() >= max_boot_attemps)
 800146c:	f000 fbf2 	bl	8001c54 <shared_mem_get_boot_counter>
 8001470:	0003      	movs	r3, r0
 8001472:	001a      	movs	r2, r3
 8001474:	1dfb      	adds	r3, r7, #7
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4293      	cmp	r3, r2
 800147a:	d809      	bhi.n	8001490 <main+0x18c>
		{
			shared_mem_clear_boot_counter();
 800147c:	f000 fbe0 	bl	8001c40 <shared_mem_clear_boot_counter>
			printf("App unstable, entering to DFU mode\r\n");
 8001480:	4b51      	ldr	r3, [pc, #324]	; (80015c8 <main+0x2c4>)
 8001482:	0018      	movs	r0, r3
 8001484:	f005 f93e 	bl	8006704 <puts>
			break;
 8001488:	46c0      	nop			; (mov r8, r8)

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }//end while
	HAL_NVIC_SystemReset(); //resetea el uC
 800148a:	f001 f868 	bl	800255e <HAL_NVIC_SystemReset>
 800148e:	e073      	b.n	8001578 <main+0x274>
		hdr = image_get_header(IMAGE_SLOT_1);// get address y magic
 8001490:	2001      	movs	r0, #1
 8001492:	f7ff f81d 	bl	80004d0 <image_get_header>
 8001496:	0002      	movs	r2, r0
 8001498:	4b48      	ldr	r3, [pc, #288]	; (80015bc <main+0x2b8>)
 800149a:	601a      	str	r2, [r3, #0]
		if (hdr == NULL)
 800149c:	4b47      	ldr	r3, [pc, #284]	; (80015bc <main+0x2b8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d104      	bne.n	80014ae <main+0x1aa>
			printf("No image found in slot 1\r\n");
 80014a4:	4b49      	ldr	r3, [pc, #292]	; (80015cc <main+0x2c8>)
 80014a6:	0018      	movs	r0, r3
 80014a8:	f005 f92c 	bl	8006704 <puts>
			goto invalid;
 80014ac:	e064      	b.n	8001578 <main+0x274>
		if (image_validate(IMAGE_SLOT_1, hdr) != 0) { // addr =  &__loader_rom_start__ + sizeof(image_hdr_t), len -> crc(add, len)
 80014ae:	4b43      	ldr	r3, [pc, #268]	; (80015bc <main+0x2b8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	0019      	movs	r1, r3
 80014b4:	2001      	movs	r0, #1
 80014b6:	f7ff f839 	bl	800052c <image_validate>
 80014ba:	1e03      	subs	r3, r0, #0
 80014bc:	d15b      	bne.n	8001576 <main+0x272>
		printf("Jumping to application\r\n\n");
 80014be:	4b44      	ldr	r3, [pc, #272]	; (80015d0 <main+0x2cc>)
 80014c0:	0018      	movs	r0, r3
 80014c2:	f005 f91f 	bl	8006704 <puts>
		shared_mem_increment_boot_counter();
 80014c6:	f000 fbad 	bl	8001c24 <shared_mem_increment_boot_counter>
		image_start(hdr);
 80014ca:	4b3c      	ldr	r3, [pc, #240]	; (80015bc <main+0x2b8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	0018      	movs	r0, r3
 80014d0:	f7ff feb6 	bl	8001240 <image_start>
 80014d4:	e745      	b.n	8001362 <main+0x5e>
	else if (shared_mem_is_app_upd_requested())
 80014d6:	f000 fb93 	bl	8001c00 <shared_mem_is_app_upd_requested>
 80014da:	1e03      	subs	r3, r0, #0
 80014dc:	d100      	bne.n	80014e0 <main+0x1dc>
 80014de:	e740      	b.n	8001362 <main+0x5e>
		if (update_firmware() == 0)
 80014e0:	f7ff fb06 	bl	8000af0 <update_firmware>
 80014e4:	1e03      	subs	r3, r0, #0
 80014e6:	d000      	beq.n	80014ea <main+0x1e6>
 80014e8:	e73b      	b.n	8001362 <main+0x5e>
			printf("Update completed, restarting\r\n");
 80014ea:	4b3a      	ldr	r3, [pc, #232]	; (80015d4 <main+0x2d0>)
 80014ec:	0018      	movs	r0, r3
 80014ee:	f005 f909 	bl	8006704 <puts>
			shared_mem_set_update_completed();
 80014f2:	f000 fbb9 	bl	8001c68 <shared_mem_set_update_completed>
			shared_mem_clear_boot_counter();
 80014f6:	f000 fba3 	bl	8001c40 <shared_mem_clear_boot_counter>
			shared_mem_clear_ota_info();
 80014fa:	f000 fbc1 	bl	8001c80 <shared_mem_clear_ota_info>
			shared_mem_set_app_update_requested(false);
 80014fe:	2000      	movs	r0, #0
 8001500:	f000 fbc8 	bl	8001c94 <shared_mem_set_app_update_requested>
			shared_mem_set_update();
 8001504:	f000 fbd6 	bl	8001cb4 <shared_mem_set_update>
			printf("shared_mem_get_update: %d \n\r",shared_mem_get_update());
 8001508:	f000 fbde 	bl	8001cc8 <shared_mem_get_update>
 800150c:	0002      	movs	r2, r0
 800150e:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <main+0x2d4>)
 8001510:	0011      	movs	r1, r2
 8001512:	0018      	movs	r0, r3
 8001514:	f005 f856 	bl	80065c4 <iprintf>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);//resetea el uC
 8001518:	2380      	movs	r3, #128	; 0x80
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	482f      	ldr	r0, [pc, #188]	; (80015dc <main+0x2d8>)
 800151e:	2200      	movs	r2, #0
 8001520:	0019      	movs	r1, r3
 8001522:	f001 fc2a 	bl	8002d7a <HAL_GPIO_WritePin>
			HAL_Delay(2000);
 8001526:	23fa      	movs	r3, #250	; 0xfa
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	0018      	movs	r0, r3
 800152c:	f000 ff10 	bl	8002350 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4829      	ldr	r0, [pc, #164]	; (80015dc <main+0x2d8>)
 8001536:	2201      	movs	r2, #1
 8001538:	0019      	movs	r1, r3
 800153a:	f001 fc1e 	bl	8002d7a <HAL_GPIO_WritePin>
			printf("Reset COMM \n\r");
 800153e:	4b28      	ldr	r3, [pc, #160]	; (80015e0 <main+0x2dc>)
 8001540:	0018      	movs	r0, r3
 8001542:	f005 f83f 	bl	80065c4 <iprintf>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);//resetea el uC
 8001546:	4b27      	ldr	r3, [pc, #156]	; (80015e4 <main+0x2e0>)
 8001548:	2200      	movs	r2, #0
 800154a:	2108      	movs	r1, #8
 800154c:	0018      	movs	r0, r3
 800154e:	f001 fc14 	bl	8002d7a <HAL_GPIO_WritePin>
			HAL_Delay(2000);
 8001552:	23fa      	movs	r3, #250	; 0xfa
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	0018      	movs	r0, r3
 8001558:	f000 fefa 	bl	8002350 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 800155c:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <main+0x2e0>)
 800155e:	2201      	movs	r2, #1
 8001560:	2108      	movs	r1, #8
 8001562:	0018      	movs	r0, r3
 8001564:	f001 fc09 	bl	8002d7a <HAL_GPIO_WritePin>
			printf("Shutdown COMM 🐮 \n\r");
 8001568:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <main+0x2e4>)
 800156a:	0018      	movs	r0, r3
 800156c:	f005 f82a 	bl	80065c4 <iprintf>
			HAL_NVIC_SystemReset();
 8001570:	f000 fff5 	bl	800255e <HAL_NVIC_SystemReset>
		HAL_Delay(5);
 8001574:	e6f5      	b.n	8001362 <main+0x5e>
			goto invalid;
 8001576:	46c0      	nop			; (mov r8, r8)

	invalid:
		printf("\r\nFlash a valid application\r\n");
 8001578:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <main+0x2e8>)
 800157a:	0018      	movs	r0, r3
 800157c:	f005 f8c2 	bl	8006704 <puts>
		while (true)
		{
			__asm__ __volatile__("");
 8001580:	e7fe      	b.n	8001580 <main+0x27c>
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	20000aa4 	.word	0x20000aa4
 8001588:	0800805c 	.word	0x0800805c
 800158c:	20000b58 	.word	0x20000b58
 8001590:	20000a10 	.word	0x20000a10
 8001594:	20000d76 	.word	0x20000d76
 8001598:	2000092c 	.word	0x2000092c
 800159c:	200009c4 	.word	0x200009c4
 80015a0:	20000d74 	.word	0x20000d74
 80015a4:	08008080 	.word	0x08008080
 80015a8:	20000b49 	.word	0x20000b49
 80015ac:	08008090 	.word	0x08008090
 80015b0:	08008098 	.word	0x08008098
 80015b4:	20000d78 	.word	0x20000d78
 80015b8:	080080a8 	.word	0x080080a8
 80015bc:	20000d88 	.word	0x20000d88
 80015c0:	080080b8 	.word	0x080080b8
 80015c4:	080080d4 	.word	0x080080d4
 80015c8:	080080e8 	.word	0x080080e8
 80015cc:	0800810c 	.word	0x0800810c
 80015d0:	08008128 	.word	0x08008128
 80015d4:	08008144 	.word	0x08008144
 80015d8:	08008164 	.word	0x08008164
 80015dc:	50000400 	.word	0x50000400
 80015e0:	08008184 	.word	0x08008184
 80015e4:	50000c00 	.word	0x50000c00
 80015e8:	08008194 	.word	0x08008194
 80015ec:	080081ac 	.word	0x080081ac

080015f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b093      	sub	sp, #76	; 0x4c
 80015f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f6:	2410      	movs	r4, #16
 80015f8:	193b      	adds	r3, r7, r4
 80015fa:	0018      	movs	r0, r3
 80015fc:	2338      	movs	r3, #56	; 0x38
 80015fe:	001a      	movs	r2, r3
 8001600:	2100      	movs	r1, #0
 8001602:	f004 ffd6 	bl	80065b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001606:	003b      	movs	r3, r7
 8001608:	0018      	movs	r0, r3
 800160a:	2310      	movs	r3, #16
 800160c:	001a      	movs	r2, r3
 800160e:	2100      	movs	r1, #0
 8001610:	f004 ffcf 	bl	80065b2 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	0018      	movs	r0, r3
 800161a:	f001 fbcb 	bl	8002db4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800161e:	193b      	adds	r3, r7, r4
 8001620:	2202      	movs	r2, #2
 8001622:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001624:	193b      	adds	r3, r7, r4
 8001626:	2280      	movs	r2, #128	; 0x80
 8001628:	0052      	lsls	r2, r2, #1
 800162a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800162c:	193b      	adds	r3, r7, r4
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001632:	193b      	adds	r3, r7, r4
 8001634:	2240      	movs	r2, #64	; 0x40
 8001636:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001638:	193b      	adds	r3, r7, r4
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800163e:	193b      	adds	r3, r7, r4
 8001640:	0018      	movs	r0, r3
 8001642:	f001 fc03 	bl	8002e4c <HAL_RCC_OscConfig>
 8001646:	1e03      	subs	r3, r0, #0
 8001648:	d001      	beq.n	800164e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800164a:	f000 fa83 	bl	8001b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164e:	003b      	movs	r3, r7
 8001650:	2207      	movs	r2, #7
 8001652:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001654:	003b      	movs	r3, r7
 8001656:	2200      	movs	r2, #0
 8001658:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800165a:	003b      	movs	r3, r7
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001660:	003b      	movs	r3, r7
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001666:	003b      	movs	r3, r7
 8001668:	2100      	movs	r1, #0
 800166a:	0018      	movs	r0, r3
 800166c:	f001 ff08 	bl	8003480 <HAL_RCC_ClockConfig>
 8001670:	1e03      	subs	r3, r0, #0
 8001672:	d001      	beq.n	8001678 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001674:	f000 fa6e 	bl	8001b54 <Error_Handler>
  }
}
 8001678:	46c0      	nop			; (mov r8, r8)
 800167a:	46bd      	mov	sp, r7
 800167c:	b013      	add	sp, #76	; 0x4c
 800167e:	bd90      	pop	{r4, r7, pc}

08001680 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001686:	2310      	movs	r3, #16
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	0018      	movs	r0, r3
 800168c:	2310      	movs	r3, #16
 800168e:	001a      	movs	r2, r3
 8001690:	2100      	movs	r1, #0
 8001692:	f004 ff8e 	bl	80065b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	0018      	movs	r0, r3
 800169a:	230c      	movs	r3, #12
 800169c:	001a      	movs	r2, r3
 800169e:	2100      	movs	r1, #0
 80016a0:	f004 ff87 	bl	80065b2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016a4:	4b21      	ldr	r3, [pc, #132]	; (800172c <MX_TIM1_Init+0xac>)
 80016a6:	4a22      	ldr	r2, [pc, #136]	; (8001730 <MX_TIM1_Init+0xb0>)
 80016a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16000-1;
 80016aa:	4b20      	ldr	r3, [pc, #128]	; (800172c <MX_TIM1_Init+0xac>)
 80016ac:	4a21      	ldr	r2, [pc, #132]	; (8001734 <MX_TIM1_Init+0xb4>)
 80016ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b0:	4b1e      	ldr	r3, [pc, #120]	; (800172c <MX_TIM1_Init+0xac>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 80016b6:	4b1d      	ldr	r3, [pc, #116]	; (800172c <MX_TIM1_Init+0xac>)
 80016b8:	22c8      	movs	r2, #200	; 0xc8
 80016ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <MX_TIM1_Init+0xac>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016c2:	4b1a      	ldr	r3, [pc, #104]	; (800172c <MX_TIM1_Init+0xac>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c8:	4b18      	ldr	r3, [pc, #96]	; (800172c <MX_TIM1_Init+0xac>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016ce:	4b17      	ldr	r3, [pc, #92]	; (800172c <MX_TIM1_Init+0xac>)
 80016d0:	0018      	movs	r0, r3
 80016d2:	f002 fa07 	bl	8003ae4 <HAL_TIM_Base_Init>
 80016d6:	1e03      	subs	r3, r0, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80016da:	f000 fa3b 	bl	8001b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016de:	2110      	movs	r1, #16
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	2280      	movs	r2, #128	; 0x80
 80016e4:	0152      	lsls	r2, r2, #5
 80016e6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016e8:	187a      	adds	r2, r7, r1
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <MX_TIM1_Init+0xac>)
 80016ec:	0011      	movs	r1, r2
 80016ee:	0018      	movs	r0, r3
 80016f0:	f002 fc0c 	bl	8003f0c <HAL_TIM_ConfigClockSource>
 80016f4:	1e03      	subs	r3, r0, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80016f8:	f000 fa2c 	bl	8001b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	2200      	movs	r2, #0
 8001706:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800170e:	1d3a      	adds	r2, r7, #4
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_TIM1_Init+0xac>)
 8001712:	0011      	movs	r1, r2
 8001714:	0018      	movs	r0, r3
 8001716:	f002 fe0b 	bl	8004330 <HAL_TIMEx_MasterConfigSynchronization>
 800171a:	1e03      	subs	r3, r0, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800171e:	f000 fa19 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	46bd      	mov	sp, r7
 8001726:	b008      	add	sp, #32
 8001728:	bd80      	pop	{r7, pc}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	2000092c 	.word	0x2000092c
 8001730:	40012c00 	.word	0x40012c00
 8001734:	00003e7f 	.word	0x00003e7f

08001738 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173e:	2310      	movs	r3, #16
 8001740:	18fb      	adds	r3, r7, r3
 8001742:	0018      	movs	r0, r3
 8001744:	2310      	movs	r3, #16
 8001746:	001a      	movs	r2, r3
 8001748:	2100      	movs	r1, #0
 800174a:	f004 ff32 	bl	80065b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	0018      	movs	r0, r3
 8001752:	230c      	movs	r3, #12
 8001754:	001a      	movs	r2, r3
 8001756:	2100      	movs	r1, #0
 8001758:	f004 ff2b 	bl	80065b2 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800175c:	4b1e      	ldr	r3, [pc, #120]	; (80017d8 <MX_TIM3_Init+0xa0>)
 800175e:	4a1f      	ldr	r2, [pc, #124]	; (80017dc <MX_TIM3_Init+0xa4>)
 8001760:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000-1;
 8001762:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <MX_TIM3_Init+0xa0>)
 8001764:	4a1e      	ldr	r2, [pc, #120]	; (80017e0 <MX_TIM3_Init+0xa8>)
 8001766:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001768:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <MX_TIM3_Init+0xa0>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8000;
 800176e:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <MX_TIM3_Init+0xa0>)
 8001770:	22fa      	movs	r2, #250	; 0xfa
 8001772:	0152      	lsls	r2, r2, #5
 8001774:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001776:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <MX_TIM3_Init+0xa0>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177c:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <MX_TIM3_Init+0xa0>)
 800177e:	2200      	movs	r2, #0
 8001780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <MX_TIM3_Init+0xa0>)
 8001784:	0018      	movs	r0, r3
 8001786:	f002 f9ad 	bl	8003ae4 <HAL_TIM_Base_Init>
 800178a:	1e03      	subs	r3, r0, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800178e:	f000 f9e1 	bl	8001b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001792:	2110      	movs	r1, #16
 8001794:	187b      	adds	r3, r7, r1
 8001796:	2280      	movs	r2, #128	; 0x80
 8001798:	0152      	lsls	r2, r2, #5
 800179a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800179c:	187a      	adds	r2, r7, r1
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <MX_TIM3_Init+0xa0>)
 80017a0:	0011      	movs	r1, r2
 80017a2:	0018      	movs	r0, r3
 80017a4:	f002 fbb2 	bl	8003f0c <HAL_TIM_ConfigClockSource>
 80017a8:	1e03      	subs	r3, r0, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80017ac:	f000 f9d2 	bl	8001b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017bc:	1d3a      	adds	r2, r7, #4
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_TIM3_Init+0xa0>)
 80017c0:	0011      	movs	r1, r2
 80017c2:	0018      	movs	r0, r3
 80017c4:	f002 fdb4 	bl	8004330 <HAL_TIMEx_MasterConfigSynchronization>
 80017c8:	1e03      	subs	r3, r0, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80017cc:	f000 f9c2 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017d0:	46c0      	nop			; (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b008      	add	sp, #32
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000978 	.word	0x20000978
 80017dc:	40000400 	.word	0x40000400
 80017e0:	00003e7f 	.word	0x00003e7f

080017e4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ea:	2310      	movs	r3, #16
 80017ec:	18fb      	adds	r3, r7, r3
 80017ee:	0018      	movs	r0, r3
 80017f0:	2310      	movs	r3, #16
 80017f2:	001a      	movs	r2, r3
 80017f4:	2100      	movs	r1, #0
 80017f6:	f004 fedc 	bl	80065b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	0018      	movs	r0, r3
 80017fe:	230c      	movs	r3, #12
 8001800:	001a      	movs	r2, r3
 8001802:	2100      	movs	r1, #0
 8001804:	f004 fed5 	bl	80065b2 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001808:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <MX_TIM15_Init+0xa4>)
 800180a:	4a20      	ldr	r2, [pc, #128]	; (800188c <MX_TIM15_Init+0xa8>)
 800180c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 16000-1;
 800180e:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <MX_TIM15_Init+0xa4>)
 8001810:	4a1f      	ldr	r2, [pc, #124]	; (8001890 <MX_TIM15_Init+0xac>)
 8001812:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001814:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <MX_TIM15_Init+0xa4>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 15000;
 800181a:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <MX_TIM15_Init+0xa4>)
 800181c:	4a1d      	ldr	r2, [pc, #116]	; (8001894 <MX_TIM15_Init+0xb0>)
 800181e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <MX_TIM15_Init+0xa4>)
 8001822:	2200      	movs	r2, #0
 8001824:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001826:	4b18      	ldr	r3, [pc, #96]	; (8001888 <MX_TIM15_Init+0xa4>)
 8001828:	2200      	movs	r2, #0
 800182a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182c:	4b16      	ldr	r3, [pc, #88]	; (8001888 <MX_TIM15_Init+0xa4>)
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <MX_TIM15_Init+0xa4>)
 8001834:	0018      	movs	r0, r3
 8001836:	f002 f955 	bl	8003ae4 <HAL_TIM_Base_Init>
 800183a:	1e03      	subs	r3, r0, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 800183e:	f000 f989 	bl	8001b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001842:	2110      	movs	r1, #16
 8001844:	187b      	adds	r3, r7, r1
 8001846:	2280      	movs	r2, #128	; 0x80
 8001848:	0152      	lsls	r2, r2, #5
 800184a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800184c:	187a      	adds	r2, r7, r1
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <MX_TIM15_Init+0xa4>)
 8001850:	0011      	movs	r1, r2
 8001852:	0018      	movs	r0, r3
 8001854:	f002 fb5a 	bl	8003f0c <HAL_TIM_ConfigClockSource>
 8001858:	1e03      	subs	r3, r0, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 800185c:	f000 f97a 	bl	8001b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800186c:	1d3a      	adds	r2, r7, #4
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <MX_TIM15_Init+0xa4>)
 8001870:	0011      	movs	r1, r2
 8001872:	0018      	movs	r0, r3
 8001874:	f002 fd5c 	bl	8004330 <HAL_TIMEx_MasterConfigSynchronization>
 8001878:	1e03      	subs	r3, r0, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 800187c:	f000 f96a 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001880:	46c0      	nop			; (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	b008      	add	sp, #32
 8001886:	bd80      	pop	{r7, pc}
 8001888:	200009c4 	.word	0x200009c4
 800188c:	40014000 	.word	0x40014000
 8001890:	00003e7f 	.word	0x00003e7f
 8001894:	00003a98 	.word	0x00003a98

08001898 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800189c:	4b23      	ldr	r3, [pc, #140]	; (800192c <MX_USART2_UART_Init+0x94>)
 800189e:	4a24      	ldr	r2, [pc, #144]	; (8001930 <MX_USART2_UART_Init+0x98>)
 80018a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80018a2:	4b22      	ldr	r3, [pc, #136]	; (800192c <MX_USART2_UART_Init+0x94>)
 80018a4:	2296      	movs	r2, #150	; 0x96
 80018a6:	0192      	lsls	r2, r2, #6
 80018a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018aa:	4b20      	ldr	r3, [pc, #128]	; (800192c <MX_USART2_UART_Init+0x94>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018b0:	4b1e      	ldr	r3, [pc, #120]	; (800192c <MX_USART2_UART_Init+0x94>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018b6:	4b1d      	ldr	r3, [pc, #116]	; (800192c <MX_USART2_UART_Init+0x94>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <MX_USART2_UART_Init+0x94>)
 80018be:	220c      	movs	r2, #12
 80018c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c2:	4b1a      	ldr	r3, [pc, #104]	; (800192c <MX_USART2_UART_Init+0x94>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c8:	4b18      	ldr	r3, [pc, #96]	; (800192c <MX_USART2_UART_Init+0x94>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <MX_USART2_UART_Init+0x94>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <MX_USART2_UART_Init+0x94>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <MX_USART2_UART_Init+0x94>)
 80018dc:	2200      	movs	r2, #0
 80018de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <MX_USART2_UART_Init+0x94>)
 80018e2:	0018      	movs	r0, r3
 80018e4:	f002 fdac 	bl	8004440 <HAL_UART_Init>
 80018e8:	1e03      	subs	r3, r0, #0
 80018ea:	d001      	beq.n	80018f0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80018ec:	f000 f932 	bl	8001b54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f0:	4b0e      	ldr	r3, [pc, #56]	; (800192c <MX_USART2_UART_Init+0x94>)
 80018f2:	2100      	movs	r1, #0
 80018f4:	0018      	movs	r0, r3
 80018f6:	f004 fce1 	bl	80062bc <HAL_UARTEx_SetTxFifoThreshold>
 80018fa:	1e03      	subs	r3, r0, #0
 80018fc:	d001      	beq.n	8001902 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80018fe:	f000 f929 	bl	8001b54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <MX_USART2_UART_Init+0x94>)
 8001904:	2100      	movs	r1, #0
 8001906:	0018      	movs	r0, r3
 8001908:	f004 fd18 	bl	800633c <HAL_UARTEx_SetRxFifoThreshold>
 800190c:	1e03      	subs	r3, r0, #0
 800190e:	d001      	beq.n	8001914 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001910:	f000 f920 	bl	8001b54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <MX_USART2_UART_Init+0x94>)
 8001916:	0018      	movs	r0, r3
 8001918:	f004 fc96 	bl	8006248 <HAL_UARTEx_DisableFifoMode>
 800191c:	1e03      	subs	r3, r0, #0
 800191e:	d001      	beq.n	8001924 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001920:	f000 f918 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001924:	46c0      	nop			; (mov r8, r8)
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	20000a10 	.word	0x20000a10
 8001930:	40004400 	.word	0x40004400

08001934 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8001938:	4b16      	ldr	r3, [pc, #88]	; (8001994 <MX_USART5_UART_Init+0x60>)
 800193a:	4a17      	ldr	r2, [pc, #92]	; (8001998 <MX_USART5_UART_Init+0x64>)
 800193c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <MX_USART5_UART_Init+0x60>)
 8001940:	22e1      	movs	r2, #225	; 0xe1
 8001942:	0252      	lsls	r2, r2, #9
 8001944:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001946:	4b13      	ldr	r3, [pc, #76]	; (8001994 <MX_USART5_UART_Init+0x60>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <MX_USART5_UART_Init+0x60>)
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <MX_USART5_UART_Init+0x60>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001958:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <MX_USART5_UART_Init+0x60>)
 800195a:	220c      	movs	r2, #12
 800195c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <MX_USART5_UART_Init+0x60>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <MX_USART5_UART_Init+0x60>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <MX_USART5_UART_Init+0x60>)
 800196c:	2200      	movs	r2, #0
 800196e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <MX_USART5_UART_Init+0x60>)
 8001972:	2200      	movs	r2, #0
 8001974:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001976:	4b07      	ldr	r3, [pc, #28]	; (8001994 <MX_USART5_UART_Init+0x60>)
 8001978:	2200      	movs	r2, #0
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <MX_USART5_UART_Init+0x60>)
 800197e:	0018      	movs	r0, r3
 8001980:	f002 fd5e 	bl	8004440 <HAL_UART_Init>
 8001984:	1e03      	subs	r3, r0, #0
 8001986:	d001      	beq.n	800198c <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8001988:	f000 f8e4 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 800198c:	46c0      	nop			; (mov r8, r8)
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	20000aa4 	.word	0x20000aa4
 8001998:	40005000 	.word	0x40005000

0800199c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a1a      	ldr	r2, [pc, #104]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d102      	bne.n	80019b4 <HAL_TIM_PeriodElapsedCallback+0x18>
	  {
		timer_flag = 1 ;
 80019ae:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	801a      	strh	r2, [r3, #0]
	  }

   if(htim->Instance == TIM3)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a18      	ldr	r2, [pc, #96]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d102      	bne.n	80019c4 <HAL_TIM_PeriodElapsedCallback+0x28>
     {
	   dato_recivido = 1;// offset is 0 or page integers
 80019be:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]
     }

   if(htim->Instance == TIM15)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a16      	ldr	r2, [pc, #88]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d11d      	bne.n	8001a0a <HAL_TIM_PeriodElapsedCallback+0x6e>
     {
		printf("TIMER15\r\n\n");
 80019ce:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80019d0:	0018      	movs	r0, r3
 80019d2:	f004 fe97 	bl	8006704 <puts>
		printf("flag_timer: %d\r\n\n",flag_timer);
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	001a      	movs	r2, r3
 80019dc:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80019de:	0011      	movs	r1, r2
 80019e0:	0018      	movs	r0, r3
 80019e2:	f004 fdef 	bl	80065c4 <iprintf>
		if(flag_timer)
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00a      	beq.n	8001a04 <HAL_TIM_PeriodElapsedCallback+0x68>
		{
			flag_break = 1;
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	801a      	strh	r2, [r3, #0]
			printf("flag_break: %d\r\n\n",flag_break);
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	001a      	movs	r2, r3
 80019fa:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80019fc:	0011      	movs	r1, r2
 80019fe:	0018      	movs	r0, r3
 8001a00:	f004 fde0 	bl	80065c4 <iprintf>
		}
		flag_timer = 1;
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	801a      	strh	r2, [r3, #0]

     }
}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b002      	add	sp, #8
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	40012c00 	.word	0x40012c00
 8001a18:	20000d76 	.word	0x20000d76
 8001a1c:	40000400 	.word	0x40000400
 8001a20:	20000b48 	.word	0x20000b48
 8001a24:	40014000 	.word	0x40014000
 8001a28:	080081cc 	.word	0x080081cc
 8001a2c:	20000d70 	.word	0x20000d70
 8001a30:	080081d8 	.word	0x080081d8
 8001a34:	20000d78 	.word	0x20000d78
 8001a38:	080081ec 	.word	0x080081ec

08001a3c <MX_GPIO_Init_user>:



static void MX_GPIO_Init_user(void)
{
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b08b      	sub	sp, #44	; 0x2c
 8001a40:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a42:	2414      	movs	r4, #20
 8001a44:	193b      	adds	r3, r7, r4
 8001a46:	0018      	movs	r0, r3
 8001a48:	2314      	movs	r3, #20
 8001a4a:	001a      	movs	r2, r3
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	f004 fdb0 	bl	80065b2 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a52:	4b3d      	ldr	r3, [pc, #244]	; (8001b48 <MX_GPIO_Init_user+0x10c>)
 8001a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a56:	4b3c      	ldr	r3, [pc, #240]	; (8001b48 <MX_GPIO_Init_user+0x10c>)
 8001a58:	2104      	movs	r1, #4
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a5e:	4b3a      	ldr	r3, [pc, #232]	; (8001b48 <MX_GPIO_Init_user+0x10c>)
 8001a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a62:	2204      	movs	r2, #4
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a6a:	4b37      	ldr	r3, [pc, #220]	; (8001b48 <MX_GPIO_Init_user+0x10c>)
 8001a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a6e:	4b36      	ldr	r3, [pc, #216]	; (8001b48 <MX_GPIO_Init_user+0x10c>)
 8001a70:	2108      	movs	r1, #8
 8001a72:	430a      	orrs	r2, r1
 8001a74:	635a      	str	r2, [r3, #52]	; 0x34
 8001a76:	4b34      	ldr	r3, [pc, #208]	; (8001b48 <MX_GPIO_Init_user+0x10c>)
 8001a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a7a:	2208      	movs	r2, #8
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a82:	4b31      	ldr	r3, [pc, #196]	; (8001b48 <MX_GPIO_Init_user+0x10c>)
 8001a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a86:	4b30      	ldr	r3, [pc, #192]	; (8001b48 <MX_GPIO_Init_user+0x10c>)
 8001a88:	2101      	movs	r1, #1
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a8e:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <MX_GPIO_Init_user+0x10c>)
 8001a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a92:	2201      	movs	r2, #1
 8001a94:	4013      	ands	r3, r2
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9a:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <MX_GPIO_Init_user+0x10c>)
 8001a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a9e:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <MX_GPIO_Init_user+0x10c>)
 8001aa0:	2102      	movs	r1, #2
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	635a      	str	r2, [r3, #52]	; 0x34
 8001aa6:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <MX_GPIO_Init_user+0x10c>)
 8001aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aaa:	2202      	movs	r2, #2
 8001aac:	4013      	ands	r3, r2
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8001ab2:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <MX_GPIO_Init_user+0x110>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	2108      	movs	r1, #8
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f001 f95e 	bl	8002d7a <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(RST_COMM_GPIO_Port, RST_COMM_Pin, GPIO_PIN_SET);
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4823      	ldr	r0, [pc, #140]	; (8001b50 <MX_GPIO_Init_user+0x114>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	0019      	movs	r1, r3
 8001ac8:	f001 f957 	bl	8002d7a <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = LTE_ON_Pin;
 8001acc:	193b      	adds	r3, r7, r4
 8001ace:	2208      	movs	r2, #8
 8001ad0:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad2:	193b      	adds	r3, r7, r4
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	193b      	adds	r3, r7, r4
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	193b      	adds	r3, r7, r4
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(LTE_ON_GPIO_Port, &GPIO_InitStruct);
 8001ae4:	193b      	adds	r3, r7, r4
 8001ae6:	4a19      	ldr	r2, [pc, #100]	; (8001b4c <MX_GPIO_Init_user+0x110>)
 8001ae8:	0019      	movs	r1, r3
 8001aea:	0010      	movs	r0, r2
 8001aec:	f000 ffbc 	bl	8002a68 <HAL_GPIO_Init>


	  /*Configure GPIO pin : RST_COMM_Pin */
	  GPIO_InitStruct.Pin = RST_COMM_Pin;
 8001af0:	0021      	movs	r1, r4
 8001af2:	187b      	adds	r3, r7, r1
 8001af4:	2280      	movs	r2, #128	; 0x80
 8001af6:	0052      	lsls	r2, r2, #1
 8001af8:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afa:	000c      	movs	r4, r1
 8001afc:	193b      	adds	r3, r7, r4
 8001afe:	2201      	movs	r2, #1
 8001b00:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	193b      	adds	r3, r7, r4
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	193b      	adds	r3, r7, r4
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(RST_COMM_GPIO_Port, &GPIO_InitStruct);
 8001b0e:	193b      	adds	r3, r7, r4
 8001b10:	4a0f      	ldr	r2, [pc, #60]	; (8001b50 <MX_GPIO_Init_user+0x114>)
 8001b12:	0019      	movs	r1, r3
 8001b14:	0010      	movs	r0, r2
 8001b16:	f000 ffa7 	bl	8002a68 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
  /*Configure GPIO pin : PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001b1a:	0021      	movs	r1, r4
 8001b1c:	187b      	adds	r3, r7, r1
 8001b1e:	2280      	movs	r2, #128	; 0x80
 8001b20:	01d2      	lsls	r2, r2, #7
 8001b22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b24:	187b      	adds	r3, r7, r1
 8001b26:	2200      	movs	r2, #0
 8001b28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b2a:	187b      	adds	r3, r7, r1
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	187a      	adds	r2, r7, r1
 8001b32:	23a0      	movs	r3, #160	; 0xa0
 8001b34:	05db      	lsls	r3, r3, #23
 8001b36:	0011      	movs	r1, r2
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f000 ff95 	bl	8002a68 <HAL_GPIO_Init>


}
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b00b      	add	sp, #44	; 0x2c
 8001b44:	bd90      	pop	{r4, r7, pc}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	50000c00 	.word	0x50000c00
 8001b50:	50000400 	.word	0x50000400

08001b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b58:	b672      	cpsid	i
}
 8001b5a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <Error_Handler+0x8>
	...

08001b60 <prv_set_flag>:
  BL_UPDATE_REQUEST = 1 << 1,

  FLAG_BG_FAULT = 1 << 2,
};

static void prv_set_flag(uint32_t flag, bool value) {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	000a      	movs	r2, r1
 8001b6a:	1cfb      	adds	r3, r7, #3
 8001b6c:	701a      	strb	r2, [r3, #0]
    if (value) {
 8001b6e:	1cfb      	adds	r3, r7, #3
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d006      	beq.n	8001b84 <prv_set_flag+0x24>
        shared_data.flags |= flag;
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <prv_set_flag+0x3c>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <prv_set_flag+0x3c>)
 8001b80:	601a      	str	r2, [r3, #0]
    } else {
        shared_data.flags &= ~flag;
    }
}
 8001b82:	e006      	b.n	8001b92 <prv_set_flag+0x32>
        shared_data.flags &= ~flag;
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <prv_set_flag+0x3c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	43d2      	mvns	r2, r2
 8001b8c:	401a      	ands	r2, r3
 8001b8e:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <prv_set_flag+0x3c>)
 8001b90:	601a      	str	r2, [r3, #0]
}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	46bd      	mov	sp, r7
 8001b96:	b002      	add	sp, #8
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	200004f8 	.word	0x200004f8

08001ba0 <prv_get_flag>:

static bool prv_get_flag(uint32_t flag) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
    return shared_data.flags & flag;
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <prv_get_flag+0x20>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	1e5a      	subs	r2, r3, #1
 8001bb2:	4193      	sbcs	r3, r2
 8001bb4:	b2db      	uxtb	r3, r3
}
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	b002      	add	sp, #8
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	200004f8 	.word	0x200004f8

08001bc4 <shared_memory_init>:

void shared_memory_init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  if (shared_data.magic != MAGIC)
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <shared_memory_init+0x34>)
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	23e7      	movs	r3, #231	; 0xe7
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d00d      	beq.n	8001bf0 <shared_memory_init+0x2c>
  {
    printf("Shared memory uninitialized, setting MAGIC\r\n");
 8001bd4:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <shared_memory_init+0x38>)
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f004 fd94 	bl	8006704 <puts>
    memset(&shared_data, 0, sizeof (shared_data_t));
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <shared_memory_init+0x34>)
 8001bde:	2212      	movs	r2, #18
 8001be0:	2100      	movs	r1, #0
 8001be2:	0018      	movs	r0, r3
 8001be4:	f004 fce5 	bl	80065b2 <memset>
    shared_data.magic = MAGIC;
 8001be8:	23e7      	movs	r3, #231	; 0xe7
 8001bea:	005a      	lsls	r2, r3, #1
 8001bec:	4b02      	ldr	r3, [pc, #8]	; (8001bf8 <shared_memory_init+0x34>)
 8001bee:	605a      	str	r2, [r3, #4]
  }
}
 8001bf0:	46c0      	nop			; (mov r8, r8)
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	200004f8 	.word	0x200004f8
 8001bfc:	08008200 	.word	0x08008200

08001c00 <shared_mem_is_app_upd_requested>:

bool shared_mem_is_app_upd_requested(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  return prv_get_flag(APP_UPDATE_REQUEST);
 8001c04:	2001      	movs	r0, #1
 8001c06:	f7ff ffcb 	bl	8001ba0 <prv_get_flag>
 8001c0a:	0003      	movs	r3, r0
}
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <shared_mem_is_bl_upd_requested>:

bool shared_mem_is_bl_upd_requested(void)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	af00      	add	r7, sp, #0
  return prv_get_flag(BL_UPDATE_REQUEST);
 8001c16:	2002      	movs	r0, #2
 8001c18:	f7ff ffc2 	bl	8001ba0 <prv_get_flag>
 8001c1c:	0003      	movs	r3, r0
}
 8001c1e:	0018      	movs	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <shared_mem_increment_boot_counter>:
{
  return prv_get_flag(FLAG_BG_FAULT);
}

void shared_mem_increment_boot_counter(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  shared_data.boot_count++;
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <shared_mem_increment_boot_counter+0x18>)
 8001c2a:	7c1b      	ldrb	r3, [r3, #16]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	4b02      	ldr	r3, [pc, #8]	; (8001c3c <shared_mem_increment_boot_counter+0x18>)
 8001c32:	741a      	strb	r2, [r3, #16]
}
 8001c34:	46c0      	nop			; (mov r8, r8)
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	200004f8 	.word	0x200004f8

08001c40 <shared_mem_clear_boot_counter>:

void shared_mem_clear_boot_counter(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  shared_data.boot_count = 0;
 8001c44:	4b02      	ldr	r3, [pc, #8]	; (8001c50 <shared_mem_clear_boot_counter+0x10>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	741a      	strb	r2, [r3, #16]
}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	200004f8 	.word	0x200004f8

08001c54 <shared_mem_get_boot_counter>:

uint8_t shared_mem_get_boot_counter(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  return shared_data.boot_count;
 8001c58:	4b02      	ldr	r3, [pc, #8]	; (8001c64 <shared_mem_get_boot_counter+0x10>)
 8001c5a:	7c1b      	ldrb	r3, [r3, #16]
}
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	200004f8 	.word	0x200004f8

08001c68 <shared_mem_set_update_completed>:
{
  return shared_data.update_size;
}

void shared_mem_set_update_completed(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  memcpy(shared_data.fota_status, "DONE", 4);
 8001c6c:	4b02      	ldr	r3, [pc, #8]	; (8001c78 <shared_mem_set_update_completed+0x10>)
 8001c6e:	4a03      	ldr	r2, [pc, #12]	; (8001c7c <shared_mem_set_update_completed+0x14>)
 8001c70:	60da      	str	r2, [r3, #12]
}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	200004f8 	.word	0x200004f8
 8001c7c:	454e4f44 	.word	0x454e4f44

08001c80 <shared_mem_clear_ota_info>:

void shared_mem_clear_ota_info(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  shared_data.update_size = 0;
 8001c84:	4b02      	ldr	r3, [pc, #8]	; (8001c90 <shared_mem_clear_ota_info+0x10>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]

}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	200004f8 	.word	0x200004f8

08001c94 <shared_mem_set_app_update_requested>:

void shared_mem_set_app_update_requested(bool value)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	0002      	movs	r2, r0
 8001c9c:	1dfb      	adds	r3, r7, #7
 8001c9e:	701a      	strb	r2, [r3, #0]
  prv_set_flag(APP_UPDATE_REQUEST, value);
 8001ca0:	1dfb      	adds	r3, r7, #7
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f7ff ff5a 	bl	8001b60 <prv_set_flag>
}
 8001cac:	46c0      	nop			; (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b002      	add	sp, #8
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <shared_mem_set_update>:
  shared_data.update_size = size;
}


void shared_mem_set_update(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
	shared_data.update = 1;
 8001cb8:	4b02      	ldr	r3, [pc, #8]	; (8001cc4 <shared_mem_set_update+0x10>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	745a      	strb	r2, [r3, #17]
}
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	200004f8 	.word	0x200004f8

08001cc8 <shared_mem_get_update>:
{
	shared_data.update = 0;
}

int shared_mem_get_update(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
	return shared_data.update;
 8001ccc:	4b02      	ldr	r3, [pc, #8]	; (8001cd8 <shared_mem_get_update+0x10>)
 8001cce:	7c5b      	ldrb	r3, [r3, #17]
}
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	200004f8 	.word	0x200004f8

08001cdc <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001ce4:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <RetargetInit+0x28>)
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	601a      	str	r2, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001cea:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <RetargetInit+0x2c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6898      	ldr	r0, [r3, #8]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	f004 fd0f 	bl	8006718 <setvbuf>
}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b002      	add	sp, #8
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	20000d8c 	.word	0x20000d8c
 8001d08:	2000040c 	.word	0x2000040c

08001d0c <_isatty>:

int _isatty(int fd) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	db04      	blt.n	8001d24 <_isatty+0x18>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	dc01      	bgt.n	8001d24 <_isatty+0x18>
    return 1;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e005      	b.n	8001d30 <_isatty+0x24>

  errno = EBADF;
 8001d24:	f004 fc12 	bl	800654c <__errno>
 8001d28:	0003      	movs	r3, r0
 8001d2a:	2209      	movs	r2, #9
 8001d2c:	601a      	str	r2, [r3, #0]
  return 0;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	0018      	movs	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b002      	add	sp, #8
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <_write>:

int _write(int fd, char* ptr, int len) {
 8001d38:	b5b0      	push	{r4, r5, r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d002      	beq.n	8001d50 <_write+0x18>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d114      	bne.n	8001d7a <_write+0x42>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <_write+0x58>)
 8001d52:	6818      	ldr	r0, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	2517      	movs	r5, #23
 8001d5a:	197c      	adds	r4, r7, r5
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	425b      	negs	r3, r3
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	f002 fbc3 	bl	80044ec <HAL_UART_Transmit>
 8001d66:	0003      	movs	r3, r0
 8001d68:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 8001d6a:	197b      	adds	r3, r7, r5
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <_write+0x3e>
      return len;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	e008      	b.n	8001d88 <_write+0x50>
    else
      return EIO;
 8001d76:	2305      	movs	r3, #5
 8001d78:	e006      	b.n	8001d88 <_write+0x50>
  }
  errno = EBADF;
 8001d7a:	f004 fbe7 	bl	800654c <__errno>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	2209      	movs	r2, #9
 8001d82:	601a      	str	r2, [r3, #0]
  return -1;
 8001d84:	2301      	movs	r3, #1
 8001d86:	425b      	negs	r3, r3
}
 8001d88:	0018      	movs	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b006      	add	sp, #24
 8001d8e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d90:	20000d8c 	.word	0x20000d8c

08001d94 <_close>:

int _close(int fd) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	db04      	blt.n	8001dac <_close+0x18>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	dc01      	bgt.n	8001dac <_close+0x18>
    return 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	e006      	b.n	8001dba <_close+0x26>

  errno = EBADF;
 8001dac:	f004 fbce 	bl	800654c <__errno>
 8001db0:	0003      	movs	r3, r0
 8001db2:	2209      	movs	r2, #9
 8001db4:	601a      	str	r2, [r3, #0]
  return -1;
 8001db6:	2301      	movs	r3, #1
 8001db8:	425b      	negs	r3, r3
}
 8001dba:	0018      	movs	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	b002      	add	sp, #8
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001dce:	f004 fbbd 	bl	800654c <__errno>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	2209      	movs	r2, #9
 8001dd6:	601a      	str	r2, [r3, #0]
  return -1;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	425b      	negs	r3, r3
}
 8001ddc:	0018      	movs	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b004      	add	sp, #16
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <_read>:

int _read(int fd, char* ptr, int len) {
 8001de4:	b5b0      	push	{r4, r5, r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d113      	bne.n	8001e1e <_read+0x3a>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001df6:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <_read+0x50>)
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	2517      	movs	r5, #23
 8001dfc:	197c      	adds	r4, r7, r5
 8001dfe:	2301      	movs	r3, #1
 8001e00:	425b      	negs	r3, r3
 8001e02:	68b9      	ldr	r1, [r7, #8]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f002 fc0d 	bl	8004624 <HAL_UART_Receive>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 8001e0e:	197b      	adds	r3, r7, r5
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <_read+0x36>
      return 1;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e008      	b.n	8001e2c <_read+0x48>
    else
      return EIO;
 8001e1a:	2305      	movs	r3, #5
 8001e1c:	e006      	b.n	8001e2c <_read+0x48>
  }
  errno = EBADF;
 8001e1e:	f004 fb95 	bl	800654c <__errno>
 8001e22:	0003      	movs	r3, r0
 8001e24:	2209      	movs	r2, #9
 8001e26:	601a      	str	r2, [r3, #0]
  return -1;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	425b      	negs	r3, r3
}
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	b006      	add	sp, #24
 8001e32:	bdb0      	pop	{r4, r5, r7, pc}
 8001e34:	20000d8c 	.word	0x20000d8c

08001e38 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	db08      	blt.n	8001e5a <_fstat+0x22>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	dc05      	bgt.n	8001e5a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2280      	movs	r2, #128	; 0x80
 8001e52:	0192      	lsls	r2, r2, #6
 8001e54:	605a      	str	r2, [r3, #4]
    return 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	e005      	b.n	8001e66 <_fstat+0x2e>
  }

  errno = EBADF;
 8001e5a:	f004 fb77 	bl	800654c <__errno>
 8001e5e:	0003      	movs	r3, r0
 8001e60:	2209      	movs	r2, #9
 8001e62:	601a      	str	r2, [r3, #0]
  return 0;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	0018      	movs	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	b002      	add	sp, #8
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e76:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <HAL_MspInit+0x44>)
 8001e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <HAL_MspInit+0x44>)
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	641a      	str	r2, [r3, #64]	; 0x40
 8001e82:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <HAL_MspInit+0x44>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	2201      	movs	r2, #1
 8001e88:	4013      	ands	r3, r2
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <HAL_MspInit+0x44>)
 8001e90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e92:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <HAL_MspInit+0x44>)
 8001e94:	2180      	movs	r1, #128	; 0x80
 8001e96:	0549      	lsls	r1, r1, #21
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_MspInit+0x44>)
 8001e9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	055b      	lsls	r3, r3, #21
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b002      	add	sp, #8
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	40021000 	.word	0x40021000

08001eb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a29      	ldr	r2, [pc, #164]	; (8001f6c <HAL_TIM_Base_MspInit+0xb4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d11e      	bne.n	8001f08 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eca:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <HAL_TIM_Base_MspInit+0xb8>)
 8001ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ece:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <HAL_TIM_Base_MspInit+0xb8>)
 8001ed0:	2180      	movs	r1, #128	; 0x80
 8001ed2:	0109      	lsls	r1, r1, #4
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	641a      	str	r2, [r3, #64]	; 0x40
 8001ed8:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <HAL_TIM_Base_MspInit+0xb8>)
 8001eda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	200d      	movs	r0, #13
 8001eec:	f000 fb12 	bl	8002514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001ef0:	200d      	movs	r0, #13
 8001ef2:	f000 fb24 	bl	800253e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	200e      	movs	r0, #14
 8001efc:	f000 fb0a 	bl	8002514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f00:	200e      	movs	r0, #14
 8001f02:	f000 fb1c 	bl	800253e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001f06:	e02c      	b.n	8001f62 <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM3)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a19      	ldr	r2, [pc, #100]	; (8001f74 <HAL_TIM_Base_MspInit+0xbc>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d10c      	bne.n	8001f2c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f12:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <HAL_TIM_Base_MspInit+0xb8>)
 8001f14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f16:	4b16      	ldr	r3, [pc, #88]	; (8001f70 <HAL_TIM_Base_MspInit+0xb8>)
 8001f18:	2102      	movs	r1, #2
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f1e:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <HAL_TIM_Base_MspInit+0xb8>)
 8001f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f22:	2202      	movs	r2, #2
 8001f24:	4013      	ands	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]
}
 8001f2a:	e01a      	b.n	8001f62 <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM15)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a11      	ldr	r2, [pc, #68]	; (8001f78 <HAL_TIM_Base_MspInit+0xc0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d115      	bne.n	8001f62 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <HAL_TIM_Base_MspInit+0xb8>)
 8001f38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <HAL_TIM_Base_MspInit+0xb8>)
 8001f3c:	2180      	movs	r1, #128	; 0x80
 8001f3e:	0249      	lsls	r1, r1, #9
 8001f40:	430a      	orrs	r2, r1
 8001f42:	641a      	str	r2, [r3, #64]	; 0x40
 8001f44:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <HAL_TIM_Base_MspInit+0xb8>)
 8001f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	025b      	lsls	r3, r3, #9
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2100      	movs	r1, #0
 8001f56:	2014      	movs	r0, #20
 8001f58:	f000 fadc 	bl	8002514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001f5c:	2014      	movs	r0, #20
 8001f5e:	f000 faee 	bl	800253e <HAL_NVIC_EnableIRQ>
}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b006      	add	sp, #24
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	40012c00 	.word	0x40012c00
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40000400 	.word	0x40000400
 8001f78:	40014000 	.word	0x40014000

08001f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b097      	sub	sp, #92	; 0x5c
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	2344      	movs	r3, #68	; 0x44
 8001f86:	18fb      	adds	r3, r7, r3
 8001f88:	0018      	movs	r0, r3
 8001f8a:	2314      	movs	r3, #20
 8001f8c:	001a      	movs	r2, r3
 8001f8e:	2100      	movs	r1, #0
 8001f90:	f004 fb0f 	bl	80065b2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f94:	2418      	movs	r4, #24
 8001f96:	193b      	adds	r3, r7, r4
 8001f98:	0018      	movs	r0, r3
 8001f9a:	232c      	movs	r3, #44	; 0x2c
 8001f9c:	001a      	movs	r2, r3
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	f004 fb07 	bl	80065b2 <memset>
  if(huart->Instance==USART2)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a45      	ldr	r2, [pc, #276]	; (80020c0 <HAL_UART_MspInit+0x144>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d147      	bne.n	800203e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fae:	193b      	adds	r3, r7, r4
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fb4:	193b      	adds	r3, r7, r4
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fba:	193b      	adds	r3, r7, r4
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f001 fc09 	bl	80037d4 <HAL_RCCEx_PeriphCLKConfig>
 8001fc2:	1e03      	subs	r3, r0, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001fc6:	f7ff fdc5 	bl	8001b54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fca:	4b3e      	ldr	r3, [pc, #248]	; (80020c4 <HAL_UART_MspInit+0x148>)
 8001fcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fce:	4b3d      	ldr	r3, [pc, #244]	; (80020c4 <HAL_UART_MspInit+0x148>)
 8001fd0:	2180      	movs	r1, #128	; 0x80
 8001fd2:	0289      	lsls	r1, r1, #10
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fd8:	4b3a      	ldr	r3, [pc, #232]	; (80020c4 <HAL_UART_MspInit+0x148>)
 8001fda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fdc:	2380      	movs	r3, #128	; 0x80
 8001fde:	029b      	lsls	r3, r3, #10
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe6:	4b37      	ldr	r3, [pc, #220]	; (80020c4 <HAL_UART_MspInit+0x148>)
 8001fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fea:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <HAL_UART_MspInit+0x148>)
 8001fec:	2101      	movs	r1, #1
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ff2:	4b34      	ldr	r3, [pc, #208]	; (80020c4 <HAL_UART_MspInit+0x148>)
 8001ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ffe:	2144      	movs	r1, #68	; 0x44
 8002000:	187b      	adds	r3, r7, r1
 8002002:	220c      	movs	r2, #12
 8002004:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002006:	187b      	adds	r3, r7, r1
 8002008:	2202      	movs	r2, #2
 800200a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	187b      	adds	r3, r7, r1
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002012:	187b      	adds	r3, r7, r1
 8002014:	2200      	movs	r2, #0
 8002016:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002018:	187b      	adds	r3, r7, r1
 800201a:	2201      	movs	r2, #1
 800201c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201e:	187a      	adds	r2, r7, r1
 8002020:	23a0      	movs	r3, #160	; 0xa0
 8002022:	05db      	lsls	r3, r3, #23
 8002024:	0011      	movs	r1, r2
 8002026:	0018      	movs	r0, r3
 8002028:	f000 fd1e 	bl	8002a68 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800202c:	2200      	movs	r2, #0
 800202e:	2100      	movs	r1, #0
 8002030:	201c      	movs	r0, #28
 8002032:	f000 fa6f 	bl	8002514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002036:	201c      	movs	r0, #28
 8002038:	f000 fa81 	bl	800253e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 800203c:	e03c      	b.n	80020b8 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART5)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a21      	ldr	r2, [pc, #132]	; (80020c8 <HAL_UART_MspInit+0x14c>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d137      	bne.n	80020b8 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART5_CLK_ENABLE();
 8002048:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <HAL_UART_MspInit+0x148>)
 800204a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800204c:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <HAL_UART_MspInit+0x148>)
 800204e:	2180      	movs	r1, #128	; 0x80
 8002050:	0049      	lsls	r1, r1, #1
 8002052:	430a      	orrs	r2, r1
 8002054:	63da      	str	r2, [r3, #60]	; 0x3c
 8002056:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <HAL_UART_MspInit+0x148>)
 8002058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4013      	ands	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002064:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <HAL_UART_MspInit+0x148>)
 8002066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002068:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <HAL_UART_MspInit+0x148>)
 800206a:	2102      	movs	r1, #2
 800206c:	430a      	orrs	r2, r1
 800206e:	635a      	str	r2, [r3, #52]	; 0x34
 8002070:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <HAL_UART_MspInit+0x148>)
 8002072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002074:	2202      	movs	r2, #2
 8002076:	4013      	ands	r3, r2
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800207c:	2144      	movs	r1, #68	; 0x44
 800207e:	187b      	adds	r3, r7, r1
 8002080:	2203      	movs	r2, #3
 8002082:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	187b      	adds	r3, r7, r1
 8002086:	2202      	movs	r2, #2
 8002088:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	187b      	adds	r3, r7, r1
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002090:	187b      	adds	r3, r7, r1
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART5;
 8002096:	187b      	adds	r3, r7, r1
 8002098:	2208      	movs	r2, #8
 800209a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209c:	187b      	adds	r3, r7, r1
 800209e:	4a0b      	ldr	r2, [pc, #44]	; (80020cc <HAL_UART_MspInit+0x150>)
 80020a0:	0019      	movs	r1, r3
 80020a2:	0010      	movs	r0, r2
 80020a4:	f000 fce0 	bl	8002a68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_5_6_IRQn, 0, 0);
 80020a8:	2200      	movs	r2, #0
 80020aa:	2100      	movs	r1, #0
 80020ac:	201d      	movs	r0, #29
 80020ae:	f000 fa31 	bl	8002514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_IRQn);
 80020b2:	201d      	movs	r0, #29
 80020b4:	f000 fa43 	bl	800253e <HAL_NVIC_EnableIRQ>
}
 80020b8:	46c0      	nop			; (mov r8, r8)
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b017      	add	sp, #92	; 0x5c
 80020be:	bd90      	pop	{r4, r7, pc}
 80020c0:	40004400 	.word	0x40004400
 80020c4:	40021000 	.word	0x40021000
 80020c8:	40005000 	.word	0x40005000
 80020cc:	50000400 	.word	0x50000400

080020d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020d4:	e7fe      	b.n	80020d4 <NMI_Handler+0x4>

080020d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020da:	e7fe      	b.n	80020da <HardFault_Handler+0x4>

080020dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80020e0:	46c0      	nop			; (mov r8, r8)
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f4:	f000 f910 	bl	8002318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020f8:	46c0      	nop			; (mov r8, r8)
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002104:	4b03      	ldr	r3, [pc, #12]	; (8002114 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8002106:	0018      	movs	r0, r3
 8002108:	f001 fdce 	bl	8003ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800210c:	46c0      	nop			; (mov r8, r8)
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	2000092c 	.word	0x2000092c

08002118 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800211c:	4b03      	ldr	r3, [pc, #12]	; (800212c <TIM1_CC_IRQHandler+0x14>)
 800211e:	0018      	movs	r0, r3
 8002120:	f001 fdc2 	bl	8003ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002124:	46c0      	nop			; (mov r8, r8)
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	2000092c 	.word	0x2000092c

08002130 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <TIM15_IRQHandler+0x14>)
 8002136:	0018      	movs	r0, r3
 8002138:	f001 fdb6 	bl	8003ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800213c:	46c0      	nop			; (mov r8, r8)
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	200009c4 	.word	0x200009c4

08002148 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800214c:	4b03      	ldr	r3, [pc, #12]	; (800215c <USART2_IRQHandler+0x14>)
 800214e:	0018      	movs	r0, r3
 8002150:	f002 fb4a 	bl	80047e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002154:	46c0      	nop			; (mov r8, r8)
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	20000a10 	.word	0x20000a10

08002160 <USART3_4_5_6_IRQHandler>:

/**
  * @brief This function handles USART3, USART4, USART5, USART6 globlal Interrupts (combined with EXTI 28).
  */
void USART3_4_5_6_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_5_6_IRQn 0 */

  /* USER CODE END USART3_4_5_6_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002164:	4b03      	ldr	r3, [pc, #12]	; (8002174 <USART3_4_5_6_IRQHandler+0x14>)
 8002166:	0018      	movs	r0, r3
 8002168:	f002 fb3e 	bl	80047e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_5_6_IRQn 1 */

  /* USER CODE END USART3_4_5_6_IRQn 1 */
}
 800216c:	46c0      	nop			; (mov r8, r8)
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	20000aa4 	.word	0x20000aa4

08002178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002180:	4a14      	ldr	r2, [pc, #80]	; (80021d4 <_sbrk+0x5c>)
 8002182:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <_sbrk+0x60>)
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800218c:	4b13      	ldr	r3, [pc, #76]	; (80021dc <_sbrk+0x64>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d102      	bne.n	800219a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <_sbrk+0x64>)
 8002196:	4a12      	ldr	r2, [pc, #72]	; (80021e0 <_sbrk+0x68>)
 8002198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <_sbrk+0x64>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	18d3      	adds	r3, r2, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d207      	bcs.n	80021b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a8:	f004 f9d0 	bl	800654c <__errno>
 80021ac:	0003      	movs	r3, r0
 80021ae:	220c      	movs	r2, #12
 80021b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021b2:	2301      	movs	r3, #1
 80021b4:	425b      	negs	r3, r3
 80021b6:	e009      	b.n	80021cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <_sbrk+0x64>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021be:	4b07      	ldr	r3, [pc, #28]	; (80021dc <_sbrk+0x64>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	18d2      	adds	r2, r2, r3
 80021c6:	4b05      	ldr	r3, [pc, #20]	; (80021dc <_sbrk+0x64>)
 80021c8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80021ca:	68fb      	ldr	r3, [r7, #12]
}
 80021cc:	0018      	movs	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	b006      	add	sp, #24
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20024000 	.word	0x20024000
 80021d8:	00000400 	.word	0x00000400
 80021dc:	20000d90 	.word	0x20000d90
 80021e0:	20000dc8 	.word	0x20000dc8

080021e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021f0:	480d      	ldr	r0, [pc, #52]	; (8002228 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80021f4:	f7ff fff6 	bl	80021e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021f8:	480c      	ldr	r0, [pc, #48]	; (800222c <LoopForever+0x6>)
  ldr r1, =_edata
 80021fa:	490d      	ldr	r1, [pc, #52]	; (8002230 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021fc:	4a0d      	ldr	r2, [pc, #52]	; (8002234 <LoopForever+0xe>)
  movs r3, #0
 80021fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002200:	e002      	b.n	8002208 <LoopCopyDataInit>

08002202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002206:	3304      	adds	r3, #4

08002208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800220a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800220c:	d3f9      	bcc.n	8002202 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800220e:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002210:	4c0a      	ldr	r4, [pc, #40]	; (800223c <LoopForever+0x16>)
  movs r3, #0
 8002212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002214:	e001      	b.n	800221a <LoopFillZerobss>

08002216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002218:	3204      	adds	r2, #4

0800221a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800221a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800221c:	d3fb      	bcc.n	8002216 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800221e:	f004 f99b 	bl	8006558 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002222:	f7ff f86f 	bl	8001304 <main>

08002226 <LoopForever>:

LoopForever:
  b LoopForever
 8002226:	e7fe      	b.n	8002226 <LoopForever>
  ldr   r0, =_estack
 8002228:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800222c:	20000400 	.word	0x20000400
  ldr r1, =_edata
 8002230:	200004f8 	.word	0x200004f8
  ldr r2, =_sidata
 8002234:	08008554 	.word	0x08008554
  ldr r2, =_sbss
 8002238:	20000510 	.word	0x20000510
  ldr r4, =_ebss
 800223c:	20000dc4 	.word	0x20000dc4

08002240 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002240:	e7fe      	b.n	8002240 <ADC1_IRQHandler>
	...

08002244 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800224a:	1dfb      	adds	r3, r7, #7
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <HAL_Init+0x3c>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <HAL_Init+0x3c>)
 8002256:	2180      	movs	r1, #128	; 0x80
 8002258:	0049      	lsls	r1, r1, #1
 800225a:	430a      	orrs	r2, r1
 800225c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800225e:	2003      	movs	r0, #3
 8002260:	f000 f810 	bl	8002284 <HAL_InitTick>
 8002264:	1e03      	subs	r3, r0, #0
 8002266:	d003      	beq.n	8002270 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002268:	1dfb      	adds	r3, r7, #7
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
 800226e:	e001      	b.n	8002274 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002270:	f7ff fdfe 	bl	8001e70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002274:	1dfb      	adds	r3, r7, #7
 8002276:	781b      	ldrb	r3, [r3, #0]
}
 8002278:	0018      	movs	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	b002      	add	sp, #8
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40022000 	.word	0x40022000

08002284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002284:	b590      	push	{r4, r7, lr}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800228c:	230f      	movs	r3, #15
 800228e:	18fb      	adds	r3, r7, r3
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002294:	4b1d      	ldr	r3, [pc, #116]	; (800230c <HAL_InitTick+0x88>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d02b      	beq.n	80022f4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800229c:	4b1c      	ldr	r3, [pc, #112]	; (8002310 <HAL_InitTick+0x8c>)
 800229e:	681c      	ldr	r4, [r3, #0]
 80022a0:	4b1a      	ldr	r3, [pc, #104]	; (800230c <HAL_InitTick+0x88>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	0019      	movs	r1, r3
 80022a6:	23fa      	movs	r3, #250	; 0xfa
 80022a8:	0098      	lsls	r0, r3, #2
 80022aa:	f7fd ff3b 	bl	8000124 <__udivsi3>
 80022ae:	0003      	movs	r3, r0
 80022b0:	0019      	movs	r1, r3
 80022b2:	0020      	movs	r0, r4
 80022b4:	f7fd ff36 	bl	8000124 <__udivsi3>
 80022b8:	0003      	movs	r3, r0
 80022ba:	0018      	movs	r0, r3
 80022bc:	f000 f953 	bl	8002566 <HAL_SYSTICK_Config>
 80022c0:	1e03      	subs	r3, r0, #0
 80022c2:	d112      	bne.n	80022ea <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	d80a      	bhi.n	80022e0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	2301      	movs	r3, #1
 80022ce:	425b      	negs	r3, r3
 80022d0:	2200      	movs	r2, #0
 80022d2:	0018      	movs	r0, r3
 80022d4:	f000 f91e 	bl	8002514 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022d8:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <HAL_InitTick+0x90>)
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	e00d      	b.n	80022fc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80022e0:	230f      	movs	r3, #15
 80022e2:	18fb      	adds	r3, r7, r3
 80022e4:	2201      	movs	r2, #1
 80022e6:	701a      	strb	r2, [r3, #0]
 80022e8:	e008      	b.n	80022fc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022ea:	230f      	movs	r3, #15
 80022ec:	18fb      	adds	r3, r7, r3
 80022ee:	2201      	movs	r2, #1
 80022f0:	701a      	strb	r2, [r3, #0]
 80022f2:	e003      	b.n	80022fc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022f4:	230f      	movs	r3, #15
 80022f6:	18fb      	adds	r3, r7, r3
 80022f8:	2201      	movs	r2, #1
 80022fa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80022fc:	230f      	movs	r3, #15
 80022fe:	18fb      	adds	r3, r7, r3
 8002300:	781b      	ldrb	r3, [r3, #0]
}
 8002302:	0018      	movs	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	b005      	add	sp, #20
 8002308:	bd90      	pop	{r4, r7, pc}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	20000408 	.word	0x20000408
 8002310:	20000400 	.word	0x20000400
 8002314:	20000404 	.word	0x20000404

08002318 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <HAL_IncTick+0x1c>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	001a      	movs	r2, r3
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_IncTick+0x20>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	18d2      	adds	r2, r2, r3
 8002328:	4b03      	ldr	r3, [pc, #12]	; (8002338 <HAL_IncTick+0x20>)
 800232a:	601a      	str	r2, [r3, #0]
}
 800232c:	46c0      	nop			; (mov r8, r8)
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	20000408 	.word	0x20000408
 8002338:	20000d94 	.word	0x20000d94

0800233c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  return uwTick;
 8002340:	4b02      	ldr	r3, [pc, #8]	; (800234c <HAL_GetTick+0x10>)
 8002342:	681b      	ldr	r3, [r3, #0]
}
 8002344:	0018      	movs	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	20000d94 	.word	0x20000d94

08002350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002358:	f7ff fff0 	bl	800233c <HAL_GetTick>
 800235c:	0003      	movs	r3, r0
 800235e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	3301      	adds	r3, #1
 8002368:	d005      	beq.n	8002376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_Delay+0x44>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	001a      	movs	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	189b      	adds	r3, r3, r2
 8002374:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	f7ff ffe0 	bl	800233c <HAL_GetTick>
 800237c:	0002      	movs	r2, r0
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	429a      	cmp	r2, r3
 8002386:	d8f7      	bhi.n	8002378 <HAL_Delay+0x28>
  {
  }
}
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	46bd      	mov	sp, r7
 800238e:	b004      	add	sp, #16
 8002390:	bd80      	pop	{r7, pc}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	20000408 	.word	0x20000408

08002398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	0002      	movs	r2, r0
 80023a0:	1dfb      	adds	r3, r7, #7
 80023a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023a4:	1dfb      	adds	r3, r7, #7
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b7f      	cmp	r3, #127	; 0x7f
 80023aa:	d809      	bhi.n	80023c0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ac:	1dfb      	adds	r3, r7, #7
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	001a      	movs	r2, r3
 80023b2:	231f      	movs	r3, #31
 80023b4:	401a      	ands	r2, r3
 80023b6:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <__NVIC_EnableIRQ+0x30>)
 80023b8:	2101      	movs	r1, #1
 80023ba:	4091      	lsls	r1, r2
 80023bc:	000a      	movs	r2, r1
 80023be:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80023c0:	46c0      	nop			; (mov r8, r8)
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b002      	add	sp, #8
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	e000e100 	.word	0xe000e100

080023cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023cc:	b590      	push	{r4, r7, lr}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	0002      	movs	r2, r0
 80023d4:	6039      	str	r1, [r7, #0]
 80023d6:	1dfb      	adds	r3, r7, #7
 80023d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023da:	1dfb      	adds	r3, r7, #7
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b7f      	cmp	r3, #127	; 0x7f
 80023e0:	d828      	bhi.n	8002434 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023e2:	4a2f      	ldr	r2, [pc, #188]	; (80024a0 <__NVIC_SetPriority+0xd4>)
 80023e4:	1dfb      	adds	r3, r7, #7
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	b25b      	sxtb	r3, r3
 80023ea:	089b      	lsrs	r3, r3, #2
 80023ec:	33c0      	adds	r3, #192	; 0xc0
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	589b      	ldr	r3, [r3, r2]
 80023f2:	1dfa      	adds	r2, r7, #7
 80023f4:	7812      	ldrb	r2, [r2, #0]
 80023f6:	0011      	movs	r1, r2
 80023f8:	2203      	movs	r2, #3
 80023fa:	400a      	ands	r2, r1
 80023fc:	00d2      	lsls	r2, r2, #3
 80023fe:	21ff      	movs	r1, #255	; 0xff
 8002400:	4091      	lsls	r1, r2
 8002402:	000a      	movs	r2, r1
 8002404:	43d2      	mvns	r2, r2
 8002406:	401a      	ands	r2, r3
 8002408:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	019b      	lsls	r3, r3, #6
 800240e:	22ff      	movs	r2, #255	; 0xff
 8002410:	401a      	ands	r2, r3
 8002412:	1dfb      	adds	r3, r7, #7
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	0018      	movs	r0, r3
 8002418:	2303      	movs	r3, #3
 800241a:	4003      	ands	r3, r0
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002420:	481f      	ldr	r0, [pc, #124]	; (80024a0 <__NVIC_SetPriority+0xd4>)
 8002422:	1dfb      	adds	r3, r7, #7
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	b25b      	sxtb	r3, r3
 8002428:	089b      	lsrs	r3, r3, #2
 800242a:	430a      	orrs	r2, r1
 800242c:	33c0      	adds	r3, #192	; 0xc0
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002432:	e031      	b.n	8002498 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002434:	4a1b      	ldr	r2, [pc, #108]	; (80024a4 <__NVIC_SetPriority+0xd8>)
 8002436:	1dfb      	adds	r3, r7, #7
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	0019      	movs	r1, r3
 800243c:	230f      	movs	r3, #15
 800243e:	400b      	ands	r3, r1
 8002440:	3b08      	subs	r3, #8
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3306      	adds	r3, #6
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	18d3      	adds	r3, r2, r3
 800244a:	3304      	adds	r3, #4
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	1dfa      	adds	r2, r7, #7
 8002450:	7812      	ldrb	r2, [r2, #0]
 8002452:	0011      	movs	r1, r2
 8002454:	2203      	movs	r2, #3
 8002456:	400a      	ands	r2, r1
 8002458:	00d2      	lsls	r2, r2, #3
 800245a:	21ff      	movs	r1, #255	; 0xff
 800245c:	4091      	lsls	r1, r2
 800245e:	000a      	movs	r2, r1
 8002460:	43d2      	mvns	r2, r2
 8002462:	401a      	ands	r2, r3
 8002464:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	019b      	lsls	r3, r3, #6
 800246a:	22ff      	movs	r2, #255	; 0xff
 800246c:	401a      	ands	r2, r3
 800246e:	1dfb      	adds	r3, r7, #7
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	0018      	movs	r0, r3
 8002474:	2303      	movs	r3, #3
 8002476:	4003      	ands	r3, r0
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800247c:	4809      	ldr	r0, [pc, #36]	; (80024a4 <__NVIC_SetPriority+0xd8>)
 800247e:	1dfb      	adds	r3, r7, #7
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	001c      	movs	r4, r3
 8002484:	230f      	movs	r3, #15
 8002486:	4023      	ands	r3, r4
 8002488:	3b08      	subs	r3, #8
 800248a:	089b      	lsrs	r3, r3, #2
 800248c:	430a      	orrs	r2, r1
 800248e:	3306      	adds	r3, #6
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	18c3      	adds	r3, r0, r3
 8002494:	3304      	adds	r3, #4
 8002496:	601a      	str	r2, [r3, #0]
}
 8002498:	46c0      	nop			; (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	b003      	add	sp, #12
 800249e:	bd90      	pop	{r4, r7, pc}
 80024a0:	e000e100 	.word	0xe000e100
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80024ac:	f3bf 8f4f 	dsb	sy
}
 80024b0:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b2:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <__NVIC_SystemReset+0x1c>)
 80024b4:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <__NVIC_SystemReset+0x20>)
 80024b6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80024b8:	f3bf 8f4f 	dsb	sy
}
 80024bc:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	e7fd      	b.n	80024be <__NVIC_SystemReset+0x16>
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	e000ed00 	.word	0xe000ed00
 80024c8:	05fa0004 	.word	0x05fa0004

080024cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	1e5a      	subs	r2, r3, #1
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	045b      	lsls	r3, r3, #17
 80024dc:	429a      	cmp	r2, r3
 80024de:	d301      	bcc.n	80024e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024e0:	2301      	movs	r3, #1
 80024e2:	e010      	b.n	8002506 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024e4:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <SysTick_Config+0x44>)
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	3a01      	subs	r2, #1
 80024ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ec:	2301      	movs	r3, #1
 80024ee:	425b      	negs	r3, r3
 80024f0:	2103      	movs	r1, #3
 80024f2:	0018      	movs	r0, r3
 80024f4:	f7ff ff6a 	bl	80023cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <SysTick_Config+0x44>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024fe:	4b04      	ldr	r3, [pc, #16]	; (8002510 <SysTick_Config+0x44>)
 8002500:	2207      	movs	r2, #7
 8002502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002504:	2300      	movs	r3, #0
}
 8002506:	0018      	movs	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	b002      	add	sp, #8
 800250c:	bd80      	pop	{r7, pc}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	e000e010 	.word	0xe000e010

08002514 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	210f      	movs	r1, #15
 8002520:	187b      	adds	r3, r7, r1
 8002522:	1c02      	adds	r2, r0, #0
 8002524:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	187b      	adds	r3, r7, r1
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	b25b      	sxtb	r3, r3
 800252e:	0011      	movs	r1, r2
 8002530:	0018      	movs	r0, r3
 8002532:	f7ff ff4b 	bl	80023cc <__NVIC_SetPriority>
}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	46bd      	mov	sp, r7
 800253a:	b004      	add	sp, #16
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	0002      	movs	r2, r0
 8002546:	1dfb      	adds	r3, r7, #7
 8002548:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800254a:	1dfb      	adds	r3, r7, #7
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	b25b      	sxtb	r3, r3
 8002550:	0018      	movs	r0, r3
 8002552:	f7ff ff21 	bl	8002398 <__NVIC_EnableIRQ>
}
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	46bd      	mov	sp, r7
 800255a:	b002      	add	sp, #8
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002562:	f7ff ffa1 	bl	80024a8 <__NVIC_SystemReset>

08002566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	0018      	movs	r0, r3
 8002572:	f7ff ffab 	bl	80024cc <SysTick_Config>
 8002576:	0003      	movs	r3, r0
}
 8002578:	0018      	movs	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	b002      	add	sp, #8
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e04f      	b.n	8002632 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2225      	movs	r2, #37	; 0x25
 8002596:	5c9b      	ldrb	r3, [r3, r2]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d008      	beq.n	80025b0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2204      	movs	r2, #4
 80025a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2224      	movs	r2, #36	; 0x24
 80025a8:	2100      	movs	r1, #0
 80025aa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e040      	b.n	8002632 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	210e      	movs	r1, #14
 80025bc:	438a      	bics	r2, r1
 80025be:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ca:	491c      	ldr	r1, [pc, #112]	; (800263c <HAL_DMA_Abort+0xbc>)
 80025cc:	400a      	ands	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2101      	movs	r1, #1
 80025dc:	438a      	bics	r2, r1
 80025de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e4:	221c      	movs	r2, #28
 80025e6:	401a      	ands	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	2101      	movs	r1, #1
 80025ee:	4091      	lsls	r1, r2
 80025f0:	000a      	movs	r2, r1
 80025f2:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80025fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00c      	beq.n	8002620 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002610:	490a      	ldr	r1, [pc, #40]	; (800263c <HAL_DMA_Abort+0xbc>)
 8002612:	400a      	ands	r2, r1
 8002614:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800261e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2225      	movs	r2, #37	; 0x25
 8002624:	2101      	movs	r1, #1
 8002626:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2224      	movs	r2, #36	; 0x24
 800262c:	2100      	movs	r1, #0
 800262e:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	0018      	movs	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	b002      	add	sp, #8
 8002638:	bd80      	pop	{r7, pc}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	fffffeff 	.word	0xfffffeff

08002640 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002648:	210f      	movs	r1, #15
 800264a:	187b      	adds	r3, r7, r1
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2225      	movs	r2, #37	; 0x25
 8002654:	5c9b      	ldrb	r3, [r3, r2]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d006      	beq.n	800266a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2204      	movs	r2, #4
 8002660:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002662:	187b      	adds	r3, r7, r1
 8002664:	2201      	movs	r2, #1
 8002666:	701a      	strb	r2, [r3, #0]
 8002668:	e048      	b.n	80026fc <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	210e      	movs	r1, #14
 8002676:	438a      	bics	r2, r1
 8002678:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2101      	movs	r1, #1
 8002686:	438a      	bics	r2, r1
 8002688:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002694:	491d      	ldr	r1, [pc, #116]	; (800270c <HAL_DMA_Abort_IT+0xcc>)
 8002696:	400a      	ands	r2, r1
 8002698:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269e:	221c      	movs	r2, #28
 80026a0:	401a      	ands	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	2101      	movs	r1, #1
 80026a8:	4091      	lsls	r1, r2
 80026aa:	000a      	movs	r2, r1
 80026ac:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80026b6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00c      	beq.n	80026da <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ca:	4910      	ldr	r1, [pc, #64]	; (800270c <HAL_DMA_Abort_IT+0xcc>)
 80026cc:	400a      	ands	r2, r1
 80026ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80026d8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2225      	movs	r2, #37	; 0x25
 80026de:	2101      	movs	r1, #1
 80026e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2224      	movs	r2, #36	; 0x24
 80026e6:	2100      	movs	r1, #0
 80026e8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d004      	beq.n	80026fc <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	0010      	movs	r0, r2
 80026fa:	4798      	blx	r3
    }
  }
  return status;
 80026fc:	230f      	movs	r3, #15
 80026fe:	18fb      	adds	r3, r7, r3
 8002700:	781b      	ldrb	r3, [r3, #0]
}
 8002702:	0018      	movs	r0, r3
 8002704:	46bd      	mov	sp, r7
 8002706:	b004      	add	sp, #16
 8002708:	bd80      	pop	{r7, pc}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	fffffeff 	.word	0xfffffeff

08002710 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002710:	b5b0      	push	{r4, r5, r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	603a      	str	r2, [r7, #0]
 800271c:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800271e:	4b21      	ldr	r3, [pc, #132]	; (80027a4 <HAL_FLASH_Program+0x94>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_FLASH_Program+0x1a>
 8002726:	2302      	movs	r3, #2
 8002728:	e038      	b.n	800279c <HAL_FLASH_Program+0x8c>
 800272a:	4b1e      	ldr	r3, [pc, #120]	; (80027a4 <HAL_FLASH_Program+0x94>)
 800272c:	2201      	movs	r2, #1
 800272e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002730:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <HAL_FLASH_Program+0x94>)
 8002732:	2200      	movs	r2, #0
 8002734:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002736:	2517      	movs	r5, #23
 8002738:	197c      	adds	r4, r7, r5
 800273a:	23fa      	movs	r3, #250	; 0xfa
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	0018      	movs	r0, r3
 8002740:	f000 f874 	bl	800282c <FLASH_WaitForLastOperation>
 8002744:	0003      	movs	r3, r0
 8002746:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002748:	197b      	adds	r3, r7, r5
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d11f      	bne.n	8002790 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d106      	bne.n	8002764 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68b9      	ldr	r1, [r7, #8]
 800275c:	0008      	movs	r0, r1
 800275e:	f000 f8b3 	bl	80028c8 <FLASH_Program_DoubleWord>
 8002762:	e005      	b.n	8002770 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	0011      	movs	r1, r2
 800276a:	0018      	movs	r0, r3
 800276c:	f005 fa9c 	bl	8007ca8 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002770:	2317      	movs	r3, #23
 8002772:	18fc      	adds	r4, r7, r3
 8002774:	23fa      	movs	r3, #250	; 0xfa
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	0018      	movs	r0, r3
 800277a:	f000 f857 	bl	800282c <FLASH_WaitForLastOperation>
 800277e:	0003      	movs	r3, r0
 8002780:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8002782:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <HAL_FLASH_Program+0x98>)
 8002784:	695a      	ldr	r2, [r3, #20]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	43d9      	mvns	r1, r3
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <HAL_FLASH_Program+0x98>)
 800278c:	400a      	ands	r2, r1
 800278e:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002790:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <HAL_FLASH_Program+0x94>)
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8002796:	2317      	movs	r3, #23
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	781b      	ldrb	r3, [r3, #0]
}
 800279c:	0018      	movs	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	b006      	add	sp, #24
 80027a2:	bdb0      	pop	{r4, r5, r7, pc}
 80027a4:	20000d98 	.word	0x20000d98
 80027a8:	40022000 	.word	0x40022000

080027ac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80027b2:	1dfb      	adds	r3, r7, #7
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_FLASH_Unlock+0x3c>)
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	da0c      	bge.n	80027da <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <HAL_FLASH_Unlock+0x3c>)
 80027c2:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <HAL_FLASH_Unlock+0x40>)
 80027c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80027c6:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <HAL_FLASH_Unlock+0x3c>)
 80027c8:	4a09      	ldr	r2, [pc, #36]	; (80027f0 <HAL_FLASH_Unlock+0x44>)
 80027ca:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_FLASH_Unlock+0x3c>)
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	da02      	bge.n	80027da <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 80027d4:	1dfb      	adds	r3, r7, #7
 80027d6:	2201      	movs	r2, #1
 80027d8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80027da:	1dfb      	adds	r3, r7, #7
 80027dc:	781b      	ldrb	r3, [r3, #0]
}
 80027de:	0018      	movs	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b002      	add	sp, #8
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	40022000 	.word	0x40022000
 80027ec:	45670123 	.word	0x45670123
 80027f0:	cdef89ab 	.word	0xcdef89ab

080027f4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80027fa:	1dfb      	adds	r3, r7, #7
 80027fc:	2201      	movs	r2, #1
 80027fe:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <HAL_FLASH_Lock+0x34>)
 8002802:	695a      	ldr	r2, [r3, #20]
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <HAL_FLASH_Lock+0x34>)
 8002806:	2180      	movs	r1, #128	; 0x80
 8002808:	0609      	lsls	r1, r1, #24
 800280a:	430a      	orrs	r2, r1
 800280c:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800280e:	4b06      	ldr	r3, [pc, #24]	; (8002828 <HAL_FLASH_Lock+0x34>)
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	2b00      	cmp	r3, #0
 8002814:	da02      	bge.n	800281c <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 8002816:	1dfb      	adds	r3, r7, #7
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800281c:	1dfb      	adds	r3, r7, #7
 800281e:	781b      	ldrb	r3, [r3, #0]
}
 8002820:	0018      	movs	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	b002      	add	sp, #8
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40022000 	.word	0x40022000

0800282c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 8002834:	f7ff fd82 	bl	800233c <HAL_GetTick>
 8002838:	0002      	movs	r2, r0
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	189b      	adds	r3, r3, r2
 800283e:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 8002840:	23c0      	movs	r3, #192	; 0xc0
 8002842:	029b      	lsls	r3, r3, #10
 8002844:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8002846:	e007      	b.n	8002858 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 8002848:	f7ff fd78 	bl	800233c <HAL_GetTick>
 800284c:	0002      	movs	r2, r0
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4293      	cmp	r3, r2
 8002852:	d801      	bhi.n	8002858 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e02a      	b.n	80028ae <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 8002858:	4b17      	ldr	r3, [pc, #92]	; (80028b8 <FLASH_WaitForLastOperation+0x8c>)
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	4013      	ands	r3, r2
 8002860:	d1f2      	bne.n	8002848 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <FLASH_WaitForLastOperation+0x8c>)
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	4a15      	ldr	r2, [pc, #84]	; (80028bc <FLASH_WaitForLastOperation+0x90>)
 8002868:	4013      	ands	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800286c:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <FLASH_WaitForLastOperation+0x8c>)
 800286e:	4a14      	ldr	r2, [pc, #80]	; (80028c0 <FLASH_WaitForLastOperation+0x94>)
 8002870:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d004      	beq.n	8002882 <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8002878:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <FLASH_WaitForLastOperation+0x98>)
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e015      	b.n	80028ae <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 8002882:	f7ff fd5b 	bl	800233c <HAL_GetTick>
 8002886:	0002      	movs	r2, r0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	189b      	adds	r3, r3, r2
 800288c:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800288e:	e007      	b.n	80028a0 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 8002890:	f7ff fd54 	bl	800233c <HAL_GetTick>
 8002894:	0002      	movs	r2, r0
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4293      	cmp	r3, r2
 800289a:	d801      	bhi.n	80028a0 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e006      	b.n	80028ae <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <FLASH_WaitForLastOperation+0x8c>)
 80028a2:	691a      	ldr	r2, [r3, #16]
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	02db      	lsls	r3, r3, #11
 80028a8:	4013      	ands	r3, r2
 80028aa:	d1f1      	bne.n	8002890 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	0018      	movs	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b004      	add	sp, #16
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	40022000 	.word	0x40022000
 80028bc:	000083fa 	.word	0x000083fa
 80028c0:	000883fb 	.word	0x000883fb
 80028c4:	20000d98 	.word	0x20000d98

080028c8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80028c8:	b5b0      	push	{r4, r5, r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	603a      	str	r2, [r7, #0]
 80028d2:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80028d4:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <FLASH_Program_DoubleWord+0x3c>)
 80028d6:	695a      	ldr	r2, [r3, #20]
 80028d8:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <FLASH_Program_DoubleWord+0x3c>)
 80028da:	2101      	movs	r1, #1
 80028dc:	430a      	orrs	r2, r1
 80028de:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80028e6:	f3bf 8f6f 	isb	sy
}
 80028ea:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	001c      	movs	r4, r3
 80028f0:	2300      	movs	r3, #0
 80028f2:	001d      	movs	r5, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	3304      	adds	r3, #4
 80028f8:	0022      	movs	r2, r4
 80028fa:	601a      	str	r2, [r3, #0]
}
 80028fc:	46c0      	nop			; (mov r8, r8)
 80028fe:	46bd      	mov	sp, r7
 8002900:	b004      	add	sp, #16
 8002902:	bdb0      	pop	{r4, r5, r7, pc}
 8002904:	40022000 	.word	0x40022000

08002908 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002908:	b5b0      	push	{r4, r5, r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002912:	4b33      	ldr	r3, [pc, #204]	; (80029e0 <HAL_FLASHEx_Erase+0xd8>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_FLASHEx_Erase+0x16>
 800291a:	2302      	movs	r3, #2
 800291c:	e05c      	b.n	80029d8 <HAL_FLASHEx_Erase+0xd0>
 800291e:	4b30      	ldr	r3, [pc, #192]	; (80029e0 <HAL_FLASHEx_Erase+0xd8>)
 8002920:	2201      	movs	r2, #1
 8002922:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002924:	4b2e      	ldr	r3, [pc, #184]	; (80029e0 <HAL_FLASHEx_Erase+0xd8>)
 8002926:	2200      	movs	r2, #0
 8002928:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800292a:	250f      	movs	r5, #15
 800292c:	197c      	adds	r4, r7, r5
 800292e:	23fa      	movs	r3, #250	; 0xfa
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	0018      	movs	r0, r3
 8002934:	f7ff ff7a 	bl	800282c <FLASH_WaitForLastOperation>
 8002938:	0003      	movs	r3, r0
 800293a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800293c:	002c      	movs	r4, r5
 800293e:	193b      	adds	r3, r7, r4
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d142      	bne.n	80029cc <HAL_FLASHEx_Erase+0xc4>
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b04      	cmp	r3, #4
 800294c:	d10d      	bne.n	800296a <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	0018      	movs	r0, r3
 8002954:	f000 f848 	bl	80029e8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002958:	193c      	adds	r4, r7, r4
 800295a:	23fa      	movs	r3, #250	; 0xfa
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	0018      	movs	r0, r3
 8002960:	f7ff ff64 	bl	800282c <FLASH_WaitForLastOperation>
 8002964:	0003      	movs	r3, r0
 8002966:	7023      	strb	r3, [r4, #0]
 8002968:	e030      	b.n	80029cc <HAL_FLASHEx_Erase+0xc4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2201      	movs	r2, #1
 800296e:	4252      	negs	r2, r2
 8002970:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	e01a      	b.n	80029b0 <HAL_FLASHEx_Erase+0xa8>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	0011      	movs	r1, r2
 8002982:	0018      	movs	r0, r3
 8002984:	f000 f844 	bl	8002a10 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002988:	250f      	movs	r5, #15
 800298a:	197c      	adds	r4, r7, r5
 800298c:	23fa      	movs	r3, #250	; 0xfa
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	0018      	movs	r0, r3
 8002992:	f7ff ff4b 	bl	800282c <FLASH_WaitForLastOperation>
 8002996:	0003      	movs	r3, r0
 8002998:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 800299a:	197b      	adds	r3, r7, r5
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_FLASHEx_Erase+0xa2>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	601a      	str	r2, [r3, #0]
          break;
 80029a8:	e00a      	b.n	80029c0 <HAL_FLASHEx_Erase+0xb8>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	3301      	adds	r3, #1
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	18d3      	adds	r3, r2, r3
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d3dc      	bcc.n	800297a <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80029c0:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <HAL_FLASHEx_Erase+0xdc>)
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	4b07      	ldr	r3, [pc, #28]	; (80029e4 <HAL_FLASHEx_Erase+0xdc>)
 80029c6:	2102      	movs	r1, #2
 80029c8:	438a      	bics	r2, r1
 80029ca:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80029cc:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <HAL_FLASHEx_Erase+0xd8>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80029d2:	230f      	movs	r3, #15
 80029d4:	18fb      	adds	r3, r7, r3
 80029d6:	781b      	ldrb	r3, [r3, #0]
}
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	b004      	add	sp, #16
 80029de:	bdb0      	pop	{r4, r5, r7, pc}
 80029e0:	20000d98 	.word	0x20000d98
 80029e4:	40022000 	.word	0x40022000

080029e8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <FLASH_MassErase+0x24>)
 80029f2:	695a      	ldr	r2, [r3, #20]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <FLASH_MassErase+0x24>)
 80029fa:	2180      	movs	r1, #128	; 0x80
 80029fc:	0249      	lsls	r1, r1, #9
 80029fe:	430a      	orrs	r2, r1
 8002a00:	615a      	str	r2, [r3, #20]
}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b002      	add	sp, #8
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	40022000 	.word	0x40022000

08002a10 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8002a1a:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <FLASH_PageErase+0x48>)
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	4a0f      	ldr	r2, [pc, #60]	; (8002a5c <FLASH_PageErase+0x4c>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d005      	beq.n	8002a36 <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2280      	movs	r2, #128	; 0x80
 8002a2e:	0192      	lsls	r2, r2, #6
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	e003      	b.n	8002a3e <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4a09      	ldr	r2, [pc, #36]	; (8002a60 <FLASH_PageErase+0x50>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
  }
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	00da      	lsls	r2, r3, #3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <FLASH_PageErase+0x48>)
 8002a48:	4906      	ldr	r1, [pc, #24]	; (8002a64 <FLASH_PageErase+0x54>)
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	615a      	str	r2, [r3, #20]
}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	46bd      	mov	sp, r7
 8002a52:	b004      	add	sp, #16
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	40022000 	.word	0x40022000
 8002a5c:	ffffe007 	.word	0xffffe007
 8002a60:	ffffdfff 	.word	0xffffdfff
 8002a64:	00010002 	.word	0x00010002

08002a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a76:	e14d      	b.n	8002d14 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	4091      	lsls	r1, r2
 8002a82:	000a      	movs	r2, r1
 8002a84:	4013      	ands	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d100      	bne.n	8002a90 <HAL_GPIO_Init+0x28>
 8002a8e:	e13e      	b.n	8002d0e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2203      	movs	r2, #3
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d005      	beq.n	8002aa8 <HAL_GPIO_Init+0x40>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d130      	bne.n	8002b0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	0013      	movs	r3, r2
 8002ab8:	43da      	mvns	r2, r3
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4013      	ands	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	0013      	movs	r3, r2
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ade:	2201      	movs	r2, #1
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	0013      	movs	r3, r2
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4013      	ands	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	091b      	lsrs	r3, r3, #4
 8002af4:	2201      	movs	r2, #1
 8002af6:	401a      	ands	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	409a      	lsls	r2, r3
 8002afc:	0013      	movs	r3, r2
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2203      	movs	r2, #3
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d017      	beq.n	8002b46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	2203      	movs	r2, #3
 8002b22:	409a      	lsls	r2, r3
 8002b24:	0013      	movs	r3, r2
 8002b26:	43da      	mvns	r2, r3
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	409a      	lsls	r2, r3
 8002b38:	0013      	movs	r3, r2
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d123      	bne.n	8002b9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	08da      	lsrs	r2, r3, #3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3208      	adds	r2, #8
 8002b5a:	0092      	lsls	r2, r2, #2
 8002b5c:	58d3      	ldr	r3, [r2, r3]
 8002b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2207      	movs	r2, #7
 8002b64:	4013      	ands	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	220f      	movs	r2, #15
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	0013      	movs	r3, r2
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4013      	ands	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	691a      	ldr	r2, [r3, #16]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2107      	movs	r1, #7
 8002b7e:	400b      	ands	r3, r1
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	409a      	lsls	r2, r3
 8002b84:	0013      	movs	r3, r2
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	08da      	lsrs	r2, r3, #3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3208      	adds	r2, #8
 8002b94:	0092      	lsls	r2, r2, #2
 8002b96:	6939      	ldr	r1, [r7, #16]
 8002b98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	409a      	lsls	r2, r3
 8002ba8:	0013      	movs	r3, r2
 8002baa:	43da      	mvns	r2, r3
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	401a      	ands	r2, r3
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	0013      	movs	r3, r2
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	23c0      	movs	r3, #192	; 0xc0
 8002bd4:	029b      	lsls	r3, r3, #10
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d100      	bne.n	8002bdc <HAL_GPIO_Init+0x174>
 8002bda:	e098      	b.n	8002d0e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002bdc:	4a53      	ldr	r2, [pc, #332]	; (8002d2c <HAL_GPIO_Init+0x2c4>)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	089b      	lsrs	r3, r3, #2
 8002be2:	3318      	adds	r3, #24
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	589b      	ldr	r3, [r3, r2]
 8002be8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2203      	movs	r2, #3
 8002bee:	4013      	ands	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	220f      	movs	r2, #15
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	0013      	movs	r3, r2
 8002bf8:	43da      	mvns	r2, r3
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	23a0      	movs	r3, #160	; 0xa0
 8002c04:	05db      	lsls	r3, r3, #23
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d019      	beq.n	8002c3e <HAL_GPIO_Init+0x1d6>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a48      	ldr	r2, [pc, #288]	; (8002d30 <HAL_GPIO_Init+0x2c8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d013      	beq.n	8002c3a <HAL_GPIO_Init+0x1d2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a47      	ldr	r2, [pc, #284]	; (8002d34 <HAL_GPIO_Init+0x2cc>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d00d      	beq.n	8002c36 <HAL_GPIO_Init+0x1ce>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a46      	ldr	r2, [pc, #280]	; (8002d38 <HAL_GPIO_Init+0x2d0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d007      	beq.n	8002c32 <HAL_GPIO_Init+0x1ca>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a45      	ldr	r2, [pc, #276]	; (8002d3c <HAL_GPIO_Init+0x2d4>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d101      	bne.n	8002c2e <HAL_GPIO_Init+0x1c6>
 8002c2a:	2304      	movs	r3, #4
 8002c2c:	e008      	b.n	8002c40 <HAL_GPIO_Init+0x1d8>
 8002c2e:	2305      	movs	r3, #5
 8002c30:	e006      	b.n	8002c40 <HAL_GPIO_Init+0x1d8>
 8002c32:	2303      	movs	r3, #3
 8002c34:	e004      	b.n	8002c40 <HAL_GPIO_Init+0x1d8>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e002      	b.n	8002c40 <HAL_GPIO_Init+0x1d8>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <HAL_GPIO_Init+0x1d8>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	2103      	movs	r1, #3
 8002c44:	400a      	ands	r2, r1
 8002c46:	00d2      	lsls	r2, r2, #3
 8002c48:	4093      	lsls	r3, r2
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002c50:	4936      	ldr	r1, [pc, #216]	; (8002d2c <HAL_GPIO_Init+0x2c4>)
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	089b      	lsrs	r3, r3, #2
 8002c56:	3318      	adds	r3, #24
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c5e:	4b33      	ldr	r3, [pc, #204]	; (8002d2c <HAL_GPIO_Init+0x2c4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	43da      	mvns	r2, r3
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	2380      	movs	r3, #128	; 0x80
 8002c74:	035b      	lsls	r3, r3, #13
 8002c76:	4013      	ands	r3, r2
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c82:	4b2a      	ldr	r3, [pc, #168]	; (8002d2c <HAL_GPIO_Init+0x2c4>)
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002c88:	4b28      	ldr	r3, [pc, #160]	; (8002d2c <HAL_GPIO_Init+0x2c4>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	43da      	mvns	r2, r3
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4013      	ands	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	039b      	lsls	r3, r3, #14
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d003      	beq.n	8002cac <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cac:	4b1f      	ldr	r3, [pc, #124]	; (8002d2c <HAL_GPIO_Init+0x2c4>)
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002cb2:	4a1e      	ldr	r2, [pc, #120]	; (8002d2c <HAL_GPIO_Init+0x2c4>)
 8002cb4:	2384      	movs	r3, #132	; 0x84
 8002cb6:	58d3      	ldr	r3, [r2, r3]
 8002cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	43da      	mvns	r2, r3
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	2380      	movs	r3, #128	; 0x80
 8002cca:	029b      	lsls	r3, r3, #10
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d003      	beq.n	8002cd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cd8:	4914      	ldr	r1, [pc, #80]	; (8002d2c <HAL_GPIO_Init+0x2c4>)
 8002cda:	2284      	movs	r2, #132	; 0x84
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002ce0:	4a12      	ldr	r2, [pc, #72]	; (8002d2c <HAL_GPIO_Init+0x2c4>)
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	58d3      	ldr	r3, [r2, r3]
 8002ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	43da      	mvns	r2, r3
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	2380      	movs	r3, #128	; 0x80
 8002cf8:	025b      	lsls	r3, r3, #9
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d06:	4909      	ldr	r1, [pc, #36]	; (8002d2c <HAL_GPIO_Init+0x2c4>)
 8002d08:	2280      	movs	r2, #128	; 0x80
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	3301      	adds	r3, #1
 8002d12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	40da      	lsrs	r2, r3
 8002d1c:	1e13      	subs	r3, r2, #0
 8002d1e:	d000      	beq.n	8002d22 <HAL_GPIO_Init+0x2ba>
 8002d20:	e6aa      	b.n	8002a78 <HAL_GPIO_Init+0x10>
  }
}
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	46c0      	nop			; (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b006      	add	sp, #24
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40021800 	.word	0x40021800
 8002d30:	50000400 	.word	0x50000400
 8002d34:	50000800 	.word	0x50000800
 8002d38:	50000c00 	.word	0x50000c00
 8002d3c:	50001000 	.word	0x50001000

08002d40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	000a      	movs	r2, r1
 8002d4a:	1cbb      	adds	r3, r7, #2
 8002d4c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	1cba      	adds	r2, r7, #2
 8002d54:	8812      	ldrh	r2, [r2, #0]
 8002d56:	4013      	ands	r3, r2
 8002d58:	d004      	beq.n	8002d64 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002d5a:	230f      	movs	r3, #15
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	2201      	movs	r2, #1
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	e003      	b.n	8002d6c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d64:	230f      	movs	r3, #15
 8002d66:	18fb      	adds	r3, r7, r3
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002d6c:	230f      	movs	r3, #15
 8002d6e:	18fb      	adds	r3, r7, r3
 8002d70:	781b      	ldrb	r3, [r3, #0]
}
 8002d72:	0018      	movs	r0, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b004      	add	sp, #16
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	0008      	movs	r0, r1
 8002d84:	0011      	movs	r1, r2
 8002d86:	1cbb      	adds	r3, r7, #2
 8002d88:	1c02      	adds	r2, r0, #0
 8002d8a:	801a      	strh	r2, [r3, #0]
 8002d8c:	1c7b      	adds	r3, r7, #1
 8002d8e:	1c0a      	adds	r2, r1, #0
 8002d90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d92:	1c7b      	adds	r3, r7, #1
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d004      	beq.n	8002da4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d9a:	1cbb      	adds	r3, r7, #2
 8002d9c:	881a      	ldrh	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002da2:	e003      	b.n	8002dac <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002da4:	1cbb      	adds	r3, r7, #2
 8002da6:	881a      	ldrh	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dac:	46c0      	nop			; (mov r8, r8)
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b002      	add	sp, #8
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002dbc:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a19      	ldr	r2, [pc, #100]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	4b17      	ldr	r3, [pc, #92]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d11f      	bne.n	8002e18 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002dd8:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	0013      	movs	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	189b      	adds	r3, r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4912      	ldr	r1, [pc, #72]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002de6:	0018      	movs	r0, r3
 8002de8:	f7fd f99c 	bl	8000124 <__udivsi3>
 8002dec:	0003      	movs	r3, r0
 8002dee:	3301      	adds	r3, #1
 8002df0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002df2:	e008      	b.n	8002e06 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	e001      	b.n	8002e06 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e009      	b.n	8002e1a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e06:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e08:	695a      	ldr	r2, [r3, #20]
 8002e0a:	2380      	movs	r3, #128	; 0x80
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	401a      	ands	r2, r3
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d0ed      	beq.n	8002df4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	b004      	add	sp, #16
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	40007000 	.word	0x40007000
 8002e28:	fffff9ff 	.word	0xfffff9ff
 8002e2c:	20000400 	.word	0x20000400
 8002e30:	000f4240 	.word	0x000f4240

08002e34 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002e38:	4b03      	ldr	r3, [pc, #12]	; (8002e48 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	23e0      	movs	r3, #224	; 0xe0
 8002e3e:	01db      	lsls	r3, r3, #7
 8002e40:	4013      	ands	r3, r2
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40021000 	.word	0x40021000

08002e4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e2fe      	b.n	800345c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2201      	movs	r2, #1
 8002e64:	4013      	ands	r3, r2
 8002e66:	d100      	bne.n	8002e6a <HAL_RCC_OscConfig+0x1e>
 8002e68:	e07c      	b.n	8002f64 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e6a:	4bc3      	ldr	r3, [pc, #780]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2238      	movs	r2, #56	; 0x38
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e74:	4bc0      	ldr	r3, [pc, #768]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2203      	movs	r2, #3
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	2b10      	cmp	r3, #16
 8002e82:	d102      	bne.n	8002e8a <HAL_RCC_OscConfig+0x3e>
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	d002      	beq.n	8002e90 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d10b      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e90:	4bb9      	ldr	r3, [pc, #740]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	2380      	movs	r3, #128	; 0x80
 8002e96:	029b      	lsls	r3, r3, #10
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d062      	beq.n	8002f62 <HAL_RCC_OscConfig+0x116>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d15e      	bne.n	8002f62 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e2d9      	b.n	800345c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	2380      	movs	r3, #128	; 0x80
 8002eae:	025b      	lsls	r3, r3, #9
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d107      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x78>
 8002eb4:	4bb0      	ldr	r3, [pc, #704]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	4baf      	ldr	r3, [pc, #700]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8002eba:	2180      	movs	r1, #128	; 0x80
 8002ebc:	0249      	lsls	r1, r1, #9
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	e020      	b.n	8002f06 <HAL_RCC_OscConfig+0xba>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	23a0      	movs	r3, #160	; 0xa0
 8002eca:	02db      	lsls	r3, r3, #11
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d10e      	bne.n	8002eee <HAL_RCC_OscConfig+0xa2>
 8002ed0:	4ba9      	ldr	r3, [pc, #676]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	4ba8      	ldr	r3, [pc, #672]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8002ed6:	2180      	movs	r1, #128	; 0x80
 8002ed8:	02c9      	lsls	r1, r1, #11
 8002eda:	430a      	orrs	r2, r1
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	4ba6      	ldr	r3, [pc, #664]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4ba5      	ldr	r3, [pc, #660]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8002ee4:	2180      	movs	r1, #128	; 0x80
 8002ee6:	0249      	lsls	r1, r1, #9
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	e00b      	b.n	8002f06 <HAL_RCC_OscConfig+0xba>
 8002eee:	4ba2      	ldr	r3, [pc, #648]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	4ba1      	ldr	r3, [pc, #644]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8002ef4:	49a1      	ldr	r1, [pc, #644]	; (800317c <HAL_RCC_OscConfig+0x330>)
 8002ef6:	400a      	ands	r2, r1
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	4b9f      	ldr	r3, [pc, #636]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	4b9e      	ldr	r3, [pc, #632]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8002f00:	499f      	ldr	r1, [pc, #636]	; (8003180 <HAL_RCC_OscConfig+0x334>)
 8002f02:	400a      	ands	r2, r1
 8002f04:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d014      	beq.n	8002f38 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0e:	f7ff fa15 	bl	800233c <HAL_GetTick>
 8002f12:	0003      	movs	r3, r0
 8002f14:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f18:	f7ff fa10 	bl	800233c <HAL_GetTick>
 8002f1c:	0002      	movs	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b64      	cmp	r3, #100	; 0x64
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e298      	b.n	800345c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f2a:	4b93      	ldr	r3, [pc, #588]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	029b      	lsls	r3, r3, #10
 8002f32:	4013      	ands	r3, r2
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCC_OscConfig+0xcc>
 8002f36:	e015      	b.n	8002f64 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f38:	f7ff fa00 	bl	800233c <HAL_GetTick>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f42:	f7ff f9fb 	bl	800233c <HAL_GetTick>
 8002f46:	0002      	movs	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b64      	cmp	r3, #100	; 0x64
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e283      	b.n	800345c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f54:	4b88      	ldr	r3, [pc, #544]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	2380      	movs	r3, #128	; 0x80
 8002f5a:	029b      	lsls	r3, r3, #10
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d1f0      	bne.n	8002f42 <HAL_RCC_OscConfig+0xf6>
 8002f60:	e000      	b.n	8002f64 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f62:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2202      	movs	r2, #2
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d100      	bne.n	8002f70 <HAL_RCC_OscConfig+0x124>
 8002f6e:	e099      	b.n	80030a4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f70:	4b81      	ldr	r3, [pc, #516]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2238      	movs	r2, #56	; 0x38
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f7a:	4b7f      	ldr	r3, [pc, #508]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2203      	movs	r2, #3
 8002f80:	4013      	ands	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	2b10      	cmp	r3, #16
 8002f88:	d102      	bne.n	8002f90 <HAL_RCC_OscConfig+0x144>
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d002      	beq.n	8002f96 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d135      	bne.n	8003002 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f96:	4b78      	ldr	r3, [pc, #480]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d005      	beq.n	8002fae <HAL_RCC_OscConfig+0x162>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e256      	b.n	800345c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fae:	4b72      	ldr	r3, [pc, #456]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	4a74      	ldr	r2, [pc, #464]	; (8003184 <HAL_RCC_OscConfig+0x338>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	021a      	lsls	r2, r3, #8
 8002fbe:	4b6e      	ldr	r3, [pc, #440]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d112      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002fca:	4b6b      	ldr	r3, [pc, #428]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a6e      	ldr	r2, [pc, #440]	; (8003188 <HAL_RCC_OscConfig+0x33c>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	0019      	movs	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	4b67      	ldr	r3, [pc, #412]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002fde:	4b66      	ldr	r3, [pc, #408]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	0adb      	lsrs	r3, r3, #11
 8002fe4:	2207      	movs	r2, #7
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	4a68      	ldr	r2, [pc, #416]	; (800318c <HAL_RCC_OscConfig+0x340>)
 8002fea:	40da      	lsrs	r2, r3
 8002fec:	4b68      	ldr	r3, [pc, #416]	; (8003190 <HAL_RCC_OscConfig+0x344>)
 8002fee:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ff0:	4b68      	ldr	r3, [pc, #416]	; (8003194 <HAL_RCC_OscConfig+0x348>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f7ff f945 	bl	8002284 <HAL_InitTick>
 8002ffa:	1e03      	subs	r3, r0, #0
 8002ffc:	d051      	beq.n	80030a2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e22c      	b.n	800345c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d030      	beq.n	800306c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800300a:	4b5b      	ldr	r3, [pc, #364]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a5e      	ldr	r2, [pc, #376]	; (8003188 <HAL_RCC_OscConfig+0x33c>)
 8003010:	4013      	ands	r3, r2
 8003012:	0019      	movs	r1, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	4b57      	ldr	r3, [pc, #348]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 800301a:	430a      	orrs	r2, r1
 800301c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800301e:	4b56      	ldr	r3, [pc, #344]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	4b55      	ldr	r3, [pc, #340]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8003024:	2180      	movs	r1, #128	; 0x80
 8003026:	0049      	lsls	r1, r1, #1
 8003028:	430a      	orrs	r2, r1
 800302a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302c:	f7ff f986 	bl	800233c <HAL_GetTick>
 8003030:	0003      	movs	r3, r0
 8003032:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003036:	f7ff f981 	bl	800233c <HAL_GetTick>
 800303a:	0002      	movs	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e209      	b.n	800345c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003048:	4b4b      	ldr	r3, [pc, #300]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	2380      	movs	r3, #128	; 0x80
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4013      	ands	r3, r2
 8003052:	d0f0      	beq.n	8003036 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003054:	4b48      	ldr	r3, [pc, #288]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4a4a      	ldr	r2, [pc, #296]	; (8003184 <HAL_RCC_OscConfig+0x338>)
 800305a:	4013      	ands	r3, r2
 800305c:	0019      	movs	r1, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	021a      	lsls	r2, r3, #8
 8003064:	4b44      	ldr	r3, [pc, #272]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
 800306a:	e01b      	b.n	80030a4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800306c:	4b42      	ldr	r3, [pc, #264]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	4b41      	ldr	r3, [pc, #260]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8003072:	4949      	ldr	r1, [pc, #292]	; (8003198 <HAL_RCC_OscConfig+0x34c>)
 8003074:	400a      	ands	r2, r1
 8003076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003078:	f7ff f960 	bl	800233c <HAL_GetTick>
 800307c:	0003      	movs	r3, r0
 800307e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003082:	f7ff f95b 	bl	800233c <HAL_GetTick>
 8003086:	0002      	movs	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e1e3      	b.n	800345c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003094:	4b38      	ldr	r3, [pc, #224]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	2380      	movs	r3, #128	; 0x80
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4013      	ands	r3, r2
 800309e:	d1f0      	bne.n	8003082 <HAL_RCC_OscConfig+0x236>
 80030a0:	e000      	b.n	80030a4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030a2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2208      	movs	r2, #8
 80030aa:	4013      	ands	r3, r2
 80030ac:	d047      	beq.n	800313e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80030ae:	4b32      	ldr	r3, [pc, #200]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2238      	movs	r2, #56	; 0x38
 80030b4:	4013      	ands	r3, r2
 80030b6:	2b18      	cmp	r3, #24
 80030b8:	d10a      	bne.n	80030d0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80030ba:	4b2f      	ldr	r3, [pc, #188]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 80030bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030be:	2202      	movs	r2, #2
 80030c0:	4013      	ands	r3, r2
 80030c2:	d03c      	beq.n	800313e <HAL_RCC_OscConfig+0x2f2>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d138      	bne.n	800313e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e1c5      	b.n	800345c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d019      	beq.n	800310c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80030d8:	4b27      	ldr	r3, [pc, #156]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 80030da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030dc:	4b26      	ldr	r3, [pc, #152]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 80030de:	2101      	movs	r1, #1
 80030e0:	430a      	orrs	r2, r1
 80030e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e4:	f7ff f92a 	bl	800233c <HAL_GetTick>
 80030e8:	0003      	movs	r3, r0
 80030ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ee:	f7ff f925 	bl	800233c <HAL_GetTick>
 80030f2:	0002      	movs	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e1ad      	b.n	800345c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003100:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8003102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003104:	2202      	movs	r2, #2
 8003106:	4013      	ands	r3, r2
 8003108:	d0f1      	beq.n	80030ee <HAL_RCC_OscConfig+0x2a2>
 800310a:	e018      	b.n	800313e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800310c:	4b1a      	ldr	r3, [pc, #104]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 800310e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003110:	4b19      	ldr	r3, [pc, #100]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8003112:	2101      	movs	r1, #1
 8003114:	438a      	bics	r2, r1
 8003116:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003118:	f7ff f910 	bl	800233c <HAL_GetTick>
 800311c:	0003      	movs	r3, r0
 800311e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003122:	f7ff f90b 	bl	800233c <HAL_GetTick>
 8003126:	0002      	movs	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e193      	b.n	800345c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003134:	4b10      	ldr	r3, [pc, #64]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8003136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003138:	2202      	movs	r2, #2
 800313a:	4013      	ands	r3, r2
 800313c:	d1f1      	bne.n	8003122 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2204      	movs	r2, #4
 8003144:	4013      	ands	r3, r2
 8003146:	d100      	bne.n	800314a <HAL_RCC_OscConfig+0x2fe>
 8003148:	e0c6      	b.n	80032d8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800314a:	231f      	movs	r3, #31
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	2200      	movs	r2, #0
 8003150:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	2238      	movs	r2, #56	; 0x38
 8003158:	4013      	ands	r3, r2
 800315a:	2b20      	cmp	r3, #32
 800315c:	d11e      	bne.n	800319c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_RCC_OscConfig+0x32c>)
 8003160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003162:	2202      	movs	r2, #2
 8003164:	4013      	ands	r3, r2
 8003166:	d100      	bne.n	800316a <HAL_RCC_OscConfig+0x31e>
 8003168:	e0b6      	b.n	80032d8 <HAL_RCC_OscConfig+0x48c>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d000      	beq.n	8003174 <HAL_RCC_OscConfig+0x328>
 8003172:	e0b1      	b.n	80032d8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e171      	b.n	800345c <HAL_RCC_OscConfig+0x610>
 8003178:	40021000 	.word	0x40021000
 800317c:	fffeffff 	.word	0xfffeffff
 8003180:	fffbffff 	.word	0xfffbffff
 8003184:	ffff80ff 	.word	0xffff80ff
 8003188:	ffffc7ff 	.word	0xffffc7ff
 800318c:	00f42400 	.word	0x00f42400
 8003190:	20000400 	.word	0x20000400
 8003194:	20000404 	.word	0x20000404
 8003198:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800319c:	4bb1      	ldr	r3, [pc, #708]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 800319e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031a0:	2380      	movs	r3, #128	; 0x80
 80031a2:	055b      	lsls	r3, r3, #21
 80031a4:	4013      	ands	r3, r2
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_OscConfig+0x360>
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <HAL_RCC_OscConfig+0x362>
 80031ac:	2300      	movs	r3, #0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d011      	beq.n	80031d6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80031b2:	4bac      	ldr	r3, [pc, #688]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 80031b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031b6:	4bab      	ldr	r3, [pc, #684]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 80031b8:	2180      	movs	r1, #128	; 0x80
 80031ba:	0549      	lsls	r1, r1, #21
 80031bc:	430a      	orrs	r2, r1
 80031be:	63da      	str	r2, [r3, #60]	; 0x3c
 80031c0:	4ba8      	ldr	r3, [pc, #672]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 80031c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	055b      	lsls	r3, r3, #21
 80031c8:	4013      	ands	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80031ce:	231f      	movs	r3, #31
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	2201      	movs	r2, #1
 80031d4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031d6:	4ba4      	ldr	r3, [pc, #656]	; (8003468 <HAL_RCC_OscConfig+0x61c>)
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	2380      	movs	r3, #128	; 0x80
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	4013      	ands	r3, r2
 80031e0:	d11a      	bne.n	8003218 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031e2:	4ba1      	ldr	r3, [pc, #644]	; (8003468 <HAL_RCC_OscConfig+0x61c>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	4ba0      	ldr	r3, [pc, #640]	; (8003468 <HAL_RCC_OscConfig+0x61c>)
 80031e8:	2180      	movs	r1, #128	; 0x80
 80031ea:	0049      	lsls	r1, r1, #1
 80031ec:	430a      	orrs	r2, r1
 80031ee:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80031f0:	f7ff f8a4 	bl	800233c <HAL_GetTick>
 80031f4:	0003      	movs	r3, r0
 80031f6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031fa:	f7ff f89f 	bl	800233c <HAL_GetTick>
 80031fe:	0002      	movs	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e127      	b.n	800345c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800320c:	4b96      	ldr	r3, [pc, #600]	; (8003468 <HAL_RCC_OscConfig+0x61c>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	4013      	ands	r3, r2
 8003216:	d0f0      	beq.n	80031fa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d106      	bne.n	800322e <HAL_RCC_OscConfig+0x3e2>
 8003220:	4b90      	ldr	r3, [pc, #576]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 8003222:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003224:	4b8f      	ldr	r3, [pc, #572]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 8003226:	2101      	movs	r1, #1
 8003228:	430a      	orrs	r2, r1
 800322a:	65da      	str	r2, [r3, #92]	; 0x5c
 800322c:	e01c      	b.n	8003268 <HAL_RCC_OscConfig+0x41c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b05      	cmp	r3, #5
 8003234:	d10c      	bne.n	8003250 <HAL_RCC_OscConfig+0x404>
 8003236:	4b8b      	ldr	r3, [pc, #556]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 8003238:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800323a:	4b8a      	ldr	r3, [pc, #552]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 800323c:	2104      	movs	r1, #4
 800323e:	430a      	orrs	r2, r1
 8003240:	65da      	str	r2, [r3, #92]	; 0x5c
 8003242:	4b88      	ldr	r3, [pc, #544]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 8003244:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003246:	4b87      	ldr	r3, [pc, #540]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 8003248:	2101      	movs	r1, #1
 800324a:	430a      	orrs	r2, r1
 800324c:	65da      	str	r2, [r3, #92]	; 0x5c
 800324e:	e00b      	b.n	8003268 <HAL_RCC_OscConfig+0x41c>
 8003250:	4b84      	ldr	r3, [pc, #528]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 8003252:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003254:	4b83      	ldr	r3, [pc, #524]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 8003256:	2101      	movs	r1, #1
 8003258:	438a      	bics	r2, r1
 800325a:	65da      	str	r2, [r3, #92]	; 0x5c
 800325c:	4b81      	ldr	r3, [pc, #516]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 800325e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003260:	4b80      	ldr	r3, [pc, #512]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 8003262:	2104      	movs	r1, #4
 8003264:	438a      	bics	r2, r1
 8003266:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d014      	beq.n	800329a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7ff f864 	bl	800233c <HAL_GetTick>
 8003274:	0003      	movs	r3, r0
 8003276:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003278:	e009      	b.n	800328e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327a:	f7ff f85f 	bl	800233c <HAL_GetTick>
 800327e:	0002      	movs	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	4a79      	ldr	r2, [pc, #484]	; (800346c <HAL_RCC_OscConfig+0x620>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e0e6      	b.n	800345c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800328e:	4b75      	ldr	r3, [pc, #468]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 8003290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003292:	2202      	movs	r2, #2
 8003294:	4013      	ands	r3, r2
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0x42e>
 8003298:	e013      	b.n	80032c2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329a:	f7ff f84f 	bl	800233c <HAL_GetTick>
 800329e:	0003      	movs	r3, r0
 80032a0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032a2:	e009      	b.n	80032b8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a4:	f7ff f84a 	bl	800233c <HAL_GetTick>
 80032a8:	0002      	movs	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	4a6f      	ldr	r2, [pc, #444]	; (800346c <HAL_RCC_OscConfig+0x620>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e0d1      	b.n	800345c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032b8:	4b6a      	ldr	r3, [pc, #424]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 80032ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032bc:	2202      	movs	r2, #2
 80032be:	4013      	ands	r3, r2
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80032c2:	231f      	movs	r3, #31
 80032c4:	18fb      	adds	r3, r7, r3
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d105      	bne.n	80032d8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80032cc:	4b65      	ldr	r3, [pc, #404]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 80032ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032d0:	4b64      	ldr	r3, [pc, #400]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 80032d2:	4967      	ldr	r1, [pc, #412]	; (8003470 <HAL_RCC_OscConfig+0x624>)
 80032d4:	400a      	ands	r2, r1
 80032d6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d100      	bne.n	80032e2 <HAL_RCC_OscConfig+0x496>
 80032e0:	e0bb      	b.n	800345a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032e2:	4b60      	ldr	r3, [pc, #384]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2238      	movs	r2, #56	; 0x38
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b10      	cmp	r3, #16
 80032ec:	d100      	bne.n	80032f0 <HAL_RCC_OscConfig+0x4a4>
 80032ee:	e07b      	b.n	80033e8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d156      	bne.n	80033a6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f8:	4b5a      	ldr	r3, [pc, #360]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	4b59      	ldr	r3, [pc, #356]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 80032fe:	495d      	ldr	r1, [pc, #372]	; (8003474 <HAL_RCC_OscConfig+0x628>)
 8003300:	400a      	ands	r2, r1
 8003302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7ff f81a 	bl	800233c <HAL_GetTick>
 8003308:	0003      	movs	r3, r0
 800330a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330e:	f7ff f815 	bl	800233c <HAL_GetTick>
 8003312:	0002      	movs	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e09d      	b.n	800345c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003320:	4b50      	ldr	r3, [pc, #320]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	2380      	movs	r3, #128	; 0x80
 8003326:	049b      	lsls	r3, r3, #18
 8003328:	4013      	ands	r3, r2
 800332a:	d1f0      	bne.n	800330e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800332c:	4b4d      	ldr	r3, [pc, #308]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	4a51      	ldr	r2, [pc, #324]	; (8003478 <HAL_RCC_OscConfig+0x62c>)
 8003332:	4013      	ands	r3, r2
 8003334:	0019      	movs	r1, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1a      	ldr	r2, [r3, #32]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003358:	431a      	orrs	r2, r3
 800335a:	4b42      	ldr	r3, [pc, #264]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 800335c:	430a      	orrs	r2, r1
 800335e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003360:	4b40      	ldr	r3, [pc, #256]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	4b3f      	ldr	r3, [pc, #252]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 8003366:	2180      	movs	r1, #128	; 0x80
 8003368:	0449      	lsls	r1, r1, #17
 800336a:	430a      	orrs	r2, r1
 800336c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800336e:	4b3d      	ldr	r3, [pc, #244]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	4b3c      	ldr	r3, [pc, #240]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 8003374:	2180      	movs	r1, #128	; 0x80
 8003376:	0549      	lsls	r1, r1, #21
 8003378:	430a      	orrs	r2, r1
 800337a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337c:	f7fe ffde 	bl	800233c <HAL_GetTick>
 8003380:	0003      	movs	r3, r0
 8003382:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003386:	f7fe ffd9 	bl	800233c <HAL_GetTick>
 800338a:	0002      	movs	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e061      	b.n	800345c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003398:	4b32      	ldr	r3, [pc, #200]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	2380      	movs	r3, #128	; 0x80
 800339e:	049b      	lsls	r3, r3, #18
 80033a0:	4013      	ands	r3, r2
 80033a2:	d0f0      	beq.n	8003386 <HAL_RCC_OscConfig+0x53a>
 80033a4:	e059      	b.n	800345a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a6:	4b2f      	ldr	r3, [pc, #188]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	4b2e      	ldr	r3, [pc, #184]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 80033ac:	4931      	ldr	r1, [pc, #196]	; (8003474 <HAL_RCC_OscConfig+0x628>)
 80033ae:	400a      	ands	r2, r1
 80033b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b2:	f7fe ffc3 	bl	800233c <HAL_GetTick>
 80033b6:	0003      	movs	r3, r0
 80033b8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033bc:	f7fe ffbe 	bl	800233c <HAL_GetTick>
 80033c0:	0002      	movs	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e046      	b.n	800345c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ce:	4b25      	ldr	r3, [pc, #148]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	049b      	lsls	r3, r3, #18
 80033d6:	4013      	ands	r3, r2
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80033da:	4b22      	ldr	r3, [pc, #136]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	4b21      	ldr	r3, [pc, #132]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 80033e0:	4926      	ldr	r1, [pc, #152]	; (800347c <HAL_RCC_OscConfig+0x630>)
 80033e2:	400a      	ands	r2, r1
 80033e4:	60da      	str	r2, [r3, #12]
 80033e6:	e038      	b.n	800345a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e033      	b.n	800345c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80033f4:	4b1b      	ldr	r3, [pc, #108]	; (8003464 <HAL_RCC_OscConfig+0x618>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2203      	movs	r2, #3
 80033fe:	401a      	ands	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	429a      	cmp	r2, r3
 8003406:	d126      	bne.n	8003456 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2270      	movs	r2, #112	; 0x70
 800340c:	401a      	ands	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003412:	429a      	cmp	r2, r3
 8003414:	d11f      	bne.n	8003456 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	23fe      	movs	r3, #254	; 0xfe
 800341a:	01db      	lsls	r3, r3, #7
 800341c:	401a      	ands	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003422:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003424:	429a      	cmp	r2, r3
 8003426:	d116      	bne.n	8003456 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	23f8      	movs	r3, #248	; 0xf8
 800342c:	039b      	lsls	r3, r3, #14
 800342e:	401a      	ands	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003434:	429a      	cmp	r2, r3
 8003436:	d10e      	bne.n	8003456 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	23e0      	movs	r3, #224	; 0xe0
 800343c:	051b      	lsls	r3, r3, #20
 800343e:	401a      	ands	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003444:	429a      	cmp	r2, r3
 8003446:	d106      	bne.n	8003456 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	0f5b      	lsrs	r3, r3, #29
 800344c:	075a      	lsls	r2, r3, #29
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003452:	429a      	cmp	r2, r3
 8003454:	d001      	beq.n	800345a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	0018      	movs	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	b008      	add	sp, #32
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40021000 	.word	0x40021000
 8003468:	40007000 	.word	0x40007000
 800346c:	00001388 	.word	0x00001388
 8003470:	efffffff 	.word	0xefffffff
 8003474:	feffffff 	.word	0xfeffffff
 8003478:	11c1808c 	.word	0x11c1808c
 800347c:	eefefffc 	.word	0xeefefffc

08003480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e0e9      	b.n	8003668 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003494:	4b76      	ldr	r3, [pc, #472]	; (8003670 <HAL_RCC_ClockConfig+0x1f0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2207      	movs	r2, #7
 800349a:	4013      	ands	r3, r2
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d91e      	bls.n	80034e0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a2:	4b73      	ldr	r3, [pc, #460]	; (8003670 <HAL_RCC_ClockConfig+0x1f0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2207      	movs	r2, #7
 80034a8:	4393      	bics	r3, r2
 80034aa:	0019      	movs	r1, r3
 80034ac:	4b70      	ldr	r3, [pc, #448]	; (8003670 <HAL_RCC_ClockConfig+0x1f0>)
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034b4:	f7fe ff42 	bl	800233c <HAL_GetTick>
 80034b8:	0003      	movs	r3, r0
 80034ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034bc:	e009      	b.n	80034d2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034be:	f7fe ff3d 	bl	800233c <HAL_GetTick>
 80034c2:	0002      	movs	r2, r0
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	4a6a      	ldr	r2, [pc, #424]	; (8003674 <HAL_RCC_ClockConfig+0x1f4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e0ca      	b.n	8003668 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034d2:	4b67      	ldr	r3, [pc, #412]	; (8003670 <HAL_RCC_ClockConfig+0x1f0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2207      	movs	r2, #7
 80034d8:	4013      	ands	r3, r2
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d1ee      	bne.n	80034be <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2202      	movs	r2, #2
 80034e6:	4013      	ands	r3, r2
 80034e8:	d015      	beq.n	8003516 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2204      	movs	r2, #4
 80034f0:	4013      	ands	r3, r2
 80034f2:	d006      	beq.n	8003502 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80034f4:	4b60      	ldr	r3, [pc, #384]	; (8003678 <HAL_RCC_ClockConfig+0x1f8>)
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	4b5f      	ldr	r3, [pc, #380]	; (8003678 <HAL_RCC_ClockConfig+0x1f8>)
 80034fa:	21e0      	movs	r1, #224	; 0xe0
 80034fc:	01c9      	lsls	r1, r1, #7
 80034fe:	430a      	orrs	r2, r1
 8003500:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003502:	4b5d      	ldr	r3, [pc, #372]	; (8003678 <HAL_RCC_ClockConfig+0x1f8>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	4a5d      	ldr	r2, [pc, #372]	; (800367c <HAL_RCC_ClockConfig+0x1fc>)
 8003508:	4013      	ands	r3, r2
 800350a:	0019      	movs	r1, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	4b59      	ldr	r3, [pc, #356]	; (8003678 <HAL_RCC_ClockConfig+0x1f8>)
 8003512:	430a      	orrs	r2, r1
 8003514:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2201      	movs	r2, #1
 800351c:	4013      	ands	r3, r2
 800351e:	d057      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d107      	bne.n	8003538 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003528:	4b53      	ldr	r3, [pc, #332]	; (8003678 <HAL_RCC_ClockConfig+0x1f8>)
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	2380      	movs	r3, #128	; 0x80
 800352e:	029b      	lsls	r3, r3, #10
 8003530:	4013      	ands	r3, r2
 8003532:	d12b      	bne.n	800358c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e097      	b.n	8003668 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b02      	cmp	r3, #2
 800353e:	d107      	bne.n	8003550 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003540:	4b4d      	ldr	r3, [pc, #308]	; (8003678 <HAL_RCC_ClockConfig+0x1f8>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	049b      	lsls	r3, r3, #18
 8003548:	4013      	ands	r3, r2
 800354a:	d11f      	bne.n	800358c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e08b      	b.n	8003668 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d107      	bne.n	8003568 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003558:	4b47      	ldr	r3, [pc, #284]	; (8003678 <HAL_RCC_ClockConfig+0x1f8>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	2380      	movs	r3, #128	; 0x80
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4013      	ands	r3, r2
 8003562:	d113      	bne.n	800358c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e07f      	b.n	8003668 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b03      	cmp	r3, #3
 800356e:	d106      	bne.n	800357e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003570:	4b41      	ldr	r3, [pc, #260]	; (8003678 <HAL_RCC_ClockConfig+0x1f8>)
 8003572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003574:	2202      	movs	r2, #2
 8003576:	4013      	ands	r3, r2
 8003578:	d108      	bne.n	800358c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e074      	b.n	8003668 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800357e:	4b3e      	ldr	r3, [pc, #248]	; (8003678 <HAL_RCC_ClockConfig+0x1f8>)
 8003580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003582:	2202      	movs	r2, #2
 8003584:	4013      	ands	r3, r2
 8003586:	d101      	bne.n	800358c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e06d      	b.n	8003668 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800358c:	4b3a      	ldr	r3, [pc, #232]	; (8003678 <HAL_RCC_ClockConfig+0x1f8>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2207      	movs	r2, #7
 8003592:	4393      	bics	r3, r2
 8003594:	0019      	movs	r1, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	4b37      	ldr	r3, [pc, #220]	; (8003678 <HAL_RCC_ClockConfig+0x1f8>)
 800359c:	430a      	orrs	r2, r1
 800359e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a0:	f7fe fecc 	bl	800233c <HAL_GetTick>
 80035a4:	0003      	movs	r3, r0
 80035a6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a8:	e009      	b.n	80035be <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035aa:	f7fe fec7 	bl	800233c <HAL_GetTick>
 80035ae:	0002      	movs	r2, r0
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	4a2f      	ldr	r2, [pc, #188]	; (8003674 <HAL_RCC_ClockConfig+0x1f4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e054      	b.n	8003668 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035be:	4b2e      	ldr	r3, [pc, #184]	; (8003678 <HAL_RCC_ClockConfig+0x1f8>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2238      	movs	r2, #56	; 0x38
 80035c4:	401a      	ands	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d1ec      	bne.n	80035aa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035d0:	4b27      	ldr	r3, [pc, #156]	; (8003670 <HAL_RCC_ClockConfig+0x1f0>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2207      	movs	r2, #7
 80035d6:	4013      	ands	r3, r2
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d21e      	bcs.n	800361c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035de:	4b24      	ldr	r3, [pc, #144]	; (8003670 <HAL_RCC_ClockConfig+0x1f0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2207      	movs	r2, #7
 80035e4:	4393      	bics	r3, r2
 80035e6:	0019      	movs	r1, r3
 80035e8:	4b21      	ldr	r3, [pc, #132]	; (8003670 <HAL_RCC_ClockConfig+0x1f0>)
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035f0:	f7fe fea4 	bl	800233c <HAL_GetTick>
 80035f4:	0003      	movs	r3, r0
 80035f6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035f8:	e009      	b.n	800360e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035fa:	f7fe fe9f 	bl	800233c <HAL_GetTick>
 80035fe:	0002      	movs	r2, r0
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	4a1b      	ldr	r2, [pc, #108]	; (8003674 <HAL_RCC_ClockConfig+0x1f4>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e02c      	b.n	8003668 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800360e:	4b18      	ldr	r3, [pc, #96]	; (8003670 <HAL_RCC_ClockConfig+0x1f0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2207      	movs	r2, #7
 8003614:	4013      	ands	r3, r2
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d1ee      	bne.n	80035fa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2204      	movs	r2, #4
 8003622:	4013      	ands	r3, r2
 8003624:	d009      	beq.n	800363a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003626:	4b14      	ldr	r3, [pc, #80]	; (8003678 <HAL_RCC_ClockConfig+0x1f8>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	4a15      	ldr	r2, [pc, #84]	; (8003680 <HAL_RCC_ClockConfig+0x200>)
 800362c:	4013      	ands	r3, r2
 800362e:	0019      	movs	r1, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	4b10      	ldr	r3, [pc, #64]	; (8003678 <HAL_RCC_ClockConfig+0x1f8>)
 8003636:	430a      	orrs	r2, r1
 8003638:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800363a:	f000 f829 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 800363e:	0001      	movs	r1, r0
 8003640:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <HAL_RCC_ClockConfig+0x1f8>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	0a1b      	lsrs	r3, r3, #8
 8003646:	220f      	movs	r2, #15
 8003648:	401a      	ands	r2, r3
 800364a:	4b0e      	ldr	r3, [pc, #56]	; (8003684 <HAL_RCC_ClockConfig+0x204>)
 800364c:	0092      	lsls	r2, r2, #2
 800364e:	58d3      	ldr	r3, [r2, r3]
 8003650:	221f      	movs	r2, #31
 8003652:	4013      	ands	r3, r2
 8003654:	000a      	movs	r2, r1
 8003656:	40da      	lsrs	r2, r3
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <HAL_RCC_ClockConfig+0x208>)
 800365a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800365c:	4b0b      	ldr	r3, [pc, #44]	; (800368c <HAL_RCC_ClockConfig+0x20c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	0018      	movs	r0, r3
 8003662:	f7fe fe0f 	bl	8002284 <HAL_InitTick>
 8003666:	0003      	movs	r3, r0
}
 8003668:	0018      	movs	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	b004      	add	sp, #16
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40022000 	.word	0x40022000
 8003674:	00001388 	.word	0x00001388
 8003678:	40021000 	.word	0x40021000
 800367c:	fffff0ff 	.word	0xfffff0ff
 8003680:	ffff8fff 	.word	0xffff8fff
 8003684:	0800842c 	.word	0x0800842c
 8003688:	20000400 	.word	0x20000400
 800368c:	20000404 	.word	0x20000404

08003690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003696:	4b3c      	ldr	r3, [pc, #240]	; (8003788 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2238      	movs	r2, #56	; 0x38
 800369c:	4013      	ands	r3, r2
 800369e:	d10f      	bne.n	80036c0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80036a0:	4b39      	ldr	r3, [pc, #228]	; (8003788 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	0adb      	lsrs	r3, r3, #11
 80036a6:	2207      	movs	r2, #7
 80036a8:	4013      	ands	r3, r2
 80036aa:	2201      	movs	r2, #1
 80036ac:	409a      	lsls	r2, r3
 80036ae:	0013      	movs	r3, r2
 80036b0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80036b2:	6839      	ldr	r1, [r7, #0]
 80036b4:	4835      	ldr	r0, [pc, #212]	; (800378c <HAL_RCC_GetSysClockFreq+0xfc>)
 80036b6:	f7fc fd35 	bl	8000124 <__udivsi3>
 80036ba:	0003      	movs	r3, r0
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	e05d      	b.n	800377c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036c0:	4b31      	ldr	r3, [pc, #196]	; (8003788 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2238      	movs	r2, #56	; 0x38
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d102      	bne.n	80036d2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036cc:	4b30      	ldr	r3, [pc, #192]	; (8003790 <HAL_RCC_GetSysClockFreq+0x100>)
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	e054      	b.n	800377c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036d2:	4b2d      	ldr	r3, [pc, #180]	; (8003788 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2238      	movs	r2, #56	; 0x38
 80036d8:	4013      	ands	r3, r2
 80036da:	2b10      	cmp	r3, #16
 80036dc:	d138      	bne.n	8003750 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80036de:	4b2a      	ldr	r3, [pc, #168]	; (8003788 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	2203      	movs	r2, #3
 80036e4:	4013      	ands	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036e8:	4b27      	ldr	r3, [pc, #156]	; (8003788 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	091b      	lsrs	r3, r3, #4
 80036ee:	2207      	movs	r2, #7
 80036f0:	4013      	ands	r3, r2
 80036f2:	3301      	adds	r3, #1
 80036f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d10d      	bne.n	8003718 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	4824      	ldr	r0, [pc, #144]	; (8003790 <HAL_RCC_GetSysClockFreq+0x100>)
 8003700:	f7fc fd10 	bl	8000124 <__udivsi3>
 8003704:	0003      	movs	r3, r0
 8003706:	0019      	movs	r1, r3
 8003708:	4b1f      	ldr	r3, [pc, #124]	; (8003788 <HAL_RCC_GetSysClockFreq+0xf8>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	0a1b      	lsrs	r3, r3, #8
 800370e:	227f      	movs	r2, #127	; 0x7f
 8003710:	4013      	ands	r3, r2
 8003712:	434b      	muls	r3, r1
 8003714:	617b      	str	r3, [r7, #20]
        break;
 8003716:	e00d      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003718:	68b9      	ldr	r1, [r7, #8]
 800371a:	481c      	ldr	r0, [pc, #112]	; (800378c <HAL_RCC_GetSysClockFreq+0xfc>)
 800371c:	f7fc fd02 	bl	8000124 <__udivsi3>
 8003720:	0003      	movs	r3, r0
 8003722:	0019      	movs	r1, r3
 8003724:	4b18      	ldr	r3, [pc, #96]	; (8003788 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	0a1b      	lsrs	r3, r3, #8
 800372a:	227f      	movs	r2, #127	; 0x7f
 800372c:	4013      	ands	r3, r2
 800372e:	434b      	muls	r3, r1
 8003730:	617b      	str	r3, [r7, #20]
        break;
 8003732:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003734:	4b14      	ldr	r3, [pc, #80]	; (8003788 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	0f5b      	lsrs	r3, r3, #29
 800373a:	2207      	movs	r2, #7
 800373c:	4013      	ands	r3, r2
 800373e:	3301      	adds	r3, #1
 8003740:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	6978      	ldr	r0, [r7, #20]
 8003746:	f7fc fced 	bl	8000124 <__udivsi3>
 800374a:	0003      	movs	r3, r0
 800374c:	613b      	str	r3, [r7, #16]
 800374e:	e015      	b.n	800377c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003750:	4b0d      	ldr	r3, [pc, #52]	; (8003788 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2238      	movs	r2, #56	; 0x38
 8003756:	4013      	ands	r3, r2
 8003758:	2b20      	cmp	r3, #32
 800375a:	d103      	bne.n	8003764 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800375c:	2380      	movs	r3, #128	; 0x80
 800375e:	021b      	lsls	r3, r3, #8
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	e00b      	b.n	800377c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003764:	4b08      	ldr	r3, [pc, #32]	; (8003788 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2238      	movs	r2, #56	; 0x38
 800376a:	4013      	ands	r3, r2
 800376c:	2b18      	cmp	r3, #24
 800376e:	d103      	bne.n	8003778 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003770:	23fa      	movs	r3, #250	; 0xfa
 8003772:	01db      	lsls	r3, r3, #7
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	e001      	b.n	800377c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800377c:	693b      	ldr	r3, [r7, #16]
}
 800377e:	0018      	movs	r0, r3
 8003780:	46bd      	mov	sp, r7
 8003782:	b006      	add	sp, #24
 8003784:	bd80      	pop	{r7, pc}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	40021000 	.word	0x40021000
 800378c:	00f42400 	.word	0x00f42400
 8003790:	007a1200 	.word	0x007a1200

08003794 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003798:	4b02      	ldr	r3, [pc, #8]	; (80037a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800379a:	681b      	ldr	r3, [r3, #0]
}
 800379c:	0018      	movs	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	20000400 	.word	0x20000400

080037a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a8:	b5b0      	push	{r4, r5, r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80037ac:	f7ff fff2 	bl	8003794 <HAL_RCC_GetHCLKFreq>
 80037b0:	0004      	movs	r4, r0
 80037b2:	f7ff fb3f 	bl	8002e34 <LL_RCC_GetAPB1Prescaler>
 80037b6:	0003      	movs	r3, r0
 80037b8:	0b1a      	lsrs	r2, r3, #12
 80037ba:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037bc:	0092      	lsls	r2, r2, #2
 80037be:	58d3      	ldr	r3, [r2, r3]
 80037c0:	221f      	movs	r2, #31
 80037c2:	4013      	ands	r3, r2
 80037c4:	40dc      	lsrs	r4, r3
 80037c6:	0023      	movs	r3, r4
}
 80037c8:	0018      	movs	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bdb0      	pop	{r4, r5, r7, pc}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	0800846c 	.word	0x0800846c

080037d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80037dc:	2313      	movs	r3, #19
 80037de:	18fb      	adds	r3, r7, r3
 80037e0:	2200      	movs	r2, #0
 80037e2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037e4:	2312      	movs	r3, #18
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	2200      	movs	r2, #0
 80037ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	2380      	movs	r3, #128	; 0x80
 80037f2:	029b      	lsls	r3, r3, #10
 80037f4:	4013      	ands	r3, r2
 80037f6:	d100      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80037f8:	e0a3      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037fa:	2011      	movs	r0, #17
 80037fc:	183b      	adds	r3, r7, r0
 80037fe:	2200      	movs	r2, #0
 8003800:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003802:	4bb0      	ldr	r3, [pc, #704]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003804:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003806:	2380      	movs	r3, #128	; 0x80
 8003808:	055b      	lsls	r3, r3, #21
 800380a:	4013      	ands	r3, r2
 800380c:	d110      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800380e:	4bad      	ldr	r3, [pc, #692]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003810:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003812:	4bac      	ldr	r3, [pc, #688]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003814:	2180      	movs	r1, #128	; 0x80
 8003816:	0549      	lsls	r1, r1, #21
 8003818:	430a      	orrs	r2, r1
 800381a:	63da      	str	r2, [r3, #60]	; 0x3c
 800381c:	4ba9      	ldr	r3, [pc, #676]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800381e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003820:	2380      	movs	r3, #128	; 0x80
 8003822:	055b      	lsls	r3, r3, #21
 8003824:	4013      	ands	r3, r2
 8003826:	60bb      	str	r3, [r7, #8]
 8003828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800382a:	183b      	adds	r3, r7, r0
 800382c:	2201      	movs	r2, #1
 800382e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003830:	4ba5      	ldr	r3, [pc, #660]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4ba4      	ldr	r3, [pc, #656]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003836:	2180      	movs	r1, #128	; 0x80
 8003838:	0049      	lsls	r1, r1, #1
 800383a:	430a      	orrs	r2, r1
 800383c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800383e:	f7fe fd7d 	bl	800233c <HAL_GetTick>
 8003842:	0003      	movs	r3, r0
 8003844:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003846:	e00b      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003848:	f7fe fd78 	bl	800233c <HAL_GetTick>
 800384c:	0002      	movs	r2, r0
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d904      	bls.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003856:	2313      	movs	r3, #19
 8003858:	18fb      	adds	r3, r7, r3
 800385a:	2203      	movs	r2, #3
 800385c:	701a      	strb	r2, [r3, #0]
        break;
 800385e:	e005      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003860:	4b99      	ldr	r3, [pc, #612]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	2380      	movs	r3, #128	; 0x80
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	4013      	ands	r3, r2
 800386a:	d0ed      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800386c:	2313      	movs	r3, #19
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d154      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003876:	4b93      	ldr	r3, [pc, #588]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003878:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800387a:	23c0      	movs	r3, #192	; 0xc0
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4013      	ands	r3, r2
 8003880:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d019      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	429a      	cmp	r2, r3
 8003890:	d014      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003892:	4b8c      	ldr	r3, [pc, #560]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003896:	4a8d      	ldr	r2, [pc, #564]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003898:	4013      	ands	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800389c:	4b89      	ldr	r3, [pc, #548]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800389e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038a0:	4b88      	ldr	r3, [pc, #544]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038a2:	2180      	movs	r1, #128	; 0x80
 80038a4:	0249      	lsls	r1, r1, #9
 80038a6:	430a      	orrs	r2, r1
 80038a8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038aa:	4b86      	ldr	r3, [pc, #536]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038ae:	4b85      	ldr	r3, [pc, #532]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038b0:	4987      	ldr	r1, [pc, #540]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80038b2:	400a      	ands	r2, r1
 80038b4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038b6:	4b83      	ldr	r3, [pc, #524]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2201      	movs	r2, #1
 80038c0:	4013      	ands	r3, r2
 80038c2:	d016      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c4:	f7fe fd3a 	bl	800233c <HAL_GetTick>
 80038c8:	0003      	movs	r3, r0
 80038ca:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038cc:	e00c      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ce:	f7fe fd35 	bl	800233c <HAL_GetTick>
 80038d2:	0002      	movs	r2, r0
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	4a7e      	ldr	r2, [pc, #504]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d904      	bls.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80038de:	2313      	movs	r3, #19
 80038e0:	18fb      	adds	r3, r7, r3
 80038e2:	2203      	movs	r2, #3
 80038e4:	701a      	strb	r2, [r3, #0]
            break;
 80038e6:	e004      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038e8:	4b76      	ldr	r3, [pc, #472]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ec:	2202      	movs	r2, #2
 80038ee:	4013      	ands	r3, r2
 80038f0:	d0ed      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80038f2:	2313      	movs	r3, #19
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10a      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038fc:	4b71      	ldr	r3, [pc, #452]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003900:	4a72      	ldr	r2, [pc, #456]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003902:	4013      	ands	r3, r2
 8003904:	0019      	movs	r1, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800390a:	4b6e      	ldr	r3, [pc, #440]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800390c:	430a      	orrs	r2, r1
 800390e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003910:	e00c      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003912:	2312      	movs	r3, #18
 8003914:	18fb      	adds	r3, r7, r3
 8003916:	2213      	movs	r2, #19
 8003918:	18ba      	adds	r2, r7, r2
 800391a:	7812      	ldrb	r2, [r2, #0]
 800391c:	701a      	strb	r2, [r3, #0]
 800391e:	e005      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003920:	2312      	movs	r3, #18
 8003922:	18fb      	adds	r3, r7, r3
 8003924:	2213      	movs	r2, #19
 8003926:	18ba      	adds	r2, r7, r2
 8003928:	7812      	ldrb	r2, [r2, #0]
 800392a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800392c:	2311      	movs	r3, #17
 800392e:	18fb      	adds	r3, r7, r3
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d105      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003936:	4b63      	ldr	r3, [pc, #396]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003938:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800393a:	4b62      	ldr	r3, [pc, #392]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800393c:	4966      	ldr	r1, [pc, #408]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800393e:	400a      	ands	r2, r1
 8003940:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2201      	movs	r2, #1
 8003948:	4013      	ands	r3, r2
 800394a:	d009      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800394c:	4b5d      	ldr	r3, [pc, #372]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800394e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003950:	2203      	movs	r2, #3
 8003952:	4393      	bics	r3, r2
 8003954:	0019      	movs	r1, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	4b5a      	ldr	r3, [pc, #360]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800395c:	430a      	orrs	r2, r1
 800395e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2202      	movs	r2, #2
 8003966:	4013      	ands	r3, r2
 8003968:	d009      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800396a:	4b56      	ldr	r3, [pc, #344]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800396c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396e:	220c      	movs	r2, #12
 8003970:	4393      	bics	r3, r2
 8003972:	0019      	movs	r1, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	4b52      	ldr	r3, [pc, #328]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800397a:	430a      	orrs	r2, r1
 800397c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2204      	movs	r2, #4
 8003984:	4013      	ands	r3, r2
 8003986:	d009      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003988:	4b4e      	ldr	r3, [pc, #312]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800398a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398c:	2230      	movs	r2, #48	; 0x30
 800398e:	4393      	bics	r3, r2
 8003990:	0019      	movs	r1, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	4b4b      	ldr	r3, [pc, #300]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003998:	430a      	orrs	r2, r1
 800399a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2220      	movs	r2, #32
 80039a2:	4013      	ands	r3, r2
 80039a4:	d009      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039a6:	4b47      	ldr	r3, [pc, #284]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039aa:	4a4c      	ldr	r2, [pc, #304]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	0019      	movs	r1, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	4b43      	ldr	r3, [pc, #268]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039b6:	430a      	orrs	r2, r1
 80039b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2240      	movs	r2, #64	; 0x40
 80039c0:	4013      	ands	r3, r2
 80039c2:	d009      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039c4:	4b3f      	ldr	r3, [pc, #252]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c8:	4a45      	ldr	r2, [pc, #276]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80039ca:	4013      	ands	r3, r2
 80039cc:	0019      	movs	r1, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695a      	ldr	r2, [r3, #20]
 80039d2:	4b3c      	ldr	r3, [pc, #240]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039d4:	430a      	orrs	r2, r1
 80039d6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	2380      	movs	r3, #128	; 0x80
 80039de:	01db      	lsls	r3, r3, #7
 80039e0:	4013      	ands	r3, r2
 80039e2:	d015      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039e4:	4b37      	ldr	r3, [pc, #220]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	0899      	lsrs	r1, r3, #2
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1a      	ldr	r2, [r3, #32]
 80039f0:	4b34      	ldr	r3, [pc, #208]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039f2:	430a      	orrs	r2, r1
 80039f4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1a      	ldr	r2, [r3, #32]
 80039fa:	2380      	movs	r3, #128	; 0x80
 80039fc:	05db      	lsls	r3, r3, #23
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d106      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003a02:	4b30      	ldr	r3, [pc, #192]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	4b2f      	ldr	r3, [pc, #188]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a08:	2180      	movs	r1, #128	; 0x80
 8003a0a:	0249      	lsls	r1, r1, #9
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	2380      	movs	r3, #128	; 0x80
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	4013      	ands	r3, r2
 8003a1a:	d014      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003a1c:	4b29      	ldr	r3, [pc, #164]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a20:	2203      	movs	r2, #3
 8003a22:	4393      	bics	r3, r2
 8003a24:	0019      	movs	r1, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699a      	ldr	r2, [r3, #24]
 8003a2a:	4b26      	ldr	r3, [pc, #152]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d106      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003a38:	4b22      	ldr	r3, [pc, #136]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	4b21      	ldr	r3, [pc, #132]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a3e:	2180      	movs	r1, #128	; 0x80
 8003a40:	0249      	lsls	r1, r1, #9
 8003a42:	430a      	orrs	r2, r1
 8003a44:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	2380      	movs	r3, #128	; 0x80
 8003a4c:	019b      	lsls	r3, r3, #6
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d014      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003a52:	4b1c      	ldr	r3, [pc, #112]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a56:	220c      	movs	r2, #12
 8003a58:	4393      	bics	r3, r2
 8003a5a:	0019      	movs	r1, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	69da      	ldr	r2, [r3, #28]
 8003a60:	4b18      	ldr	r3, [pc, #96]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a62:	430a      	orrs	r2, r1
 8003a64:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d106      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003a6e:	4b15      	ldr	r3, [pc, #84]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	4b14      	ldr	r3, [pc, #80]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a74:	2180      	movs	r1, #128	; 0x80
 8003a76:	0249      	lsls	r1, r1, #9
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	2380      	movs	r3, #128	; 0x80
 8003a82:	045b      	lsls	r3, r3, #17
 8003a84:	4013      	ands	r3, r2
 8003a86:	d016      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a88:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8c:	4a13      	ldr	r2, [pc, #76]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	0019      	movs	r1, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a96:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aa0:	2380      	movs	r3, #128	; 0x80
 8003aa2:	019b      	lsls	r3, r3, #6
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d106      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003aa8:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003aae:	2180      	movs	r1, #128	; 0x80
 8003ab0:	0449      	lsls	r1, r1, #17
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003ab6:	2312      	movs	r3, #18
 8003ab8:	18fb      	adds	r3, r7, r3
 8003aba:	781b      	ldrb	r3, [r3, #0]
}
 8003abc:	0018      	movs	r0, r3
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b006      	add	sp, #24
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40007000 	.word	0x40007000
 8003acc:	fffffcff 	.word	0xfffffcff
 8003ad0:	fffeffff 	.word	0xfffeffff
 8003ad4:	00001388 	.word	0x00001388
 8003ad8:	efffffff 	.word	0xefffffff
 8003adc:	ffffcfff 	.word	0xffffcfff
 8003ae0:	ffff3fff 	.word	0xffff3fff

08003ae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e04a      	b.n	8003b8c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	223d      	movs	r2, #61	; 0x3d
 8003afa:	5c9b      	ldrb	r3, [r3, r2]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d107      	bne.n	8003b12 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	223c      	movs	r2, #60	; 0x3c
 8003b06:	2100      	movs	r1, #0
 8003b08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f7fe f9d3 	bl	8001eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	223d      	movs	r2, #61	; 0x3d
 8003b16:	2102      	movs	r1, #2
 8003b18:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3304      	adds	r3, #4
 8003b22:	0019      	movs	r1, r3
 8003b24:	0010      	movs	r0, r2
 8003b26:	f000 fae7 	bl	80040f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2248      	movs	r2, #72	; 0x48
 8003b2e:	2101      	movs	r1, #1
 8003b30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	223e      	movs	r2, #62	; 0x3e
 8003b36:	2101      	movs	r1, #1
 8003b38:	5499      	strb	r1, [r3, r2]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	223f      	movs	r2, #63	; 0x3f
 8003b3e:	2101      	movs	r1, #1
 8003b40:	5499      	strb	r1, [r3, r2]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2240      	movs	r2, #64	; 0x40
 8003b46:	2101      	movs	r1, #1
 8003b48:	5499      	strb	r1, [r3, r2]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2241      	movs	r2, #65	; 0x41
 8003b4e:	2101      	movs	r1, #1
 8003b50:	5499      	strb	r1, [r3, r2]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2242      	movs	r2, #66	; 0x42
 8003b56:	2101      	movs	r1, #1
 8003b58:	5499      	strb	r1, [r3, r2]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2243      	movs	r2, #67	; 0x43
 8003b5e:	2101      	movs	r1, #1
 8003b60:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2244      	movs	r2, #68	; 0x44
 8003b66:	2101      	movs	r1, #1
 8003b68:	5499      	strb	r1, [r3, r2]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2245      	movs	r2, #69	; 0x45
 8003b6e:	2101      	movs	r1, #1
 8003b70:	5499      	strb	r1, [r3, r2]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2246      	movs	r2, #70	; 0x46
 8003b76:	2101      	movs	r1, #1
 8003b78:	5499      	strb	r1, [r3, r2]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2247      	movs	r2, #71	; 0x47
 8003b7e:	2101      	movs	r1, #1
 8003b80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	223d      	movs	r2, #61	; 0x3d
 8003b86:	2101      	movs	r1, #1
 8003b88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	b002      	add	sp, #8
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	223d      	movs	r2, #61	; 0x3d
 8003ba0:	5c9b      	ldrb	r3, [r3, r2]
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d001      	beq.n	8003bac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e041      	b.n	8003c30 <HAL_TIM_Base_Start_IT+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	223d      	movs	r2, #61	; 0x3d
 8003bb0:	2102      	movs	r1, #2
 8003bb2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a1b      	ldr	r2, [pc, #108]	; (8003c38 <HAL_TIM_Base_Start_IT+0xa4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d00e      	beq.n	8003bec <HAL_TIM_Base_Start_IT+0x58>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a1a      	ldr	r2, [pc, #104]	; (8003c3c <HAL_TIM_Base_Start_IT+0xa8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d009      	beq.n	8003bec <HAL_TIM_Base_Start_IT+0x58>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a18      	ldr	r2, [pc, #96]	; (8003c40 <HAL_TIM_Base_Start_IT+0xac>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d004      	beq.n	8003bec <HAL_TIM_Base_Start_IT+0x58>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a17      	ldr	r2, [pc, #92]	; (8003c44 <HAL_TIM_Base_Start_IT+0xb0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d116      	bne.n	8003c1a <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	4a15      	ldr	r2, [pc, #84]	; (8003c48 <HAL_TIM_Base_Start_IT+0xb4>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2b06      	cmp	r3, #6
 8003bfc:	d016      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0x98>
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	2380      	movs	r3, #128	; 0x80
 8003c02:	025b      	lsls	r3, r3, #9
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d011      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0x98>
    {
      __HAL_TIM_ENABLE(htim);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2101      	movs	r1, #1
 8003c14:	430a      	orrs	r2, r1
 8003c16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c18:	e008      	b.n	8003c2c <HAL_TIM_Base_Start_IT+0x98>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2101      	movs	r1, #1
 8003c26:	430a      	orrs	r2, r1
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	e000      	b.n	8003c2e <HAL_TIM_Base_Start_IT+0x9a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c2c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	0018      	movs	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	b004      	add	sp, #16
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40012c00 	.word	0x40012c00
 8003c3c:	40000400 	.word	0x40000400
 8003c40:	40000800 	.word	0x40000800
 8003c44:	40014000 	.word	0x40014000
 8003c48:	00010007 	.word	0x00010007

08003c4c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2101      	movs	r1, #1
 8003c60:	438a      	bics	r2, r1
 8003c62:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	4a0d      	ldr	r2, [pc, #52]	; (8003ca0 <HAL_TIM_Base_Stop_IT+0x54>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d10d      	bne.n	8003c8c <HAL_TIM_Base_Stop_IT+0x40>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	4a0b      	ldr	r2, [pc, #44]	; (8003ca4 <HAL_TIM_Base_Stop_IT+0x58>)
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d107      	bne.n	8003c8c <HAL_TIM_Base_Stop_IT+0x40>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2101      	movs	r1, #1
 8003c88:	438a      	bics	r2, r1
 8003c8a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	223d      	movs	r2, #61	; 0x3d
 8003c90:	2101      	movs	r1, #1
 8003c92:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	0018      	movs	r0, r3
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	b002      	add	sp, #8
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	00001111 	.word	0x00001111
 8003ca4:	00000444 	.word	0x00000444

08003ca8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	4013      	ands	r3, r2
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d124      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d11d      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2203      	movs	r2, #3
 8003cd2:	4252      	negs	r2, r2
 8003cd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d004      	beq.n	8003cf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	0018      	movs	r0, r3
 8003cec:	f000 f9ec 	bl	80040c8 <HAL_TIM_IC_CaptureCallback>
 8003cf0:	e007      	b.n	8003d02 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f000 f9df 	bl	80040b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f000 f9eb 	bl	80040d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2204      	movs	r2, #4
 8003d10:	4013      	ands	r3, r2
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d125      	bne.n	8003d62 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	2204      	movs	r2, #4
 8003d1e:	4013      	ands	r3, r2
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d11e      	bne.n	8003d62 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2205      	movs	r2, #5
 8003d2a:	4252      	negs	r2, r2
 8003d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2202      	movs	r2, #2
 8003d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699a      	ldr	r2, [r3, #24]
 8003d3a:	23c0      	movs	r3, #192	; 0xc0
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d004      	beq.n	8003d4c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	0018      	movs	r0, r3
 8003d46:	f000 f9bf 	bl	80040c8 <HAL_TIM_IC_CaptureCallback>
 8003d4a:	e007      	b.n	8003d5c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	0018      	movs	r0, r3
 8003d50:	f000 f9b2 	bl	80040b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	0018      	movs	r0, r3
 8003d58:	f000 f9be 	bl	80040d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	2208      	movs	r2, #8
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d124      	bne.n	8003dba <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	2208      	movs	r2, #8
 8003d78:	4013      	ands	r3, r2
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d11d      	bne.n	8003dba <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2209      	movs	r2, #9
 8003d84:	4252      	negs	r2, r2
 8003d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	2203      	movs	r2, #3
 8003d96:	4013      	ands	r3, r2
 8003d98:	d004      	beq.n	8003da4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f000 f993 	bl	80040c8 <HAL_TIM_IC_CaptureCallback>
 8003da2:	e007      	b.n	8003db4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	0018      	movs	r0, r3
 8003da8:	f000 f986 	bl	80040b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	0018      	movs	r0, r3
 8003db0:	f000 f992 	bl	80040d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	2210      	movs	r2, #16
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	2b10      	cmp	r3, #16
 8003dc6:	d125      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	2210      	movs	r2, #16
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b10      	cmp	r3, #16
 8003dd4:	d11e      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2211      	movs	r2, #17
 8003ddc:	4252      	negs	r2, r2
 8003dde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2208      	movs	r2, #8
 8003de4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69da      	ldr	r2, [r3, #28]
 8003dec:	23c0      	movs	r3, #192	; 0xc0
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4013      	ands	r3, r2
 8003df2:	d004      	beq.n	8003dfe <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	0018      	movs	r0, r3
 8003df8:	f000 f966 	bl	80040c8 <HAL_TIM_IC_CaptureCallback>
 8003dfc:	e007      	b.n	8003e0e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	0018      	movs	r0, r3
 8003e02:	f000 f959 	bl	80040b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	0018      	movs	r0, r3
 8003e0a:	f000 f965 	bl	80040d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d10f      	bne.n	8003e42 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d108      	bne.n	8003e42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2202      	movs	r2, #2
 8003e36:	4252      	negs	r2, r2
 8003e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f7fd fdad 	bl	800199c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	2280      	movs	r2, #128	; 0x80
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b80      	cmp	r3, #128	; 0x80
 8003e4e:	d10f      	bne.n	8003e70 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	2280      	movs	r2, #128	; 0x80
 8003e58:	4013      	ands	r3, r2
 8003e5a:	2b80      	cmp	r3, #128	; 0x80
 8003e5c:	d108      	bne.n	8003e70 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2281      	movs	r2, #129	; 0x81
 8003e64:	4252      	negs	r2, r2
 8003e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f000 fad8 	bl	8004420 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691a      	ldr	r2, [r3, #16]
 8003e76:	2380      	movs	r3, #128	; 0x80
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	401a      	ands	r2, r3
 8003e7c:	2380      	movs	r3, #128	; 0x80
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d10e      	bne.n	8003ea2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	2280      	movs	r2, #128	; 0x80
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2b80      	cmp	r3, #128	; 0x80
 8003e90:	d107      	bne.n	8003ea2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a1c      	ldr	r2, [pc, #112]	; (8003f08 <HAL_TIM_IRQHandler+0x260>)
 8003e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	f000 fac7 	bl	8004430 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	2240      	movs	r2, #64	; 0x40
 8003eaa:	4013      	ands	r3, r2
 8003eac:	2b40      	cmp	r3, #64	; 0x40
 8003eae:	d10f      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	2240      	movs	r2, #64	; 0x40
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2b40      	cmp	r3, #64	; 0x40
 8003ebc:	d108      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2241      	movs	r2, #65	; 0x41
 8003ec4:	4252      	negs	r2, r2
 8003ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f000 f90c 	bl	80040e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	4013      	ands	r3, r2
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	d10f      	bne.n	8003efe <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	2b20      	cmp	r3, #32
 8003eea:	d108      	bne.n	8003efe <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2221      	movs	r2, #33	; 0x21
 8003ef2:	4252      	negs	r2, r2
 8003ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f000 fa89 	bl	8004410 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003efe:	46c0      	nop			; (mov r8, r8)
 8003f00:	46bd      	mov	sp, r7
 8003f02:	b002      	add	sp, #8
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	fffffeff 	.word	0xfffffeff

08003f0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f16:	230f      	movs	r3, #15
 8003f18:	18fb      	adds	r3, r7, r3
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	223c      	movs	r2, #60	; 0x3c
 8003f22:	5c9b      	ldrb	r3, [r3, r2]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_TIM_ConfigClockSource+0x20>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e0bc      	b.n	80040a6 <HAL_TIM_ConfigClockSource+0x19a>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	223c      	movs	r2, #60	; 0x3c
 8003f30:	2101      	movs	r1, #1
 8003f32:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	223d      	movs	r2, #61	; 0x3d
 8003f38:	2102      	movs	r1, #2
 8003f3a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4a5a      	ldr	r2, [pc, #360]	; (80040b0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	4a59      	ldr	r2, [pc, #356]	; (80040b4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003f50:	4013      	ands	r3, r2
 8003f52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2280      	movs	r2, #128	; 0x80
 8003f62:	0192      	lsls	r2, r2, #6
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d040      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0xde>
 8003f68:	2280      	movs	r2, #128	; 0x80
 8003f6a:	0192      	lsls	r2, r2, #6
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d900      	bls.n	8003f72 <HAL_TIM_ConfigClockSource+0x66>
 8003f70:	e088      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x178>
 8003f72:	2280      	movs	r2, #128	; 0x80
 8003f74:	0152      	lsls	r2, r2, #5
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d100      	bne.n	8003f7c <HAL_TIM_ConfigClockSource+0x70>
 8003f7a:	e088      	b.n	800408e <HAL_TIM_ConfigClockSource+0x182>
 8003f7c:	2280      	movs	r2, #128	; 0x80
 8003f7e:	0152      	lsls	r2, r2, #5
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d900      	bls.n	8003f86 <HAL_TIM_ConfigClockSource+0x7a>
 8003f84:	e07e      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x178>
 8003f86:	2b70      	cmp	r3, #112	; 0x70
 8003f88:	d018      	beq.n	8003fbc <HAL_TIM_ConfigClockSource+0xb0>
 8003f8a:	d900      	bls.n	8003f8e <HAL_TIM_ConfigClockSource+0x82>
 8003f8c:	e07a      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x178>
 8003f8e:	2b60      	cmp	r3, #96	; 0x60
 8003f90:	d04f      	beq.n	8004032 <HAL_TIM_ConfigClockSource+0x126>
 8003f92:	d900      	bls.n	8003f96 <HAL_TIM_ConfigClockSource+0x8a>
 8003f94:	e076      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x178>
 8003f96:	2b50      	cmp	r3, #80	; 0x50
 8003f98:	d03b      	beq.n	8004012 <HAL_TIM_ConfigClockSource+0x106>
 8003f9a:	d900      	bls.n	8003f9e <HAL_TIM_ConfigClockSource+0x92>
 8003f9c:	e072      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x178>
 8003f9e:	2b40      	cmp	r3, #64	; 0x40
 8003fa0:	d057      	beq.n	8004052 <HAL_TIM_ConfigClockSource+0x146>
 8003fa2:	d900      	bls.n	8003fa6 <HAL_TIM_ConfigClockSource+0x9a>
 8003fa4:	e06e      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x178>
 8003fa6:	2b30      	cmp	r3, #48	; 0x30
 8003fa8:	d063      	beq.n	8004072 <HAL_TIM_ConfigClockSource+0x166>
 8003faa:	d86b      	bhi.n	8004084 <HAL_TIM_ConfigClockSource+0x178>
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	d060      	beq.n	8004072 <HAL_TIM_ConfigClockSource+0x166>
 8003fb0:	d868      	bhi.n	8004084 <HAL_TIM_ConfigClockSource+0x178>
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d05d      	beq.n	8004072 <HAL_TIM_ConfigClockSource+0x166>
 8003fb6:	2b10      	cmp	r3, #16
 8003fb8:	d05b      	beq.n	8004072 <HAL_TIM_ConfigClockSource+0x166>
 8003fba:	e063      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6818      	ldr	r0, [r3, #0]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	6899      	ldr	r1, [r3, #8]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f000 f990 	bl	80042f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2277      	movs	r2, #119	; 0x77
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	609a      	str	r2, [r3, #8]
      break;
 8003fe8:	e052      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6818      	ldr	r0, [r3, #0]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	6899      	ldr	r1, [r3, #8]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f000 f979 	bl	80042f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2180      	movs	r1, #128	; 0x80
 800400a:	01c9      	lsls	r1, r1, #7
 800400c:	430a      	orrs	r2, r1
 800400e:	609a      	str	r2, [r3, #8]
      break;
 8004010:	e03e      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6818      	ldr	r0, [r3, #0]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	6859      	ldr	r1, [r3, #4]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	001a      	movs	r2, r3
 8004020:	f000 f8ea 	bl	80041f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2150      	movs	r1, #80	; 0x50
 800402a:	0018      	movs	r0, r3
 800402c:	f000 f944 	bl	80042b8 <TIM_ITRx_SetConfig>
      break;
 8004030:	e02e      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6818      	ldr	r0, [r3, #0]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	6859      	ldr	r1, [r3, #4]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	001a      	movs	r2, r3
 8004040:	f000 f908 	bl	8004254 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2160      	movs	r1, #96	; 0x60
 800404a:	0018      	movs	r0, r3
 800404c:	f000 f934 	bl	80042b8 <TIM_ITRx_SetConfig>
      break;
 8004050:	e01e      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6818      	ldr	r0, [r3, #0]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	6859      	ldr	r1, [r3, #4]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	001a      	movs	r2, r3
 8004060:	f000 f8ca 	bl	80041f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2140      	movs	r1, #64	; 0x40
 800406a:	0018      	movs	r0, r3
 800406c:	f000 f924 	bl	80042b8 <TIM_ITRx_SetConfig>
      break;
 8004070:	e00e      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	0019      	movs	r1, r3
 800407c:	0010      	movs	r0, r2
 800407e:	f000 f91b 	bl	80042b8 <TIM_ITRx_SetConfig>
      break;
 8004082:	e005      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004084:	230f      	movs	r3, #15
 8004086:	18fb      	adds	r3, r7, r3
 8004088:	2201      	movs	r2, #1
 800408a:	701a      	strb	r2, [r3, #0]
      break;
 800408c:	e000      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800408e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	223d      	movs	r2, #61	; 0x3d
 8004094:	2101      	movs	r1, #1
 8004096:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	223c      	movs	r2, #60	; 0x3c
 800409c:	2100      	movs	r1, #0
 800409e:	5499      	strb	r1, [r3, r2]

  return status;
 80040a0:	230f      	movs	r3, #15
 80040a2:	18fb      	adds	r3, r7, r3
 80040a4:	781b      	ldrb	r3, [r3, #0]
}
 80040a6:	0018      	movs	r0, r3
 80040a8:	46bd      	mov	sp, r7
 80040aa:	b004      	add	sp, #16
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	ffceff88 	.word	0xffceff88
 80040b4:	ffff00ff 	.word	0xffff00ff

080040b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040c0:	46c0      	nop			; (mov r8, r8)
 80040c2:	46bd      	mov	sp, r7
 80040c4:	b002      	add	sp, #8
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040d0:	46c0      	nop			; (mov r8, r8)
 80040d2:	46bd      	mov	sp, r7
 80040d4:	b002      	add	sp, #8
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040e0:	46c0      	nop			; (mov r8, r8)
 80040e2:	46bd      	mov	sp, r7
 80040e4:	b002      	add	sp, #8
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040f0:	46c0      	nop			; (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b002      	add	sp, #8
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a33      	ldr	r2, [pc, #204]	; (80041d8 <TIM_Base_SetConfig+0xe0>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d007      	beq.n	8004120 <TIM_Base_SetConfig+0x28>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a32      	ldr	r2, [pc, #200]	; (80041dc <TIM_Base_SetConfig+0xe4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d003      	beq.n	8004120 <TIM_Base_SetConfig+0x28>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a31      	ldr	r2, [pc, #196]	; (80041e0 <TIM_Base_SetConfig+0xe8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d108      	bne.n	8004132 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2270      	movs	r2, #112	; 0x70
 8004124:	4393      	bics	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a28      	ldr	r2, [pc, #160]	; (80041d8 <TIM_Base_SetConfig+0xe0>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d017      	beq.n	800416a <TIM_Base_SetConfig+0x72>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a27      	ldr	r2, [pc, #156]	; (80041dc <TIM_Base_SetConfig+0xe4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d013      	beq.n	800416a <TIM_Base_SetConfig+0x72>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a26      	ldr	r2, [pc, #152]	; (80041e0 <TIM_Base_SetConfig+0xe8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00f      	beq.n	800416a <TIM_Base_SetConfig+0x72>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a25      	ldr	r2, [pc, #148]	; (80041e4 <TIM_Base_SetConfig+0xec>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d00b      	beq.n	800416a <TIM_Base_SetConfig+0x72>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a24      	ldr	r2, [pc, #144]	; (80041e8 <TIM_Base_SetConfig+0xf0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d007      	beq.n	800416a <TIM_Base_SetConfig+0x72>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a23      	ldr	r2, [pc, #140]	; (80041ec <TIM_Base_SetConfig+0xf4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d003      	beq.n	800416a <TIM_Base_SetConfig+0x72>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a22      	ldr	r2, [pc, #136]	; (80041f0 <TIM_Base_SetConfig+0xf8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d108      	bne.n	800417c <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4a21      	ldr	r2, [pc, #132]	; (80041f4 <TIM_Base_SetConfig+0xfc>)
 800416e:	4013      	ands	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2280      	movs	r2, #128	; 0x80
 8004180:	4393      	bics	r3, r2
 8004182:	001a      	movs	r2, r3
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	4313      	orrs	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a0c      	ldr	r2, [pc, #48]	; (80041d8 <TIM_Base_SetConfig+0xe0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00b      	beq.n	80041c2 <TIM_Base_SetConfig+0xca>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a0e      	ldr	r2, [pc, #56]	; (80041e8 <TIM_Base_SetConfig+0xf0>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d007      	beq.n	80041c2 <TIM_Base_SetConfig+0xca>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a0d      	ldr	r2, [pc, #52]	; (80041ec <TIM_Base_SetConfig+0xf4>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d003      	beq.n	80041c2 <TIM_Base_SetConfig+0xca>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a0c      	ldr	r2, [pc, #48]	; (80041f0 <TIM_Base_SetConfig+0xf8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d103      	bne.n	80041ca <TIM_Base_SetConfig+0xd2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	615a      	str	r2, [r3, #20]
}
 80041d0:	46c0      	nop			; (mov r8, r8)
 80041d2:	46bd      	mov	sp, r7
 80041d4:	b004      	add	sp, #16
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40012c00 	.word	0x40012c00
 80041dc:	40000400 	.word	0x40000400
 80041e0:	40000800 	.word	0x40000800
 80041e4:	40002000 	.word	0x40002000
 80041e8:	40014000 	.word	0x40014000
 80041ec:	40014400 	.word	0x40014400
 80041f0:	40014800 	.word	0x40014800
 80041f4:	fffffcff 	.word	0xfffffcff

080041f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	2201      	movs	r2, #1
 8004210:	4393      	bics	r3, r2
 8004212:	001a      	movs	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	22f0      	movs	r2, #240	; 0xf0
 8004222:	4393      	bics	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	220a      	movs	r2, #10
 8004234:	4393      	bics	r3, r2
 8004236:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	621a      	str	r2, [r3, #32]
}
 800424c:	46c0      	nop			; (mov r8, r8)
 800424e:	46bd      	mov	sp, r7
 8004250:	b006      	add	sp, #24
 8004252:	bd80      	pop	{r7, pc}

08004254 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	2210      	movs	r2, #16
 8004266:	4393      	bics	r3, r2
 8004268:	001a      	movs	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	4a0d      	ldr	r2, [pc, #52]	; (80042b4 <TIM_TI2_ConfigInputStage+0x60>)
 800427e:	4013      	ands	r3, r2
 8004280:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	031b      	lsls	r3, r3, #12
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	22a0      	movs	r2, #160	; 0xa0
 8004290:	4393      	bics	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	4313      	orrs	r3, r2
 800429c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	621a      	str	r2, [r3, #32]
}
 80042aa:	46c0      	nop			; (mov r8, r8)
 80042ac:	46bd      	mov	sp, r7
 80042ae:	b006      	add	sp, #24
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	ffff0fff 	.word	0xffff0fff

080042b8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4a08      	ldr	r2, [pc, #32]	; (80042ec <TIM_ITRx_SetConfig+0x34>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	2207      	movs	r2, #7
 80042d8:	4313      	orrs	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	609a      	str	r2, [r3, #8]
}
 80042e2:	46c0      	nop			; (mov r8, r8)
 80042e4:	46bd      	mov	sp, r7
 80042e6:	b004      	add	sp, #16
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	ffcfff8f 	.word	0xffcfff8f

080042f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	4a09      	ldr	r2, [pc, #36]	; (800432c <TIM_ETR_SetConfig+0x3c>)
 8004308:	4013      	ands	r3, r2
 800430a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	021a      	lsls	r2, r3, #8
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	431a      	orrs	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4313      	orrs	r3, r2
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	4313      	orrs	r3, r2
 800431c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	609a      	str	r2, [r3, #8]
}
 8004324:	46c0      	nop			; (mov r8, r8)
 8004326:	46bd      	mov	sp, r7
 8004328:	b006      	add	sp, #24
 800432a:	bd80      	pop	{r7, pc}
 800432c:	ffff00ff 	.word	0xffff00ff

08004330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	223c      	movs	r2, #60	; 0x3c
 800433e:	5c9b      	ldrb	r3, [r3, r2]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004344:	2302      	movs	r3, #2
 8004346:	e054      	b.n	80043f2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	223c      	movs	r2, #60	; 0x3c
 800434c:	2101      	movs	r1, #1
 800434e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	223d      	movs	r2, #61	; 0x3d
 8004354:	2102      	movs	r1, #2
 8004356:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a23      	ldr	r2, [pc, #140]	; (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d108      	bne.n	8004384 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4a22      	ldr	r2, [pc, #136]	; (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004376:	4013      	ands	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4313      	orrs	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2270      	movs	r2, #112	; 0x70
 8004388:	4393      	bics	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a16      	ldr	r2, [pc, #88]	; (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d00e      	beq.n	80043c6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a15      	ldr	r2, [pc, #84]	; (8004404 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d009      	beq.n	80043c6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a14      	ldr	r2, [pc, #80]	; (8004408 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d004      	beq.n	80043c6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a12      	ldr	r2, [pc, #72]	; (800440c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d10c      	bne.n	80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2280      	movs	r2, #128	; 0x80
 80043ca:	4393      	bics	r3, r2
 80043cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	223d      	movs	r2, #61	; 0x3d
 80043e4:	2101      	movs	r1, #1
 80043e6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	223c      	movs	r2, #60	; 0x3c
 80043ec:	2100      	movs	r1, #0
 80043ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	0018      	movs	r0, r3
 80043f4:	46bd      	mov	sp, r7
 80043f6:	b004      	add	sp, #16
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	40012c00 	.word	0x40012c00
 8004400:	ff0fffff 	.word	0xff0fffff
 8004404:	40000400 	.word	0x40000400
 8004408:	40000800 	.word	0x40000800
 800440c:	40014000 	.word	0x40014000

08004410 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004418:	46c0      	nop			; (mov r8, r8)
 800441a:	46bd      	mov	sp, r7
 800441c:	b002      	add	sp, #8
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004428:	46c0      	nop			; (mov r8, r8)
 800442a:	46bd      	mov	sp, r7
 800442c:	b002      	add	sp, #8
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004438:	46c0      	nop			; (mov r8, r8)
 800443a:	46bd      	mov	sp, r7
 800443c:	b002      	add	sp, #8
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e046      	b.n	80044e0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2288      	movs	r2, #136	; 0x88
 8004456:	589b      	ldr	r3, [r3, r2]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d107      	bne.n	800446c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2284      	movs	r2, #132	; 0x84
 8004460:	2100      	movs	r1, #0
 8004462:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	0018      	movs	r0, r3
 8004468:	f7fd fd88 	bl	8001f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2288      	movs	r2, #136	; 0x88
 8004470:	2124      	movs	r1, #36	; 0x24
 8004472:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2101      	movs	r1, #1
 8004480:	438a      	bics	r2, r1
 8004482:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	0018      	movs	r0, r3
 8004488:	f000 fcec 	bl	8004e64 <UART_SetConfig>
 800448c:	0003      	movs	r3, r0
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e024      	b.n	80044e0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	0018      	movs	r0, r3
 80044a2:	f000 fec1 	bl	8005228 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	490d      	ldr	r1, [pc, #52]	; (80044e8 <HAL_UART_Init+0xa8>)
 80044b2:	400a      	ands	r2, r1
 80044b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	212a      	movs	r1, #42	; 0x2a
 80044c2:	438a      	bics	r2, r1
 80044c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2101      	movs	r1, #1
 80044d2:	430a      	orrs	r2, r1
 80044d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	0018      	movs	r0, r3
 80044da:	f000 ff59 	bl	8005390 <UART_CheckIdleState>
 80044de:	0003      	movs	r3, r0
}
 80044e0:	0018      	movs	r0, r3
 80044e2:	46bd      	mov	sp, r7
 80044e4:	b002      	add	sp, #8
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	ffffb7ff 	.word	0xffffb7ff

080044ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08a      	sub	sp, #40	; 0x28
 80044f0:	af02      	add	r7, sp, #8
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	603b      	str	r3, [r7, #0]
 80044f8:	1dbb      	adds	r3, r7, #6
 80044fa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2288      	movs	r2, #136	; 0x88
 8004500:	589b      	ldr	r3, [r3, r2]
 8004502:	2b20      	cmp	r3, #32
 8004504:	d000      	beq.n	8004508 <HAL_UART_Transmit+0x1c>
 8004506:	e088      	b.n	800461a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_UART_Transmit+0x2a>
 800450e:	1dbb      	adds	r3, r7, #6
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e080      	b.n	800461c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	2380      	movs	r3, #128	; 0x80
 8004520:	015b      	lsls	r3, r3, #5
 8004522:	429a      	cmp	r2, r3
 8004524:	d109      	bne.n	800453a <HAL_UART_Transmit+0x4e>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d105      	bne.n	800453a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2201      	movs	r2, #1
 8004532:	4013      	ands	r3, r2
 8004534:	d001      	beq.n	800453a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e070      	b.n	800461c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2290      	movs	r2, #144	; 0x90
 800453e:	2100      	movs	r1, #0
 8004540:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2288      	movs	r2, #136	; 0x88
 8004546:	2121      	movs	r1, #33	; 0x21
 8004548:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800454a:	f7fd fef7 	bl	800233c <HAL_GetTick>
 800454e:	0003      	movs	r3, r0
 8004550:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1dba      	adds	r2, r7, #6
 8004556:	2154      	movs	r1, #84	; 0x54
 8004558:	8812      	ldrh	r2, [r2, #0]
 800455a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	1dba      	adds	r2, r7, #6
 8004560:	2156      	movs	r1, #86	; 0x56
 8004562:	8812      	ldrh	r2, [r2, #0]
 8004564:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	2380      	movs	r3, #128	; 0x80
 800456c:	015b      	lsls	r3, r3, #5
 800456e:	429a      	cmp	r2, r3
 8004570:	d108      	bne.n	8004584 <HAL_UART_Transmit+0x98>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d104      	bne.n	8004584 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800457a:	2300      	movs	r3, #0
 800457c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	e003      	b.n	800458c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004588:	2300      	movs	r3, #0
 800458a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800458c:	e02c      	b.n	80045e8 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	0013      	movs	r3, r2
 8004598:	2200      	movs	r2, #0
 800459a:	2180      	movs	r1, #128	; 0x80
 800459c:	f000 ff46 	bl	800542c <UART_WaitOnFlagUntilTimeout>
 80045a0:	1e03      	subs	r3, r0, #0
 80045a2:	d001      	beq.n	80045a8 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e039      	b.n	800461c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10b      	bne.n	80045c6 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	001a      	movs	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	05d2      	lsls	r2, r2, #23
 80045ba:	0dd2      	lsrs	r2, r2, #23
 80045bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	3302      	adds	r3, #2
 80045c2:	61bb      	str	r3, [r7, #24]
 80045c4:	e007      	b.n	80045d6 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	781a      	ldrb	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	3301      	adds	r3, #1
 80045d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2256      	movs	r2, #86	; 0x56
 80045da:	5a9b      	ldrh	r3, [r3, r2]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b299      	uxth	r1, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2256      	movs	r2, #86	; 0x56
 80045e6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2256      	movs	r2, #86	; 0x56
 80045ec:	5a9b      	ldrh	r3, [r3, r2]
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1cc      	bne.n	800458e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	0013      	movs	r3, r2
 80045fe:	2200      	movs	r2, #0
 8004600:	2140      	movs	r1, #64	; 0x40
 8004602:	f000 ff13 	bl	800542c <UART_WaitOnFlagUntilTimeout>
 8004606:	1e03      	subs	r3, r0, #0
 8004608:	d001      	beq.n	800460e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e006      	b.n	800461c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2288      	movs	r2, #136	; 0x88
 8004612:	2120      	movs	r1, #32
 8004614:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	e000      	b.n	800461c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800461a:	2302      	movs	r3, #2
  }
}
 800461c:	0018      	movs	r0, r3
 800461e:	46bd      	mov	sp, r7
 8004620:	b008      	add	sp, #32
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08a      	sub	sp, #40	; 0x28
 8004628:	af02      	add	r7, sp, #8
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	1dbb      	adds	r3, r7, #6
 8004632:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	228c      	movs	r2, #140	; 0x8c
 8004638:	589b      	ldr	r3, [r3, r2]
 800463a:	2b20      	cmp	r3, #32
 800463c:	d000      	beq.n	8004640 <HAL_UART_Receive+0x1c>
 800463e:	e0cc      	b.n	80047da <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_UART_Receive+0x2a>
 8004646:	1dbb      	adds	r3, r7, #6
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e0c4      	b.n	80047dc <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	689a      	ldr	r2, [r3, #8]
 8004656:	2380      	movs	r3, #128	; 0x80
 8004658:	015b      	lsls	r3, r3, #5
 800465a:	429a      	cmp	r2, r3
 800465c:	d109      	bne.n	8004672 <HAL_UART_Receive+0x4e>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d105      	bne.n	8004672 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2201      	movs	r2, #1
 800466a:	4013      	ands	r3, r2
 800466c:	d001      	beq.n	8004672 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e0b4      	b.n	80047dc <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2290      	movs	r2, #144	; 0x90
 8004676:	2100      	movs	r1, #0
 8004678:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	228c      	movs	r2, #140	; 0x8c
 800467e:	2122      	movs	r1, #34	; 0x22
 8004680:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004688:	f7fd fe58 	bl	800233c <HAL_GetTick>
 800468c:	0003      	movs	r3, r0
 800468e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	1dba      	adds	r2, r7, #6
 8004694:	215c      	movs	r1, #92	; 0x5c
 8004696:	8812      	ldrh	r2, [r2, #0]
 8004698:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	1dba      	adds	r2, r7, #6
 800469e:	215e      	movs	r1, #94	; 0x5e
 80046a0:	8812      	ldrh	r2, [r2, #0]
 80046a2:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	2380      	movs	r3, #128	; 0x80
 80046aa:	015b      	lsls	r3, r3, #5
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d10d      	bne.n	80046cc <HAL_UART_Receive+0xa8>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d104      	bne.n	80046c2 <HAL_UART_Receive+0x9e>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2260      	movs	r2, #96	; 0x60
 80046bc:	4949      	ldr	r1, [pc, #292]	; (80047e4 <HAL_UART_Receive+0x1c0>)
 80046be:	5299      	strh	r1, [r3, r2]
 80046c0:	e02e      	b.n	8004720 <HAL_UART_Receive+0xfc>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2260      	movs	r2, #96	; 0x60
 80046c6:	21ff      	movs	r1, #255	; 0xff
 80046c8:	5299      	strh	r1, [r3, r2]
 80046ca:	e029      	b.n	8004720 <HAL_UART_Receive+0xfc>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10d      	bne.n	80046f0 <HAL_UART_Receive+0xcc>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d104      	bne.n	80046e6 <HAL_UART_Receive+0xc2>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2260      	movs	r2, #96	; 0x60
 80046e0:	21ff      	movs	r1, #255	; 0xff
 80046e2:	5299      	strh	r1, [r3, r2]
 80046e4:	e01c      	b.n	8004720 <HAL_UART_Receive+0xfc>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2260      	movs	r2, #96	; 0x60
 80046ea:	217f      	movs	r1, #127	; 0x7f
 80046ec:	5299      	strh	r1, [r3, r2]
 80046ee:	e017      	b.n	8004720 <HAL_UART_Receive+0xfc>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	2380      	movs	r3, #128	; 0x80
 80046f6:	055b      	lsls	r3, r3, #21
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d10d      	bne.n	8004718 <HAL_UART_Receive+0xf4>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d104      	bne.n	800470e <HAL_UART_Receive+0xea>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2260      	movs	r2, #96	; 0x60
 8004708:	217f      	movs	r1, #127	; 0x7f
 800470a:	5299      	strh	r1, [r3, r2]
 800470c:	e008      	b.n	8004720 <HAL_UART_Receive+0xfc>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2260      	movs	r2, #96	; 0x60
 8004712:	213f      	movs	r1, #63	; 0x3f
 8004714:	5299      	strh	r1, [r3, r2]
 8004716:	e003      	b.n	8004720 <HAL_UART_Receive+0xfc>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2260      	movs	r2, #96	; 0x60
 800471c:	2100      	movs	r1, #0
 800471e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004720:	2312      	movs	r3, #18
 8004722:	18fb      	adds	r3, r7, r3
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	2160      	movs	r1, #96	; 0x60
 8004728:	5a52      	ldrh	r2, [r2, r1]
 800472a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	2380      	movs	r3, #128	; 0x80
 8004732:	015b      	lsls	r3, r3, #5
 8004734:	429a      	cmp	r2, r3
 8004736:	d108      	bne.n	800474a <HAL_UART_Receive+0x126>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d104      	bne.n	800474a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8004740:	2300      	movs	r3, #0
 8004742:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	61bb      	str	r3, [r7, #24]
 8004748:	e003      	b.n	8004752 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800474e:	2300      	movs	r3, #0
 8004750:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004752:	e036      	b.n	80047c2 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	0013      	movs	r3, r2
 800475e:	2200      	movs	r2, #0
 8004760:	2120      	movs	r1, #32
 8004762:	f000 fe63 	bl	800542c <UART_WaitOnFlagUntilTimeout>
 8004766:	1e03      	subs	r3, r0, #0
 8004768:	d001      	beq.n	800476e <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e036      	b.n	80047dc <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10e      	bne.n	8004792 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	b29b      	uxth	r3, r3
 800477c:	2212      	movs	r2, #18
 800477e:	18ba      	adds	r2, r7, r2
 8004780:	8812      	ldrh	r2, [r2, #0]
 8004782:	4013      	ands	r3, r2
 8004784:	b29a      	uxth	r2, r3
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	3302      	adds	r3, #2
 800478e:	61bb      	str	r3, [r7, #24]
 8004790:	e00e      	b.n	80047b0 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2212      	movs	r2, #18
 800479c:	18ba      	adds	r2, r7, r2
 800479e:	8812      	ldrh	r2, [r2, #0]
 80047a0:	b2d2      	uxtb	r2, r2
 80047a2:	4013      	ands	r3, r2
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	3301      	adds	r3, #1
 80047ae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	225e      	movs	r2, #94	; 0x5e
 80047b4:	5a9b      	ldrh	r3, [r3, r2]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	3b01      	subs	r3, #1
 80047ba:	b299      	uxth	r1, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	225e      	movs	r2, #94	; 0x5e
 80047c0:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	225e      	movs	r2, #94	; 0x5e
 80047c6:	5a9b      	ldrh	r3, [r3, r2]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1c2      	bne.n	8004754 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	228c      	movs	r2, #140	; 0x8c
 80047d2:	2120      	movs	r1, #32
 80047d4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	e000      	b.n	80047dc <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 80047da:	2302      	movs	r3, #2
  }
}
 80047dc:	0018      	movs	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	b008      	add	sp, #32
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	000001ff 	.word	0x000001ff

080047e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047e8:	b5b0      	push	{r4, r5, r7, lr}
 80047ea:	b0aa      	sub	sp, #168	; 0xa8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	22a4      	movs	r2, #164	; 0xa4
 80047f8:	18b9      	adds	r1, r7, r2
 80047fa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	20a0      	movs	r0, #160	; 0xa0
 8004804:	1839      	adds	r1, r7, r0
 8004806:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	249c      	movs	r4, #156	; 0x9c
 8004810:	1939      	adds	r1, r7, r4
 8004812:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004814:	0011      	movs	r1, r2
 8004816:	18bb      	adds	r3, r7, r2
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4aa2      	ldr	r2, [pc, #648]	; (8004aa4 <HAL_UART_IRQHandler+0x2bc>)
 800481c:	4013      	ands	r3, r2
 800481e:	2298      	movs	r2, #152	; 0x98
 8004820:	18bd      	adds	r5, r7, r2
 8004822:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004824:	18bb      	adds	r3, r7, r2
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d11a      	bne.n	8004862 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800482c:	187b      	adds	r3, r7, r1
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2220      	movs	r2, #32
 8004832:	4013      	ands	r3, r2
 8004834:	d015      	beq.n	8004862 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004836:	183b      	adds	r3, r7, r0
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2220      	movs	r2, #32
 800483c:	4013      	ands	r3, r2
 800483e:	d105      	bne.n	800484c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004840:	193b      	adds	r3, r7, r4
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	055b      	lsls	r3, r3, #21
 8004848:	4013      	ands	r3, r2
 800484a:	d00a      	beq.n	8004862 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004850:	2b00      	cmp	r3, #0
 8004852:	d100      	bne.n	8004856 <HAL_UART_IRQHandler+0x6e>
 8004854:	e2dc      	b.n	8004e10 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	0010      	movs	r0, r2
 800485e:	4798      	blx	r3
      }
      return;
 8004860:	e2d6      	b.n	8004e10 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004862:	2398      	movs	r3, #152	; 0x98
 8004864:	18fb      	adds	r3, r7, r3
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d100      	bne.n	800486e <HAL_UART_IRQHandler+0x86>
 800486c:	e122      	b.n	8004ab4 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800486e:	239c      	movs	r3, #156	; 0x9c
 8004870:	18fb      	adds	r3, r7, r3
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a8c      	ldr	r2, [pc, #560]	; (8004aa8 <HAL_UART_IRQHandler+0x2c0>)
 8004876:	4013      	ands	r3, r2
 8004878:	d106      	bne.n	8004888 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800487a:	23a0      	movs	r3, #160	; 0xa0
 800487c:	18fb      	adds	r3, r7, r3
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a8a      	ldr	r2, [pc, #552]	; (8004aac <HAL_UART_IRQHandler+0x2c4>)
 8004882:	4013      	ands	r3, r2
 8004884:	d100      	bne.n	8004888 <HAL_UART_IRQHandler+0xa0>
 8004886:	e115      	b.n	8004ab4 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004888:	23a4      	movs	r3, #164	; 0xa4
 800488a:	18fb      	adds	r3, r7, r3
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2201      	movs	r2, #1
 8004890:	4013      	ands	r3, r2
 8004892:	d012      	beq.n	80048ba <HAL_UART_IRQHandler+0xd2>
 8004894:	23a0      	movs	r3, #160	; 0xa0
 8004896:	18fb      	adds	r3, r7, r3
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	2380      	movs	r3, #128	; 0x80
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	4013      	ands	r3, r2
 80048a0:	d00b      	beq.n	80048ba <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2201      	movs	r2, #1
 80048a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2290      	movs	r2, #144	; 0x90
 80048ae:	589b      	ldr	r3, [r3, r2]
 80048b0:	2201      	movs	r2, #1
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2190      	movs	r1, #144	; 0x90
 80048b8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048ba:	23a4      	movs	r3, #164	; 0xa4
 80048bc:	18fb      	adds	r3, r7, r3
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2202      	movs	r2, #2
 80048c2:	4013      	ands	r3, r2
 80048c4:	d011      	beq.n	80048ea <HAL_UART_IRQHandler+0x102>
 80048c6:	239c      	movs	r3, #156	; 0x9c
 80048c8:	18fb      	adds	r3, r7, r3
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2201      	movs	r2, #1
 80048ce:	4013      	ands	r3, r2
 80048d0:	d00b      	beq.n	80048ea <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2202      	movs	r2, #2
 80048d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2290      	movs	r2, #144	; 0x90
 80048de:	589b      	ldr	r3, [r3, r2]
 80048e0:	2204      	movs	r2, #4
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2190      	movs	r1, #144	; 0x90
 80048e8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048ea:	23a4      	movs	r3, #164	; 0xa4
 80048ec:	18fb      	adds	r3, r7, r3
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2204      	movs	r2, #4
 80048f2:	4013      	ands	r3, r2
 80048f4:	d011      	beq.n	800491a <HAL_UART_IRQHandler+0x132>
 80048f6:	239c      	movs	r3, #156	; 0x9c
 80048f8:	18fb      	adds	r3, r7, r3
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2201      	movs	r2, #1
 80048fe:	4013      	ands	r3, r2
 8004900:	d00b      	beq.n	800491a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2204      	movs	r2, #4
 8004908:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2290      	movs	r2, #144	; 0x90
 800490e:	589b      	ldr	r3, [r3, r2]
 8004910:	2202      	movs	r2, #2
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2190      	movs	r1, #144	; 0x90
 8004918:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800491a:	23a4      	movs	r3, #164	; 0xa4
 800491c:	18fb      	adds	r3, r7, r3
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2208      	movs	r2, #8
 8004922:	4013      	ands	r3, r2
 8004924:	d017      	beq.n	8004956 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004926:	23a0      	movs	r3, #160	; 0xa0
 8004928:	18fb      	adds	r3, r7, r3
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2220      	movs	r2, #32
 800492e:	4013      	ands	r3, r2
 8004930:	d105      	bne.n	800493e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004932:	239c      	movs	r3, #156	; 0x9c
 8004934:	18fb      	adds	r3, r7, r3
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a5b      	ldr	r2, [pc, #364]	; (8004aa8 <HAL_UART_IRQHandler+0x2c0>)
 800493a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800493c:	d00b      	beq.n	8004956 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2208      	movs	r2, #8
 8004944:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2290      	movs	r2, #144	; 0x90
 800494a:	589b      	ldr	r3, [r3, r2]
 800494c:	2208      	movs	r2, #8
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2190      	movs	r1, #144	; 0x90
 8004954:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004956:	23a4      	movs	r3, #164	; 0xa4
 8004958:	18fb      	adds	r3, r7, r3
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	2380      	movs	r3, #128	; 0x80
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	4013      	ands	r3, r2
 8004962:	d013      	beq.n	800498c <HAL_UART_IRQHandler+0x1a4>
 8004964:	23a0      	movs	r3, #160	; 0xa0
 8004966:	18fb      	adds	r3, r7, r3
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	2380      	movs	r3, #128	; 0x80
 800496c:	04db      	lsls	r3, r3, #19
 800496e:	4013      	ands	r3, r2
 8004970:	d00c      	beq.n	800498c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2280      	movs	r2, #128	; 0x80
 8004978:	0112      	lsls	r2, r2, #4
 800497a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2290      	movs	r2, #144	; 0x90
 8004980:	589b      	ldr	r3, [r3, r2]
 8004982:	2220      	movs	r2, #32
 8004984:	431a      	orrs	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2190      	movs	r1, #144	; 0x90
 800498a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2290      	movs	r2, #144	; 0x90
 8004990:	589b      	ldr	r3, [r3, r2]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d100      	bne.n	8004998 <HAL_UART_IRQHandler+0x1b0>
 8004996:	e23d      	b.n	8004e14 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004998:	23a4      	movs	r3, #164	; 0xa4
 800499a:	18fb      	adds	r3, r7, r3
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2220      	movs	r2, #32
 80049a0:	4013      	ands	r3, r2
 80049a2:	d015      	beq.n	80049d0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80049a4:	23a0      	movs	r3, #160	; 0xa0
 80049a6:	18fb      	adds	r3, r7, r3
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2220      	movs	r2, #32
 80049ac:	4013      	ands	r3, r2
 80049ae:	d106      	bne.n	80049be <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80049b0:	239c      	movs	r3, #156	; 0x9c
 80049b2:	18fb      	adds	r3, r7, r3
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	2380      	movs	r3, #128	; 0x80
 80049b8:	055b      	lsls	r3, r3, #21
 80049ba:	4013      	ands	r3, r2
 80049bc:	d008      	beq.n	80049d0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d004      	beq.n	80049d0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	0010      	movs	r0, r2
 80049ce:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2290      	movs	r2, #144	; 0x90
 80049d4:	589b      	ldr	r3, [r3, r2]
 80049d6:	2194      	movs	r1, #148	; 0x94
 80049d8:	187a      	adds	r2, r7, r1
 80049da:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	2240      	movs	r2, #64	; 0x40
 80049e4:	4013      	ands	r3, r2
 80049e6:	2b40      	cmp	r3, #64	; 0x40
 80049e8:	d004      	beq.n	80049f4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80049ea:	187b      	adds	r3, r7, r1
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2228      	movs	r2, #40	; 0x28
 80049f0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049f2:	d04c      	beq.n	8004a8e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	0018      	movs	r0, r3
 80049f8:	f000 ff04 	bl	8005804 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	2240      	movs	r2, #64	; 0x40
 8004a04:	4013      	ands	r3, r2
 8004a06:	2b40      	cmp	r3, #64	; 0x40
 8004a08:	d13c      	bne.n	8004a84 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a0e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004a10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a12:	2090      	movs	r0, #144	; 0x90
 8004a14:	183a      	adds	r2, r7, r0
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	2301      	movs	r3, #1
 8004a1a:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a1e:	f383 8810 	msr	PRIMASK, r3
}
 8004a22:	46c0      	nop			; (mov r8, r8)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689a      	ldr	r2, [r3, #8]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2140      	movs	r1, #64	; 0x40
 8004a30:	438a      	bics	r2, r1
 8004a32:	609a      	str	r2, [r3, #8]
 8004a34:	183b      	adds	r3, r7, r0
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a3c:	f383 8810 	msr	PRIMASK, r3
}
 8004a40:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2280      	movs	r2, #128	; 0x80
 8004a46:	589b      	ldr	r3, [r3, r2]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d016      	beq.n	8004a7a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2280      	movs	r2, #128	; 0x80
 8004a50:	589b      	ldr	r3, [r3, r2]
 8004a52:	4a17      	ldr	r2, [pc, #92]	; (8004ab0 <HAL_UART_IRQHandler+0x2c8>)
 8004a54:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2280      	movs	r2, #128	; 0x80
 8004a5a:	589b      	ldr	r3, [r3, r2]
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f7fd fdef 	bl	8002640 <HAL_DMA_Abort_IT>
 8004a62:	1e03      	subs	r3, r0, #0
 8004a64:	d01c      	beq.n	8004aa0 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2280      	movs	r2, #128	; 0x80
 8004a6a:	589b      	ldr	r3, [r3, r2]
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	2180      	movs	r1, #128	; 0x80
 8004a72:	5852      	ldr	r2, [r2, r1]
 8004a74:	0010      	movs	r0, r2
 8004a76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a78:	e012      	b.n	8004aa0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f000 f9e9 	bl	8004e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a82:	e00d      	b.n	8004aa0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	0018      	movs	r0, r3
 8004a88:	f000 f9e4 	bl	8004e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a8c:	e008      	b.n	8004aa0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	0018      	movs	r0, r3
 8004a92:	f000 f9df 	bl	8004e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2290      	movs	r2, #144	; 0x90
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004a9e:	e1b9      	b.n	8004e14 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa0:	46c0      	nop			; (mov r8, r8)
    return;
 8004aa2:	e1b7      	b.n	8004e14 <HAL_UART_IRQHandler+0x62c>
 8004aa4:	0000080f 	.word	0x0000080f
 8004aa8:	10000001 	.word	0x10000001
 8004aac:	04000120 	.word	0x04000120
 8004ab0:	080058d1 	.word	0x080058d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d000      	beq.n	8004abe <HAL_UART_IRQHandler+0x2d6>
 8004abc:	e13e      	b.n	8004d3c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004abe:	23a4      	movs	r3, #164	; 0xa4
 8004ac0:	18fb      	adds	r3, r7, r3
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2210      	movs	r2, #16
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	d100      	bne.n	8004acc <HAL_UART_IRQHandler+0x2e4>
 8004aca:	e137      	b.n	8004d3c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004acc:	23a0      	movs	r3, #160	; 0xa0
 8004ace:	18fb      	adds	r3, r7, r3
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2210      	movs	r2, #16
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d100      	bne.n	8004ada <HAL_UART_IRQHandler+0x2f2>
 8004ad8:	e130      	b.n	8004d3c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2210      	movs	r2, #16
 8004ae0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2240      	movs	r2, #64	; 0x40
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b40      	cmp	r3, #64	; 0x40
 8004aee:	d000      	beq.n	8004af2 <HAL_UART_IRQHandler+0x30a>
 8004af0:	e0a4      	b.n	8004c3c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2280      	movs	r2, #128	; 0x80
 8004af6:	589b      	ldr	r3, [r3, r2]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	217e      	movs	r1, #126	; 0x7e
 8004afe:	187b      	adds	r3, r7, r1
 8004b00:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004b02:	187b      	adds	r3, r7, r1
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d100      	bne.n	8004b0c <HAL_UART_IRQHandler+0x324>
 8004b0a:	e185      	b.n	8004e18 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	225c      	movs	r2, #92	; 0x5c
 8004b10:	5a9b      	ldrh	r3, [r3, r2]
 8004b12:	187a      	adds	r2, r7, r1
 8004b14:	8812      	ldrh	r2, [r2, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d300      	bcc.n	8004b1c <HAL_UART_IRQHandler+0x334>
 8004b1a:	e17d      	b.n	8004e18 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	187a      	adds	r2, r7, r1
 8004b20:	215e      	movs	r1, #94	; 0x5e
 8004b22:	8812      	ldrh	r2, [r2, #0]
 8004b24:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2280      	movs	r2, #128	; 0x80
 8004b2a:	589b      	ldr	r3, [r3, r2]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2220      	movs	r2, #32
 8004b32:	4013      	ands	r3, r2
 8004b34:	d170      	bne.n	8004c18 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b36:	f3ef 8310 	mrs	r3, PRIMASK
 8004b3a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b3e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b40:	2301      	movs	r3, #1
 8004b42:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b46:	f383 8810 	msr	PRIMASK, r3
}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	49b4      	ldr	r1, [pc, #720]	; (8004e28 <HAL_UART_IRQHandler+0x640>)
 8004b58:	400a      	ands	r2, r1
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b62:	f383 8810 	msr	PRIMASK, r3
}
 8004b66:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b68:	f3ef 8310 	mrs	r3, PRIMASK
 8004b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b70:	677b      	str	r3, [r7, #116]	; 0x74
 8004b72:	2301      	movs	r3, #1
 8004b74:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b78:	f383 8810 	msr	PRIMASK, r3
}
 8004b7c:	46c0      	nop			; (mov r8, r8)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2101      	movs	r1, #1
 8004b8a:	438a      	bics	r2, r1
 8004b8c:	609a      	str	r2, [r3, #8]
 8004b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b90:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b94:	f383 8810 	msr	PRIMASK, r3
}
 8004b98:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b9e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ba2:	673b      	str	r3, [r7, #112]	; 0x70
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004baa:	f383 8810 	msr	PRIMASK, r3
}
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2140      	movs	r1, #64	; 0x40
 8004bbc:	438a      	bics	r2, r1
 8004bbe:	609a      	str	r2, [r3, #8]
 8004bc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bc2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bc6:	f383 8810 	msr	PRIMASK, r3
}
 8004bca:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	228c      	movs	r2, #140	; 0x8c
 8004bd0:	2120      	movs	r1, #32
 8004bd2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bda:	f3ef 8310 	mrs	r3, PRIMASK
 8004bde:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004be4:	2301      	movs	r3, #1
 8004be6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bea:	f383 8810 	msr	PRIMASK, r3
}
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2110      	movs	r1, #16
 8004bfc:	438a      	bics	r2, r1
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c02:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c06:	f383 8810 	msr	PRIMASK, r3
}
 8004c0a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2280      	movs	r2, #128	; 0x80
 8004c10:	589b      	ldr	r3, [r3, r2]
 8004c12:	0018      	movs	r0, r3
 8004c14:	f7fd fcb4 	bl	8002580 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	225c      	movs	r2, #92	; 0x5c
 8004c22:	5a9a      	ldrh	r2, [r3, r2]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	215e      	movs	r1, #94	; 0x5e
 8004c28:	5a5b      	ldrh	r3, [r3, r1]
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	0011      	movs	r1, r2
 8004c34:	0018      	movs	r0, r3
 8004c36:	f7fb fcd7 	bl	80005e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c3a:	e0ed      	b.n	8004e18 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	225c      	movs	r2, #92	; 0x5c
 8004c40:	5a99      	ldrh	r1, [r3, r2]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	225e      	movs	r2, #94	; 0x5e
 8004c46:	5a9b      	ldrh	r3, [r3, r2]
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	208e      	movs	r0, #142	; 0x8e
 8004c4c:	183b      	adds	r3, r7, r0
 8004c4e:	1a8a      	subs	r2, r1, r2
 8004c50:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	225e      	movs	r2, #94	; 0x5e
 8004c56:	5a9b      	ldrh	r3, [r3, r2]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d100      	bne.n	8004c60 <HAL_UART_IRQHandler+0x478>
 8004c5e:	e0dd      	b.n	8004e1c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004c60:	183b      	adds	r3, r7, r0
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d100      	bne.n	8004c6a <HAL_UART_IRQHandler+0x482>
 8004c68:	e0d8      	b.n	8004e1c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c70:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c72:	2488      	movs	r4, #136	; 0x88
 8004c74:	193a      	adds	r2, r7, r4
 8004c76:	6013      	str	r3, [r2, #0]
 8004c78:	2301      	movs	r3, #1
 8004c7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	f383 8810 	msr	PRIMASK, r3
}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4967      	ldr	r1, [pc, #412]	; (8004e2c <HAL_UART_IRQHandler+0x644>)
 8004c90:	400a      	ands	r2, r1
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	193b      	adds	r3, r7, r4
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f383 8810 	msr	PRIMASK, r3
}
 8004ca0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ca6:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ca8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004caa:	2484      	movs	r4, #132	; 0x84
 8004cac:	193a      	adds	r2, r7, r4
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	f383 8810 	msr	PRIMASK, r3
}
 8004cba:	46c0      	nop			; (mov r8, r8)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	495a      	ldr	r1, [pc, #360]	; (8004e30 <HAL_UART_IRQHandler+0x648>)
 8004cc8:	400a      	ands	r2, r1
 8004cca:	609a      	str	r2, [r3, #8]
 8004ccc:	193b      	adds	r3, r7, r4
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	f383 8810 	msr	PRIMASK, r3
}
 8004cd8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	228c      	movs	r2, #140	; 0x8c
 8004cde:	2120      	movs	r1, #32
 8004ce0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cee:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf6:	2480      	movs	r4, #128	; 0x80
 8004cf8:	193a      	adds	r2, r7, r4
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d02:	f383 8810 	msr	PRIMASK, r3
}
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2110      	movs	r1, #16
 8004d14:	438a      	bics	r2, r1
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	193b      	adds	r3, r7, r4
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d20:	f383 8810 	msr	PRIMASK, r3
}
 8004d24:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2202      	movs	r2, #2
 8004d2a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d2c:	183b      	adds	r3, r7, r0
 8004d2e:	881a      	ldrh	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	0011      	movs	r1, r2
 8004d34:	0018      	movs	r0, r3
 8004d36:	f7fb fc57 	bl	80005e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d3a:	e06f      	b.n	8004e1c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d3c:	23a4      	movs	r3, #164	; 0xa4
 8004d3e:	18fb      	adds	r3, r7, r3
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	2380      	movs	r3, #128	; 0x80
 8004d44:	035b      	lsls	r3, r3, #13
 8004d46:	4013      	ands	r3, r2
 8004d48:	d010      	beq.n	8004d6c <HAL_UART_IRQHandler+0x584>
 8004d4a:	239c      	movs	r3, #156	; 0x9c
 8004d4c:	18fb      	adds	r3, r7, r3
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	2380      	movs	r3, #128	; 0x80
 8004d52:	03db      	lsls	r3, r3, #15
 8004d54:	4013      	ands	r3, r2
 8004d56:	d009      	beq.n	8004d6c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2280      	movs	r2, #128	; 0x80
 8004d5e:	0352      	lsls	r2, r2, #13
 8004d60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	0018      	movs	r0, r3
 8004d66:	f001 fa57 	bl	8006218 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d6a:	e05a      	b.n	8004e22 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004d6c:	23a4      	movs	r3, #164	; 0xa4
 8004d6e:	18fb      	adds	r3, r7, r3
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2280      	movs	r2, #128	; 0x80
 8004d74:	4013      	ands	r3, r2
 8004d76:	d016      	beq.n	8004da6 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004d78:	23a0      	movs	r3, #160	; 0xa0
 8004d7a:	18fb      	adds	r3, r7, r3
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2280      	movs	r2, #128	; 0x80
 8004d80:	4013      	ands	r3, r2
 8004d82:	d106      	bne.n	8004d92 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004d84:	239c      	movs	r3, #156	; 0x9c
 8004d86:	18fb      	adds	r3, r7, r3
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	2380      	movs	r3, #128	; 0x80
 8004d8c:	041b      	lsls	r3, r3, #16
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d009      	beq.n	8004da6 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d042      	beq.n	8004e20 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	0010      	movs	r0, r2
 8004da2:	4798      	blx	r3
    }
    return;
 8004da4:	e03c      	b.n	8004e20 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004da6:	23a4      	movs	r3, #164	; 0xa4
 8004da8:	18fb      	adds	r3, r7, r3
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2240      	movs	r2, #64	; 0x40
 8004dae:	4013      	ands	r3, r2
 8004db0:	d00a      	beq.n	8004dc8 <HAL_UART_IRQHandler+0x5e0>
 8004db2:	23a0      	movs	r3, #160	; 0xa0
 8004db4:	18fb      	adds	r3, r7, r3
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2240      	movs	r2, #64	; 0x40
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d004      	beq.n	8004dc8 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	f000 fd9c 	bl	80058fe <UART_EndTransmit_IT>
    return;
 8004dc6:	e02c      	b.n	8004e22 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004dc8:	23a4      	movs	r3, #164	; 0xa4
 8004dca:	18fb      	adds	r3, r7, r3
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	2380      	movs	r3, #128	; 0x80
 8004dd0:	041b      	lsls	r3, r3, #16
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	d00b      	beq.n	8004dee <HAL_UART_IRQHandler+0x606>
 8004dd6:	23a0      	movs	r3, #160	; 0xa0
 8004dd8:	18fb      	adds	r3, r7, r3
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	2380      	movs	r3, #128	; 0x80
 8004dde:	05db      	lsls	r3, r3, #23
 8004de0:	4013      	ands	r3, r2
 8004de2:	d004      	beq.n	8004dee <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	0018      	movs	r0, r3
 8004de8:	f001 fa26 	bl	8006238 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004dec:	e019      	b.n	8004e22 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004dee:	23a4      	movs	r3, #164	; 0xa4
 8004df0:	18fb      	adds	r3, r7, r3
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	2380      	movs	r3, #128	; 0x80
 8004df6:	045b      	lsls	r3, r3, #17
 8004df8:	4013      	ands	r3, r2
 8004dfa:	d012      	beq.n	8004e22 <HAL_UART_IRQHandler+0x63a>
 8004dfc:	23a0      	movs	r3, #160	; 0xa0
 8004dfe:	18fb      	adds	r3, r7, r3
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	da0d      	bge.n	8004e22 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	0018      	movs	r0, r3
 8004e0a:	f001 fa0d 	bl	8006228 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e0e:	e008      	b.n	8004e22 <HAL_UART_IRQHandler+0x63a>
      return;
 8004e10:	46c0      	nop			; (mov r8, r8)
 8004e12:	e006      	b.n	8004e22 <HAL_UART_IRQHandler+0x63a>
    return;
 8004e14:	46c0      	nop			; (mov r8, r8)
 8004e16:	e004      	b.n	8004e22 <HAL_UART_IRQHandler+0x63a>
      return;
 8004e18:	46c0      	nop			; (mov r8, r8)
 8004e1a:	e002      	b.n	8004e22 <HAL_UART_IRQHandler+0x63a>
      return;
 8004e1c:	46c0      	nop			; (mov r8, r8)
 8004e1e:	e000      	b.n	8004e22 <HAL_UART_IRQHandler+0x63a>
    return;
 8004e20:	46c0      	nop			; (mov r8, r8)
  }
}
 8004e22:	46bd      	mov	sp, r7
 8004e24:	b02a      	add	sp, #168	; 0xa8
 8004e26:	bdb0      	pop	{r4, r5, r7, pc}
 8004e28:	fffffeff 	.word	0xfffffeff
 8004e2c:	fffffedf 	.word	0xfffffedf
 8004e30:	effffffe 	.word	0xeffffffe

08004e34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e3c:	46c0      	nop			; (mov r8, r8)
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	b002      	add	sp, #8
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004e4c:	46c0      	nop			; (mov r8, r8)
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	b002      	add	sp, #8
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e5c:	46c0      	nop			; (mov r8, r8)
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	b002      	add	sp, #8
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e6c:	231b      	movs	r3, #27
 8004e6e:	18fb      	adds	r3, r7, r3
 8004e70:	2200      	movs	r2, #0
 8004e72:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4ab4      	ldr	r2, [pc, #720]	; (8005164 <UART_SetConfig+0x300>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	0019      	movs	r1, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	69fa      	ldr	r2, [r7, #28]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	4aaf      	ldr	r2, [pc, #700]	; (8005168 <UART_SetConfig+0x304>)
 8004eaa:	4013      	ands	r3, r2
 8004eac:	0019      	movs	r1, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	69fa      	ldr	r2, [r7, #28]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	4aa6      	ldr	r2, [pc, #664]	; (800516c <UART_SetConfig+0x308>)
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	0019      	movs	r1, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69fa      	ldr	r2, [r7, #28]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee6:	220f      	movs	r2, #15
 8004ee8:	4393      	bics	r3, r2
 8004eea:	0019      	movs	r1, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a9c      	ldr	r2, [pc, #624]	; (8005170 <UART_SetConfig+0x30c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d127      	bne.n	8004f52 <UART_SetConfig+0xee>
 8004f02:	4b9c      	ldr	r3, [pc, #624]	; (8005174 <UART_SetConfig+0x310>)
 8004f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f06:	2203      	movs	r2, #3
 8004f08:	4013      	ands	r3, r2
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	d017      	beq.n	8004f3e <UART_SetConfig+0xda>
 8004f0e:	d81b      	bhi.n	8004f48 <UART_SetConfig+0xe4>
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d00a      	beq.n	8004f2a <UART_SetConfig+0xc6>
 8004f14:	d818      	bhi.n	8004f48 <UART_SetConfig+0xe4>
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <UART_SetConfig+0xbc>
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d00a      	beq.n	8004f34 <UART_SetConfig+0xd0>
 8004f1e:	e013      	b.n	8004f48 <UART_SetConfig+0xe4>
 8004f20:	231a      	movs	r3, #26
 8004f22:	18fb      	adds	r3, r7, r3
 8004f24:	2200      	movs	r2, #0
 8004f26:	701a      	strb	r2, [r3, #0]
 8004f28:	e08f      	b.n	800504a <UART_SetConfig+0x1e6>
 8004f2a:	231a      	movs	r3, #26
 8004f2c:	18fb      	adds	r3, r7, r3
 8004f2e:	2202      	movs	r2, #2
 8004f30:	701a      	strb	r2, [r3, #0]
 8004f32:	e08a      	b.n	800504a <UART_SetConfig+0x1e6>
 8004f34:	231a      	movs	r3, #26
 8004f36:	18fb      	adds	r3, r7, r3
 8004f38:	2204      	movs	r2, #4
 8004f3a:	701a      	strb	r2, [r3, #0]
 8004f3c:	e085      	b.n	800504a <UART_SetConfig+0x1e6>
 8004f3e:	231a      	movs	r3, #26
 8004f40:	18fb      	adds	r3, r7, r3
 8004f42:	2208      	movs	r2, #8
 8004f44:	701a      	strb	r2, [r3, #0]
 8004f46:	e080      	b.n	800504a <UART_SetConfig+0x1e6>
 8004f48:	231a      	movs	r3, #26
 8004f4a:	18fb      	adds	r3, r7, r3
 8004f4c:	2210      	movs	r2, #16
 8004f4e:	701a      	strb	r2, [r3, #0]
 8004f50:	e07b      	b.n	800504a <UART_SetConfig+0x1e6>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a88      	ldr	r2, [pc, #544]	; (8005178 <UART_SetConfig+0x314>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d127      	bne.n	8004fac <UART_SetConfig+0x148>
 8004f5c:	4b85      	ldr	r3, [pc, #532]	; (8005174 <UART_SetConfig+0x310>)
 8004f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f60:	220c      	movs	r2, #12
 8004f62:	4013      	ands	r3, r2
 8004f64:	2b0c      	cmp	r3, #12
 8004f66:	d017      	beq.n	8004f98 <UART_SetConfig+0x134>
 8004f68:	d81b      	bhi.n	8004fa2 <UART_SetConfig+0x13e>
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d00a      	beq.n	8004f84 <UART_SetConfig+0x120>
 8004f6e:	d818      	bhi.n	8004fa2 <UART_SetConfig+0x13e>
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <UART_SetConfig+0x116>
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d00a      	beq.n	8004f8e <UART_SetConfig+0x12a>
 8004f78:	e013      	b.n	8004fa2 <UART_SetConfig+0x13e>
 8004f7a:	231a      	movs	r3, #26
 8004f7c:	18fb      	adds	r3, r7, r3
 8004f7e:	2200      	movs	r2, #0
 8004f80:	701a      	strb	r2, [r3, #0]
 8004f82:	e062      	b.n	800504a <UART_SetConfig+0x1e6>
 8004f84:	231a      	movs	r3, #26
 8004f86:	18fb      	adds	r3, r7, r3
 8004f88:	2202      	movs	r2, #2
 8004f8a:	701a      	strb	r2, [r3, #0]
 8004f8c:	e05d      	b.n	800504a <UART_SetConfig+0x1e6>
 8004f8e:	231a      	movs	r3, #26
 8004f90:	18fb      	adds	r3, r7, r3
 8004f92:	2204      	movs	r2, #4
 8004f94:	701a      	strb	r2, [r3, #0]
 8004f96:	e058      	b.n	800504a <UART_SetConfig+0x1e6>
 8004f98:	231a      	movs	r3, #26
 8004f9a:	18fb      	adds	r3, r7, r3
 8004f9c:	2208      	movs	r2, #8
 8004f9e:	701a      	strb	r2, [r3, #0]
 8004fa0:	e053      	b.n	800504a <UART_SetConfig+0x1e6>
 8004fa2:	231a      	movs	r3, #26
 8004fa4:	18fb      	adds	r3, r7, r3
 8004fa6:	2210      	movs	r2, #16
 8004fa8:	701a      	strb	r2, [r3, #0]
 8004faa:	e04e      	b.n	800504a <UART_SetConfig+0x1e6>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a72      	ldr	r2, [pc, #456]	; (800517c <UART_SetConfig+0x318>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d127      	bne.n	8005006 <UART_SetConfig+0x1a2>
 8004fb6:	4b6f      	ldr	r3, [pc, #444]	; (8005174 <UART_SetConfig+0x310>)
 8004fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fba:	2230      	movs	r2, #48	; 0x30
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	2b30      	cmp	r3, #48	; 0x30
 8004fc0:	d017      	beq.n	8004ff2 <UART_SetConfig+0x18e>
 8004fc2:	d81b      	bhi.n	8004ffc <UART_SetConfig+0x198>
 8004fc4:	2b20      	cmp	r3, #32
 8004fc6:	d00a      	beq.n	8004fde <UART_SetConfig+0x17a>
 8004fc8:	d818      	bhi.n	8004ffc <UART_SetConfig+0x198>
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <UART_SetConfig+0x170>
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d00a      	beq.n	8004fe8 <UART_SetConfig+0x184>
 8004fd2:	e013      	b.n	8004ffc <UART_SetConfig+0x198>
 8004fd4:	231a      	movs	r3, #26
 8004fd6:	18fb      	adds	r3, r7, r3
 8004fd8:	2200      	movs	r2, #0
 8004fda:	701a      	strb	r2, [r3, #0]
 8004fdc:	e035      	b.n	800504a <UART_SetConfig+0x1e6>
 8004fde:	231a      	movs	r3, #26
 8004fe0:	18fb      	adds	r3, r7, r3
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	701a      	strb	r2, [r3, #0]
 8004fe6:	e030      	b.n	800504a <UART_SetConfig+0x1e6>
 8004fe8:	231a      	movs	r3, #26
 8004fea:	18fb      	adds	r3, r7, r3
 8004fec:	2204      	movs	r2, #4
 8004fee:	701a      	strb	r2, [r3, #0]
 8004ff0:	e02b      	b.n	800504a <UART_SetConfig+0x1e6>
 8004ff2:	231a      	movs	r3, #26
 8004ff4:	18fb      	adds	r3, r7, r3
 8004ff6:	2208      	movs	r2, #8
 8004ff8:	701a      	strb	r2, [r3, #0]
 8004ffa:	e026      	b.n	800504a <UART_SetConfig+0x1e6>
 8004ffc:	231a      	movs	r3, #26
 8004ffe:	18fb      	adds	r3, r7, r3
 8005000:	2210      	movs	r2, #16
 8005002:	701a      	strb	r2, [r3, #0]
 8005004:	e021      	b.n	800504a <UART_SetConfig+0x1e6>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a5d      	ldr	r2, [pc, #372]	; (8005180 <UART_SetConfig+0x31c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d104      	bne.n	800501a <UART_SetConfig+0x1b6>
 8005010:	231a      	movs	r3, #26
 8005012:	18fb      	adds	r3, r7, r3
 8005014:	2200      	movs	r2, #0
 8005016:	701a      	strb	r2, [r3, #0]
 8005018:	e017      	b.n	800504a <UART_SetConfig+0x1e6>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a59      	ldr	r2, [pc, #356]	; (8005184 <UART_SetConfig+0x320>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d104      	bne.n	800502e <UART_SetConfig+0x1ca>
 8005024:	231a      	movs	r3, #26
 8005026:	18fb      	adds	r3, r7, r3
 8005028:	2200      	movs	r2, #0
 800502a:	701a      	strb	r2, [r3, #0]
 800502c:	e00d      	b.n	800504a <UART_SetConfig+0x1e6>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a55      	ldr	r2, [pc, #340]	; (8005188 <UART_SetConfig+0x324>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d104      	bne.n	8005042 <UART_SetConfig+0x1de>
 8005038:	231a      	movs	r3, #26
 800503a:	18fb      	adds	r3, r7, r3
 800503c:	2200      	movs	r2, #0
 800503e:	701a      	strb	r2, [r3, #0]
 8005040:	e003      	b.n	800504a <UART_SetConfig+0x1e6>
 8005042:	231a      	movs	r3, #26
 8005044:	18fb      	adds	r3, r7, r3
 8005046:	2210      	movs	r2, #16
 8005048:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69da      	ldr	r2, [r3, #28]
 800504e:	2380      	movs	r3, #128	; 0x80
 8005050:	021b      	lsls	r3, r3, #8
 8005052:	429a      	cmp	r2, r3
 8005054:	d000      	beq.n	8005058 <UART_SetConfig+0x1f4>
 8005056:	e065      	b.n	8005124 <UART_SetConfig+0x2c0>
  {
    switch (clocksource)
 8005058:	231a      	movs	r3, #26
 800505a:	18fb      	adds	r3, r7, r3
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	2b08      	cmp	r3, #8
 8005060:	d015      	beq.n	800508e <UART_SetConfig+0x22a>
 8005062:	dc18      	bgt.n	8005096 <UART_SetConfig+0x232>
 8005064:	2b04      	cmp	r3, #4
 8005066:	d00d      	beq.n	8005084 <UART_SetConfig+0x220>
 8005068:	dc15      	bgt.n	8005096 <UART_SetConfig+0x232>
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <UART_SetConfig+0x210>
 800506e:	2b02      	cmp	r3, #2
 8005070:	d005      	beq.n	800507e <UART_SetConfig+0x21a>
 8005072:	e010      	b.n	8005096 <UART_SetConfig+0x232>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005074:	f7fe fb98 	bl	80037a8 <HAL_RCC_GetPCLK1Freq>
 8005078:	0003      	movs	r3, r0
 800507a:	617b      	str	r3, [r7, #20]
        break;
 800507c:	e012      	b.n	80050a4 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800507e:	4b43      	ldr	r3, [pc, #268]	; (800518c <UART_SetConfig+0x328>)
 8005080:	617b      	str	r3, [r7, #20]
        break;
 8005082:	e00f      	b.n	80050a4 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005084:	f7fe fb04 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 8005088:	0003      	movs	r3, r0
 800508a:	617b      	str	r3, [r7, #20]
        break;
 800508c:	e00a      	b.n	80050a4 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800508e:	2380      	movs	r3, #128	; 0x80
 8005090:	021b      	lsls	r3, r3, #8
 8005092:	617b      	str	r3, [r7, #20]
        break;
 8005094:	e006      	b.n	80050a4 <UART_SetConfig+0x240>
      default:
        pclk = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800509a:	231b      	movs	r3, #27
 800509c:	18fb      	adds	r3, r7, r3
 800509e:	2201      	movs	r2, #1
 80050a0:	701a      	strb	r2, [r3, #0]
        break;
 80050a2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d100      	bne.n	80050ac <UART_SetConfig+0x248>
 80050aa:	e0a6      	b.n	80051fa <UART_SetConfig+0x396>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050b0:	4b37      	ldr	r3, [pc, #220]	; (8005190 <UART_SetConfig+0x32c>)
 80050b2:	0052      	lsls	r2, r2, #1
 80050b4:	5ad3      	ldrh	r3, [r2, r3]
 80050b6:	0019      	movs	r1, r3
 80050b8:	6978      	ldr	r0, [r7, #20]
 80050ba:	f7fb f833 	bl	8000124 <__udivsi3>
 80050be:	0003      	movs	r3, r0
 80050c0:	005a      	lsls	r2, r3, #1
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	085b      	lsrs	r3, r3, #1
 80050c8:	18d2      	adds	r2, r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	0019      	movs	r1, r3
 80050d0:	0010      	movs	r0, r2
 80050d2:	f7fb f827 	bl	8000124 <__udivsi3>
 80050d6:	0003      	movs	r3, r0
 80050d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b0f      	cmp	r3, #15
 80050de:	d91c      	bls.n	800511a <UART_SetConfig+0x2b6>
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	2380      	movs	r3, #128	; 0x80
 80050e4:	025b      	lsls	r3, r3, #9
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d217      	bcs.n	800511a <UART_SetConfig+0x2b6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	200e      	movs	r0, #14
 80050f0:	183b      	adds	r3, r7, r0
 80050f2:	210f      	movs	r1, #15
 80050f4:	438a      	bics	r2, r1
 80050f6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	085b      	lsrs	r3, r3, #1
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2207      	movs	r2, #7
 8005100:	4013      	ands	r3, r2
 8005102:	b299      	uxth	r1, r3
 8005104:	183b      	adds	r3, r7, r0
 8005106:	183a      	adds	r2, r7, r0
 8005108:	8812      	ldrh	r2, [r2, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	183a      	adds	r2, r7, r0
 8005114:	8812      	ldrh	r2, [r2, #0]
 8005116:	60da      	str	r2, [r3, #12]
 8005118:	e06f      	b.n	80051fa <UART_SetConfig+0x396>
      }
      else
      {
        ret = HAL_ERROR;
 800511a:	231b      	movs	r3, #27
 800511c:	18fb      	adds	r3, r7, r3
 800511e:	2201      	movs	r2, #1
 8005120:	701a      	strb	r2, [r3, #0]
 8005122:	e06a      	b.n	80051fa <UART_SetConfig+0x396>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005124:	231a      	movs	r3, #26
 8005126:	18fb      	adds	r3, r7, r3
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	2b08      	cmp	r3, #8
 800512c:	d015      	beq.n	800515a <UART_SetConfig+0x2f6>
 800512e:	dc31      	bgt.n	8005194 <UART_SetConfig+0x330>
 8005130:	2b04      	cmp	r3, #4
 8005132:	d00d      	beq.n	8005150 <UART_SetConfig+0x2ec>
 8005134:	dc2e      	bgt.n	8005194 <UART_SetConfig+0x330>
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <UART_SetConfig+0x2dc>
 800513a:	2b02      	cmp	r3, #2
 800513c:	d005      	beq.n	800514a <UART_SetConfig+0x2e6>
 800513e:	e029      	b.n	8005194 <UART_SetConfig+0x330>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005140:	f7fe fb32 	bl	80037a8 <HAL_RCC_GetPCLK1Freq>
 8005144:	0003      	movs	r3, r0
 8005146:	617b      	str	r3, [r7, #20]
        break;
 8005148:	e02b      	b.n	80051a2 <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800514a:	4b10      	ldr	r3, [pc, #64]	; (800518c <UART_SetConfig+0x328>)
 800514c:	617b      	str	r3, [r7, #20]
        break;
 800514e:	e028      	b.n	80051a2 <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005150:	f7fe fa9e 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 8005154:	0003      	movs	r3, r0
 8005156:	617b      	str	r3, [r7, #20]
        break;
 8005158:	e023      	b.n	80051a2 <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800515a:	2380      	movs	r3, #128	; 0x80
 800515c:	021b      	lsls	r3, r3, #8
 800515e:	617b      	str	r3, [r7, #20]
        break;
 8005160:	e01f      	b.n	80051a2 <UART_SetConfig+0x33e>
 8005162:	46c0      	nop			; (mov r8, r8)
 8005164:	cfff69f3 	.word	0xcfff69f3
 8005168:	ffffcfff 	.word	0xffffcfff
 800516c:	11fff4ff 	.word	0x11fff4ff
 8005170:	40013800 	.word	0x40013800
 8005174:	40021000 	.word	0x40021000
 8005178:	40004400 	.word	0x40004400
 800517c:	40004800 	.word	0x40004800
 8005180:	40004c00 	.word	0x40004c00
 8005184:	40005000 	.word	0x40005000
 8005188:	40013c00 	.word	0x40013c00
 800518c:	00f42400 	.word	0x00f42400
 8005190:	0800848c 	.word	0x0800848c
      default:
        pclk = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005198:	231b      	movs	r3, #27
 800519a:	18fb      	adds	r3, r7, r3
 800519c:	2201      	movs	r2, #1
 800519e:	701a      	strb	r2, [r3, #0]
        break;
 80051a0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d028      	beq.n	80051fa <UART_SetConfig+0x396>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051ac:	4b1d      	ldr	r3, [pc, #116]	; (8005224 <UART_SetConfig+0x3c0>)
 80051ae:	0052      	lsls	r2, r2, #1
 80051b0:	5ad3      	ldrh	r3, [r2, r3]
 80051b2:	0019      	movs	r1, r3
 80051b4:	6978      	ldr	r0, [r7, #20]
 80051b6:	f7fa ffb5 	bl	8000124 <__udivsi3>
 80051ba:	0003      	movs	r3, r0
 80051bc:	001a      	movs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	085b      	lsrs	r3, r3, #1
 80051c4:	18d2      	adds	r2, r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	0019      	movs	r1, r3
 80051cc:	0010      	movs	r0, r2
 80051ce:	f7fa ffa9 	bl	8000124 <__udivsi3>
 80051d2:	0003      	movs	r3, r0
 80051d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	2b0f      	cmp	r3, #15
 80051da:	d90a      	bls.n	80051f2 <UART_SetConfig+0x38e>
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	2380      	movs	r3, #128	; 0x80
 80051e0:	025b      	lsls	r3, r3, #9
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d205      	bcs.n	80051f2 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60da      	str	r2, [r3, #12]
 80051f0:	e003      	b.n	80051fa <UART_SetConfig+0x396>
      }
      else
      {
        ret = HAL_ERROR;
 80051f2:	231b      	movs	r3, #27
 80051f4:	18fb      	adds	r3, r7, r3
 80051f6:	2201      	movs	r2, #1
 80051f8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	226a      	movs	r2, #106	; 0x6a
 80051fe:	2101      	movs	r1, #1
 8005200:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2268      	movs	r2, #104	; 0x68
 8005206:	2101      	movs	r1, #1
 8005208:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005216:	231b      	movs	r3, #27
 8005218:	18fb      	adds	r3, r7, r3
 800521a:	781b      	ldrb	r3, [r3, #0]
}
 800521c:	0018      	movs	r0, r3
 800521e:	46bd      	mov	sp, r7
 8005220:	b008      	add	sp, #32
 8005222:	bd80      	pop	{r7, pc}
 8005224:	0800848c 	.word	0x0800848c

08005228 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005234:	2201      	movs	r2, #1
 8005236:	4013      	ands	r3, r2
 8005238:	d00b      	beq.n	8005252 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	4a4a      	ldr	r2, [pc, #296]	; (800536c <UART_AdvFeatureConfig+0x144>)
 8005242:	4013      	ands	r3, r2
 8005244:	0019      	movs	r1, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005256:	2202      	movs	r2, #2
 8005258:	4013      	ands	r3, r2
 800525a:	d00b      	beq.n	8005274 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	4a43      	ldr	r2, [pc, #268]	; (8005370 <UART_AdvFeatureConfig+0x148>)
 8005264:	4013      	ands	r3, r2
 8005266:	0019      	movs	r1, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005278:	2204      	movs	r2, #4
 800527a:	4013      	ands	r3, r2
 800527c:	d00b      	beq.n	8005296 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	4a3b      	ldr	r2, [pc, #236]	; (8005374 <UART_AdvFeatureConfig+0x14c>)
 8005286:	4013      	ands	r3, r2
 8005288:	0019      	movs	r1, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529a:	2208      	movs	r2, #8
 800529c:	4013      	ands	r3, r2
 800529e:	d00b      	beq.n	80052b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	4a34      	ldr	r2, [pc, #208]	; (8005378 <UART_AdvFeatureConfig+0x150>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	0019      	movs	r1, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	430a      	orrs	r2, r1
 80052b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052bc:	2210      	movs	r2, #16
 80052be:	4013      	ands	r3, r2
 80052c0:	d00b      	beq.n	80052da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	4a2c      	ldr	r2, [pc, #176]	; (800537c <UART_AdvFeatureConfig+0x154>)
 80052ca:	4013      	ands	r3, r2
 80052cc:	0019      	movs	r1, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052de:	2220      	movs	r2, #32
 80052e0:	4013      	ands	r3, r2
 80052e2:	d00b      	beq.n	80052fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	4a25      	ldr	r2, [pc, #148]	; (8005380 <UART_AdvFeatureConfig+0x158>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	0019      	movs	r1, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005300:	2240      	movs	r2, #64	; 0x40
 8005302:	4013      	ands	r3, r2
 8005304:	d01d      	beq.n	8005342 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	4a1d      	ldr	r2, [pc, #116]	; (8005384 <UART_AdvFeatureConfig+0x15c>)
 800530e:	4013      	ands	r3, r2
 8005310:	0019      	movs	r1, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005322:	2380      	movs	r3, #128	; 0x80
 8005324:	035b      	lsls	r3, r3, #13
 8005326:	429a      	cmp	r2, r3
 8005328:	d10b      	bne.n	8005342 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	4a15      	ldr	r2, [pc, #84]	; (8005388 <UART_AdvFeatureConfig+0x160>)
 8005332:	4013      	ands	r3, r2
 8005334:	0019      	movs	r1, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005346:	2280      	movs	r2, #128	; 0x80
 8005348:	4013      	ands	r3, r2
 800534a:	d00b      	beq.n	8005364 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	4a0e      	ldr	r2, [pc, #56]	; (800538c <UART_AdvFeatureConfig+0x164>)
 8005354:	4013      	ands	r3, r2
 8005356:	0019      	movs	r1, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	605a      	str	r2, [r3, #4]
  }
}
 8005364:	46c0      	nop			; (mov r8, r8)
 8005366:	46bd      	mov	sp, r7
 8005368:	b002      	add	sp, #8
 800536a:	bd80      	pop	{r7, pc}
 800536c:	fffdffff 	.word	0xfffdffff
 8005370:	fffeffff 	.word	0xfffeffff
 8005374:	fffbffff 	.word	0xfffbffff
 8005378:	ffff7fff 	.word	0xffff7fff
 800537c:	ffffefff 	.word	0xffffefff
 8005380:	ffffdfff 	.word	0xffffdfff
 8005384:	ffefffff 	.word	0xffefffff
 8005388:	ff9fffff 	.word	0xff9fffff
 800538c:	fff7ffff 	.word	0xfff7ffff

08005390 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af02      	add	r7, sp, #8
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2290      	movs	r2, #144	; 0x90
 800539c:	2100      	movs	r1, #0
 800539e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053a0:	f7fc ffcc 	bl	800233c <HAL_GetTick>
 80053a4:	0003      	movs	r3, r0
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2208      	movs	r2, #8
 80053b0:	4013      	ands	r3, r2
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	d10c      	bne.n	80053d0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2280      	movs	r2, #128	; 0x80
 80053ba:	0391      	lsls	r1, r2, #14
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	4a1a      	ldr	r2, [pc, #104]	; (8005428 <UART_CheckIdleState+0x98>)
 80053c0:	9200      	str	r2, [sp, #0]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f000 f832 	bl	800542c <UART_WaitOnFlagUntilTimeout>
 80053c8:	1e03      	subs	r3, r0, #0
 80053ca:	d001      	beq.n	80053d0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e026      	b.n	800541e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2204      	movs	r2, #4
 80053d8:	4013      	ands	r3, r2
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d10c      	bne.n	80053f8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2280      	movs	r2, #128	; 0x80
 80053e2:	03d1      	lsls	r1, r2, #15
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	4a10      	ldr	r2, [pc, #64]	; (8005428 <UART_CheckIdleState+0x98>)
 80053e8:	9200      	str	r2, [sp, #0]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f000 f81e 	bl	800542c <UART_WaitOnFlagUntilTimeout>
 80053f0:	1e03      	subs	r3, r0, #0
 80053f2:	d001      	beq.n	80053f8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e012      	b.n	800541e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2288      	movs	r2, #136	; 0x88
 80053fc:	2120      	movs	r1, #32
 80053fe:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	228c      	movs	r2, #140	; 0x8c
 8005404:	2120      	movs	r1, #32
 8005406:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2284      	movs	r2, #132	; 0x84
 8005418:	2100      	movs	r1, #0
 800541a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	0018      	movs	r0, r3
 8005420:	46bd      	mov	sp, r7
 8005422:	b004      	add	sp, #16
 8005424:	bd80      	pop	{r7, pc}
 8005426:	46c0      	nop			; (mov r8, r8)
 8005428:	01ffffff 	.word	0x01ffffff

0800542c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b094      	sub	sp, #80	; 0x50
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	603b      	str	r3, [r7, #0]
 8005438:	1dfb      	adds	r3, r7, #7
 800543a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800543c:	e0a7      	b.n	800558e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800543e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005440:	3301      	adds	r3, #1
 8005442:	d100      	bne.n	8005446 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005444:	e0a3      	b.n	800558e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005446:	f7fc ff79 	bl	800233c <HAL_GetTick>
 800544a:	0002      	movs	r2, r0
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005452:	429a      	cmp	r2, r3
 8005454:	d302      	bcc.n	800545c <UART_WaitOnFlagUntilTimeout+0x30>
 8005456:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005458:	2b00      	cmp	r3, #0
 800545a:	d13f      	bne.n	80054dc <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800545c:	f3ef 8310 	mrs	r3, PRIMASK
 8005460:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005462:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005464:	647b      	str	r3, [r7, #68]	; 0x44
 8005466:	2301      	movs	r3, #1
 8005468:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800546a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546c:	f383 8810 	msr	PRIMASK, r3
}
 8005470:	46c0      	nop			; (mov r8, r8)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	494e      	ldr	r1, [pc, #312]	; (80055b8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800547e:	400a      	ands	r2, r1
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005484:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	f383 8810 	msr	PRIMASK, r3
}
 800548c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800548e:	f3ef 8310 	mrs	r3, PRIMASK
 8005492:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005496:	643b      	str	r3, [r7, #64]	; 0x40
 8005498:	2301      	movs	r3, #1
 800549a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800549c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549e:	f383 8810 	msr	PRIMASK, r3
}
 80054a2:	46c0      	nop			; (mov r8, r8)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2101      	movs	r1, #1
 80054b0:	438a      	bics	r2, r1
 80054b2:	609a      	str	r2, [r3, #8]
 80054b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ba:	f383 8810 	msr	PRIMASK, r3
}
 80054be:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2288      	movs	r2, #136	; 0x88
 80054c4:	2120      	movs	r1, #32
 80054c6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	228c      	movs	r2, #140	; 0x8c
 80054cc:	2120      	movs	r1, #32
 80054ce:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2284      	movs	r2, #132	; 0x84
 80054d4:	2100      	movs	r1, #0
 80054d6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e069      	b.n	80055b0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2204      	movs	r2, #4
 80054e4:	4013      	ands	r3, r2
 80054e6:	d052      	beq.n	800558e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	69da      	ldr	r2, [r3, #28]
 80054ee:	2380      	movs	r3, #128	; 0x80
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	401a      	ands	r2, r3
 80054f4:	2380      	movs	r3, #128	; 0x80
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d148      	bne.n	800558e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2280      	movs	r2, #128	; 0x80
 8005502:	0112      	lsls	r2, r2, #4
 8005504:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005506:	f3ef 8310 	mrs	r3, PRIMASK
 800550a:	613b      	str	r3, [r7, #16]
  return(result);
 800550c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800550e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005510:	2301      	movs	r3, #1
 8005512:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f383 8810 	msr	PRIMASK, r3
}
 800551a:	46c0      	nop			; (mov r8, r8)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4924      	ldr	r1, [pc, #144]	; (80055b8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005528:	400a      	ands	r2, r1
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800552e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	f383 8810 	msr	PRIMASK, r3
}
 8005536:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005538:	f3ef 8310 	mrs	r3, PRIMASK
 800553c:	61fb      	str	r3, [r7, #28]
  return(result);
 800553e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005540:	64bb      	str	r3, [r7, #72]	; 0x48
 8005542:	2301      	movs	r3, #1
 8005544:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	f383 8810 	msr	PRIMASK, r3
}
 800554c:	46c0      	nop			; (mov r8, r8)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2101      	movs	r1, #1
 800555a:	438a      	bics	r2, r1
 800555c:	609a      	str	r2, [r3, #8]
 800555e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	f383 8810 	msr	PRIMASK, r3
}
 8005568:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2288      	movs	r2, #136	; 0x88
 800556e:	2120      	movs	r1, #32
 8005570:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	228c      	movs	r2, #140	; 0x8c
 8005576:	2120      	movs	r1, #32
 8005578:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2290      	movs	r2, #144	; 0x90
 800557e:	2120      	movs	r1, #32
 8005580:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2284      	movs	r2, #132	; 0x84
 8005586:	2100      	movs	r1, #0
 8005588:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e010      	b.n	80055b0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	4013      	ands	r3, r2
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	425a      	negs	r2, r3
 800559e:	4153      	adcs	r3, r2
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	001a      	movs	r2, r3
 80055a4:	1dfb      	adds	r3, r7, #7
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d100      	bne.n	80055ae <UART_WaitOnFlagUntilTimeout+0x182>
 80055ac:	e747      	b.n	800543e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	0018      	movs	r0, r3
 80055b2:	46bd      	mov	sp, r7
 80055b4:	b014      	add	sp, #80	; 0x50
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	fffffe5f 	.word	0xfffffe5f

080055bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b098      	sub	sp, #96	; 0x60
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	1dbb      	adds	r3, r7, #6
 80055c8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	1dba      	adds	r2, r7, #6
 80055d4:	215c      	movs	r1, #92	; 0x5c
 80055d6:	8812      	ldrh	r2, [r2, #0]
 80055d8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	1dba      	adds	r2, r7, #6
 80055de:	215e      	movs	r1, #94	; 0x5e
 80055e0:	8812      	ldrh	r2, [r2, #0]
 80055e2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	689a      	ldr	r2, [r3, #8]
 80055ee:	2380      	movs	r3, #128	; 0x80
 80055f0:	015b      	lsls	r3, r3, #5
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d10d      	bne.n	8005612 <UART_Start_Receive_IT+0x56>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d104      	bne.n	8005608 <UART_Start_Receive_IT+0x4c>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2260      	movs	r2, #96	; 0x60
 8005602:	497b      	ldr	r1, [pc, #492]	; (80057f0 <UART_Start_Receive_IT+0x234>)
 8005604:	5299      	strh	r1, [r3, r2]
 8005606:	e02e      	b.n	8005666 <UART_Start_Receive_IT+0xaa>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2260      	movs	r2, #96	; 0x60
 800560c:	21ff      	movs	r1, #255	; 0xff
 800560e:	5299      	strh	r1, [r3, r2]
 8005610:	e029      	b.n	8005666 <UART_Start_Receive_IT+0xaa>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10d      	bne.n	8005636 <UART_Start_Receive_IT+0x7a>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d104      	bne.n	800562c <UART_Start_Receive_IT+0x70>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2260      	movs	r2, #96	; 0x60
 8005626:	21ff      	movs	r1, #255	; 0xff
 8005628:	5299      	strh	r1, [r3, r2]
 800562a:	e01c      	b.n	8005666 <UART_Start_Receive_IT+0xaa>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2260      	movs	r2, #96	; 0x60
 8005630:	217f      	movs	r1, #127	; 0x7f
 8005632:	5299      	strh	r1, [r3, r2]
 8005634:	e017      	b.n	8005666 <UART_Start_Receive_IT+0xaa>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	2380      	movs	r3, #128	; 0x80
 800563c:	055b      	lsls	r3, r3, #21
 800563e:	429a      	cmp	r2, r3
 8005640:	d10d      	bne.n	800565e <UART_Start_Receive_IT+0xa2>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d104      	bne.n	8005654 <UART_Start_Receive_IT+0x98>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2260      	movs	r2, #96	; 0x60
 800564e:	217f      	movs	r1, #127	; 0x7f
 8005650:	5299      	strh	r1, [r3, r2]
 8005652:	e008      	b.n	8005666 <UART_Start_Receive_IT+0xaa>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2260      	movs	r2, #96	; 0x60
 8005658:	213f      	movs	r1, #63	; 0x3f
 800565a:	5299      	strh	r1, [r3, r2]
 800565c:	e003      	b.n	8005666 <UART_Start_Receive_IT+0xaa>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2260      	movs	r2, #96	; 0x60
 8005662:	2100      	movs	r1, #0
 8005664:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2290      	movs	r2, #144	; 0x90
 800566a:	2100      	movs	r1, #0
 800566c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	228c      	movs	r2, #140	; 0x8c
 8005672:	2122      	movs	r1, #34	; 0x22
 8005674:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005676:	f3ef 8310 	mrs	r3, PRIMASK
 800567a:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800567c:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800567e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005680:	2301      	movs	r3, #1
 8005682:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005686:	f383 8810 	msr	PRIMASK, r3
}
 800568a:	46c0      	nop			; (mov r8, r8)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689a      	ldr	r2, [r3, #8]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2101      	movs	r1, #1
 8005698:	430a      	orrs	r2, r1
 800569a:	609a      	str	r2, [r3, #8]
 800569c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800569e:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056a2:	f383 8810 	msr	PRIMASK, r3
}
 80056a6:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80056ac:	2380      	movs	r3, #128	; 0x80
 80056ae:	059b      	lsls	r3, r3, #22
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d150      	bne.n	8005756 <UART_Start_Receive_IT+0x19a>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2268      	movs	r2, #104	; 0x68
 80056b8:	5a9b      	ldrh	r3, [r3, r2]
 80056ba:	1dba      	adds	r2, r7, #6
 80056bc:	8812      	ldrh	r2, [r2, #0]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d349      	bcc.n	8005756 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	689a      	ldr	r2, [r3, #8]
 80056c6:	2380      	movs	r3, #128	; 0x80
 80056c8:	015b      	lsls	r3, r3, #5
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d107      	bne.n	80056de <UART_Start_Receive_IT+0x122>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d103      	bne.n	80056de <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4a46      	ldr	r2, [pc, #280]	; (80057f4 <UART_Start_Receive_IT+0x238>)
 80056da:	675a      	str	r2, [r3, #116]	; 0x74
 80056dc:	e002      	b.n	80056e4 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	4a45      	ldr	r2, [pc, #276]	; (80057f8 <UART_Start_Receive_IT+0x23c>)
 80056e2:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d019      	beq.n	8005720 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ec:	f3ef 8310 	mrs	r3, PRIMASK
 80056f0:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80056f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80056f6:	2301      	movs	r3, #1
 80056f8:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fc:	f383 8810 	msr	PRIMASK, r3
}
 8005700:	46c0      	nop			; (mov r8, r8)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2180      	movs	r1, #128	; 0x80
 800570e:	0049      	lsls	r1, r1, #1
 8005710:	430a      	orrs	r2, r1
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005716:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800571a:	f383 8810 	msr	PRIMASK, r3
}
 800571e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005720:	f3ef 8310 	mrs	r3, PRIMASK
 8005724:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005726:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005728:	657b      	str	r3, [r7, #84]	; 0x54
 800572a:	2301      	movs	r3, #1
 800572c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005730:	f383 8810 	msr	PRIMASK, r3
}
 8005734:	46c0      	nop			; (mov r8, r8)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2180      	movs	r1, #128	; 0x80
 8005742:	0549      	lsls	r1, r1, #21
 8005744:	430a      	orrs	r2, r1
 8005746:	609a      	str	r2, [r3, #8]
 8005748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800574a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	f383 8810 	msr	PRIMASK, r3
}
 8005752:	46c0      	nop			; (mov r8, r8)
 8005754:	e047      	b.n	80057e6 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	689a      	ldr	r2, [r3, #8]
 800575a:	2380      	movs	r3, #128	; 0x80
 800575c:	015b      	lsls	r3, r3, #5
 800575e:	429a      	cmp	r2, r3
 8005760:	d107      	bne.n	8005772 <UART_Start_Receive_IT+0x1b6>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d103      	bne.n	8005772 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	4a23      	ldr	r2, [pc, #140]	; (80057fc <UART_Start_Receive_IT+0x240>)
 800576e:	675a      	str	r2, [r3, #116]	; 0x74
 8005770:	e002      	b.n	8005778 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	4a22      	ldr	r2, [pc, #136]	; (8005800 <UART_Start_Receive_IT+0x244>)
 8005776:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d019      	beq.n	80057b4 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005780:	f3ef 8310 	mrs	r3, PRIMASK
 8005784:	61fb      	str	r3, [r7, #28]
  return(result);
 8005786:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005788:	64fb      	str	r3, [r7, #76]	; 0x4c
 800578a:	2301      	movs	r3, #1
 800578c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	f383 8810 	msr	PRIMASK, r3
}
 8005794:	46c0      	nop			; (mov r8, r8)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2190      	movs	r1, #144	; 0x90
 80057a2:	0049      	lsls	r1, r1, #1
 80057a4:	430a      	orrs	r2, r1
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	f383 8810 	msr	PRIMASK, r3
}
 80057b2:	e018      	b.n	80057e6 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057b4:	f3ef 8310 	mrs	r3, PRIMASK
 80057b8:	613b      	str	r3, [r7, #16]
  return(result);
 80057ba:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80057bc:	653b      	str	r3, [r7, #80]	; 0x50
 80057be:	2301      	movs	r3, #1
 80057c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f383 8810 	msr	PRIMASK, r3
}
 80057c8:	46c0      	nop			; (mov r8, r8)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2120      	movs	r1, #32
 80057d6:	430a      	orrs	r2, r1
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	f383 8810 	msr	PRIMASK, r3
}
 80057e4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	0018      	movs	r0, r3
 80057ea:	46bd      	mov	sp, r7
 80057ec:	b018      	add	sp, #96	; 0x60
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	000001ff 	.word	0x000001ff
 80057f4:	08005f2d 	.word	0x08005f2d
 80057f8:	08005c41 	.word	0x08005c41
 80057fc:	08005acd 	.word	0x08005acd
 8005800:	08005959 	.word	0x08005959

08005804 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08e      	sub	sp, #56	; 0x38
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800580c:	f3ef 8310 	mrs	r3, PRIMASK
 8005810:	617b      	str	r3, [r7, #20]
  return(result);
 8005812:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005814:	637b      	str	r3, [r7, #52]	; 0x34
 8005816:	2301      	movs	r3, #1
 8005818:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	f383 8810 	msr	PRIMASK, r3
}
 8005820:	46c0      	nop			; (mov r8, r8)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4926      	ldr	r1, [pc, #152]	; (80058c8 <UART_EndRxTransfer+0xc4>)
 800582e:	400a      	ands	r2, r1
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005834:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	f383 8810 	msr	PRIMASK, r3
}
 800583c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800583e:	f3ef 8310 	mrs	r3, PRIMASK
 8005842:	623b      	str	r3, [r7, #32]
  return(result);
 8005844:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005846:	633b      	str	r3, [r7, #48]	; 0x30
 8005848:	2301      	movs	r3, #1
 800584a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	f383 8810 	msr	PRIMASK, r3
}
 8005852:	46c0      	nop			; (mov r8, r8)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689a      	ldr	r2, [r3, #8]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	491b      	ldr	r1, [pc, #108]	; (80058cc <UART_EndRxTransfer+0xc8>)
 8005860:	400a      	ands	r2, r1
 8005862:	609a      	str	r2, [r3, #8]
 8005864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005866:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586a:	f383 8810 	msr	PRIMASK, r3
}
 800586e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005874:	2b01      	cmp	r3, #1
 8005876:	d118      	bne.n	80058aa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005878:	f3ef 8310 	mrs	r3, PRIMASK
 800587c:	60bb      	str	r3, [r7, #8]
  return(result);
 800587e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005880:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005882:	2301      	movs	r3, #1
 8005884:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f383 8810 	msr	PRIMASK, r3
}
 800588c:	46c0      	nop			; (mov r8, r8)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2110      	movs	r1, #16
 800589a:	438a      	bics	r2, r1
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f383 8810 	msr	PRIMASK, r3
}
 80058a8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	228c      	movs	r2, #140	; 0x8c
 80058ae:	2120      	movs	r1, #32
 80058b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80058be:	46c0      	nop			; (mov r8, r8)
 80058c0:	46bd      	mov	sp, r7
 80058c2:	b00e      	add	sp, #56	; 0x38
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	46c0      	nop			; (mov r8, r8)
 80058c8:	fffffedf 	.word	0xfffffedf
 80058cc:	effffffe 	.word	0xeffffffe

080058d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	225e      	movs	r2, #94	; 0x5e
 80058e2:	2100      	movs	r1, #0
 80058e4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2256      	movs	r2, #86	; 0x56
 80058ea:	2100      	movs	r1, #0
 80058ec:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	0018      	movs	r0, r3
 80058f2:	f7ff faaf 	bl	8004e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058f6:	46c0      	nop			; (mov r8, r8)
 80058f8:	46bd      	mov	sp, r7
 80058fa:	b004      	add	sp, #16
 80058fc:	bd80      	pop	{r7, pc}

080058fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b086      	sub	sp, #24
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005906:	f3ef 8310 	mrs	r3, PRIMASK
 800590a:	60bb      	str	r3, [r7, #8]
  return(result);
 800590c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800590e:	617b      	str	r3, [r7, #20]
 8005910:	2301      	movs	r3, #1
 8005912:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f383 8810 	msr	PRIMASK, r3
}
 800591a:	46c0      	nop			; (mov r8, r8)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2140      	movs	r1, #64	; 0x40
 8005928:	438a      	bics	r2, r1
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	f383 8810 	msr	PRIMASK, r3
}
 8005936:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2288      	movs	r2, #136	; 0x88
 800593c:	2120      	movs	r1, #32
 800593e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	0018      	movs	r0, r3
 800594a:	f7ff fa73 	bl	8004e34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800594e:	46c0      	nop			; (mov r8, r8)
 8005950:	46bd      	mov	sp, r7
 8005952:	b006      	add	sp, #24
 8005954:	bd80      	pop	{r7, pc}
	...

08005958 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b090      	sub	sp, #64	; 0x40
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005960:	203e      	movs	r0, #62	; 0x3e
 8005962:	183b      	adds	r3, r7, r0
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	2160      	movs	r1, #96	; 0x60
 8005968:	5a52      	ldrh	r2, [r2, r1]
 800596a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	228c      	movs	r2, #140	; 0x8c
 8005970:	589b      	ldr	r3, [r3, r2]
 8005972:	2b22      	cmp	r3, #34	; 0x22
 8005974:	d000      	beq.n	8005978 <UART_RxISR_8BIT+0x20>
 8005976:	e09a      	b.n	8005aae <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800597e:	213c      	movs	r1, #60	; 0x3c
 8005980:	187b      	adds	r3, r7, r1
 8005982:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005984:	187b      	adds	r3, r7, r1
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	b2da      	uxtb	r2, r3
 800598a:	183b      	adds	r3, r7, r0
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	b2d9      	uxtb	r1, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005994:	400a      	ands	r2, r1
 8005996:	b2d2      	uxtb	r2, r2
 8005998:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	225e      	movs	r2, #94	; 0x5e
 80059a8:	5a9b      	ldrh	r3, [r3, r2]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	3b01      	subs	r3, #1
 80059ae:	b299      	uxth	r1, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	225e      	movs	r2, #94	; 0x5e
 80059b4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	225e      	movs	r2, #94	; 0x5e
 80059ba:	5a9b      	ldrh	r3, [r3, r2]
 80059bc:	b29b      	uxth	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d000      	beq.n	80059c4 <UART_RxISR_8BIT+0x6c>
 80059c2:	e07c      	b.n	8005abe <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059c4:	f3ef 8310 	mrs	r3, PRIMASK
 80059c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80059ca:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80059ce:	2301      	movs	r3, #1
 80059d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	f383 8810 	msr	PRIMASK, r3
}
 80059d8:	46c0      	nop			; (mov r8, r8)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4938      	ldr	r1, [pc, #224]	; (8005ac8 <UART_RxISR_8BIT+0x170>)
 80059e6:	400a      	ands	r2, r1
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	f383 8810 	msr	PRIMASK, r3
}
 80059f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059f6:	f3ef 8310 	mrs	r3, PRIMASK
 80059fa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005a00:	2301      	movs	r3, #1
 8005a02:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a06:	f383 8810 	msr	PRIMASK, r3
}
 8005a0a:	46c0      	nop			; (mov r8, r8)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689a      	ldr	r2, [r3, #8]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2101      	movs	r1, #1
 8005a18:	438a      	bics	r2, r1
 8005a1a:	609a      	str	r2, [r3, #8]
 8005a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a22:	f383 8810 	msr	PRIMASK, r3
}
 8005a26:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	228c      	movs	r2, #140	; 0x8c
 8005a2c:	2120      	movs	r1, #32
 8005a2e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d12f      	bne.n	8005aa4 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a50:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a52:	633b      	str	r3, [r7, #48]	; 0x30
 8005a54:	2301      	movs	r3, #1
 8005a56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f383 8810 	msr	PRIMASK, r3
}
 8005a5e:	46c0      	nop			; (mov r8, r8)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2110      	movs	r1, #16
 8005a6c:	438a      	bics	r2, r1
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f383 8810 	msr	PRIMASK, r3
}
 8005a7a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	2210      	movs	r2, #16
 8005a84:	4013      	ands	r3, r2
 8005a86:	2b10      	cmp	r3, #16
 8005a88:	d103      	bne.n	8005a92 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2210      	movs	r2, #16
 8005a90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	225c      	movs	r2, #92	; 0x5c
 8005a96:	5a9a      	ldrh	r2, [r3, r2]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	0011      	movs	r1, r2
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	f7fa fda3 	bl	80005e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005aa2:	e00c      	b.n	8005abe <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	f7ff f9cc 	bl	8004e44 <HAL_UART_RxCpltCallback>
}
 8005aac:	e007      	b.n	8005abe <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	699a      	ldr	r2, [r3, #24]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2108      	movs	r1, #8
 8005aba:	430a      	orrs	r2, r1
 8005abc:	619a      	str	r2, [r3, #24]
}
 8005abe:	46c0      	nop			; (mov r8, r8)
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	b010      	add	sp, #64	; 0x40
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	46c0      	nop			; (mov r8, r8)
 8005ac8:	fffffedf 	.word	0xfffffedf

08005acc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b090      	sub	sp, #64	; 0x40
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005ad4:	203e      	movs	r0, #62	; 0x3e
 8005ad6:	183b      	adds	r3, r7, r0
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	2160      	movs	r1, #96	; 0x60
 8005adc:	5a52      	ldrh	r2, [r2, r1]
 8005ade:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	228c      	movs	r2, #140	; 0x8c
 8005ae4:	589b      	ldr	r3, [r3, r2]
 8005ae6:	2b22      	cmp	r3, #34	; 0x22
 8005ae8:	d000      	beq.n	8005aec <UART_RxISR_16BIT+0x20>
 8005aea:	e09a      	b.n	8005c22 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005af2:	213c      	movs	r1, #60	; 0x3c
 8005af4:	187b      	adds	r3, r7, r1
 8005af6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afc:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8005afe:	187b      	adds	r3, r7, r1
 8005b00:	183a      	adds	r2, r7, r0
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	8812      	ldrh	r2, [r2, #0]
 8005b06:	4013      	ands	r3, r2
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b12:	1c9a      	adds	r2, r3, #2
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	225e      	movs	r2, #94	; 0x5e
 8005b1c:	5a9b      	ldrh	r3, [r3, r2]
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b299      	uxth	r1, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	225e      	movs	r2, #94	; 0x5e
 8005b28:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	225e      	movs	r2, #94	; 0x5e
 8005b2e:	5a9b      	ldrh	r3, [r3, r2]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d000      	beq.n	8005b38 <UART_RxISR_16BIT+0x6c>
 8005b36:	e07c      	b.n	8005c32 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b38:	f3ef 8310 	mrs	r3, PRIMASK
 8005b3c:	617b      	str	r3, [r7, #20]
  return(result);
 8005b3e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b40:	637b      	str	r3, [r7, #52]	; 0x34
 8005b42:	2301      	movs	r3, #1
 8005b44:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	f383 8810 	msr	PRIMASK, r3
}
 8005b4c:	46c0      	nop			; (mov r8, r8)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4938      	ldr	r1, [pc, #224]	; (8005c3c <UART_RxISR_16BIT+0x170>)
 8005b5a:	400a      	ands	r2, r1
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	f383 8810 	msr	PRIMASK, r3
}
 8005b68:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b6e:	623b      	str	r3, [r7, #32]
  return(result);
 8005b70:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b72:	633b      	str	r3, [r7, #48]	; 0x30
 8005b74:	2301      	movs	r3, #1
 8005b76:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	f383 8810 	msr	PRIMASK, r3
}
 8005b7e:	46c0      	nop			; (mov r8, r8)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	438a      	bics	r2, r1
 8005b8e:	609a      	str	r2, [r3, #8]
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b96:	f383 8810 	msr	PRIMASK, r3
}
 8005b9a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	228c      	movs	r2, #140	; 0x8c
 8005ba0:	2120      	movs	r1, #32
 8005ba2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d12f      	bne.n	8005c18 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8005bc2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bc4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bc8:	2301      	movs	r3, #1
 8005bca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f383 8810 	msr	PRIMASK, r3
}
 8005bd2:	46c0      	nop			; (mov r8, r8)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2110      	movs	r1, #16
 8005be0:	438a      	bics	r2, r1
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f383 8810 	msr	PRIMASK, r3
}
 8005bee:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	2210      	movs	r2, #16
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	2b10      	cmp	r3, #16
 8005bfc:	d103      	bne.n	8005c06 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2210      	movs	r2, #16
 8005c04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	225c      	movs	r2, #92	; 0x5c
 8005c0a:	5a9a      	ldrh	r2, [r3, r2]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	0011      	movs	r1, r2
 8005c10:	0018      	movs	r0, r3
 8005c12:	f7fa fce9 	bl	80005e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c16:	e00c      	b.n	8005c32 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	0018      	movs	r0, r3
 8005c1c:	f7ff f912 	bl	8004e44 <HAL_UART_RxCpltCallback>
}
 8005c20:	e007      	b.n	8005c32 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	699a      	ldr	r2, [r3, #24]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2108      	movs	r1, #8
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	619a      	str	r2, [r3, #24]
}
 8005c32:	46c0      	nop			; (mov r8, r8)
 8005c34:	46bd      	mov	sp, r7
 8005c36:	b010      	add	sp, #64	; 0x40
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	46c0      	nop			; (mov r8, r8)
 8005c3c:	fffffedf 	.word	0xfffffedf

08005c40 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b09c      	sub	sp, #112	; 0x70
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005c48:	236a      	movs	r3, #106	; 0x6a
 8005c4a:	18fb      	adds	r3, r7, r3
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	2160      	movs	r1, #96	; 0x60
 8005c50:	5a52      	ldrh	r2, [r2, r1]
 8005c52:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	228c      	movs	r2, #140	; 0x8c
 8005c70:	589b      	ldr	r3, [r3, r2]
 8005c72:	2b22      	cmp	r3, #34	; 0x22
 8005c74:	d000      	beq.n	8005c78 <UART_RxISR_8BIT_FIFOEN+0x38>
 8005c76:	e144      	b.n	8005f02 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005c78:	235e      	movs	r3, #94	; 0x5e
 8005c7a:	18fb      	adds	r3, r7, r3
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	2168      	movs	r1, #104	; 0x68
 8005c80:	5a52      	ldrh	r2, [r2, r1]
 8005c82:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005c84:	e0eb      	b.n	8005e5e <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c8c:	215c      	movs	r1, #92	; 0x5c
 8005c8e:	187b      	adds	r3, r7, r1
 8005c90:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c92:	187b      	adds	r3, r7, r1
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	236a      	movs	r3, #106	; 0x6a
 8005c9a:	18fb      	adds	r3, r7, r3
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	b2d9      	uxtb	r1, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca4:	400a      	ands	r2, r1
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cae:	1c5a      	adds	r2, r3, #1
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	225e      	movs	r2, #94	; 0x5e
 8005cb8:	5a9b      	ldrh	r3, [r3, r2]
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b299      	uxth	r1, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	225e      	movs	r2, #94	; 0x5e
 8005cc4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd0:	2207      	movs	r2, #7
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	d049      	beq.n	8005d6a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd8:	2201      	movs	r2, #1
 8005cda:	4013      	ands	r3, r2
 8005cdc:	d010      	beq.n	8005d00 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005cde:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005ce0:	2380      	movs	r3, #128	; 0x80
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	d00b      	beq.n	8005d00 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2201      	movs	r2, #1
 8005cee:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2290      	movs	r2, #144	; 0x90
 8005cf4:	589b      	ldr	r3, [r3, r2]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2190      	movs	r1, #144	; 0x90
 8005cfe:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d02:	2202      	movs	r2, #2
 8005d04:	4013      	ands	r3, r2
 8005d06:	d00f      	beq.n	8005d28 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005d08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	d00b      	beq.n	8005d28 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2202      	movs	r2, #2
 8005d16:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2290      	movs	r2, #144	; 0x90
 8005d1c:	589b      	ldr	r3, [r3, r2]
 8005d1e:	2204      	movs	r2, #4
 8005d20:	431a      	orrs	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2190      	movs	r1, #144	; 0x90
 8005d26:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d2a:	2204      	movs	r2, #4
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	d00f      	beq.n	8005d50 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005d30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d32:	2201      	movs	r2, #1
 8005d34:	4013      	ands	r3, r2
 8005d36:	d00b      	beq.n	8005d50 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2204      	movs	r2, #4
 8005d3e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2290      	movs	r2, #144	; 0x90
 8005d44:	589b      	ldr	r3, [r3, r2]
 8005d46:	2202      	movs	r2, #2
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2190      	movs	r1, #144	; 0x90
 8005d4e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2290      	movs	r2, #144	; 0x90
 8005d54:	589b      	ldr	r3, [r3, r2]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d007      	beq.n	8005d6a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	f7ff f879 	bl	8004e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2290      	movs	r2, #144	; 0x90
 8005d66:	2100      	movs	r1, #0
 8005d68:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	225e      	movs	r2, #94	; 0x5e
 8005d6e:	5a9b      	ldrh	r3, [r3, r2]
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d173      	bne.n	8005e5e <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d76:	f3ef 8310 	mrs	r3, PRIMASK
 8005d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d80:	2301      	movs	r3, #1
 8005d82:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d86:	f383 8810 	msr	PRIMASK, r3
}
 8005d8a:	46c0      	nop			; (mov r8, r8)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4961      	ldr	r1, [pc, #388]	; (8005f1c <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8005d98:	400a      	ands	r2, r1
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d9e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da2:	f383 8810 	msr	PRIMASK, r3
}
 8005da6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005da8:	f3ef 8310 	mrs	r3, PRIMASK
 8005dac:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8005dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005db0:	657b      	str	r3, [r7, #84]	; 0x54
 8005db2:	2301      	movs	r3, #1
 8005db4:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db8:	f383 8810 	msr	PRIMASK, r3
}
 8005dbc:	46c0      	nop			; (mov r8, r8)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689a      	ldr	r2, [r3, #8]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4955      	ldr	r1, [pc, #340]	; (8005f20 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8005dca:	400a      	ands	r2, r1
 8005dcc:	609a      	str	r2, [r3, #8]
 8005dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dd0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd4:	f383 8810 	msr	PRIMASK, r3
}
 8005dd8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	228c      	movs	r2, #140	; 0x8c
 8005dde:	2120      	movs	r1, #32
 8005de0:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d12f      	bne.n	8005e56 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8005e00:	623b      	str	r3, [r7, #32]
  return(result);
 8005e02:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e04:	653b      	str	r3, [r7, #80]	; 0x50
 8005e06:	2301      	movs	r3, #1
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	f383 8810 	msr	PRIMASK, r3
}
 8005e10:	46c0      	nop			; (mov r8, r8)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2110      	movs	r1, #16
 8005e1e:	438a      	bics	r2, r1
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e24:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e28:	f383 8810 	msr	PRIMASK, r3
}
 8005e2c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	2210      	movs	r2, #16
 8005e36:	4013      	ands	r3, r2
 8005e38:	2b10      	cmp	r3, #16
 8005e3a:	d103      	bne.n	8005e44 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2210      	movs	r2, #16
 8005e42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	225c      	movs	r2, #92	; 0x5c
 8005e48:	5a9a      	ldrh	r2, [r3, r2]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	0011      	movs	r1, r2
 8005e4e:	0018      	movs	r0, r3
 8005e50:	f7fa fbca 	bl	80005e8 <HAL_UARTEx_RxEventCallback>
 8005e54:	e003      	b.n	8005e5e <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	0018      	movs	r0, r3
 8005e5a:	f7fe fff3 	bl	8004e44 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005e5e:	235e      	movs	r3, #94	; 0x5e
 8005e60:	18fb      	adds	r3, r7, r3
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d004      	beq.n	8005e72 <UART_RxISR_8BIT_FIFOEN+0x232>
 8005e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	d000      	beq.n	8005e72 <UART_RxISR_8BIT_FIFOEN+0x232>
 8005e70:	e709      	b.n	8005c86 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005e72:	204e      	movs	r0, #78	; 0x4e
 8005e74:	183b      	adds	r3, r7, r0
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	215e      	movs	r1, #94	; 0x5e
 8005e7a:	5a52      	ldrh	r2, [r2, r1]
 8005e7c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005e7e:	0001      	movs	r1, r0
 8005e80:	187b      	adds	r3, r7, r1
 8005e82:	881b      	ldrh	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d044      	beq.n	8005f12 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2268      	movs	r2, #104	; 0x68
 8005e8c:	5a9b      	ldrh	r3, [r3, r2]
 8005e8e:	187a      	adds	r2, r7, r1
 8005e90:	8812      	ldrh	r2, [r2, #0]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d23d      	bcs.n	8005f12 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e96:	f3ef 8310 	mrs	r3, PRIMASK
 8005e9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e9c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005e9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f383 8810 	msr	PRIMASK, r3
}
 8005eaa:	46c0      	nop			; (mov r8, r8)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689a      	ldr	r2, [r3, #8]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	491b      	ldr	r1, [pc, #108]	; (8005f24 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8005eb8:	400a      	ands	r2, r1
 8005eba:	609a      	str	r2, [r3, #8]
 8005ebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ebe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	f383 8810 	msr	PRIMASK, r3
}
 8005ec6:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a17      	ldr	r2, [pc, #92]	; (8005f28 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8005ecc:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ece:	f3ef 8310 	mrs	r3, PRIMASK
 8005ed2:	617b      	str	r3, [r7, #20]
  return(result);
 8005ed4:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ed8:	2301      	movs	r3, #1
 8005eda:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	f383 8810 	msr	PRIMASK, r3
}
 8005ee2:	46c0      	nop			; (mov r8, r8)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2120      	movs	r1, #32
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ef6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	f383 8810 	msr	PRIMASK, r3
}
 8005efe:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f00:	e007      	b.n	8005f12 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	699a      	ldr	r2, [r3, #24]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2108      	movs	r1, #8
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	619a      	str	r2, [r3, #24]
}
 8005f12:	46c0      	nop			; (mov r8, r8)
 8005f14:	46bd      	mov	sp, r7
 8005f16:	b01c      	add	sp, #112	; 0x70
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	46c0      	nop			; (mov r8, r8)
 8005f1c:	fffffeff 	.word	0xfffffeff
 8005f20:	effffffe 	.word	0xeffffffe
 8005f24:	efffffff 	.word	0xefffffff
 8005f28:	08005959 	.word	0x08005959

08005f2c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b09e      	sub	sp, #120	; 0x78
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005f34:	2372      	movs	r3, #114	; 0x72
 8005f36:	18fb      	adds	r3, r7, r3
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	2160      	movs	r1, #96	; 0x60
 8005f3c:	5a52      	ldrh	r2, [r2, r1]
 8005f3e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	228c      	movs	r2, #140	; 0x8c
 8005f5c:	589b      	ldr	r3, [r3, r2]
 8005f5e:	2b22      	cmp	r3, #34	; 0x22
 8005f60:	d000      	beq.n	8005f64 <UART_RxISR_16BIT_FIFOEN+0x38>
 8005f62:	e144      	b.n	80061ee <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005f64:	2366      	movs	r3, #102	; 0x66
 8005f66:	18fb      	adds	r3, r7, r3
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	2168      	movs	r1, #104	; 0x68
 8005f6c:	5a52      	ldrh	r2, [r2, r1]
 8005f6e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f70:	e0eb      	b.n	800614a <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f78:	2164      	movs	r1, #100	; 0x64
 8005f7a:	187b      	adds	r3, r7, r1
 8005f7c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f82:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8005f84:	187b      	adds	r3, r7, r1
 8005f86:	2272      	movs	r2, #114	; 0x72
 8005f88:	18ba      	adds	r2, r7, r2
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	8812      	ldrh	r2, [r2, #0]
 8005f8e:	4013      	ands	r3, r2
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f9a:	1c9a      	adds	r2, r3, #2
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	225e      	movs	r2, #94	; 0x5e
 8005fa4:	5a9b      	ldrh	r3, [r3, r2]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	b299      	uxth	r1, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	225e      	movs	r2, #94	; 0x5e
 8005fb0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fbc:	2207      	movs	r2, #7
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	d049      	beq.n	8006056 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	d010      	beq.n	8005fec <UART_RxISR_16BIT_FIFOEN+0xc0>
 8005fca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005fcc:	2380      	movs	r3, #128	; 0x80
 8005fce:	005b      	lsls	r3, r3, #1
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	d00b      	beq.n	8005fec <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2290      	movs	r2, #144	; 0x90
 8005fe0:	589b      	ldr	r3, [r3, r2]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2190      	movs	r1, #144	; 0x90
 8005fea:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fee:	2202      	movs	r2, #2
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	d00f      	beq.n	8006014 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8005ff4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	d00b      	beq.n	8006014 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2202      	movs	r2, #2
 8006002:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2290      	movs	r2, #144	; 0x90
 8006008:	589b      	ldr	r3, [r3, r2]
 800600a:	2204      	movs	r2, #4
 800600c:	431a      	orrs	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2190      	movs	r1, #144	; 0x90
 8006012:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006014:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006016:	2204      	movs	r2, #4
 8006018:	4013      	ands	r3, r2
 800601a:	d00f      	beq.n	800603c <UART_RxISR_16BIT_FIFOEN+0x110>
 800601c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800601e:	2201      	movs	r2, #1
 8006020:	4013      	ands	r3, r2
 8006022:	d00b      	beq.n	800603c <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2204      	movs	r2, #4
 800602a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2290      	movs	r2, #144	; 0x90
 8006030:	589b      	ldr	r3, [r3, r2]
 8006032:	2202      	movs	r2, #2
 8006034:	431a      	orrs	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2190      	movs	r1, #144	; 0x90
 800603a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2290      	movs	r2, #144	; 0x90
 8006040:	589b      	ldr	r3, [r3, r2]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d007      	beq.n	8006056 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	0018      	movs	r0, r3
 800604a:	f7fe ff03 	bl	8004e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2290      	movs	r2, #144	; 0x90
 8006052:	2100      	movs	r1, #0
 8006054:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	225e      	movs	r2, #94	; 0x5e
 800605a:	5a9b      	ldrh	r3, [r3, r2]
 800605c:	b29b      	uxth	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d173      	bne.n	800614a <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006062:	f3ef 8310 	mrs	r3, PRIMASK
 8006066:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800606a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800606c:	2301      	movs	r3, #1
 800606e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006072:	f383 8810 	msr	PRIMASK, r3
}
 8006076:	46c0      	nop			; (mov r8, r8)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4961      	ldr	r1, [pc, #388]	; (8006208 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8006084:	400a      	ands	r2, r1
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800608a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608e:	f383 8810 	msr	PRIMASK, r3
}
 8006092:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006094:	f3ef 8310 	mrs	r3, PRIMASK
 8006098:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800609a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800609c:	65bb      	str	r3, [r7, #88]	; 0x58
 800609e:	2301      	movs	r3, #1
 80060a0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060a4:	f383 8810 	msr	PRIMASK, r3
}
 80060a8:	46c0      	nop			; (mov r8, r8)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689a      	ldr	r2, [r3, #8]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4955      	ldr	r1, [pc, #340]	; (800620c <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80060b6:	400a      	ands	r2, r1
 80060b8:	609a      	str	r2, [r3, #8]
 80060ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060bc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060c0:	f383 8810 	msr	PRIMASK, r3
}
 80060c4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	228c      	movs	r2, #140	; 0x8c
 80060ca:	2120      	movs	r1, #32
 80060cc:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d12f      	bne.n	8006142 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060e8:	f3ef 8310 	mrs	r3, PRIMASK
 80060ec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060f0:	657b      	str	r3, [r7, #84]	; 0x54
 80060f2:	2301      	movs	r3, #1
 80060f4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	f383 8810 	msr	PRIMASK, r3
}
 80060fc:	46c0      	nop			; (mov r8, r8)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2110      	movs	r1, #16
 800610a:	438a      	bics	r2, r1
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006110:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006114:	f383 8810 	msr	PRIMASK, r3
}
 8006118:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	2210      	movs	r2, #16
 8006122:	4013      	ands	r3, r2
 8006124:	2b10      	cmp	r3, #16
 8006126:	d103      	bne.n	8006130 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2210      	movs	r2, #16
 800612e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	225c      	movs	r2, #92	; 0x5c
 8006134:	5a9a      	ldrh	r2, [r3, r2]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	0011      	movs	r1, r2
 800613a:	0018      	movs	r0, r3
 800613c:	f7fa fa54 	bl	80005e8 <HAL_UARTEx_RxEventCallback>
 8006140:	e003      	b.n	800614a <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	0018      	movs	r0, r3
 8006146:	f7fe fe7d 	bl	8004e44 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800614a:	2366      	movs	r3, #102	; 0x66
 800614c:	18fb      	adds	r3, r7, r3
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d004      	beq.n	800615e <UART_RxISR_16BIT_FIFOEN+0x232>
 8006154:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006156:	2220      	movs	r2, #32
 8006158:	4013      	ands	r3, r2
 800615a:	d000      	beq.n	800615e <UART_RxISR_16BIT_FIFOEN+0x232>
 800615c:	e709      	b.n	8005f72 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800615e:	2052      	movs	r0, #82	; 0x52
 8006160:	183b      	adds	r3, r7, r0
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	215e      	movs	r1, #94	; 0x5e
 8006166:	5a52      	ldrh	r2, [r2, r1]
 8006168:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800616a:	0001      	movs	r1, r0
 800616c:	187b      	adds	r3, r7, r1
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d044      	beq.n	80061fe <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2268      	movs	r2, #104	; 0x68
 8006178:	5a9b      	ldrh	r3, [r3, r2]
 800617a:	187a      	adds	r2, r7, r1
 800617c:	8812      	ldrh	r2, [r2, #0]
 800617e:	429a      	cmp	r2, r3
 8006180:	d23d      	bcs.n	80061fe <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006182:	f3ef 8310 	mrs	r3, PRIMASK
 8006186:	60fb      	str	r3, [r7, #12]
  return(result);
 8006188:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800618a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800618c:	2301      	movs	r3, #1
 800618e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	f383 8810 	msr	PRIMASK, r3
}
 8006196:	46c0      	nop			; (mov r8, r8)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689a      	ldr	r2, [r3, #8]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	491b      	ldr	r1, [pc, #108]	; (8006210 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 80061a4:	400a      	ands	r2, r1
 80061a6:	609a      	str	r2, [r3, #8]
 80061a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f383 8810 	msr	PRIMASK, r3
}
 80061b2:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a17      	ldr	r2, [pc, #92]	; (8006214 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 80061b8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ba:	f3ef 8310 	mrs	r3, PRIMASK
 80061be:	61bb      	str	r3, [r7, #24]
  return(result);
 80061c0:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80061c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80061c4:	2301      	movs	r3, #1
 80061c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	f383 8810 	msr	PRIMASK, r3
}
 80061ce:	46c0      	nop			; (mov r8, r8)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2120      	movs	r1, #32
 80061dc:	430a      	orrs	r2, r1
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061e4:	6a3b      	ldr	r3, [r7, #32]
 80061e6:	f383 8810 	msr	PRIMASK, r3
}
 80061ea:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061ec:	e007      	b.n	80061fe <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	699a      	ldr	r2, [r3, #24]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2108      	movs	r1, #8
 80061fa:	430a      	orrs	r2, r1
 80061fc:	619a      	str	r2, [r3, #24]
}
 80061fe:	46c0      	nop			; (mov r8, r8)
 8006200:	46bd      	mov	sp, r7
 8006202:	b01e      	add	sp, #120	; 0x78
 8006204:	bd80      	pop	{r7, pc}
 8006206:	46c0      	nop			; (mov r8, r8)
 8006208:	fffffeff 	.word	0xfffffeff
 800620c:	effffffe 	.word	0xeffffffe
 8006210:	efffffff 	.word	0xefffffff
 8006214:	08005acd 	.word	0x08005acd

08006218 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006220:	46c0      	nop			; (mov r8, r8)
 8006222:	46bd      	mov	sp, r7
 8006224:	b002      	add	sp, #8
 8006226:	bd80      	pop	{r7, pc}

08006228 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006230:	46c0      	nop			; (mov r8, r8)
 8006232:	46bd      	mov	sp, r7
 8006234:	b002      	add	sp, #8
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006240:	46c0      	nop			; (mov r8, r8)
 8006242:	46bd      	mov	sp, r7
 8006244:	b002      	add	sp, #8
 8006246:	bd80      	pop	{r7, pc}

08006248 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2284      	movs	r2, #132	; 0x84
 8006254:	5c9b      	ldrb	r3, [r3, r2]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d101      	bne.n	800625e <HAL_UARTEx_DisableFifoMode+0x16>
 800625a:	2302      	movs	r3, #2
 800625c:	e027      	b.n	80062ae <HAL_UARTEx_DisableFifoMode+0x66>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2284      	movs	r2, #132	; 0x84
 8006262:	2101      	movs	r1, #1
 8006264:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2288      	movs	r2, #136	; 0x88
 800626a:	2124      	movs	r1, #36	; 0x24
 800626c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2101      	movs	r1, #1
 8006282:	438a      	bics	r2, r1
 8006284:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4a0b      	ldr	r2, [pc, #44]	; (80062b8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800628a:	4013      	ands	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2288      	movs	r2, #136	; 0x88
 80062a0:	2120      	movs	r1, #32
 80062a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2284      	movs	r2, #132	; 0x84
 80062a8:	2100      	movs	r1, #0
 80062aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	0018      	movs	r0, r3
 80062b0:	46bd      	mov	sp, r7
 80062b2:	b004      	add	sp, #16
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	46c0      	nop			; (mov r8, r8)
 80062b8:	dfffffff 	.word	0xdfffffff

080062bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2284      	movs	r2, #132	; 0x84
 80062ca:	5c9b      	ldrb	r3, [r3, r2]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d101      	bne.n	80062d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062d0:	2302      	movs	r3, #2
 80062d2:	e02e      	b.n	8006332 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2284      	movs	r2, #132	; 0x84
 80062d8:	2101      	movs	r1, #1
 80062da:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2288      	movs	r2, #136	; 0x88
 80062e0:	2124      	movs	r1, #36	; 0x24
 80062e2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2101      	movs	r1, #1
 80062f8:	438a      	bics	r2, r1
 80062fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	08d9      	lsrs	r1, r3, #3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	0018      	movs	r0, r3
 8006314:	f000 f8bc 	bl	8006490 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2288      	movs	r2, #136	; 0x88
 8006324:	2120      	movs	r1, #32
 8006326:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2284      	movs	r2, #132	; 0x84
 800632c:	2100      	movs	r1, #0
 800632e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	0018      	movs	r0, r3
 8006334:	46bd      	mov	sp, r7
 8006336:	b004      	add	sp, #16
 8006338:	bd80      	pop	{r7, pc}
	...

0800633c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2284      	movs	r2, #132	; 0x84
 800634a:	5c9b      	ldrb	r3, [r3, r2]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006350:	2302      	movs	r3, #2
 8006352:	e02f      	b.n	80063b4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2284      	movs	r2, #132	; 0x84
 8006358:	2101      	movs	r1, #1
 800635a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2288      	movs	r2, #136	; 0x88
 8006360:	2124      	movs	r1, #36	; 0x24
 8006362:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2101      	movs	r1, #1
 8006378:	438a      	bics	r2, r1
 800637a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	4a0e      	ldr	r2, [pc, #56]	; (80063bc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006384:	4013      	ands	r3, r2
 8006386:	0019      	movs	r1, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	430a      	orrs	r2, r1
 8006390:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	0018      	movs	r0, r3
 8006396:	f000 f87b 	bl	8006490 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2288      	movs	r2, #136	; 0x88
 80063a6:	2120      	movs	r1, #32
 80063a8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2284      	movs	r2, #132	; 0x84
 80063ae:	2100      	movs	r1, #0
 80063b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	0018      	movs	r0, r3
 80063b6:	46bd      	mov	sp, r7
 80063b8:	b004      	add	sp, #16
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	f1ffffff 	.word	0xf1ffffff

080063c0 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063c0:	b5b0      	push	{r4, r5, r7, lr}
 80063c2:	b08a      	sub	sp, #40	; 0x28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	1dbb      	adds	r3, r7, #6
 80063cc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	228c      	movs	r2, #140	; 0x8c
 80063d2:	589b      	ldr	r3, [r3, r2]
 80063d4:	2b20      	cmp	r3, #32
 80063d6:	d156      	bne.n	8006486 <HAL_UARTEx_ReceiveToIdle_IT+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80063de:	1dbb      	adds	r3, r7, #6
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e04e      	b.n	8006488 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	2380      	movs	r3, #128	; 0x80
 80063f0:	015b      	lsls	r3, r3, #5
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d109      	bne.n	800640a <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d105      	bne.n	800640a <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	2201      	movs	r2, #1
 8006402:	4013      	ands	r3, r2
 8006404:	d001      	beq.n	800640a <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
      {
        return  HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e03e      	b.n	8006488 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2201      	movs	r2, #1
 800640e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8006416:	2527      	movs	r5, #39	; 0x27
 8006418:	197c      	adds	r4, r7, r5
 800641a:	1dbb      	adds	r3, r7, #6
 800641c:	881a      	ldrh	r2, [r3, #0]
 800641e:	68b9      	ldr	r1, [r7, #8]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	0018      	movs	r0, r3
 8006424:	f7ff f8ca 	bl	80055bc <UART_Start_Receive_IT>
 8006428:	0003      	movs	r3, r0
 800642a:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800642c:	197b      	adds	r3, r7, r5
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d124      	bne.n	800647e <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006438:	2b01      	cmp	r3, #1
 800643a:	d11c      	bne.n	8006476 <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2210      	movs	r2, #16
 8006442:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006444:	f3ef 8310 	mrs	r3, PRIMASK
 8006448:	617b      	str	r3, [r7, #20]
  return(result);
 800644a:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800644c:	623b      	str	r3, [r7, #32]
 800644e:	2301      	movs	r3, #1
 8006450:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	f383 8810 	msr	PRIMASK, r3
}
 8006458:	46c0      	nop			; (mov r8, r8)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2110      	movs	r1, #16
 8006466:	430a      	orrs	r2, r1
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	f383 8810 	msr	PRIMASK, r3
}
 8006474:	e003      	b.n	800647e <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006476:	2327      	movs	r3, #39	; 0x27
 8006478:	18fb      	adds	r3, r7, r3
 800647a:	2201      	movs	r2, #1
 800647c:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800647e:	2327      	movs	r3, #39	; 0x27
 8006480:	18fb      	adds	r3, r7, r3
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	e000      	b.n	8006488 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8006486:	2302      	movs	r3, #2
  }
}
 8006488:	0018      	movs	r0, r3
 800648a:	46bd      	mov	sp, r7
 800648c:	b00a      	add	sp, #40	; 0x28
 800648e:	bdb0      	pop	{r4, r5, r7, pc}

08006490 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800649c:	2b00      	cmp	r3, #0
 800649e:	d108      	bne.n	80064b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	226a      	movs	r2, #106	; 0x6a
 80064a4:	2101      	movs	r1, #1
 80064a6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2268      	movs	r2, #104	; 0x68
 80064ac:	2101      	movs	r1, #1
 80064ae:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80064b0:	e043      	b.n	800653a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80064b2:	260f      	movs	r6, #15
 80064b4:	19bb      	adds	r3, r7, r6
 80064b6:	2208      	movs	r2, #8
 80064b8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80064ba:	200e      	movs	r0, #14
 80064bc:	183b      	adds	r3, r7, r0
 80064be:	2208      	movs	r2, #8
 80064c0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	0e5b      	lsrs	r3, r3, #25
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	240d      	movs	r4, #13
 80064ce:	193b      	adds	r3, r7, r4
 80064d0:	2107      	movs	r1, #7
 80064d2:	400a      	ands	r2, r1
 80064d4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	0f5b      	lsrs	r3, r3, #29
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	250c      	movs	r5, #12
 80064e2:	197b      	adds	r3, r7, r5
 80064e4:	2107      	movs	r1, #7
 80064e6:	400a      	ands	r2, r1
 80064e8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064ea:	183b      	adds	r3, r7, r0
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	197a      	adds	r2, r7, r5
 80064f0:	7812      	ldrb	r2, [r2, #0]
 80064f2:	4914      	ldr	r1, [pc, #80]	; (8006544 <UARTEx_SetNbDataToProcess+0xb4>)
 80064f4:	5c8a      	ldrb	r2, [r1, r2]
 80064f6:	435a      	muls	r2, r3
 80064f8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80064fa:	197b      	adds	r3, r7, r5
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	4a12      	ldr	r2, [pc, #72]	; (8006548 <UARTEx_SetNbDataToProcess+0xb8>)
 8006500:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006502:	0019      	movs	r1, r3
 8006504:	f7f9 fe98 	bl	8000238 <__divsi3>
 8006508:	0003      	movs	r3, r0
 800650a:	b299      	uxth	r1, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	226a      	movs	r2, #106	; 0x6a
 8006510:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006512:	19bb      	adds	r3, r7, r6
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	193a      	adds	r2, r7, r4
 8006518:	7812      	ldrb	r2, [r2, #0]
 800651a:	490a      	ldr	r1, [pc, #40]	; (8006544 <UARTEx_SetNbDataToProcess+0xb4>)
 800651c:	5c8a      	ldrb	r2, [r1, r2]
 800651e:	435a      	muls	r2, r3
 8006520:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006522:	193b      	adds	r3, r7, r4
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	4a08      	ldr	r2, [pc, #32]	; (8006548 <UARTEx_SetNbDataToProcess+0xb8>)
 8006528:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800652a:	0019      	movs	r1, r3
 800652c:	f7f9 fe84 	bl	8000238 <__divsi3>
 8006530:	0003      	movs	r3, r0
 8006532:	b299      	uxth	r1, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2268      	movs	r2, #104	; 0x68
 8006538:	5299      	strh	r1, [r3, r2]
}
 800653a:	46c0      	nop			; (mov r8, r8)
 800653c:	46bd      	mov	sp, r7
 800653e:	b005      	add	sp, #20
 8006540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006542:	46c0      	nop			; (mov r8, r8)
 8006544:	080084a4 	.word	0x080084a4
 8006548:	080084ac 	.word	0x080084ac

0800654c <__errno>:
 800654c:	4b01      	ldr	r3, [pc, #4]	; (8006554 <__errno+0x8>)
 800654e:	6818      	ldr	r0, [r3, #0]
 8006550:	4770      	bx	lr
 8006552:	46c0      	nop			; (mov r8, r8)
 8006554:	2000040c 	.word	0x2000040c

08006558 <__libc_init_array>:
 8006558:	b570      	push	{r4, r5, r6, lr}
 800655a:	2600      	movs	r6, #0
 800655c:	4d0c      	ldr	r5, [pc, #48]	; (8006590 <__libc_init_array+0x38>)
 800655e:	4c0d      	ldr	r4, [pc, #52]	; (8006594 <__libc_init_array+0x3c>)
 8006560:	1b64      	subs	r4, r4, r5
 8006562:	10a4      	asrs	r4, r4, #2
 8006564:	42a6      	cmp	r6, r4
 8006566:	d109      	bne.n	800657c <__libc_init_array+0x24>
 8006568:	2600      	movs	r6, #0
 800656a:	f001 fb8f 	bl	8007c8c <_init>
 800656e:	4d0a      	ldr	r5, [pc, #40]	; (8006598 <__libc_init_array+0x40>)
 8006570:	4c0a      	ldr	r4, [pc, #40]	; (800659c <__libc_init_array+0x44>)
 8006572:	1b64      	subs	r4, r4, r5
 8006574:	10a4      	asrs	r4, r4, #2
 8006576:	42a6      	cmp	r6, r4
 8006578:	d105      	bne.n	8006586 <__libc_init_array+0x2e>
 800657a:	bd70      	pop	{r4, r5, r6, pc}
 800657c:	00b3      	lsls	r3, r6, #2
 800657e:	58eb      	ldr	r3, [r5, r3]
 8006580:	4798      	blx	r3
 8006582:	3601      	adds	r6, #1
 8006584:	e7ee      	b.n	8006564 <__libc_init_array+0xc>
 8006586:	00b3      	lsls	r3, r6, #2
 8006588:	58eb      	ldr	r3, [r5, r3]
 800658a:	4798      	blx	r3
 800658c:	3601      	adds	r6, #1
 800658e:	e7f2      	b.n	8006576 <__libc_init_array+0x1e>
 8006590:	0800854c 	.word	0x0800854c
 8006594:	0800854c 	.word	0x0800854c
 8006598:	0800854c 	.word	0x0800854c
 800659c:	08008550 	.word	0x08008550

080065a0 <memcpy>:
 80065a0:	2300      	movs	r3, #0
 80065a2:	b510      	push	{r4, lr}
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d100      	bne.n	80065aa <memcpy+0xa>
 80065a8:	bd10      	pop	{r4, pc}
 80065aa:	5ccc      	ldrb	r4, [r1, r3]
 80065ac:	54c4      	strb	r4, [r0, r3]
 80065ae:	3301      	adds	r3, #1
 80065b0:	e7f8      	b.n	80065a4 <memcpy+0x4>

080065b2 <memset>:
 80065b2:	0003      	movs	r3, r0
 80065b4:	1882      	adds	r2, r0, r2
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d100      	bne.n	80065bc <memset+0xa>
 80065ba:	4770      	bx	lr
 80065bc:	7019      	strb	r1, [r3, #0]
 80065be:	3301      	adds	r3, #1
 80065c0:	e7f9      	b.n	80065b6 <memset+0x4>
	...

080065c4 <iprintf>:
 80065c4:	b40f      	push	{r0, r1, r2, r3}
 80065c6:	4b0b      	ldr	r3, [pc, #44]	; (80065f4 <iprintf+0x30>)
 80065c8:	b513      	push	{r0, r1, r4, lr}
 80065ca:	681c      	ldr	r4, [r3, #0]
 80065cc:	2c00      	cmp	r4, #0
 80065ce:	d005      	beq.n	80065dc <iprintf+0x18>
 80065d0:	69a3      	ldr	r3, [r4, #24]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d102      	bne.n	80065dc <iprintf+0x18>
 80065d6:	0020      	movs	r0, r4
 80065d8:	f000 fb96 	bl	8006d08 <__sinit>
 80065dc:	ab05      	add	r3, sp, #20
 80065de:	0020      	movs	r0, r4
 80065e0:	9a04      	ldr	r2, [sp, #16]
 80065e2:	68a1      	ldr	r1, [r4, #8]
 80065e4:	9301      	str	r3, [sp, #4]
 80065e6:	f000 ff15 	bl	8007414 <_vfiprintf_r>
 80065ea:	bc16      	pop	{r1, r2, r4}
 80065ec:	bc08      	pop	{r3}
 80065ee:	b004      	add	sp, #16
 80065f0:	4718      	bx	r3
 80065f2:	46c0      	nop			; (mov r8, r8)
 80065f4:	2000040c 	.word	0x2000040c

080065f8 <putchar>:
 80065f8:	4b08      	ldr	r3, [pc, #32]	; (800661c <putchar+0x24>)
 80065fa:	b570      	push	{r4, r5, r6, lr}
 80065fc:	681c      	ldr	r4, [r3, #0]
 80065fe:	0005      	movs	r5, r0
 8006600:	2c00      	cmp	r4, #0
 8006602:	d005      	beq.n	8006610 <putchar+0x18>
 8006604:	69a3      	ldr	r3, [r4, #24]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d102      	bne.n	8006610 <putchar+0x18>
 800660a:	0020      	movs	r0, r4
 800660c:	f000 fb7c 	bl	8006d08 <__sinit>
 8006610:	0029      	movs	r1, r5
 8006612:	0020      	movs	r0, r4
 8006614:	68a2      	ldr	r2, [r4, #8]
 8006616:	f001 f9b9 	bl	800798c <_putc_r>
 800661a:	bd70      	pop	{r4, r5, r6, pc}
 800661c:	2000040c 	.word	0x2000040c

08006620 <_puts_r>:
 8006620:	b570      	push	{r4, r5, r6, lr}
 8006622:	0005      	movs	r5, r0
 8006624:	000e      	movs	r6, r1
 8006626:	2800      	cmp	r0, #0
 8006628:	d004      	beq.n	8006634 <_puts_r+0x14>
 800662a:	6983      	ldr	r3, [r0, #24]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d101      	bne.n	8006634 <_puts_r+0x14>
 8006630:	f000 fb6a 	bl	8006d08 <__sinit>
 8006634:	69ab      	ldr	r3, [r5, #24]
 8006636:	68ac      	ldr	r4, [r5, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d102      	bne.n	8006642 <_puts_r+0x22>
 800663c:	0028      	movs	r0, r5
 800663e:	f000 fb63 	bl	8006d08 <__sinit>
 8006642:	4b2d      	ldr	r3, [pc, #180]	; (80066f8 <_puts_r+0xd8>)
 8006644:	429c      	cmp	r4, r3
 8006646:	d122      	bne.n	800668e <_puts_r+0x6e>
 8006648:	686c      	ldr	r4, [r5, #4]
 800664a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800664c:	07db      	lsls	r3, r3, #31
 800664e:	d405      	bmi.n	800665c <_puts_r+0x3c>
 8006650:	89a3      	ldrh	r3, [r4, #12]
 8006652:	059b      	lsls	r3, r3, #22
 8006654:	d402      	bmi.n	800665c <_puts_r+0x3c>
 8006656:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006658:	f000 fbf7 	bl	8006e4a <__retarget_lock_acquire_recursive>
 800665c:	89a3      	ldrh	r3, [r4, #12]
 800665e:	071b      	lsls	r3, r3, #28
 8006660:	d502      	bpl.n	8006668 <_puts_r+0x48>
 8006662:	6923      	ldr	r3, [r4, #16]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d129      	bne.n	80066bc <_puts_r+0x9c>
 8006668:	0021      	movs	r1, r4
 800666a:	0028      	movs	r0, r5
 800666c:	f000 f9a6 	bl	80069bc <__swsetup_r>
 8006670:	2800      	cmp	r0, #0
 8006672:	d023      	beq.n	80066bc <_puts_r+0x9c>
 8006674:	2501      	movs	r5, #1
 8006676:	426d      	negs	r5, r5
 8006678:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800667a:	07db      	lsls	r3, r3, #31
 800667c:	d405      	bmi.n	800668a <_puts_r+0x6a>
 800667e:	89a3      	ldrh	r3, [r4, #12]
 8006680:	059b      	lsls	r3, r3, #22
 8006682:	d402      	bmi.n	800668a <_puts_r+0x6a>
 8006684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006686:	f000 fbe1 	bl	8006e4c <__retarget_lock_release_recursive>
 800668a:	0028      	movs	r0, r5
 800668c:	bd70      	pop	{r4, r5, r6, pc}
 800668e:	4b1b      	ldr	r3, [pc, #108]	; (80066fc <_puts_r+0xdc>)
 8006690:	429c      	cmp	r4, r3
 8006692:	d101      	bne.n	8006698 <_puts_r+0x78>
 8006694:	68ac      	ldr	r4, [r5, #8]
 8006696:	e7d8      	b.n	800664a <_puts_r+0x2a>
 8006698:	4b19      	ldr	r3, [pc, #100]	; (8006700 <_puts_r+0xe0>)
 800669a:	429c      	cmp	r4, r3
 800669c:	d1d5      	bne.n	800664a <_puts_r+0x2a>
 800669e:	68ec      	ldr	r4, [r5, #12]
 80066a0:	e7d3      	b.n	800664a <_puts_r+0x2a>
 80066a2:	3601      	adds	r6, #1
 80066a4:	60a3      	str	r3, [r4, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	da04      	bge.n	80066b4 <_puts_r+0x94>
 80066aa:	69a2      	ldr	r2, [r4, #24]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	dc16      	bgt.n	80066de <_puts_r+0xbe>
 80066b0:	290a      	cmp	r1, #10
 80066b2:	d014      	beq.n	80066de <_puts_r+0xbe>
 80066b4:	6823      	ldr	r3, [r4, #0]
 80066b6:	1c5a      	adds	r2, r3, #1
 80066b8:	6022      	str	r2, [r4, #0]
 80066ba:	7019      	strb	r1, [r3, #0]
 80066bc:	68a3      	ldr	r3, [r4, #8]
 80066be:	7831      	ldrb	r1, [r6, #0]
 80066c0:	3b01      	subs	r3, #1
 80066c2:	2900      	cmp	r1, #0
 80066c4:	d1ed      	bne.n	80066a2 <_puts_r+0x82>
 80066c6:	60a3      	str	r3, [r4, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	da0f      	bge.n	80066ec <_puts_r+0xcc>
 80066cc:	0028      	movs	r0, r5
 80066ce:	0022      	movs	r2, r4
 80066d0:	310a      	adds	r1, #10
 80066d2:	f000 f91d 	bl	8006910 <__swbuf_r>
 80066d6:	250a      	movs	r5, #10
 80066d8:	1c43      	adds	r3, r0, #1
 80066da:	d1cd      	bne.n	8006678 <_puts_r+0x58>
 80066dc:	e7ca      	b.n	8006674 <_puts_r+0x54>
 80066de:	0022      	movs	r2, r4
 80066e0:	0028      	movs	r0, r5
 80066e2:	f000 f915 	bl	8006910 <__swbuf_r>
 80066e6:	1c43      	adds	r3, r0, #1
 80066e8:	d1e8      	bne.n	80066bc <_puts_r+0x9c>
 80066ea:	e7c3      	b.n	8006674 <_puts_r+0x54>
 80066ec:	250a      	movs	r5, #10
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	6022      	str	r2, [r4, #0]
 80066f4:	701d      	strb	r5, [r3, #0]
 80066f6:	e7bf      	b.n	8006678 <_puts_r+0x58>
 80066f8:	080084d8 	.word	0x080084d8
 80066fc:	080084f8 	.word	0x080084f8
 8006700:	080084b8 	.word	0x080084b8

08006704 <puts>:
 8006704:	b510      	push	{r4, lr}
 8006706:	4b03      	ldr	r3, [pc, #12]	; (8006714 <puts+0x10>)
 8006708:	0001      	movs	r1, r0
 800670a:	6818      	ldr	r0, [r3, #0]
 800670c:	f7ff ff88 	bl	8006620 <_puts_r>
 8006710:	bd10      	pop	{r4, pc}
 8006712:	46c0      	nop			; (mov r8, r8)
 8006714:	2000040c 	.word	0x2000040c

08006718 <setvbuf>:
 8006718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800671a:	001d      	movs	r5, r3
 800671c:	4b5d      	ldr	r3, [pc, #372]	; (8006894 <setvbuf+0x17c>)
 800671e:	b085      	sub	sp, #20
 8006720:	681e      	ldr	r6, [r3, #0]
 8006722:	0004      	movs	r4, r0
 8006724:	000f      	movs	r7, r1
 8006726:	9200      	str	r2, [sp, #0]
 8006728:	2e00      	cmp	r6, #0
 800672a:	d005      	beq.n	8006738 <setvbuf+0x20>
 800672c:	69b3      	ldr	r3, [r6, #24]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d102      	bne.n	8006738 <setvbuf+0x20>
 8006732:	0030      	movs	r0, r6
 8006734:	f000 fae8 	bl	8006d08 <__sinit>
 8006738:	4b57      	ldr	r3, [pc, #348]	; (8006898 <setvbuf+0x180>)
 800673a:	429c      	cmp	r4, r3
 800673c:	d161      	bne.n	8006802 <setvbuf+0xea>
 800673e:	6874      	ldr	r4, [r6, #4]
 8006740:	9b00      	ldr	r3, [sp, #0]
 8006742:	2b02      	cmp	r3, #2
 8006744:	d005      	beq.n	8006752 <setvbuf+0x3a>
 8006746:	2b01      	cmp	r3, #1
 8006748:	d900      	bls.n	800674c <setvbuf+0x34>
 800674a:	e09d      	b.n	8006888 <setvbuf+0x170>
 800674c:	2d00      	cmp	r5, #0
 800674e:	da00      	bge.n	8006752 <setvbuf+0x3a>
 8006750:	e09a      	b.n	8006888 <setvbuf+0x170>
 8006752:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006754:	07db      	lsls	r3, r3, #31
 8006756:	d405      	bmi.n	8006764 <setvbuf+0x4c>
 8006758:	89a3      	ldrh	r3, [r4, #12]
 800675a:	059b      	lsls	r3, r3, #22
 800675c:	d402      	bmi.n	8006764 <setvbuf+0x4c>
 800675e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006760:	f000 fb73 	bl	8006e4a <__retarget_lock_acquire_recursive>
 8006764:	0021      	movs	r1, r4
 8006766:	0030      	movs	r0, r6
 8006768:	f000 fa2c 	bl	8006bc4 <_fflush_r>
 800676c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800676e:	2900      	cmp	r1, #0
 8006770:	d008      	beq.n	8006784 <setvbuf+0x6c>
 8006772:	0023      	movs	r3, r4
 8006774:	3344      	adds	r3, #68	; 0x44
 8006776:	4299      	cmp	r1, r3
 8006778:	d002      	beq.n	8006780 <setvbuf+0x68>
 800677a:	0030      	movs	r0, r6
 800677c:	f000 fbde 	bl	8006f3c <_free_r>
 8006780:	2300      	movs	r3, #0
 8006782:	6363      	str	r3, [r4, #52]	; 0x34
 8006784:	2300      	movs	r3, #0
 8006786:	61a3      	str	r3, [r4, #24]
 8006788:	6063      	str	r3, [r4, #4]
 800678a:	89a3      	ldrh	r3, [r4, #12]
 800678c:	061b      	lsls	r3, r3, #24
 800678e:	d503      	bpl.n	8006798 <setvbuf+0x80>
 8006790:	0030      	movs	r0, r6
 8006792:	6921      	ldr	r1, [r4, #16]
 8006794:	f000 fbd2 	bl	8006f3c <_free_r>
 8006798:	89a3      	ldrh	r3, [r4, #12]
 800679a:	4a40      	ldr	r2, [pc, #256]	; (800689c <setvbuf+0x184>)
 800679c:	4013      	ands	r3, r2
 800679e:	81a3      	strh	r3, [r4, #12]
 80067a0:	9b00      	ldr	r3, [sp, #0]
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d100      	bne.n	80067a8 <setvbuf+0x90>
 80067a6:	e069      	b.n	800687c <setvbuf+0x164>
 80067a8:	ab03      	add	r3, sp, #12
 80067aa:	0021      	movs	r1, r4
 80067ac:	0030      	movs	r0, r6
 80067ae:	aa02      	add	r2, sp, #8
 80067b0:	f000 fb4e 	bl	8006e50 <__swhatbuf_r>
 80067b4:	89a3      	ldrh	r3, [r4, #12]
 80067b6:	4303      	orrs	r3, r0
 80067b8:	81a3      	strh	r3, [r4, #12]
 80067ba:	2d00      	cmp	r5, #0
 80067bc:	d12b      	bne.n	8006816 <setvbuf+0xfe>
 80067be:	9d02      	ldr	r5, [sp, #8]
 80067c0:	0028      	movs	r0, r5
 80067c2:	f000 fbb1 	bl	8006f28 <malloc>
 80067c6:	1e07      	subs	r7, r0, #0
 80067c8:	d153      	bne.n	8006872 <setvbuf+0x15a>
 80067ca:	9b02      	ldr	r3, [sp, #8]
 80067cc:	9301      	str	r3, [sp, #4]
 80067ce:	42ab      	cmp	r3, r5
 80067d0:	d149      	bne.n	8006866 <setvbuf+0x14e>
 80067d2:	2501      	movs	r5, #1
 80067d4:	426d      	negs	r5, r5
 80067d6:	2302      	movs	r3, #2
 80067d8:	89a2      	ldrh	r2, [r4, #12]
 80067da:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80067dc:	4313      	orrs	r3, r2
 80067de:	2200      	movs	r2, #0
 80067e0:	60a2      	str	r2, [r4, #8]
 80067e2:	0022      	movs	r2, r4
 80067e4:	3247      	adds	r2, #71	; 0x47
 80067e6:	6022      	str	r2, [r4, #0]
 80067e8:	6122      	str	r2, [r4, #16]
 80067ea:	2201      	movs	r2, #1
 80067ec:	b21b      	sxth	r3, r3
 80067ee:	81a3      	strh	r3, [r4, #12]
 80067f0:	6162      	str	r2, [r4, #20]
 80067f2:	4211      	tst	r1, r2
 80067f4:	d134      	bne.n	8006860 <setvbuf+0x148>
 80067f6:	059b      	lsls	r3, r3, #22
 80067f8:	d432      	bmi.n	8006860 <setvbuf+0x148>
 80067fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067fc:	f000 fb26 	bl	8006e4c <__retarget_lock_release_recursive>
 8006800:	e02e      	b.n	8006860 <setvbuf+0x148>
 8006802:	4b27      	ldr	r3, [pc, #156]	; (80068a0 <setvbuf+0x188>)
 8006804:	429c      	cmp	r4, r3
 8006806:	d101      	bne.n	800680c <setvbuf+0xf4>
 8006808:	68b4      	ldr	r4, [r6, #8]
 800680a:	e799      	b.n	8006740 <setvbuf+0x28>
 800680c:	4b25      	ldr	r3, [pc, #148]	; (80068a4 <setvbuf+0x18c>)
 800680e:	429c      	cmp	r4, r3
 8006810:	d196      	bne.n	8006740 <setvbuf+0x28>
 8006812:	68f4      	ldr	r4, [r6, #12]
 8006814:	e794      	b.n	8006740 <setvbuf+0x28>
 8006816:	2f00      	cmp	r7, #0
 8006818:	d0d2      	beq.n	80067c0 <setvbuf+0xa8>
 800681a:	69b3      	ldr	r3, [r6, #24]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d102      	bne.n	8006826 <setvbuf+0x10e>
 8006820:	0030      	movs	r0, r6
 8006822:	f000 fa71 	bl	8006d08 <__sinit>
 8006826:	9b00      	ldr	r3, [sp, #0]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d102      	bne.n	8006832 <setvbuf+0x11a>
 800682c:	89a2      	ldrh	r2, [r4, #12]
 800682e:	4313      	orrs	r3, r2
 8006830:	81a3      	strh	r3, [r4, #12]
 8006832:	89a2      	ldrh	r2, [r4, #12]
 8006834:	2308      	movs	r3, #8
 8006836:	0011      	movs	r1, r2
 8006838:	6027      	str	r7, [r4, #0]
 800683a:	6127      	str	r7, [r4, #16]
 800683c:	6165      	str	r5, [r4, #20]
 800683e:	4019      	ands	r1, r3
 8006840:	421a      	tst	r2, r3
 8006842:	d01f      	beq.n	8006884 <setvbuf+0x16c>
 8006844:	07d3      	lsls	r3, r2, #31
 8006846:	d51b      	bpl.n	8006880 <setvbuf+0x168>
 8006848:	2300      	movs	r3, #0
 800684a:	426d      	negs	r5, r5
 800684c:	60a3      	str	r3, [r4, #8]
 800684e:	61a5      	str	r5, [r4, #24]
 8006850:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006852:	2301      	movs	r3, #1
 8006854:	000d      	movs	r5, r1
 8006856:	401d      	ands	r5, r3
 8006858:	4219      	tst	r1, r3
 800685a:	d118      	bne.n	800688e <setvbuf+0x176>
 800685c:	0593      	lsls	r3, r2, #22
 800685e:	d5cc      	bpl.n	80067fa <setvbuf+0xe2>
 8006860:	0028      	movs	r0, r5
 8006862:	b005      	add	sp, #20
 8006864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006866:	9801      	ldr	r0, [sp, #4]
 8006868:	f000 fb5e 	bl	8006f28 <malloc>
 800686c:	9d01      	ldr	r5, [sp, #4]
 800686e:	1e07      	subs	r7, r0, #0
 8006870:	d0af      	beq.n	80067d2 <setvbuf+0xba>
 8006872:	2380      	movs	r3, #128	; 0x80
 8006874:	89a2      	ldrh	r2, [r4, #12]
 8006876:	4313      	orrs	r3, r2
 8006878:	81a3      	strh	r3, [r4, #12]
 800687a:	e7ce      	b.n	800681a <setvbuf+0x102>
 800687c:	2500      	movs	r5, #0
 800687e:	e7aa      	b.n	80067d6 <setvbuf+0xbe>
 8006880:	60a5      	str	r5, [r4, #8]
 8006882:	e7e5      	b.n	8006850 <setvbuf+0x138>
 8006884:	60a1      	str	r1, [r4, #8]
 8006886:	e7e3      	b.n	8006850 <setvbuf+0x138>
 8006888:	2501      	movs	r5, #1
 800688a:	426d      	negs	r5, r5
 800688c:	e7e8      	b.n	8006860 <setvbuf+0x148>
 800688e:	2500      	movs	r5, #0
 8006890:	e7e6      	b.n	8006860 <setvbuf+0x148>
 8006892:	46c0      	nop			; (mov r8, r8)
 8006894:	2000040c 	.word	0x2000040c
 8006898:	080084d8 	.word	0x080084d8
 800689c:	fffff35c 	.word	0xfffff35c
 80068a0:	080084f8 	.word	0x080084f8
 80068a4:	080084b8 	.word	0x080084b8

080068a8 <sniprintf>:
 80068a8:	b40c      	push	{r2, r3}
 80068aa:	b530      	push	{r4, r5, lr}
 80068ac:	4b17      	ldr	r3, [pc, #92]	; (800690c <sniprintf+0x64>)
 80068ae:	000c      	movs	r4, r1
 80068b0:	681d      	ldr	r5, [r3, #0]
 80068b2:	b09d      	sub	sp, #116	; 0x74
 80068b4:	2900      	cmp	r1, #0
 80068b6:	da08      	bge.n	80068ca <sniprintf+0x22>
 80068b8:	238b      	movs	r3, #139	; 0x8b
 80068ba:	2001      	movs	r0, #1
 80068bc:	602b      	str	r3, [r5, #0]
 80068be:	4240      	negs	r0, r0
 80068c0:	b01d      	add	sp, #116	; 0x74
 80068c2:	bc30      	pop	{r4, r5}
 80068c4:	bc08      	pop	{r3}
 80068c6:	b002      	add	sp, #8
 80068c8:	4718      	bx	r3
 80068ca:	2382      	movs	r3, #130	; 0x82
 80068cc:	466a      	mov	r2, sp
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	8293      	strh	r3, [r2, #20]
 80068d2:	2300      	movs	r3, #0
 80068d4:	9002      	str	r0, [sp, #8]
 80068d6:	9006      	str	r0, [sp, #24]
 80068d8:	4299      	cmp	r1, r3
 80068da:	d000      	beq.n	80068de <sniprintf+0x36>
 80068dc:	1e4b      	subs	r3, r1, #1
 80068de:	9304      	str	r3, [sp, #16]
 80068e0:	9307      	str	r3, [sp, #28]
 80068e2:	2301      	movs	r3, #1
 80068e4:	466a      	mov	r2, sp
 80068e6:	425b      	negs	r3, r3
 80068e8:	82d3      	strh	r3, [r2, #22]
 80068ea:	0028      	movs	r0, r5
 80068ec:	ab21      	add	r3, sp, #132	; 0x84
 80068ee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80068f0:	a902      	add	r1, sp, #8
 80068f2:	9301      	str	r3, [sp, #4]
 80068f4:	f000 fc66 	bl	80071c4 <_svfiprintf_r>
 80068f8:	1c43      	adds	r3, r0, #1
 80068fa:	da01      	bge.n	8006900 <sniprintf+0x58>
 80068fc:	238b      	movs	r3, #139	; 0x8b
 80068fe:	602b      	str	r3, [r5, #0]
 8006900:	2c00      	cmp	r4, #0
 8006902:	d0dd      	beq.n	80068c0 <sniprintf+0x18>
 8006904:	2300      	movs	r3, #0
 8006906:	9a02      	ldr	r2, [sp, #8]
 8006908:	7013      	strb	r3, [r2, #0]
 800690a:	e7d9      	b.n	80068c0 <sniprintf+0x18>
 800690c:	2000040c 	.word	0x2000040c

08006910 <__swbuf_r>:
 8006910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006912:	0005      	movs	r5, r0
 8006914:	000e      	movs	r6, r1
 8006916:	0014      	movs	r4, r2
 8006918:	2800      	cmp	r0, #0
 800691a:	d004      	beq.n	8006926 <__swbuf_r+0x16>
 800691c:	6983      	ldr	r3, [r0, #24]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <__swbuf_r+0x16>
 8006922:	f000 f9f1 	bl	8006d08 <__sinit>
 8006926:	4b22      	ldr	r3, [pc, #136]	; (80069b0 <__swbuf_r+0xa0>)
 8006928:	429c      	cmp	r4, r3
 800692a:	d12e      	bne.n	800698a <__swbuf_r+0x7a>
 800692c:	686c      	ldr	r4, [r5, #4]
 800692e:	69a3      	ldr	r3, [r4, #24]
 8006930:	60a3      	str	r3, [r4, #8]
 8006932:	89a3      	ldrh	r3, [r4, #12]
 8006934:	071b      	lsls	r3, r3, #28
 8006936:	d532      	bpl.n	800699e <__swbuf_r+0x8e>
 8006938:	6923      	ldr	r3, [r4, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d02f      	beq.n	800699e <__swbuf_r+0x8e>
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	6922      	ldr	r2, [r4, #16]
 8006942:	b2f7      	uxtb	r7, r6
 8006944:	1a98      	subs	r0, r3, r2
 8006946:	6963      	ldr	r3, [r4, #20]
 8006948:	b2f6      	uxtb	r6, r6
 800694a:	4283      	cmp	r3, r0
 800694c:	dc05      	bgt.n	800695a <__swbuf_r+0x4a>
 800694e:	0021      	movs	r1, r4
 8006950:	0028      	movs	r0, r5
 8006952:	f000 f937 	bl	8006bc4 <_fflush_r>
 8006956:	2800      	cmp	r0, #0
 8006958:	d127      	bne.n	80069aa <__swbuf_r+0x9a>
 800695a:	68a3      	ldr	r3, [r4, #8]
 800695c:	3001      	adds	r0, #1
 800695e:	3b01      	subs	r3, #1
 8006960:	60a3      	str	r3, [r4, #8]
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	1c5a      	adds	r2, r3, #1
 8006966:	6022      	str	r2, [r4, #0]
 8006968:	701f      	strb	r7, [r3, #0]
 800696a:	6963      	ldr	r3, [r4, #20]
 800696c:	4283      	cmp	r3, r0
 800696e:	d004      	beq.n	800697a <__swbuf_r+0x6a>
 8006970:	89a3      	ldrh	r3, [r4, #12]
 8006972:	07db      	lsls	r3, r3, #31
 8006974:	d507      	bpl.n	8006986 <__swbuf_r+0x76>
 8006976:	2e0a      	cmp	r6, #10
 8006978:	d105      	bne.n	8006986 <__swbuf_r+0x76>
 800697a:	0021      	movs	r1, r4
 800697c:	0028      	movs	r0, r5
 800697e:	f000 f921 	bl	8006bc4 <_fflush_r>
 8006982:	2800      	cmp	r0, #0
 8006984:	d111      	bne.n	80069aa <__swbuf_r+0x9a>
 8006986:	0030      	movs	r0, r6
 8006988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800698a:	4b0a      	ldr	r3, [pc, #40]	; (80069b4 <__swbuf_r+0xa4>)
 800698c:	429c      	cmp	r4, r3
 800698e:	d101      	bne.n	8006994 <__swbuf_r+0x84>
 8006990:	68ac      	ldr	r4, [r5, #8]
 8006992:	e7cc      	b.n	800692e <__swbuf_r+0x1e>
 8006994:	4b08      	ldr	r3, [pc, #32]	; (80069b8 <__swbuf_r+0xa8>)
 8006996:	429c      	cmp	r4, r3
 8006998:	d1c9      	bne.n	800692e <__swbuf_r+0x1e>
 800699a:	68ec      	ldr	r4, [r5, #12]
 800699c:	e7c7      	b.n	800692e <__swbuf_r+0x1e>
 800699e:	0021      	movs	r1, r4
 80069a0:	0028      	movs	r0, r5
 80069a2:	f000 f80b 	bl	80069bc <__swsetup_r>
 80069a6:	2800      	cmp	r0, #0
 80069a8:	d0c9      	beq.n	800693e <__swbuf_r+0x2e>
 80069aa:	2601      	movs	r6, #1
 80069ac:	4276      	negs	r6, r6
 80069ae:	e7ea      	b.n	8006986 <__swbuf_r+0x76>
 80069b0:	080084d8 	.word	0x080084d8
 80069b4:	080084f8 	.word	0x080084f8
 80069b8:	080084b8 	.word	0x080084b8

080069bc <__swsetup_r>:
 80069bc:	4b37      	ldr	r3, [pc, #220]	; (8006a9c <__swsetup_r+0xe0>)
 80069be:	b570      	push	{r4, r5, r6, lr}
 80069c0:	681d      	ldr	r5, [r3, #0]
 80069c2:	0006      	movs	r6, r0
 80069c4:	000c      	movs	r4, r1
 80069c6:	2d00      	cmp	r5, #0
 80069c8:	d005      	beq.n	80069d6 <__swsetup_r+0x1a>
 80069ca:	69ab      	ldr	r3, [r5, #24]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d102      	bne.n	80069d6 <__swsetup_r+0x1a>
 80069d0:	0028      	movs	r0, r5
 80069d2:	f000 f999 	bl	8006d08 <__sinit>
 80069d6:	4b32      	ldr	r3, [pc, #200]	; (8006aa0 <__swsetup_r+0xe4>)
 80069d8:	429c      	cmp	r4, r3
 80069da:	d10f      	bne.n	80069fc <__swsetup_r+0x40>
 80069dc:	686c      	ldr	r4, [r5, #4]
 80069de:	230c      	movs	r3, #12
 80069e0:	5ee2      	ldrsh	r2, [r4, r3]
 80069e2:	b293      	uxth	r3, r2
 80069e4:	0711      	lsls	r1, r2, #28
 80069e6:	d42d      	bmi.n	8006a44 <__swsetup_r+0x88>
 80069e8:	06d9      	lsls	r1, r3, #27
 80069ea:	d411      	bmi.n	8006a10 <__swsetup_r+0x54>
 80069ec:	2309      	movs	r3, #9
 80069ee:	2001      	movs	r0, #1
 80069f0:	6033      	str	r3, [r6, #0]
 80069f2:	3337      	adds	r3, #55	; 0x37
 80069f4:	4313      	orrs	r3, r2
 80069f6:	81a3      	strh	r3, [r4, #12]
 80069f8:	4240      	negs	r0, r0
 80069fa:	bd70      	pop	{r4, r5, r6, pc}
 80069fc:	4b29      	ldr	r3, [pc, #164]	; (8006aa4 <__swsetup_r+0xe8>)
 80069fe:	429c      	cmp	r4, r3
 8006a00:	d101      	bne.n	8006a06 <__swsetup_r+0x4a>
 8006a02:	68ac      	ldr	r4, [r5, #8]
 8006a04:	e7eb      	b.n	80069de <__swsetup_r+0x22>
 8006a06:	4b28      	ldr	r3, [pc, #160]	; (8006aa8 <__swsetup_r+0xec>)
 8006a08:	429c      	cmp	r4, r3
 8006a0a:	d1e8      	bne.n	80069de <__swsetup_r+0x22>
 8006a0c:	68ec      	ldr	r4, [r5, #12]
 8006a0e:	e7e6      	b.n	80069de <__swsetup_r+0x22>
 8006a10:	075b      	lsls	r3, r3, #29
 8006a12:	d513      	bpl.n	8006a3c <__swsetup_r+0x80>
 8006a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a16:	2900      	cmp	r1, #0
 8006a18:	d008      	beq.n	8006a2c <__swsetup_r+0x70>
 8006a1a:	0023      	movs	r3, r4
 8006a1c:	3344      	adds	r3, #68	; 0x44
 8006a1e:	4299      	cmp	r1, r3
 8006a20:	d002      	beq.n	8006a28 <__swsetup_r+0x6c>
 8006a22:	0030      	movs	r0, r6
 8006a24:	f000 fa8a 	bl	8006f3c <_free_r>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	6363      	str	r3, [r4, #52]	; 0x34
 8006a2c:	2224      	movs	r2, #36	; 0x24
 8006a2e:	89a3      	ldrh	r3, [r4, #12]
 8006a30:	4393      	bics	r3, r2
 8006a32:	81a3      	strh	r3, [r4, #12]
 8006a34:	2300      	movs	r3, #0
 8006a36:	6063      	str	r3, [r4, #4]
 8006a38:	6923      	ldr	r3, [r4, #16]
 8006a3a:	6023      	str	r3, [r4, #0]
 8006a3c:	2308      	movs	r3, #8
 8006a3e:	89a2      	ldrh	r2, [r4, #12]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	81a3      	strh	r3, [r4, #12]
 8006a44:	6923      	ldr	r3, [r4, #16]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10b      	bne.n	8006a62 <__swsetup_r+0xa6>
 8006a4a:	21a0      	movs	r1, #160	; 0xa0
 8006a4c:	2280      	movs	r2, #128	; 0x80
 8006a4e:	89a3      	ldrh	r3, [r4, #12]
 8006a50:	0089      	lsls	r1, r1, #2
 8006a52:	0092      	lsls	r2, r2, #2
 8006a54:	400b      	ands	r3, r1
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d003      	beq.n	8006a62 <__swsetup_r+0xa6>
 8006a5a:	0021      	movs	r1, r4
 8006a5c:	0030      	movs	r0, r6
 8006a5e:	f000 fa1f 	bl	8006ea0 <__smakebuf_r>
 8006a62:	220c      	movs	r2, #12
 8006a64:	5ea3      	ldrsh	r3, [r4, r2]
 8006a66:	2001      	movs	r0, #1
 8006a68:	001a      	movs	r2, r3
 8006a6a:	b299      	uxth	r1, r3
 8006a6c:	4002      	ands	r2, r0
 8006a6e:	4203      	tst	r3, r0
 8006a70:	d00f      	beq.n	8006a92 <__swsetup_r+0xd6>
 8006a72:	2200      	movs	r2, #0
 8006a74:	60a2      	str	r2, [r4, #8]
 8006a76:	6962      	ldr	r2, [r4, #20]
 8006a78:	4252      	negs	r2, r2
 8006a7a:	61a2      	str	r2, [r4, #24]
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	6922      	ldr	r2, [r4, #16]
 8006a80:	4282      	cmp	r2, r0
 8006a82:	d1ba      	bne.n	80069fa <__swsetup_r+0x3e>
 8006a84:	060a      	lsls	r2, r1, #24
 8006a86:	d5b8      	bpl.n	80069fa <__swsetup_r+0x3e>
 8006a88:	2240      	movs	r2, #64	; 0x40
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	81a3      	strh	r3, [r4, #12]
 8006a8e:	3801      	subs	r0, #1
 8006a90:	e7b3      	b.n	80069fa <__swsetup_r+0x3e>
 8006a92:	0788      	lsls	r0, r1, #30
 8006a94:	d400      	bmi.n	8006a98 <__swsetup_r+0xdc>
 8006a96:	6962      	ldr	r2, [r4, #20]
 8006a98:	60a2      	str	r2, [r4, #8]
 8006a9a:	e7ef      	b.n	8006a7c <__swsetup_r+0xc0>
 8006a9c:	2000040c 	.word	0x2000040c
 8006aa0:	080084d8 	.word	0x080084d8
 8006aa4:	080084f8 	.word	0x080084f8
 8006aa8:	080084b8 	.word	0x080084b8

08006aac <__sflush_r>:
 8006aac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aae:	898b      	ldrh	r3, [r1, #12]
 8006ab0:	0005      	movs	r5, r0
 8006ab2:	000c      	movs	r4, r1
 8006ab4:	071a      	lsls	r2, r3, #28
 8006ab6:	d45f      	bmi.n	8006b78 <__sflush_r+0xcc>
 8006ab8:	684a      	ldr	r2, [r1, #4]
 8006aba:	2a00      	cmp	r2, #0
 8006abc:	dc04      	bgt.n	8006ac8 <__sflush_r+0x1c>
 8006abe:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006ac0:	2a00      	cmp	r2, #0
 8006ac2:	dc01      	bgt.n	8006ac8 <__sflush_r+0x1c>
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ac8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006aca:	2f00      	cmp	r7, #0
 8006acc:	d0fa      	beq.n	8006ac4 <__sflush_r+0x18>
 8006ace:	2200      	movs	r2, #0
 8006ad0:	2180      	movs	r1, #128	; 0x80
 8006ad2:	682e      	ldr	r6, [r5, #0]
 8006ad4:	602a      	str	r2, [r5, #0]
 8006ad6:	001a      	movs	r2, r3
 8006ad8:	0149      	lsls	r1, r1, #5
 8006ada:	400a      	ands	r2, r1
 8006adc:	420b      	tst	r3, r1
 8006ade:	d034      	beq.n	8006b4a <__sflush_r+0x9e>
 8006ae0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ae2:	89a3      	ldrh	r3, [r4, #12]
 8006ae4:	075b      	lsls	r3, r3, #29
 8006ae6:	d506      	bpl.n	8006af6 <__sflush_r+0x4a>
 8006ae8:	6863      	ldr	r3, [r4, #4]
 8006aea:	1ac0      	subs	r0, r0, r3
 8006aec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <__sflush_r+0x4a>
 8006af2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006af4:	1ac0      	subs	r0, r0, r3
 8006af6:	0002      	movs	r2, r0
 8006af8:	6a21      	ldr	r1, [r4, #32]
 8006afa:	2300      	movs	r3, #0
 8006afc:	0028      	movs	r0, r5
 8006afe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006b00:	47b8      	blx	r7
 8006b02:	89a1      	ldrh	r1, [r4, #12]
 8006b04:	1c43      	adds	r3, r0, #1
 8006b06:	d106      	bne.n	8006b16 <__sflush_r+0x6a>
 8006b08:	682b      	ldr	r3, [r5, #0]
 8006b0a:	2b1d      	cmp	r3, #29
 8006b0c:	d831      	bhi.n	8006b72 <__sflush_r+0xc6>
 8006b0e:	4a2c      	ldr	r2, [pc, #176]	; (8006bc0 <__sflush_r+0x114>)
 8006b10:	40da      	lsrs	r2, r3
 8006b12:	07d3      	lsls	r3, r2, #31
 8006b14:	d52d      	bpl.n	8006b72 <__sflush_r+0xc6>
 8006b16:	2300      	movs	r3, #0
 8006b18:	6063      	str	r3, [r4, #4]
 8006b1a:	6923      	ldr	r3, [r4, #16]
 8006b1c:	6023      	str	r3, [r4, #0]
 8006b1e:	04cb      	lsls	r3, r1, #19
 8006b20:	d505      	bpl.n	8006b2e <__sflush_r+0x82>
 8006b22:	1c43      	adds	r3, r0, #1
 8006b24:	d102      	bne.n	8006b2c <__sflush_r+0x80>
 8006b26:	682b      	ldr	r3, [r5, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d100      	bne.n	8006b2e <__sflush_r+0x82>
 8006b2c:	6560      	str	r0, [r4, #84]	; 0x54
 8006b2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b30:	602e      	str	r6, [r5, #0]
 8006b32:	2900      	cmp	r1, #0
 8006b34:	d0c6      	beq.n	8006ac4 <__sflush_r+0x18>
 8006b36:	0023      	movs	r3, r4
 8006b38:	3344      	adds	r3, #68	; 0x44
 8006b3a:	4299      	cmp	r1, r3
 8006b3c:	d002      	beq.n	8006b44 <__sflush_r+0x98>
 8006b3e:	0028      	movs	r0, r5
 8006b40:	f000 f9fc 	bl	8006f3c <_free_r>
 8006b44:	2000      	movs	r0, #0
 8006b46:	6360      	str	r0, [r4, #52]	; 0x34
 8006b48:	e7bd      	b.n	8006ac6 <__sflush_r+0x1a>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	0028      	movs	r0, r5
 8006b4e:	6a21      	ldr	r1, [r4, #32]
 8006b50:	47b8      	blx	r7
 8006b52:	1c43      	adds	r3, r0, #1
 8006b54:	d1c5      	bne.n	8006ae2 <__sflush_r+0x36>
 8006b56:	682b      	ldr	r3, [r5, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0c2      	beq.n	8006ae2 <__sflush_r+0x36>
 8006b5c:	2b1d      	cmp	r3, #29
 8006b5e:	d001      	beq.n	8006b64 <__sflush_r+0xb8>
 8006b60:	2b16      	cmp	r3, #22
 8006b62:	d101      	bne.n	8006b68 <__sflush_r+0xbc>
 8006b64:	602e      	str	r6, [r5, #0]
 8006b66:	e7ad      	b.n	8006ac4 <__sflush_r+0x18>
 8006b68:	2340      	movs	r3, #64	; 0x40
 8006b6a:	89a2      	ldrh	r2, [r4, #12]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	81a3      	strh	r3, [r4, #12]
 8006b70:	e7a9      	b.n	8006ac6 <__sflush_r+0x1a>
 8006b72:	2340      	movs	r3, #64	; 0x40
 8006b74:	430b      	orrs	r3, r1
 8006b76:	e7fa      	b.n	8006b6e <__sflush_r+0xc2>
 8006b78:	690f      	ldr	r7, [r1, #16]
 8006b7a:	2f00      	cmp	r7, #0
 8006b7c:	d0a2      	beq.n	8006ac4 <__sflush_r+0x18>
 8006b7e:	680a      	ldr	r2, [r1, #0]
 8006b80:	600f      	str	r7, [r1, #0]
 8006b82:	1bd2      	subs	r2, r2, r7
 8006b84:	9201      	str	r2, [sp, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	079b      	lsls	r3, r3, #30
 8006b8a:	d100      	bne.n	8006b8e <__sflush_r+0xe2>
 8006b8c:	694a      	ldr	r2, [r1, #20]
 8006b8e:	60a2      	str	r2, [r4, #8]
 8006b90:	9b01      	ldr	r3, [sp, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	dc00      	bgt.n	8006b98 <__sflush_r+0xec>
 8006b96:	e795      	b.n	8006ac4 <__sflush_r+0x18>
 8006b98:	003a      	movs	r2, r7
 8006b9a:	0028      	movs	r0, r5
 8006b9c:	9b01      	ldr	r3, [sp, #4]
 8006b9e:	6a21      	ldr	r1, [r4, #32]
 8006ba0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ba2:	47b0      	blx	r6
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	dc06      	bgt.n	8006bb6 <__sflush_r+0x10a>
 8006ba8:	2340      	movs	r3, #64	; 0x40
 8006baa:	2001      	movs	r0, #1
 8006bac:	89a2      	ldrh	r2, [r4, #12]
 8006bae:	4240      	negs	r0, r0
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	81a3      	strh	r3, [r4, #12]
 8006bb4:	e787      	b.n	8006ac6 <__sflush_r+0x1a>
 8006bb6:	9b01      	ldr	r3, [sp, #4]
 8006bb8:	183f      	adds	r7, r7, r0
 8006bba:	1a1b      	subs	r3, r3, r0
 8006bbc:	9301      	str	r3, [sp, #4]
 8006bbe:	e7e7      	b.n	8006b90 <__sflush_r+0xe4>
 8006bc0:	20400001 	.word	0x20400001

08006bc4 <_fflush_r>:
 8006bc4:	690b      	ldr	r3, [r1, #16]
 8006bc6:	b570      	push	{r4, r5, r6, lr}
 8006bc8:	0005      	movs	r5, r0
 8006bca:	000c      	movs	r4, r1
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d102      	bne.n	8006bd6 <_fflush_r+0x12>
 8006bd0:	2500      	movs	r5, #0
 8006bd2:	0028      	movs	r0, r5
 8006bd4:	bd70      	pop	{r4, r5, r6, pc}
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	d004      	beq.n	8006be4 <_fflush_r+0x20>
 8006bda:	6983      	ldr	r3, [r0, #24]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d101      	bne.n	8006be4 <_fflush_r+0x20>
 8006be0:	f000 f892 	bl	8006d08 <__sinit>
 8006be4:	4b14      	ldr	r3, [pc, #80]	; (8006c38 <_fflush_r+0x74>)
 8006be6:	429c      	cmp	r4, r3
 8006be8:	d11b      	bne.n	8006c22 <_fflush_r+0x5e>
 8006bea:	686c      	ldr	r4, [r5, #4]
 8006bec:	220c      	movs	r2, #12
 8006bee:	5ea3      	ldrsh	r3, [r4, r2]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d0ed      	beq.n	8006bd0 <_fflush_r+0xc>
 8006bf4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006bf6:	07d2      	lsls	r2, r2, #31
 8006bf8:	d404      	bmi.n	8006c04 <_fflush_r+0x40>
 8006bfa:	059b      	lsls	r3, r3, #22
 8006bfc:	d402      	bmi.n	8006c04 <_fflush_r+0x40>
 8006bfe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c00:	f000 f923 	bl	8006e4a <__retarget_lock_acquire_recursive>
 8006c04:	0028      	movs	r0, r5
 8006c06:	0021      	movs	r1, r4
 8006c08:	f7ff ff50 	bl	8006aac <__sflush_r>
 8006c0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c0e:	0005      	movs	r5, r0
 8006c10:	07db      	lsls	r3, r3, #31
 8006c12:	d4de      	bmi.n	8006bd2 <_fflush_r+0xe>
 8006c14:	89a3      	ldrh	r3, [r4, #12]
 8006c16:	059b      	lsls	r3, r3, #22
 8006c18:	d4db      	bmi.n	8006bd2 <_fflush_r+0xe>
 8006c1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c1c:	f000 f916 	bl	8006e4c <__retarget_lock_release_recursive>
 8006c20:	e7d7      	b.n	8006bd2 <_fflush_r+0xe>
 8006c22:	4b06      	ldr	r3, [pc, #24]	; (8006c3c <_fflush_r+0x78>)
 8006c24:	429c      	cmp	r4, r3
 8006c26:	d101      	bne.n	8006c2c <_fflush_r+0x68>
 8006c28:	68ac      	ldr	r4, [r5, #8]
 8006c2a:	e7df      	b.n	8006bec <_fflush_r+0x28>
 8006c2c:	4b04      	ldr	r3, [pc, #16]	; (8006c40 <_fflush_r+0x7c>)
 8006c2e:	429c      	cmp	r4, r3
 8006c30:	d1dc      	bne.n	8006bec <_fflush_r+0x28>
 8006c32:	68ec      	ldr	r4, [r5, #12]
 8006c34:	e7da      	b.n	8006bec <_fflush_r+0x28>
 8006c36:	46c0      	nop			; (mov r8, r8)
 8006c38:	080084d8 	.word	0x080084d8
 8006c3c:	080084f8 	.word	0x080084f8
 8006c40:	080084b8 	.word	0x080084b8

08006c44 <std>:
 8006c44:	2300      	movs	r3, #0
 8006c46:	b510      	push	{r4, lr}
 8006c48:	0004      	movs	r4, r0
 8006c4a:	6003      	str	r3, [r0, #0]
 8006c4c:	6043      	str	r3, [r0, #4]
 8006c4e:	6083      	str	r3, [r0, #8]
 8006c50:	8181      	strh	r1, [r0, #12]
 8006c52:	6643      	str	r3, [r0, #100]	; 0x64
 8006c54:	0019      	movs	r1, r3
 8006c56:	81c2      	strh	r2, [r0, #14]
 8006c58:	6103      	str	r3, [r0, #16]
 8006c5a:	6143      	str	r3, [r0, #20]
 8006c5c:	6183      	str	r3, [r0, #24]
 8006c5e:	2208      	movs	r2, #8
 8006c60:	305c      	adds	r0, #92	; 0x5c
 8006c62:	f7ff fca6 	bl	80065b2 <memset>
 8006c66:	4b05      	ldr	r3, [pc, #20]	; (8006c7c <std+0x38>)
 8006c68:	6224      	str	r4, [r4, #32]
 8006c6a:	6263      	str	r3, [r4, #36]	; 0x24
 8006c6c:	4b04      	ldr	r3, [pc, #16]	; (8006c80 <std+0x3c>)
 8006c6e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c70:	4b04      	ldr	r3, [pc, #16]	; (8006c84 <std+0x40>)
 8006c72:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c74:	4b04      	ldr	r3, [pc, #16]	; (8006c88 <std+0x44>)
 8006c76:	6323      	str	r3, [r4, #48]	; 0x30
 8006c78:	bd10      	pop	{r4, pc}
 8006c7a:	46c0      	nop			; (mov r8, r8)
 8006c7c:	08007a45 	.word	0x08007a45
 8006c80:	08007a6d 	.word	0x08007a6d
 8006c84:	08007aa5 	.word	0x08007aa5
 8006c88:	08007ad1 	.word	0x08007ad1

08006c8c <_cleanup_r>:
 8006c8c:	b510      	push	{r4, lr}
 8006c8e:	4902      	ldr	r1, [pc, #8]	; (8006c98 <_cleanup_r+0xc>)
 8006c90:	f000 f8ba 	bl	8006e08 <_fwalk_reent>
 8006c94:	bd10      	pop	{r4, pc}
 8006c96:	46c0      	nop			; (mov r8, r8)
 8006c98:	08006bc5 	.word	0x08006bc5

08006c9c <__sfmoreglue>:
 8006c9c:	b570      	push	{r4, r5, r6, lr}
 8006c9e:	2568      	movs	r5, #104	; 0x68
 8006ca0:	1e4a      	subs	r2, r1, #1
 8006ca2:	4355      	muls	r5, r2
 8006ca4:	000e      	movs	r6, r1
 8006ca6:	0029      	movs	r1, r5
 8006ca8:	3174      	adds	r1, #116	; 0x74
 8006caa:	f000 f9b3 	bl	8007014 <_malloc_r>
 8006cae:	1e04      	subs	r4, r0, #0
 8006cb0:	d008      	beq.n	8006cc4 <__sfmoreglue+0x28>
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	002a      	movs	r2, r5
 8006cb6:	6001      	str	r1, [r0, #0]
 8006cb8:	6046      	str	r6, [r0, #4]
 8006cba:	300c      	adds	r0, #12
 8006cbc:	60a0      	str	r0, [r4, #8]
 8006cbe:	3268      	adds	r2, #104	; 0x68
 8006cc0:	f7ff fc77 	bl	80065b2 <memset>
 8006cc4:	0020      	movs	r0, r4
 8006cc6:	bd70      	pop	{r4, r5, r6, pc}

08006cc8 <__sfp_lock_acquire>:
 8006cc8:	b510      	push	{r4, lr}
 8006cca:	4802      	ldr	r0, [pc, #8]	; (8006cd4 <__sfp_lock_acquire+0xc>)
 8006ccc:	f000 f8bd 	bl	8006e4a <__retarget_lock_acquire_recursive>
 8006cd0:	bd10      	pop	{r4, pc}
 8006cd2:	46c0      	nop			; (mov r8, r8)
 8006cd4:	20000db5 	.word	0x20000db5

08006cd8 <__sfp_lock_release>:
 8006cd8:	b510      	push	{r4, lr}
 8006cda:	4802      	ldr	r0, [pc, #8]	; (8006ce4 <__sfp_lock_release+0xc>)
 8006cdc:	f000 f8b6 	bl	8006e4c <__retarget_lock_release_recursive>
 8006ce0:	bd10      	pop	{r4, pc}
 8006ce2:	46c0      	nop			; (mov r8, r8)
 8006ce4:	20000db5 	.word	0x20000db5

08006ce8 <__sinit_lock_acquire>:
 8006ce8:	b510      	push	{r4, lr}
 8006cea:	4802      	ldr	r0, [pc, #8]	; (8006cf4 <__sinit_lock_acquire+0xc>)
 8006cec:	f000 f8ad 	bl	8006e4a <__retarget_lock_acquire_recursive>
 8006cf0:	bd10      	pop	{r4, pc}
 8006cf2:	46c0      	nop			; (mov r8, r8)
 8006cf4:	20000db6 	.word	0x20000db6

08006cf8 <__sinit_lock_release>:
 8006cf8:	b510      	push	{r4, lr}
 8006cfa:	4802      	ldr	r0, [pc, #8]	; (8006d04 <__sinit_lock_release+0xc>)
 8006cfc:	f000 f8a6 	bl	8006e4c <__retarget_lock_release_recursive>
 8006d00:	bd10      	pop	{r4, pc}
 8006d02:	46c0      	nop			; (mov r8, r8)
 8006d04:	20000db6 	.word	0x20000db6

08006d08 <__sinit>:
 8006d08:	b513      	push	{r0, r1, r4, lr}
 8006d0a:	0004      	movs	r4, r0
 8006d0c:	f7ff ffec 	bl	8006ce8 <__sinit_lock_acquire>
 8006d10:	69a3      	ldr	r3, [r4, #24]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d002      	beq.n	8006d1c <__sinit+0x14>
 8006d16:	f7ff ffef 	bl	8006cf8 <__sinit_lock_release>
 8006d1a:	bd13      	pop	{r0, r1, r4, pc}
 8006d1c:	64a3      	str	r3, [r4, #72]	; 0x48
 8006d1e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006d20:	6523      	str	r3, [r4, #80]	; 0x50
 8006d22:	4b13      	ldr	r3, [pc, #76]	; (8006d70 <__sinit+0x68>)
 8006d24:	4a13      	ldr	r2, [pc, #76]	; (8006d74 <__sinit+0x6c>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d2a:	9301      	str	r3, [sp, #4]
 8006d2c:	42a3      	cmp	r3, r4
 8006d2e:	d101      	bne.n	8006d34 <__sinit+0x2c>
 8006d30:	2301      	movs	r3, #1
 8006d32:	61a3      	str	r3, [r4, #24]
 8006d34:	0020      	movs	r0, r4
 8006d36:	f000 f81f 	bl	8006d78 <__sfp>
 8006d3a:	6060      	str	r0, [r4, #4]
 8006d3c:	0020      	movs	r0, r4
 8006d3e:	f000 f81b 	bl	8006d78 <__sfp>
 8006d42:	60a0      	str	r0, [r4, #8]
 8006d44:	0020      	movs	r0, r4
 8006d46:	f000 f817 	bl	8006d78 <__sfp>
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	2104      	movs	r1, #4
 8006d4e:	60e0      	str	r0, [r4, #12]
 8006d50:	6860      	ldr	r0, [r4, #4]
 8006d52:	f7ff ff77 	bl	8006c44 <std>
 8006d56:	2201      	movs	r2, #1
 8006d58:	2109      	movs	r1, #9
 8006d5a:	68a0      	ldr	r0, [r4, #8]
 8006d5c:	f7ff ff72 	bl	8006c44 <std>
 8006d60:	2202      	movs	r2, #2
 8006d62:	2112      	movs	r1, #18
 8006d64:	68e0      	ldr	r0, [r4, #12]
 8006d66:	f7ff ff6d 	bl	8006c44 <std>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	61a3      	str	r3, [r4, #24]
 8006d6e:	e7d2      	b.n	8006d16 <__sinit+0xe>
 8006d70:	080084b4 	.word	0x080084b4
 8006d74:	08006c8d 	.word	0x08006c8d

08006d78 <__sfp>:
 8006d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7a:	0007      	movs	r7, r0
 8006d7c:	f7ff ffa4 	bl	8006cc8 <__sfp_lock_acquire>
 8006d80:	4b1f      	ldr	r3, [pc, #124]	; (8006e00 <__sfp+0x88>)
 8006d82:	681e      	ldr	r6, [r3, #0]
 8006d84:	69b3      	ldr	r3, [r6, #24]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d102      	bne.n	8006d90 <__sfp+0x18>
 8006d8a:	0030      	movs	r0, r6
 8006d8c:	f7ff ffbc 	bl	8006d08 <__sinit>
 8006d90:	3648      	adds	r6, #72	; 0x48
 8006d92:	68b4      	ldr	r4, [r6, #8]
 8006d94:	6873      	ldr	r3, [r6, #4]
 8006d96:	3b01      	subs	r3, #1
 8006d98:	d504      	bpl.n	8006da4 <__sfp+0x2c>
 8006d9a:	6833      	ldr	r3, [r6, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d022      	beq.n	8006de6 <__sfp+0x6e>
 8006da0:	6836      	ldr	r6, [r6, #0]
 8006da2:	e7f6      	b.n	8006d92 <__sfp+0x1a>
 8006da4:	220c      	movs	r2, #12
 8006da6:	5ea5      	ldrsh	r5, [r4, r2]
 8006da8:	2d00      	cmp	r5, #0
 8006daa:	d11a      	bne.n	8006de2 <__sfp+0x6a>
 8006dac:	0020      	movs	r0, r4
 8006dae:	4b15      	ldr	r3, [pc, #84]	; (8006e04 <__sfp+0x8c>)
 8006db0:	3058      	adds	r0, #88	; 0x58
 8006db2:	60e3      	str	r3, [r4, #12]
 8006db4:	6665      	str	r5, [r4, #100]	; 0x64
 8006db6:	f000 f847 	bl	8006e48 <__retarget_lock_init_recursive>
 8006dba:	f7ff ff8d 	bl	8006cd8 <__sfp_lock_release>
 8006dbe:	0020      	movs	r0, r4
 8006dc0:	2208      	movs	r2, #8
 8006dc2:	0029      	movs	r1, r5
 8006dc4:	6025      	str	r5, [r4, #0]
 8006dc6:	60a5      	str	r5, [r4, #8]
 8006dc8:	6065      	str	r5, [r4, #4]
 8006dca:	6125      	str	r5, [r4, #16]
 8006dcc:	6165      	str	r5, [r4, #20]
 8006dce:	61a5      	str	r5, [r4, #24]
 8006dd0:	305c      	adds	r0, #92	; 0x5c
 8006dd2:	f7ff fbee 	bl	80065b2 <memset>
 8006dd6:	6365      	str	r5, [r4, #52]	; 0x34
 8006dd8:	63a5      	str	r5, [r4, #56]	; 0x38
 8006dda:	64a5      	str	r5, [r4, #72]	; 0x48
 8006ddc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006dde:	0020      	movs	r0, r4
 8006de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006de2:	3468      	adds	r4, #104	; 0x68
 8006de4:	e7d7      	b.n	8006d96 <__sfp+0x1e>
 8006de6:	2104      	movs	r1, #4
 8006de8:	0038      	movs	r0, r7
 8006dea:	f7ff ff57 	bl	8006c9c <__sfmoreglue>
 8006dee:	1e04      	subs	r4, r0, #0
 8006df0:	6030      	str	r0, [r6, #0]
 8006df2:	d1d5      	bne.n	8006da0 <__sfp+0x28>
 8006df4:	f7ff ff70 	bl	8006cd8 <__sfp_lock_release>
 8006df8:	230c      	movs	r3, #12
 8006dfa:	603b      	str	r3, [r7, #0]
 8006dfc:	e7ef      	b.n	8006dde <__sfp+0x66>
 8006dfe:	46c0      	nop			; (mov r8, r8)
 8006e00:	080084b4 	.word	0x080084b4
 8006e04:	ffff0001 	.word	0xffff0001

08006e08 <_fwalk_reent>:
 8006e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e0a:	0004      	movs	r4, r0
 8006e0c:	0006      	movs	r6, r0
 8006e0e:	2700      	movs	r7, #0
 8006e10:	9101      	str	r1, [sp, #4]
 8006e12:	3448      	adds	r4, #72	; 0x48
 8006e14:	6863      	ldr	r3, [r4, #4]
 8006e16:	68a5      	ldr	r5, [r4, #8]
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	9b00      	ldr	r3, [sp, #0]
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	d504      	bpl.n	8006e2c <_fwalk_reent+0x24>
 8006e22:	6824      	ldr	r4, [r4, #0]
 8006e24:	2c00      	cmp	r4, #0
 8006e26:	d1f5      	bne.n	8006e14 <_fwalk_reent+0xc>
 8006e28:	0038      	movs	r0, r7
 8006e2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e2c:	89ab      	ldrh	r3, [r5, #12]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d908      	bls.n	8006e44 <_fwalk_reent+0x3c>
 8006e32:	220e      	movs	r2, #14
 8006e34:	5eab      	ldrsh	r3, [r5, r2]
 8006e36:	3301      	adds	r3, #1
 8006e38:	d004      	beq.n	8006e44 <_fwalk_reent+0x3c>
 8006e3a:	0029      	movs	r1, r5
 8006e3c:	0030      	movs	r0, r6
 8006e3e:	9b01      	ldr	r3, [sp, #4]
 8006e40:	4798      	blx	r3
 8006e42:	4307      	orrs	r7, r0
 8006e44:	3568      	adds	r5, #104	; 0x68
 8006e46:	e7e8      	b.n	8006e1a <_fwalk_reent+0x12>

08006e48 <__retarget_lock_init_recursive>:
 8006e48:	4770      	bx	lr

08006e4a <__retarget_lock_acquire_recursive>:
 8006e4a:	4770      	bx	lr

08006e4c <__retarget_lock_release_recursive>:
 8006e4c:	4770      	bx	lr
	...

08006e50 <__swhatbuf_r>:
 8006e50:	b570      	push	{r4, r5, r6, lr}
 8006e52:	000e      	movs	r6, r1
 8006e54:	001d      	movs	r5, r3
 8006e56:	230e      	movs	r3, #14
 8006e58:	5ec9      	ldrsh	r1, [r1, r3]
 8006e5a:	0014      	movs	r4, r2
 8006e5c:	b096      	sub	sp, #88	; 0x58
 8006e5e:	2900      	cmp	r1, #0
 8006e60:	da08      	bge.n	8006e74 <__swhatbuf_r+0x24>
 8006e62:	220c      	movs	r2, #12
 8006e64:	5eb3      	ldrsh	r3, [r6, r2]
 8006e66:	2200      	movs	r2, #0
 8006e68:	602a      	str	r2, [r5, #0]
 8006e6a:	061b      	lsls	r3, r3, #24
 8006e6c:	d411      	bmi.n	8006e92 <__swhatbuf_r+0x42>
 8006e6e:	2380      	movs	r3, #128	; 0x80
 8006e70:	00db      	lsls	r3, r3, #3
 8006e72:	e00f      	b.n	8006e94 <__swhatbuf_r+0x44>
 8006e74:	466a      	mov	r2, sp
 8006e76:	f000 fe57 	bl	8007b28 <_fstat_r>
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	dbf1      	blt.n	8006e62 <__swhatbuf_r+0x12>
 8006e7e:	23f0      	movs	r3, #240	; 0xf0
 8006e80:	9901      	ldr	r1, [sp, #4]
 8006e82:	021b      	lsls	r3, r3, #8
 8006e84:	4019      	ands	r1, r3
 8006e86:	4b05      	ldr	r3, [pc, #20]	; (8006e9c <__swhatbuf_r+0x4c>)
 8006e88:	18c9      	adds	r1, r1, r3
 8006e8a:	424b      	negs	r3, r1
 8006e8c:	4159      	adcs	r1, r3
 8006e8e:	6029      	str	r1, [r5, #0]
 8006e90:	e7ed      	b.n	8006e6e <__swhatbuf_r+0x1e>
 8006e92:	2340      	movs	r3, #64	; 0x40
 8006e94:	2000      	movs	r0, #0
 8006e96:	6023      	str	r3, [r4, #0]
 8006e98:	b016      	add	sp, #88	; 0x58
 8006e9a:	bd70      	pop	{r4, r5, r6, pc}
 8006e9c:	ffffe000 	.word	0xffffe000

08006ea0 <__smakebuf_r>:
 8006ea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ea2:	2602      	movs	r6, #2
 8006ea4:	898b      	ldrh	r3, [r1, #12]
 8006ea6:	0005      	movs	r5, r0
 8006ea8:	000c      	movs	r4, r1
 8006eaa:	4233      	tst	r3, r6
 8006eac:	d006      	beq.n	8006ebc <__smakebuf_r+0x1c>
 8006eae:	0023      	movs	r3, r4
 8006eb0:	3347      	adds	r3, #71	; 0x47
 8006eb2:	6023      	str	r3, [r4, #0]
 8006eb4:	6123      	str	r3, [r4, #16]
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	6163      	str	r3, [r4, #20]
 8006eba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006ebc:	466a      	mov	r2, sp
 8006ebe:	ab01      	add	r3, sp, #4
 8006ec0:	f7ff ffc6 	bl	8006e50 <__swhatbuf_r>
 8006ec4:	9900      	ldr	r1, [sp, #0]
 8006ec6:	0007      	movs	r7, r0
 8006ec8:	0028      	movs	r0, r5
 8006eca:	f000 f8a3 	bl	8007014 <_malloc_r>
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	d108      	bne.n	8006ee4 <__smakebuf_r+0x44>
 8006ed2:	220c      	movs	r2, #12
 8006ed4:	5ea3      	ldrsh	r3, [r4, r2]
 8006ed6:	059a      	lsls	r2, r3, #22
 8006ed8:	d4ef      	bmi.n	8006eba <__smakebuf_r+0x1a>
 8006eda:	2203      	movs	r2, #3
 8006edc:	4393      	bics	r3, r2
 8006ede:	431e      	orrs	r6, r3
 8006ee0:	81a6      	strh	r6, [r4, #12]
 8006ee2:	e7e4      	b.n	8006eae <__smakebuf_r+0xe>
 8006ee4:	4b0f      	ldr	r3, [pc, #60]	; (8006f24 <__smakebuf_r+0x84>)
 8006ee6:	62ab      	str	r3, [r5, #40]	; 0x28
 8006ee8:	2380      	movs	r3, #128	; 0x80
 8006eea:	89a2      	ldrh	r2, [r4, #12]
 8006eec:	6020      	str	r0, [r4, #0]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	81a3      	strh	r3, [r4, #12]
 8006ef2:	9b00      	ldr	r3, [sp, #0]
 8006ef4:	6120      	str	r0, [r4, #16]
 8006ef6:	6163      	str	r3, [r4, #20]
 8006ef8:	9b01      	ldr	r3, [sp, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00d      	beq.n	8006f1a <__smakebuf_r+0x7a>
 8006efe:	0028      	movs	r0, r5
 8006f00:	230e      	movs	r3, #14
 8006f02:	5ee1      	ldrsh	r1, [r4, r3]
 8006f04:	f000 fe22 	bl	8007b4c <_isatty_r>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	d006      	beq.n	8006f1a <__smakebuf_r+0x7a>
 8006f0c:	2203      	movs	r2, #3
 8006f0e:	89a3      	ldrh	r3, [r4, #12]
 8006f10:	4393      	bics	r3, r2
 8006f12:	001a      	movs	r2, r3
 8006f14:	2301      	movs	r3, #1
 8006f16:	4313      	orrs	r3, r2
 8006f18:	81a3      	strh	r3, [r4, #12]
 8006f1a:	89a0      	ldrh	r0, [r4, #12]
 8006f1c:	4307      	orrs	r7, r0
 8006f1e:	81a7      	strh	r7, [r4, #12]
 8006f20:	e7cb      	b.n	8006eba <__smakebuf_r+0x1a>
 8006f22:	46c0      	nop			; (mov r8, r8)
 8006f24:	08006c8d 	.word	0x08006c8d

08006f28 <malloc>:
 8006f28:	b510      	push	{r4, lr}
 8006f2a:	4b03      	ldr	r3, [pc, #12]	; (8006f38 <malloc+0x10>)
 8006f2c:	0001      	movs	r1, r0
 8006f2e:	6818      	ldr	r0, [r3, #0]
 8006f30:	f000 f870 	bl	8007014 <_malloc_r>
 8006f34:	bd10      	pop	{r4, pc}
 8006f36:	46c0      	nop			; (mov r8, r8)
 8006f38:	2000040c 	.word	0x2000040c

08006f3c <_free_r>:
 8006f3c:	b570      	push	{r4, r5, r6, lr}
 8006f3e:	0005      	movs	r5, r0
 8006f40:	2900      	cmp	r1, #0
 8006f42:	d010      	beq.n	8006f66 <_free_r+0x2a>
 8006f44:	1f0c      	subs	r4, r1, #4
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	da00      	bge.n	8006f4e <_free_r+0x12>
 8006f4c:	18e4      	adds	r4, r4, r3
 8006f4e:	0028      	movs	r0, r5
 8006f50:	f000 fe40 	bl	8007bd4 <__malloc_lock>
 8006f54:	4a1d      	ldr	r2, [pc, #116]	; (8006fcc <_free_r+0x90>)
 8006f56:	6813      	ldr	r3, [r2, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d105      	bne.n	8006f68 <_free_r+0x2c>
 8006f5c:	6063      	str	r3, [r4, #4]
 8006f5e:	6014      	str	r4, [r2, #0]
 8006f60:	0028      	movs	r0, r5
 8006f62:	f000 fe3f 	bl	8007be4 <__malloc_unlock>
 8006f66:	bd70      	pop	{r4, r5, r6, pc}
 8006f68:	42a3      	cmp	r3, r4
 8006f6a:	d908      	bls.n	8006f7e <_free_r+0x42>
 8006f6c:	6821      	ldr	r1, [r4, #0]
 8006f6e:	1860      	adds	r0, r4, r1
 8006f70:	4283      	cmp	r3, r0
 8006f72:	d1f3      	bne.n	8006f5c <_free_r+0x20>
 8006f74:	6818      	ldr	r0, [r3, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	1841      	adds	r1, r0, r1
 8006f7a:	6021      	str	r1, [r4, #0]
 8006f7c:	e7ee      	b.n	8006f5c <_free_r+0x20>
 8006f7e:	001a      	movs	r2, r3
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <_free_r+0x4e>
 8006f86:	42a3      	cmp	r3, r4
 8006f88:	d9f9      	bls.n	8006f7e <_free_r+0x42>
 8006f8a:	6811      	ldr	r1, [r2, #0]
 8006f8c:	1850      	adds	r0, r2, r1
 8006f8e:	42a0      	cmp	r0, r4
 8006f90:	d10b      	bne.n	8006faa <_free_r+0x6e>
 8006f92:	6820      	ldr	r0, [r4, #0]
 8006f94:	1809      	adds	r1, r1, r0
 8006f96:	1850      	adds	r0, r2, r1
 8006f98:	6011      	str	r1, [r2, #0]
 8006f9a:	4283      	cmp	r3, r0
 8006f9c:	d1e0      	bne.n	8006f60 <_free_r+0x24>
 8006f9e:	6818      	ldr	r0, [r3, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	1841      	adds	r1, r0, r1
 8006fa4:	6011      	str	r1, [r2, #0]
 8006fa6:	6053      	str	r3, [r2, #4]
 8006fa8:	e7da      	b.n	8006f60 <_free_r+0x24>
 8006faa:	42a0      	cmp	r0, r4
 8006fac:	d902      	bls.n	8006fb4 <_free_r+0x78>
 8006fae:	230c      	movs	r3, #12
 8006fb0:	602b      	str	r3, [r5, #0]
 8006fb2:	e7d5      	b.n	8006f60 <_free_r+0x24>
 8006fb4:	6821      	ldr	r1, [r4, #0]
 8006fb6:	1860      	adds	r0, r4, r1
 8006fb8:	4283      	cmp	r3, r0
 8006fba:	d103      	bne.n	8006fc4 <_free_r+0x88>
 8006fbc:	6818      	ldr	r0, [r3, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	1841      	adds	r1, r0, r1
 8006fc2:	6021      	str	r1, [r4, #0]
 8006fc4:	6063      	str	r3, [r4, #4]
 8006fc6:	6054      	str	r4, [r2, #4]
 8006fc8:	e7ca      	b.n	8006f60 <_free_r+0x24>
 8006fca:	46c0      	nop			; (mov r8, r8)
 8006fcc:	20000db8 	.word	0x20000db8

08006fd0 <sbrk_aligned>:
 8006fd0:	b570      	push	{r4, r5, r6, lr}
 8006fd2:	4e0f      	ldr	r6, [pc, #60]	; (8007010 <sbrk_aligned+0x40>)
 8006fd4:	000d      	movs	r5, r1
 8006fd6:	6831      	ldr	r1, [r6, #0]
 8006fd8:	0004      	movs	r4, r0
 8006fda:	2900      	cmp	r1, #0
 8006fdc:	d102      	bne.n	8006fe4 <sbrk_aligned+0x14>
 8006fde:	f000 fd1f 	bl	8007a20 <_sbrk_r>
 8006fe2:	6030      	str	r0, [r6, #0]
 8006fe4:	0029      	movs	r1, r5
 8006fe6:	0020      	movs	r0, r4
 8006fe8:	f000 fd1a 	bl	8007a20 <_sbrk_r>
 8006fec:	1c43      	adds	r3, r0, #1
 8006fee:	d00a      	beq.n	8007006 <sbrk_aligned+0x36>
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	1cc5      	adds	r5, r0, #3
 8006ff4:	439d      	bics	r5, r3
 8006ff6:	42a8      	cmp	r0, r5
 8006ff8:	d007      	beq.n	800700a <sbrk_aligned+0x3a>
 8006ffa:	1a29      	subs	r1, r5, r0
 8006ffc:	0020      	movs	r0, r4
 8006ffe:	f000 fd0f 	bl	8007a20 <_sbrk_r>
 8007002:	1c43      	adds	r3, r0, #1
 8007004:	d101      	bne.n	800700a <sbrk_aligned+0x3a>
 8007006:	2501      	movs	r5, #1
 8007008:	426d      	negs	r5, r5
 800700a:	0028      	movs	r0, r5
 800700c:	bd70      	pop	{r4, r5, r6, pc}
 800700e:	46c0      	nop			; (mov r8, r8)
 8007010:	20000dbc 	.word	0x20000dbc

08007014 <_malloc_r>:
 8007014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007016:	2203      	movs	r2, #3
 8007018:	1ccb      	adds	r3, r1, #3
 800701a:	4393      	bics	r3, r2
 800701c:	3308      	adds	r3, #8
 800701e:	0006      	movs	r6, r0
 8007020:	001f      	movs	r7, r3
 8007022:	2b0c      	cmp	r3, #12
 8007024:	d232      	bcs.n	800708c <_malloc_r+0x78>
 8007026:	270c      	movs	r7, #12
 8007028:	42b9      	cmp	r1, r7
 800702a:	d831      	bhi.n	8007090 <_malloc_r+0x7c>
 800702c:	0030      	movs	r0, r6
 800702e:	f000 fdd1 	bl	8007bd4 <__malloc_lock>
 8007032:	4d32      	ldr	r5, [pc, #200]	; (80070fc <_malloc_r+0xe8>)
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	001c      	movs	r4, r3
 8007038:	2c00      	cmp	r4, #0
 800703a:	d12e      	bne.n	800709a <_malloc_r+0x86>
 800703c:	0039      	movs	r1, r7
 800703e:	0030      	movs	r0, r6
 8007040:	f7ff ffc6 	bl	8006fd0 <sbrk_aligned>
 8007044:	0004      	movs	r4, r0
 8007046:	1c43      	adds	r3, r0, #1
 8007048:	d11e      	bne.n	8007088 <_malloc_r+0x74>
 800704a:	682c      	ldr	r4, [r5, #0]
 800704c:	0025      	movs	r5, r4
 800704e:	2d00      	cmp	r5, #0
 8007050:	d14a      	bne.n	80070e8 <_malloc_r+0xd4>
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	0029      	movs	r1, r5
 8007056:	18e3      	adds	r3, r4, r3
 8007058:	0030      	movs	r0, r6
 800705a:	9301      	str	r3, [sp, #4]
 800705c:	f000 fce0 	bl	8007a20 <_sbrk_r>
 8007060:	9b01      	ldr	r3, [sp, #4]
 8007062:	4283      	cmp	r3, r0
 8007064:	d143      	bne.n	80070ee <_malloc_r+0xda>
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	3703      	adds	r7, #3
 800706a:	1aff      	subs	r7, r7, r3
 800706c:	2303      	movs	r3, #3
 800706e:	439f      	bics	r7, r3
 8007070:	3708      	adds	r7, #8
 8007072:	2f0c      	cmp	r7, #12
 8007074:	d200      	bcs.n	8007078 <_malloc_r+0x64>
 8007076:	270c      	movs	r7, #12
 8007078:	0039      	movs	r1, r7
 800707a:	0030      	movs	r0, r6
 800707c:	f7ff ffa8 	bl	8006fd0 <sbrk_aligned>
 8007080:	1c43      	adds	r3, r0, #1
 8007082:	d034      	beq.n	80070ee <_malloc_r+0xda>
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	19df      	adds	r7, r3, r7
 8007088:	6027      	str	r7, [r4, #0]
 800708a:	e013      	b.n	80070b4 <_malloc_r+0xa0>
 800708c:	2b00      	cmp	r3, #0
 800708e:	dacb      	bge.n	8007028 <_malloc_r+0x14>
 8007090:	230c      	movs	r3, #12
 8007092:	2500      	movs	r5, #0
 8007094:	6033      	str	r3, [r6, #0]
 8007096:	0028      	movs	r0, r5
 8007098:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800709a:	6822      	ldr	r2, [r4, #0]
 800709c:	1bd1      	subs	r1, r2, r7
 800709e:	d420      	bmi.n	80070e2 <_malloc_r+0xce>
 80070a0:	290b      	cmp	r1, #11
 80070a2:	d917      	bls.n	80070d4 <_malloc_r+0xc0>
 80070a4:	19e2      	adds	r2, r4, r7
 80070a6:	6027      	str	r7, [r4, #0]
 80070a8:	42a3      	cmp	r3, r4
 80070aa:	d111      	bne.n	80070d0 <_malloc_r+0xbc>
 80070ac:	602a      	str	r2, [r5, #0]
 80070ae:	6863      	ldr	r3, [r4, #4]
 80070b0:	6011      	str	r1, [r2, #0]
 80070b2:	6053      	str	r3, [r2, #4]
 80070b4:	0030      	movs	r0, r6
 80070b6:	0025      	movs	r5, r4
 80070b8:	f000 fd94 	bl	8007be4 <__malloc_unlock>
 80070bc:	2207      	movs	r2, #7
 80070be:	350b      	adds	r5, #11
 80070c0:	1d23      	adds	r3, r4, #4
 80070c2:	4395      	bics	r5, r2
 80070c4:	1aea      	subs	r2, r5, r3
 80070c6:	429d      	cmp	r5, r3
 80070c8:	d0e5      	beq.n	8007096 <_malloc_r+0x82>
 80070ca:	1b5b      	subs	r3, r3, r5
 80070cc:	50a3      	str	r3, [r4, r2]
 80070ce:	e7e2      	b.n	8007096 <_malloc_r+0x82>
 80070d0:	605a      	str	r2, [r3, #4]
 80070d2:	e7ec      	b.n	80070ae <_malloc_r+0x9a>
 80070d4:	6862      	ldr	r2, [r4, #4]
 80070d6:	42a3      	cmp	r3, r4
 80070d8:	d101      	bne.n	80070de <_malloc_r+0xca>
 80070da:	602a      	str	r2, [r5, #0]
 80070dc:	e7ea      	b.n	80070b4 <_malloc_r+0xa0>
 80070de:	605a      	str	r2, [r3, #4]
 80070e0:	e7e8      	b.n	80070b4 <_malloc_r+0xa0>
 80070e2:	0023      	movs	r3, r4
 80070e4:	6864      	ldr	r4, [r4, #4]
 80070e6:	e7a7      	b.n	8007038 <_malloc_r+0x24>
 80070e8:	002c      	movs	r4, r5
 80070ea:	686d      	ldr	r5, [r5, #4]
 80070ec:	e7af      	b.n	800704e <_malloc_r+0x3a>
 80070ee:	230c      	movs	r3, #12
 80070f0:	0030      	movs	r0, r6
 80070f2:	6033      	str	r3, [r6, #0]
 80070f4:	f000 fd76 	bl	8007be4 <__malloc_unlock>
 80070f8:	e7cd      	b.n	8007096 <_malloc_r+0x82>
 80070fa:	46c0      	nop			; (mov r8, r8)
 80070fc:	20000db8 	.word	0x20000db8

08007100 <__ssputs_r>:
 8007100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007102:	688e      	ldr	r6, [r1, #8]
 8007104:	b085      	sub	sp, #20
 8007106:	0007      	movs	r7, r0
 8007108:	000c      	movs	r4, r1
 800710a:	9203      	str	r2, [sp, #12]
 800710c:	9301      	str	r3, [sp, #4]
 800710e:	429e      	cmp	r6, r3
 8007110:	d83c      	bhi.n	800718c <__ssputs_r+0x8c>
 8007112:	2390      	movs	r3, #144	; 0x90
 8007114:	898a      	ldrh	r2, [r1, #12]
 8007116:	00db      	lsls	r3, r3, #3
 8007118:	421a      	tst	r2, r3
 800711a:	d034      	beq.n	8007186 <__ssputs_r+0x86>
 800711c:	6909      	ldr	r1, [r1, #16]
 800711e:	6823      	ldr	r3, [r4, #0]
 8007120:	6960      	ldr	r0, [r4, #20]
 8007122:	1a5b      	subs	r3, r3, r1
 8007124:	9302      	str	r3, [sp, #8]
 8007126:	2303      	movs	r3, #3
 8007128:	4343      	muls	r3, r0
 800712a:	0fdd      	lsrs	r5, r3, #31
 800712c:	18ed      	adds	r5, r5, r3
 800712e:	9b01      	ldr	r3, [sp, #4]
 8007130:	9802      	ldr	r0, [sp, #8]
 8007132:	3301      	adds	r3, #1
 8007134:	181b      	adds	r3, r3, r0
 8007136:	106d      	asrs	r5, r5, #1
 8007138:	42ab      	cmp	r3, r5
 800713a:	d900      	bls.n	800713e <__ssputs_r+0x3e>
 800713c:	001d      	movs	r5, r3
 800713e:	0553      	lsls	r3, r2, #21
 8007140:	d532      	bpl.n	80071a8 <__ssputs_r+0xa8>
 8007142:	0029      	movs	r1, r5
 8007144:	0038      	movs	r0, r7
 8007146:	f7ff ff65 	bl	8007014 <_malloc_r>
 800714a:	1e06      	subs	r6, r0, #0
 800714c:	d109      	bne.n	8007162 <__ssputs_r+0x62>
 800714e:	230c      	movs	r3, #12
 8007150:	603b      	str	r3, [r7, #0]
 8007152:	2340      	movs	r3, #64	; 0x40
 8007154:	2001      	movs	r0, #1
 8007156:	89a2      	ldrh	r2, [r4, #12]
 8007158:	4240      	negs	r0, r0
 800715a:	4313      	orrs	r3, r2
 800715c:	81a3      	strh	r3, [r4, #12]
 800715e:	b005      	add	sp, #20
 8007160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007162:	9a02      	ldr	r2, [sp, #8]
 8007164:	6921      	ldr	r1, [r4, #16]
 8007166:	f7ff fa1b 	bl	80065a0 <memcpy>
 800716a:	89a3      	ldrh	r3, [r4, #12]
 800716c:	4a14      	ldr	r2, [pc, #80]	; (80071c0 <__ssputs_r+0xc0>)
 800716e:	401a      	ands	r2, r3
 8007170:	2380      	movs	r3, #128	; 0x80
 8007172:	4313      	orrs	r3, r2
 8007174:	81a3      	strh	r3, [r4, #12]
 8007176:	9b02      	ldr	r3, [sp, #8]
 8007178:	6126      	str	r6, [r4, #16]
 800717a:	18f6      	adds	r6, r6, r3
 800717c:	6026      	str	r6, [r4, #0]
 800717e:	6165      	str	r5, [r4, #20]
 8007180:	9e01      	ldr	r6, [sp, #4]
 8007182:	1aed      	subs	r5, r5, r3
 8007184:	60a5      	str	r5, [r4, #8]
 8007186:	9b01      	ldr	r3, [sp, #4]
 8007188:	429e      	cmp	r6, r3
 800718a:	d900      	bls.n	800718e <__ssputs_r+0x8e>
 800718c:	9e01      	ldr	r6, [sp, #4]
 800718e:	0032      	movs	r2, r6
 8007190:	9903      	ldr	r1, [sp, #12]
 8007192:	6820      	ldr	r0, [r4, #0]
 8007194:	f000 fd0b 	bl	8007bae <memmove>
 8007198:	68a3      	ldr	r3, [r4, #8]
 800719a:	2000      	movs	r0, #0
 800719c:	1b9b      	subs	r3, r3, r6
 800719e:	60a3      	str	r3, [r4, #8]
 80071a0:	6823      	ldr	r3, [r4, #0]
 80071a2:	199e      	adds	r6, r3, r6
 80071a4:	6026      	str	r6, [r4, #0]
 80071a6:	e7da      	b.n	800715e <__ssputs_r+0x5e>
 80071a8:	002a      	movs	r2, r5
 80071aa:	0038      	movs	r0, r7
 80071ac:	f000 fd22 	bl	8007bf4 <_realloc_r>
 80071b0:	1e06      	subs	r6, r0, #0
 80071b2:	d1e0      	bne.n	8007176 <__ssputs_r+0x76>
 80071b4:	0038      	movs	r0, r7
 80071b6:	6921      	ldr	r1, [r4, #16]
 80071b8:	f7ff fec0 	bl	8006f3c <_free_r>
 80071bc:	e7c7      	b.n	800714e <__ssputs_r+0x4e>
 80071be:	46c0      	nop			; (mov r8, r8)
 80071c0:	fffffb7f 	.word	0xfffffb7f

080071c4 <_svfiprintf_r>:
 80071c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071c6:	b0a1      	sub	sp, #132	; 0x84
 80071c8:	9003      	str	r0, [sp, #12]
 80071ca:	001d      	movs	r5, r3
 80071cc:	898b      	ldrh	r3, [r1, #12]
 80071ce:	000f      	movs	r7, r1
 80071d0:	0016      	movs	r6, r2
 80071d2:	061b      	lsls	r3, r3, #24
 80071d4:	d511      	bpl.n	80071fa <_svfiprintf_r+0x36>
 80071d6:	690b      	ldr	r3, [r1, #16]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10e      	bne.n	80071fa <_svfiprintf_r+0x36>
 80071dc:	2140      	movs	r1, #64	; 0x40
 80071de:	f7ff ff19 	bl	8007014 <_malloc_r>
 80071e2:	6038      	str	r0, [r7, #0]
 80071e4:	6138      	str	r0, [r7, #16]
 80071e6:	2800      	cmp	r0, #0
 80071e8:	d105      	bne.n	80071f6 <_svfiprintf_r+0x32>
 80071ea:	230c      	movs	r3, #12
 80071ec:	9a03      	ldr	r2, [sp, #12]
 80071ee:	3801      	subs	r0, #1
 80071f0:	6013      	str	r3, [r2, #0]
 80071f2:	b021      	add	sp, #132	; 0x84
 80071f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071f6:	2340      	movs	r3, #64	; 0x40
 80071f8:	617b      	str	r3, [r7, #20]
 80071fa:	2300      	movs	r3, #0
 80071fc:	ac08      	add	r4, sp, #32
 80071fe:	6163      	str	r3, [r4, #20]
 8007200:	3320      	adds	r3, #32
 8007202:	7663      	strb	r3, [r4, #25]
 8007204:	3310      	adds	r3, #16
 8007206:	76a3      	strb	r3, [r4, #26]
 8007208:	9507      	str	r5, [sp, #28]
 800720a:	0035      	movs	r5, r6
 800720c:	782b      	ldrb	r3, [r5, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d001      	beq.n	8007216 <_svfiprintf_r+0x52>
 8007212:	2b25      	cmp	r3, #37	; 0x25
 8007214:	d147      	bne.n	80072a6 <_svfiprintf_r+0xe2>
 8007216:	1bab      	subs	r3, r5, r6
 8007218:	9305      	str	r3, [sp, #20]
 800721a:	42b5      	cmp	r5, r6
 800721c:	d00c      	beq.n	8007238 <_svfiprintf_r+0x74>
 800721e:	0032      	movs	r2, r6
 8007220:	0039      	movs	r1, r7
 8007222:	9803      	ldr	r0, [sp, #12]
 8007224:	f7ff ff6c 	bl	8007100 <__ssputs_r>
 8007228:	1c43      	adds	r3, r0, #1
 800722a:	d100      	bne.n	800722e <_svfiprintf_r+0x6a>
 800722c:	e0ae      	b.n	800738c <_svfiprintf_r+0x1c8>
 800722e:	6962      	ldr	r2, [r4, #20]
 8007230:	9b05      	ldr	r3, [sp, #20]
 8007232:	4694      	mov	ip, r2
 8007234:	4463      	add	r3, ip
 8007236:	6163      	str	r3, [r4, #20]
 8007238:	782b      	ldrb	r3, [r5, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d100      	bne.n	8007240 <_svfiprintf_r+0x7c>
 800723e:	e0a5      	b.n	800738c <_svfiprintf_r+0x1c8>
 8007240:	2201      	movs	r2, #1
 8007242:	2300      	movs	r3, #0
 8007244:	4252      	negs	r2, r2
 8007246:	6062      	str	r2, [r4, #4]
 8007248:	a904      	add	r1, sp, #16
 800724a:	3254      	adds	r2, #84	; 0x54
 800724c:	1852      	adds	r2, r2, r1
 800724e:	1c6e      	adds	r6, r5, #1
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	60e3      	str	r3, [r4, #12]
 8007254:	60a3      	str	r3, [r4, #8]
 8007256:	7013      	strb	r3, [r2, #0]
 8007258:	65a3      	str	r3, [r4, #88]	; 0x58
 800725a:	2205      	movs	r2, #5
 800725c:	7831      	ldrb	r1, [r6, #0]
 800725e:	4854      	ldr	r0, [pc, #336]	; (80073b0 <_svfiprintf_r+0x1ec>)
 8007260:	f000 fc9a 	bl	8007b98 <memchr>
 8007264:	1c75      	adds	r5, r6, #1
 8007266:	2800      	cmp	r0, #0
 8007268:	d11f      	bne.n	80072aa <_svfiprintf_r+0xe6>
 800726a:	6822      	ldr	r2, [r4, #0]
 800726c:	06d3      	lsls	r3, r2, #27
 800726e:	d504      	bpl.n	800727a <_svfiprintf_r+0xb6>
 8007270:	2353      	movs	r3, #83	; 0x53
 8007272:	a904      	add	r1, sp, #16
 8007274:	185b      	adds	r3, r3, r1
 8007276:	2120      	movs	r1, #32
 8007278:	7019      	strb	r1, [r3, #0]
 800727a:	0713      	lsls	r3, r2, #28
 800727c:	d504      	bpl.n	8007288 <_svfiprintf_r+0xc4>
 800727e:	2353      	movs	r3, #83	; 0x53
 8007280:	a904      	add	r1, sp, #16
 8007282:	185b      	adds	r3, r3, r1
 8007284:	212b      	movs	r1, #43	; 0x2b
 8007286:	7019      	strb	r1, [r3, #0]
 8007288:	7833      	ldrb	r3, [r6, #0]
 800728a:	2b2a      	cmp	r3, #42	; 0x2a
 800728c:	d016      	beq.n	80072bc <_svfiprintf_r+0xf8>
 800728e:	0035      	movs	r5, r6
 8007290:	2100      	movs	r1, #0
 8007292:	200a      	movs	r0, #10
 8007294:	68e3      	ldr	r3, [r4, #12]
 8007296:	782a      	ldrb	r2, [r5, #0]
 8007298:	1c6e      	adds	r6, r5, #1
 800729a:	3a30      	subs	r2, #48	; 0x30
 800729c:	2a09      	cmp	r2, #9
 800729e:	d94e      	bls.n	800733e <_svfiprintf_r+0x17a>
 80072a0:	2900      	cmp	r1, #0
 80072a2:	d111      	bne.n	80072c8 <_svfiprintf_r+0x104>
 80072a4:	e017      	b.n	80072d6 <_svfiprintf_r+0x112>
 80072a6:	3501      	adds	r5, #1
 80072a8:	e7b0      	b.n	800720c <_svfiprintf_r+0x48>
 80072aa:	4b41      	ldr	r3, [pc, #260]	; (80073b0 <_svfiprintf_r+0x1ec>)
 80072ac:	6822      	ldr	r2, [r4, #0]
 80072ae:	1ac0      	subs	r0, r0, r3
 80072b0:	2301      	movs	r3, #1
 80072b2:	4083      	lsls	r3, r0
 80072b4:	4313      	orrs	r3, r2
 80072b6:	002e      	movs	r6, r5
 80072b8:	6023      	str	r3, [r4, #0]
 80072ba:	e7ce      	b.n	800725a <_svfiprintf_r+0x96>
 80072bc:	9b07      	ldr	r3, [sp, #28]
 80072be:	1d19      	adds	r1, r3, #4
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	9107      	str	r1, [sp, #28]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	db01      	blt.n	80072cc <_svfiprintf_r+0x108>
 80072c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80072ca:	e004      	b.n	80072d6 <_svfiprintf_r+0x112>
 80072cc:	425b      	negs	r3, r3
 80072ce:	60e3      	str	r3, [r4, #12]
 80072d0:	2302      	movs	r3, #2
 80072d2:	4313      	orrs	r3, r2
 80072d4:	6023      	str	r3, [r4, #0]
 80072d6:	782b      	ldrb	r3, [r5, #0]
 80072d8:	2b2e      	cmp	r3, #46	; 0x2e
 80072da:	d10a      	bne.n	80072f2 <_svfiprintf_r+0x12e>
 80072dc:	786b      	ldrb	r3, [r5, #1]
 80072de:	2b2a      	cmp	r3, #42	; 0x2a
 80072e0:	d135      	bne.n	800734e <_svfiprintf_r+0x18a>
 80072e2:	9b07      	ldr	r3, [sp, #28]
 80072e4:	3502      	adds	r5, #2
 80072e6:	1d1a      	adds	r2, r3, #4
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	9207      	str	r2, [sp, #28]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	db2b      	blt.n	8007348 <_svfiprintf_r+0x184>
 80072f0:	9309      	str	r3, [sp, #36]	; 0x24
 80072f2:	4e30      	ldr	r6, [pc, #192]	; (80073b4 <_svfiprintf_r+0x1f0>)
 80072f4:	2203      	movs	r2, #3
 80072f6:	0030      	movs	r0, r6
 80072f8:	7829      	ldrb	r1, [r5, #0]
 80072fa:	f000 fc4d 	bl	8007b98 <memchr>
 80072fe:	2800      	cmp	r0, #0
 8007300:	d006      	beq.n	8007310 <_svfiprintf_r+0x14c>
 8007302:	2340      	movs	r3, #64	; 0x40
 8007304:	1b80      	subs	r0, r0, r6
 8007306:	4083      	lsls	r3, r0
 8007308:	6822      	ldr	r2, [r4, #0]
 800730a:	3501      	adds	r5, #1
 800730c:	4313      	orrs	r3, r2
 800730e:	6023      	str	r3, [r4, #0]
 8007310:	7829      	ldrb	r1, [r5, #0]
 8007312:	2206      	movs	r2, #6
 8007314:	4828      	ldr	r0, [pc, #160]	; (80073b8 <_svfiprintf_r+0x1f4>)
 8007316:	1c6e      	adds	r6, r5, #1
 8007318:	7621      	strb	r1, [r4, #24]
 800731a:	f000 fc3d 	bl	8007b98 <memchr>
 800731e:	2800      	cmp	r0, #0
 8007320:	d03c      	beq.n	800739c <_svfiprintf_r+0x1d8>
 8007322:	4b26      	ldr	r3, [pc, #152]	; (80073bc <_svfiprintf_r+0x1f8>)
 8007324:	2b00      	cmp	r3, #0
 8007326:	d125      	bne.n	8007374 <_svfiprintf_r+0x1b0>
 8007328:	2207      	movs	r2, #7
 800732a:	9b07      	ldr	r3, [sp, #28]
 800732c:	3307      	adds	r3, #7
 800732e:	4393      	bics	r3, r2
 8007330:	3308      	adds	r3, #8
 8007332:	9307      	str	r3, [sp, #28]
 8007334:	6963      	ldr	r3, [r4, #20]
 8007336:	9a04      	ldr	r2, [sp, #16]
 8007338:	189b      	adds	r3, r3, r2
 800733a:	6163      	str	r3, [r4, #20]
 800733c:	e765      	b.n	800720a <_svfiprintf_r+0x46>
 800733e:	4343      	muls	r3, r0
 8007340:	0035      	movs	r5, r6
 8007342:	2101      	movs	r1, #1
 8007344:	189b      	adds	r3, r3, r2
 8007346:	e7a6      	b.n	8007296 <_svfiprintf_r+0xd2>
 8007348:	2301      	movs	r3, #1
 800734a:	425b      	negs	r3, r3
 800734c:	e7d0      	b.n	80072f0 <_svfiprintf_r+0x12c>
 800734e:	2300      	movs	r3, #0
 8007350:	200a      	movs	r0, #10
 8007352:	001a      	movs	r2, r3
 8007354:	3501      	adds	r5, #1
 8007356:	6063      	str	r3, [r4, #4]
 8007358:	7829      	ldrb	r1, [r5, #0]
 800735a:	1c6e      	adds	r6, r5, #1
 800735c:	3930      	subs	r1, #48	; 0x30
 800735e:	2909      	cmp	r1, #9
 8007360:	d903      	bls.n	800736a <_svfiprintf_r+0x1a6>
 8007362:	2b00      	cmp	r3, #0
 8007364:	d0c5      	beq.n	80072f2 <_svfiprintf_r+0x12e>
 8007366:	9209      	str	r2, [sp, #36]	; 0x24
 8007368:	e7c3      	b.n	80072f2 <_svfiprintf_r+0x12e>
 800736a:	4342      	muls	r2, r0
 800736c:	0035      	movs	r5, r6
 800736e:	2301      	movs	r3, #1
 8007370:	1852      	adds	r2, r2, r1
 8007372:	e7f1      	b.n	8007358 <_svfiprintf_r+0x194>
 8007374:	ab07      	add	r3, sp, #28
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	003a      	movs	r2, r7
 800737a:	0021      	movs	r1, r4
 800737c:	4b10      	ldr	r3, [pc, #64]	; (80073c0 <_svfiprintf_r+0x1fc>)
 800737e:	9803      	ldr	r0, [sp, #12]
 8007380:	e000      	b.n	8007384 <_svfiprintf_r+0x1c0>
 8007382:	bf00      	nop
 8007384:	9004      	str	r0, [sp, #16]
 8007386:	9b04      	ldr	r3, [sp, #16]
 8007388:	3301      	adds	r3, #1
 800738a:	d1d3      	bne.n	8007334 <_svfiprintf_r+0x170>
 800738c:	89bb      	ldrh	r3, [r7, #12]
 800738e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007390:	065b      	lsls	r3, r3, #25
 8007392:	d400      	bmi.n	8007396 <_svfiprintf_r+0x1d2>
 8007394:	e72d      	b.n	80071f2 <_svfiprintf_r+0x2e>
 8007396:	2001      	movs	r0, #1
 8007398:	4240      	negs	r0, r0
 800739a:	e72a      	b.n	80071f2 <_svfiprintf_r+0x2e>
 800739c:	ab07      	add	r3, sp, #28
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	003a      	movs	r2, r7
 80073a2:	0021      	movs	r1, r4
 80073a4:	4b06      	ldr	r3, [pc, #24]	; (80073c0 <_svfiprintf_r+0x1fc>)
 80073a6:	9803      	ldr	r0, [sp, #12]
 80073a8:	f000 f9de 	bl	8007768 <_printf_i>
 80073ac:	e7ea      	b.n	8007384 <_svfiprintf_r+0x1c0>
 80073ae:	46c0      	nop			; (mov r8, r8)
 80073b0:	08008518 	.word	0x08008518
 80073b4:	0800851e 	.word	0x0800851e
 80073b8:	08008522 	.word	0x08008522
 80073bc:	00000000 	.word	0x00000000
 80073c0:	08007101 	.word	0x08007101

080073c4 <__sfputc_r>:
 80073c4:	6893      	ldr	r3, [r2, #8]
 80073c6:	b510      	push	{r4, lr}
 80073c8:	3b01      	subs	r3, #1
 80073ca:	6093      	str	r3, [r2, #8]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	da04      	bge.n	80073da <__sfputc_r+0x16>
 80073d0:	6994      	ldr	r4, [r2, #24]
 80073d2:	42a3      	cmp	r3, r4
 80073d4:	db07      	blt.n	80073e6 <__sfputc_r+0x22>
 80073d6:	290a      	cmp	r1, #10
 80073d8:	d005      	beq.n	80073e6 <__sfputc_r+0x22>
 80073da:	6813      	ldr	r3, [r2, #0]
 80073dc:	1c58      	adds	r0, r3, #1
 80073de:	6010      	str	r0, [r2, #0]
 80073e0:	7019      	strb	r1, [r3, #0]
 80073e2:	0008      	movs	r0, r1
 80073e4:	bd10      	pop	{r4, pc}
 80073e6:	f7ff fa93 	bl	8006910 <__swbuf_r>
 80073ea:	0001      	movs	r1, r0
 80073ec:	e7f9      	b.n	80073e2 <__sfputc_r+0x1e>

080073ee <__sfputs_r>:
 80073ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f0:	0006      	movs	r6, r0
 80073f2:	000f      	movs	r7, r1
 80073f4:	0014      	movs	r4, r2
 80073f6:	18d5      	adds	r5, r2, r3
 80073f8:	42ac      	cmp	r4, r5
 80073fa:	d101      	bne.n	8007400 <__sfputs_r+0x12>
 80073fc:	2000      	movs	r0, #0
 80073fe:	e007      	b.n	8007410 <__sfputs_r+0x22>
 8007400:	7821      	ldrb	r1, [r4, #0]
 8007402:	003a      	movs	r2, r7
 8007404:	0030      	movs	r0, r6
 8007406:	f7ff ffdd 	bl	80073c4 <__sfputc_r>
 800740a:	3401      	adds	r4, #1
 800740c:	1c43      	adds	r3, r0, #1
 800740e:	d1f3      	bne.n	80073f8 <__sfputs_r+0xa>
 8007410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007414 <_vfiprintf_r>:
 8007414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007416:	b0a1      	sub	sp, #132	; 0x84
 8007418:	0006      	movs	r6, r0
 800741a:	000c      	movs	r4, r1
 800741c:	001f      	movs	r7, r3
 800741e:	9203      	str	r2, [sp, #12]
 8007420:	2800      	cmp	r0, #0
 8007422:	d004      	beq.n	800742e <_vfiprintf_r+0x1a>
 8007424:	6983      	ldr	r3, [r0, #24]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d101      	bne.n	800742e <_vfiprintf_r+0x1a>
 800742a:	f7ff fc6d 	bl	8006d08 <__sinit>
 800742e:	4b8e      	ldr	r3, [pc, #568]	; (8007668 <_vfiprintf_r+0x254>)
 8007430:	429c      	cmp	r4, r3
 8007432:	d11c      	bne.n	800746e <_vfiprintf_r+0x5a>
 8007434:	6874      	ldr	r4, [r6, #4]
 8007436:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007438:	07db      	lsls	r3, r3, #31
 800743a:	d405      	bmi.n	8007448 <_vfiprintf_r+0x34>
 800743c:	89a3      	ldrh	r3, [r4, #12]
 800743e:	059b      	lsls	r3, r3, #22
 8007440:	d402      	bmi.n	8007448 <_vfiprintf_r+0x34>
 8007442:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007444:	f7ff fd01 	bl	8006e4a <__retarget_lock_acquire_recursive>
 8007448:	89a3      	ldrh	r3, [r4, #12]
 800744a:	071b      	lsls	r3, r3, #28
 800744c:	d502      	bpl.n	8007454 <_vfiprintf_r+0x40>
 800744e:	6923      	ldr	r3, [r4, #16]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d11d      	bne.n	8007490 <_vfiprintf_r+0x7c>
 8007454:	0021      	movs	r1, r4
 8007456:	0030      	movs	r0, r6
 8007458:	f7ff fab0 	bl	80069bc <__swsetup_r>
 800745c:	2800      	cmp	r0, #0
 800745e:	d017      	beq.n	8007490 <_vfiprintf_r+0x7c>
 8007460:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007462:	07db      	lsls	r3, r3, #31
 8007464:	d50d      	bpl.n	8007482 <_vfiprintf_r+0x6e>
 8007466:	2001      	movs	r0, #1
 8007468:	4240      	negs	r0, r0
 800746a:	b021      	add	sp, #132	; 0x84
 800746c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800746e:	4b7f      	ldr	r3, [pc, #508]	; (800766c <_vfiprintf_r+0x258>)
 8007470:	429c      	cmp	r4, r3
 8007472:	d101      	bne.n	8007478 <_vfiprintf_r+0x64>
 8007474:	68b4      	ldr	r4, [r6, #8]
 8007476:	e7de      	b.n	8007436 <_vfiprintf_r+0x22>
 8007478:	4b7d      	ldr	r3, [pc, #500]	; (8007670 <_vfiprintf_r+0x25c>)
 800747a:	429c      	cmp	r4, r3
 800747c:	d1db      	bne.n	8007436 <_vfiprintf_r+0x22>
 800747e:	68f4      	ldr	r4, [r6, #12]
 8007480:	e7d9      	b.n	8007436 <_vfiprintf_r+0x22>
 8007482:	89a3      	ldrh	r3, [r4, #12]
 8007484:	059b      	lsls	r3, r3, #22
 8007486:	d4ee      	bmi.n	8007466 <_vfiprintf_r+0x52>
 8007488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800748a:	f7ff fcdf 	bl	8006e4c <__retarget_lock_release_recursive>
 800748e:	e7ea      	b.n	8007466 <_vfiprintf_r+0x52>
 8007490:	2300      	movs	r3, #0
 8007492:	ad08      	add	r5, sp, #32
 8007494:	616b      	str	r3, [r5, #20]
 8007496:	3320      	adds	r3, #32
 8007498:	766b      	strb	r3, [r5, #25]
 800749a:	3310      	adds	r3, #16
 800749c:	76ab      	strb	r3, [r5, #26]
 800749e:	9707      	str	r7, [sp, #28]
 80074a0:	9f03      	ldr	r7, [sp, #12]
 80074a2:	783b      	ldrb	r3, [r7, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <_vfiprintf_r+0x98>
 80074a8:	2b25      	cmp	r3, #37	; 0x25
 80074aa:	d14e      	bne.n	800754a <_vfiprintf_r+0x136>
 80074ac:	9b03      	ldr	r3, [sp, #12]
 80074ae:	1afb      	subs	r3, r7, r3
 80074b0:	9305      	str	r3, [sp, #20]
 80074b2:	9b03      	ldr	r3, [sp, #12]
 80074b4:	429f      	cmp	r7, r3
 80074b6:	d00d      	beq.n	80074d4 <_vfiprintf_r+0xc0>
 80074b8:	9b05      	ldr	r3, [sp, #20]
 80074ba:	0021      	movs	r1, r4
 80074bc:	0030      	movs	r0, r6
 80074be:	9a03      	ldr	r2, [sp, #12]
 80074c0:	f7ff ff95 	bl	80073ee <__sfputs_r>
 80074c4:	1c43      	adds	r3, r0, #1
 80074c6:	d100      	bne.n	80074ca <_vfiprintf_r+0xb6>
 80074c8:	e0b5      	b.n	8007636 <_vfiprintf_r+0x222>
 80074ca:	696a      	ldr	r2, [r5, #20]
 80074cc:	9b05      	ldr	r3, [sp, #20]
 80074ce:	4694      	mov	ip, r2
 80074d0:	4463      	add	r3, ip
 80074d2:	616b      	str	r3, [r5, #20]
 80074d4:	783b      	ldrb	r3, [r7, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d100      	bne.n	80074dc <_vfiprintf_r+0xc8>
 80074da:	e0ac      	b.n	8007636 <_vfiprintf_r+0x222>
 80074dc:	2201      	movs	r2, #1
 80074de:	1c7b      	adds	r3, r7, #1
 80074e0:	9303      	str	r3, [sp, #12]
 80074e2:	2300      	movs	r3, #0
 80074e4:	4252      	negs	r2, r2
 80074e6:	606a      	str	r2, [r5, #4]
 80074e8:	a904      	add	r1, sp, #16
 80074ea:	3254      	adds	r2, #84	; 0x54
 80074ec:	1852      	adds	r2, r2, r1
 80074ee:	602b      	str	r3, [r5, #0]
 80074f0:	60eb      	str	r3, [r5, #12]
 80074f2:	60ab      	str	r3, [r5, #8]
 80074f4:	7013      	strb	r3, [r2, #0]
 80074f6:	65ab      	str	r3, [r5, #88]	; 0x58
 80074f8:	9b03      	ldr	r3, [sp, #12]
 80074fa:	2205      	movs	r2, #5
 80074fc:	7819      	ldrb	r1, [r3, #0]
 80074fe:	485d      	ldr	r0, [pc, #372]	; (8007674 <_vfiprintf_r+0x260>)
 8007500:	f000 fb4a 	bl	8007b98 <memchr>
 8007504:	9b03      	ldr	r3, [sp, #12]
 8007506:	1c5f      	adds	r7, r3, #1
 8007508:	2800      	cmp	r0, #0
 800750a:	d120      	bne.n	800754e <_vfiprintf_r+0x13a>
 800750c:	682a      	ldr	r2, [r5, #0]
 800750e:	06d3      	lsls	r3, r2, #27
 8007510:	d504      	bpl.n	800751c <_vfiprintf_r+0x108>
 8007512:	2353      	movs	r3, #83	; 0x53
 8007514:	a904      	add	r1, sp, #16
 8007516:	185b      	adds	r3, r3, r1
 8007518:	2120      	movs	r1, #32
 800751a:	7019      	strb	r1, [r3, #0]
 800751c:	0713      	lsls	r3, r2, #28
 800751e:	d504      	bpl.n	800752a <_vfiprintf_r+0x116>
 8007520:	2353      	movs	r3, #83	; 0x53
 8007522:	a904      	add	r1, sp, #16
 8007524:	185b      	adds	r3, r3, r1
 8007526:	212b      	movs	r1, #43	; 0x2b
 8007528:	7019      	strb	r1, [r3, #0]
 800752a:	9b03      	ldr	r3, [sp, #12]
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	2b2a      	cmp	r3, #42	; 0x2a
 8007530:	d016      	beq.n	8007560 <_vfiprintf_r+0x14c>
 8007532:	2100      	movs	r1, #0
 8007534:	68eb      	ldr	r3, [r5, #12]
 8007536:	9f03      	ldr	r7, [sp, #12]
 8007538:	783a      	ldrb	r2, [r7, #0]
 800753a:	1c78      	adds	r0, r7, #1
 800753c:	3a30      	subs	r2, #48	; 0x30
 800753e:	4684      	mov	ip, r0
 8007540:	2a09      	cmp	r2, #9
 8007542:	d94f      	bls.n	80075e4 <_vfiprintf_r+0x1d0>
 8007544:	2900      	cmp	r1, #0
 8007546:	d111      	bne.n	800756c <_vfiprintf_r+0x158>
 8007548:	e017      	b.n	800757a <_vfiprintf_r+0x166>
 800754a:	3701      	adds	r7, #1
 800754c:	e7a9      	b.n	80074a2 <_vfiprintf_r+0x8e>
 800754e:	4b49      	ldr	r3, [pc, #292]	; (8007674 <_vfiprintf_r+0x260>)
 8007550:	682a      	ldr	r2, [r5, #0]
 8007552:	1ac0      	subs	r0, r0, r3
 8007554:	2301      	movs	r3, #1
 8007556:	4083      	lsls	r3, r0
 8007558:	4313      	orrs	r3, r2
 800755a:	602b      	str	r3, [r5, #0]
 800755c:	9703      	str	r7, [sp, #12]
 800755e:	e7cb      	b.n	80074f8 <_vfiprintf_r+0xe4>
 8007560:	9b07      	ldr	r3, [sp, #28]
 8007562:	1d19      	adds	r1, r3, #4
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	9107      	str	r1, [sp, #28]
 8007568:	2b00      	cmp	r3, #0
 800756a:	db01      	blt.n	8007570 <_vfiprintf_r+0x15c>
 800756c:	930b      	str	r3, [sp, #44]	; 0x2c
 800756e:	e004      	b.n	800757a <_vfiprintf_r+0x166>
 8007570:	425b      	negs	r3, r3
 8007572:	60eb      	str	r3, [r5, #12]
 8007574:	2302      	movs	r3, #2
 8007576:	4313      	orrs	r3, r2
 8007578:	602b      	str	r3, [r5, #0]
 800757a:	783b      	ldrb	r3, [r7, #0]
 800757c:	2b2e      	cmp	r3, #46	; 0x2e
 800757e:	d10a      	bne.n	8007596 <_vfiprintf_r+0x182>
 8007580:	787b      	ldrb	r3, [r7, #1]
 8007582:	2b2a      	cmp	r3, #42	; 0x2a
 8007584:	d137      	bne.n	80075f6 <_vfiprintf_r+0x1e2>
 8007586:	9b07      	ldr	r3, [sp, #28]
 8007588:	3702      	adds	r7, #2
 800758a:	1d1a      	adds	r2, r3, #4
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	9207      	str	r2, [sp, #28]
 8007590:	2b00      	cmp	r3, #0
 8007592:	db2d      	blt.n	80075f0 <_vfiprintf_r+0x1dc>
 8007594:	9309      	str	r3, [sp, #36]	; 0x24
 8007596:	2203      	movs	r2, #3
 8007598:	7839      	ldrb	r1, [r7, #0]
 800759a:	4837      	ldr	r0, [pc, #220]	; (8007678 <_vfiprintf_r+0x264>)
 800759c:	f000 fafc 	bl	8007b98 <memchr>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	d007      	beq.n	80075b4 <_vfiprintf_r+0x1a0>
 80075a4:	4b34      	ldr	r3, [pc, #208]	; (8007678 <_vfiprintf_r+0x264>)
 80075a6:	682a      	ldr	r2, [r5, #0]
 80075a8:	1ac0      	subs	r0, r0, r3
 80075aa:	2340      	movs	r3, #64	; 0x40
 80075ac:	4083      	lsls	r3, r0
 80075ae:	4313      	orrs	r3, r2
 80075b0:	3701      	adds	r7, #1
 80075b2:	602b      	str	r3, [r5, #0]
 80075b4:	7839      	ldrb	r1, [r7, #0]
 80075b6:	1c7b      	adds	r3, r7, #1
 80075b8:	2206      	movs	r2, #6
 80075ba:	4830      	ldr	r0, [pc, #192]	; (800767c <_vfiprintf_r+0x268>)
 80075bc:	9303      	str	r3, [sp, #12]
 80075be:	7629      	strb	r1, [r5, #24]
 80075c0:	f000 faea 	bl	8007b98 <memchr>
 80075c4:	2800      	cmp	r0, #0
 80075c6:	d045      	beq.n	8007654 <_vfiprintf_r+0x240>
 80075c8:	4b2d      	ldr	r3, [pc, #180]	; (8007680 <_vfiprintf_r+0x26c>)
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d127      	bne.n	800761e <_vfiprintf_r+0x20a>
 80075ce:	2207      	movs	r2, #7
 80075d0:	9b07      	ldr	r3, [sp, #28]
 80075d2:	3307      	adds	r3, #7
 80075d4:	4393      	bics	r3, r2
 80075d6:	3308      	adds	r3, #8
 80075d8:	9307      	str	r3, [sp, #28]
 80075da:	696b      	ldr	r3, [r5, #20]
 80075dc:	9a04      	ldr	r2, [sp, #16]
 80075de:	189b      	adds	r3, r3, r2
 80075e0:	616b      	str	r3, [r5, #20]
 80075e2:	e75d      	b.n	80074a0 <_vfiprintf_r+0x8c>
 80075e4:	210a      	movs	r1, #10
 80075e6:	434b      	muls	r3, r1
 80075e8:	4667      	mov	r7, ip
 80075ea:	189b      	adds	r3, r3, r2
 80075ec:	3909      	subs	r1, #9
 80075ee:	e7a3      	b.n	8007538 <_vfiprintf_r+0x124>
 80075f0:	2301      	movs	r3, #1
 80075f2:	425b      	negs	r3, r3
 80075f4:	e7ce      	b.n	8007594 <_vfiprintf_r+0x180>
 80075f6:	2300      	movs	r3, #0
 80075f8:	001a      	movs	r2, r3
 80075fa:	3701      	adds	r7, #1
 80075fc:	606b      	str	r3, [r5, #4]
 80075fe:	7839      	ldrb	r1, [r7, #0]
 8007600:	1c78      	adds	r0, r7, #1
 8007602:	3930      	subs	r1, #48	; 0x30
 8007604:	4684      	mov	ip, r0
 8007606:	2909      	cmp	r1, #9
 8007608:	d903      	bls.n	8007612 <_vfiprintf_r+0x1fe>
 800760a:	2b00      	cmp	r3, #0
 800760c:	d0c3      	beq.n	8007596 <_vfiprintf_r+0x182>
 800760e:	9209      	str	r2, [sp, #36]	; 0x24
 8007610:	e7c1      	b.n	8007596 <_vfiprintf_r+0x182>
 8007612:	230a      	movs	r3, #10
 8007614:	435a      	muls	r2, r3
 8007616:	4667      	mov	r7, ip
 8007618:	1852      	adds	r2, r2, r1
 800761a:	3b09      	subs	r3, #9
 800761c:	e7ef      	b.n	80075fe <_vfiprintf_r+0x1ea>
 800761e:	ab07      	add	r3, sp, #28
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	0022      	movs	r2, r4
 8007624:	0029      	movs	r1, r5
 8007626:	0030      	movs	r0, r6
 8007628:	4b16      	ldr	r3, [pc, #88]	; (8007684 <_vfiprintf_r+0x270>)
 800762a:	e000      	b.n	800762e <_vfiprintf_r+0x21a>
 800762c:	bf00      	nop
 800762e:	9004      	str	r0, [sp, #16]
 8007630:	9b04      	ldr	r3, [sp, #16]
 8007632:	3301      	adds	r3, #1
 8007634:	d1d1      	bne.n	80075da <_vfiprintf_r+0x1c6>
 8007636:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007638:	07db      	lsls	r3, r3, #31
 800763a:	d405      	bmi.n	8007648 <_vfiprintf_r+0x234>
 800763c:	89a3      	ldrh	r3, [r4, #12]
 800763e:	059b      	lsls	r3, r3, #22
 8007640:	d402      	bmi.n	8007648 <_vfiprintf_r+0x234>
 8007642:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007644:	f7ff fc02 	bl	8006e4c <__retarget_lock_release_recursive>
 8007648:	89a3      	ldrh	r3, [r4, #12]
 800764a:	065b      	lsls	r3, r3, #25
 800764c:	d500      	bpl.n	8007650 <_vfiprintf_r+0x23c>
 800764e:	e70a      	b.n	8007466 <_vfiprintf_r+0x52>
 8007650:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007652:	e70a      	b.n	800746a <_vfiprintf_r+0x56>
 8007654:	ab07      	add	r3, sp, #28
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	0022      	movs	r2, r4
 800765a:	0029      	movs	r1, r5
 800765c:	0030      	movs	r0, r6
 800765e:	4b09      	ldr	r3, [pc, #36]	; (8007684 <_vfiprintf_r+0x270>)
 8007660:	f000 f882 	bl	8007768 <_printf_i>
 8007664:	e7e3      	b.n	800762e <_vfiprintf_r+0x21a>
 8007666:	46c0      	nop			; (mov r8, r8)
 8007668:	080084d8 	.word	0x080084d8
 800766c:	080084f8 	.word	0x080084f8
 8007670:	080084b8 	.word	0x080084b8
 8007674:	08008518 	.word	0x08008518
 8007678:	0800851e 	.word	0x0800851e
 800767c:	08008522 	.word	0x08008522
 8007680:	00000000 	.word	0x00000000
 8007684:	080073ef 	.word	0x080073ef

08007688 <_printf_common>:
 8007688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800768a:	0015      	movs	r5, r2
 800768c:	9301      	str	r3, [sp, #4]
 800768e:	688a      	ldr	r2, [r1, #8]
 8007690:	690b      	ldr	r3, [r1, #16]
 8007692:	000c      	movs	r4, r1
 8007694:	9000      	str	r0, [sp, #0]
 8007696:	4293      	cmp	r3, r2
 8007698:	da00      	bge.n	800769c <_printf_common+0x14>
 800769a:	0013      	movs	r3, r2
 800769c:	0022      	movs	r2, r4
 800769e:	602b      	str	r3, [r5, #0]
 80076a0:	3243      	adds	r2, #67	; 0x43
 80076a2:	7812      	ldrb	r2, [r2, #0]
 80076a4:	2a00      	cmp	r2, #0
 80076a6:	d001      	beq.n	80076ac <_printf_common+0x24>
 80076a8:	3301      	adds	r3, #1
 80076aa:	602b      	str	r3, [r5, #0]
 80076ac:	6823      	ldr	r3, [r4, #0]
 80076ae:	069b      	lsls	r3, r3, #26
 80076b0:	d502      	bpl.n	80076b8 <_printf_common+0x30>
 80076b2:	682b      	ldr	r3, [r5, #0]
 80076b4:	3302      	adds	r3, #2
 80076b6:	602b      	str	r3, [r5, #0]
 80076b8:	6822      	ldr	r2, [r4, #0]
 80076ba:	2306      	movs	r3, #6
 80076bc:	0017      	movs	r7, r2
 80076be:	401f      	ands	r7, r3
 80076c0:	421a      	tst	r2, r3
 80076c2:	d027      	beq.n	8007714 <_printf_common+0x8c>
 80076c4:	0023      	movs	r3, r4
 80076c6:	3343      	adds	r3, #67	; 0x43
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	1e5a      	subs	r2, r3, #1
 80076cc:	4193      	sbcs	r3, r2
 80076ce:	6822      	ldr	r2, [r4, #0]
 80076d0:	0692      	lsls	r2, r2, #26
 80076d2:	d430      	bmi.n	8007736 <_printf_common+0xae>
 80076d4:	0022      	movs	r2, r4
 80076d6:	9901      	ldr	r1, [sp, #4]
 80076d8:	9800      	ldr	r0, [sp, #0]
 80076da:	9e08      	ldr	r6, [sp, #32]
 80076dc:	3243      	adds	r2, #67	; 0x43
 80076de:	47b0      	blx	r6
 80076e0:	1c43      	adds	r3, r0, #1
 80076e2:	d025      	beq.n	8007730 <_printf_common+0xa8>
 80076e4:	2306      	movs	r3, #6
 80076e6:	6820      	ldr	r0, [r4, #0]
 80076e8:	682a      	ldr	r2, [r5, #0]
 80076ea:	68e1      	ldr	r1, [r4, #12]
 80076ec:	2500      	movs	r5, #0
 80076ee:	4003      	ands	r3, r0
 80076f0:	2b04      	cmp	r3, #4
 80076f2:	d103      	bne.n	80076fc <_printf_common+0x74>
 80076f4:	1a8d      	subs	r5, r1, r2
 80076f6:	43eb      	mvns	r3, r5
 80076f8:	17db      	asrs	r3, r3, #31
 80076fa:	401d      	ands	r5, r3
 80076fc:	68a3      	ldr	r3, [r4, #8]
 80076fe:	6922      	ldr	r2, [r4, #16]
 8007700:	4293      	cmp	r3, r2
 8007702:	dd01      	ble.n	8007708 <_printf_common+0x80>
 8007704:	1a9b      	subs	r3, r3, r2
 8007706:	18ed      	adds	r5, r5, r3
 8007708:	2700      	movs	r7, #0
 800770a:	42bd      	cmp	r5, r7
 800770c:	d120      	bne.n	8007750 <_printf_common+0xc8>
 800770e:	2000      	movs	r0, #0
 8007710:	e010      	b.n	8007734 <_printf_common+0xac>
 8007712:	3701      	adds	r7, #1
 8007714:	68e3      	ldr	r3, [r4, #12]
 8007716:	682a      	ldr	r2, [r5, #0]
 8007718:	1a9b      	subs	r3, r3, r2
 800771a:	42bb      	cmp	r3, r7
 800771c:	ddd2      	ble.n	80076c4 <_printf_common+0x3c>
 800771e:	0022      	movs	r2, r4
 8007720:	2301      	movs	r3, #1
 8007722:	9901      	ldr	r1, [sp, #4]
 8007724:	9800      	ldr	r0, [sp, #0]
 8007726:	9e08      	ldr	r6, [sp, #32]
 8007728:	3219      	adds	r2, #25
 800772a:	47b0      	blx	r6
 800772c:	1c43      	adds	r3, r0, #1
 800772e:	d1f0      	bne.n	8007712 <_printf_common+0x8a>
 8007730:	2001      	movs	r0, #1
 8007732:	4240      	negs	r0, r0
 8007734:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007736:	2030      	movs	r0, #48	; 0x30
 8007738:	18e1      	adds	r1, r4, r3
 800773a:	3143      	adds	r1, #67	; 0x43
 800773c:	7008      	strb	r0, [r1, #0]
 800773e:	0021      	movs	r1, r4
 8007740:	1c5a      	adds	r2, r3, #1
 8007742:	3145      	adds	r1, #69	; 0x45
 8007744:	7809      	ldrb	r1, [r1, #0]
 8007746:	18a2      	adds	r2, r4, r2
 8007748:	3243      	adds	r2, #67	; 0x43
 800774a:	3302      	adds	r3, #2
 800774c:	7011      	strb	r1, [r2, #0]
 800774e:	e7c1      	b.n	80076d4 <_printf_common+0x4c>
 8007750:	0022      	movs	r2, r4
 8007752:	2301      	movs	r3, #1
 8007754:	9901      	ldr	r1, [sp, #4]
 8007756:	9800      	ldr	r0, [sp, #0]
 8007758:	9e08      	ldr	r6, [sp, #32]
 800775a:	321a      	adds	r2, #26
 800775c:	47b0      	blx	r6
 800775e:	1c43      	adds	r3, r0, #1
 8007760:	d0e6      	beq.n	8007730 <_printf_common+0xa8>
 8007762:	3701      	adds	r7, #1
 8007764:	e7d1      	b.n	800770a <_printf_common+0x82>
	...

08007768 <_printf_i>:
 8007768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800776a:	b08b      	sub	sp, #44	; 0x2c
 800776c:	9206      	str	r2, [sp, #24]
 800776e:	000a      	movs	r2, r1
 8007770:	3243      	adds	r2, #67	; 0x43
 8007772:	9307      	str	r3, [sp, #28]
 8007774:	9005      	str	r0, [sp, #20]
 8007776:	9204      	str	r2, [sp, #16]
 8007778:	7e0a      	ldrb	r2, [r1, #24]
 800777a:	000c      	movs	r4, r1
 800777c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800777e:	2a78      	cmp	r2, #120	; 0x78
 8007780:	d807      	bhi.n	8007792 <_printf_i+0x2a>
 8007782:	2a62      	cmp	r2, #98	; 0x62
 8007784:	d809      	bhi.n	800779a <_printf_i+0x32>
 8007786:	2a00      	cmp	r2, #0
 8007788:	d100      	bne.n	800778c <_printf_i+0x24>
 800778a:	e0c1      	b.n	8007910 <_printf_i+0x1a8>
 800778c:	2a58      	cmp	r2, #88	; 0x58
 800778e:	d100      	bne.n	8007792 <_printf_i+0x2a>
 8007790:	e08c      	b.n	80078ac <_printf_i+0x144>
 8007792:	0026      	movs	r6, r4
 8007794:	3642      	adds	r6, #66	; 0x42
 8007796:	7032      	strb	r2, [r6, #0]
 8007798:	e022      	b.n	80077e0 <_printf_i+0x78>
 800779a:	0010      	movs	r0, r2
 800779c:	3863      	subs	r0, #99	; 0x63
 800779e:	2815      	cmp	r0, #21
 80077a0:	d8f7      	bhi.n	8007792 <_printf_i+0x2a>
 80077a2:	f7f8 fcb5 	bl	8000110 <__gnu_thumb1_case_shi>
 80077a6:	0016      	.short	0x0016
 80077a8:	fff6001f 	.word	0xfff6001f
 80077ac:	fff6fff6 	.word	0xfff6fff6
 80077b0:	001ffff6 	.word	0x001ffff6
 80077b4:	fff6fff6 	.word	0xfff6fff6
 80077b8:	fff6fff6 	.word	0xfff6fff6
 80077bc:	003600a8 	.word	0x003600a8
 80077c0:	fff6009a 	.word	0xfff6009a
 80077c4:	00b9fff6 	.word	0x00b9fff6
 80077c8:	0036fff6 	.word	0x0036fff6
 80077cc:	fff6fff6 	.word	0xfff6fff6
 80077d0:	009e      	.short	0x009e
 80077d2:	0026      	movs	r6, r4
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	3642      	adds	r6, #66	; 0x42
 80077d8:	1d11      	adds	r1, r2, #4
 80077da:	6019      	str	r1, [r3, #0]
 80077dc:	6813      	ldr	r3, [r2, #0]
 80077de:	7033      	strb	r3, [r6, #0]
 80077e0:	2301      	movs	r3, #1
 80077e2:	e0a7      	b.n	8007934 <_printf_i+0x1cc>
 80077e4:	6808      	ldr	r0, [r1, #0]
 80077e6:	6819      	ldr	r1, [r3, #0]
 80077e8:	1d0a      	adds	r2, r1, #4
 80077ea:	0605      	lsls	r5, r0, #24
 80077ec:	d50b      	bpl.n	8007806 <_printf_i+0x9e>
 80077ee:	680d      	ldr	r5, [r1, #0]
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	2d00      	cmp	r5, #0
 80077f4:	da03      	bge.n	80077fe <_printf_i+0x96>
 80077f6:	232d      	movs	r3, #45	; 0x2d
 80077f8:	9a04      	ldr	r2, [sp, #16]
 80077fa:	426d      	negs	r5, r5
 80077fc:	7013      	strb	r3, [r2, #0]
 80077fe:	4b61      	ldr	r3, [pc, #388]	; (8007984 <_printf_i+0x21c>)
 8007800:	270a      	movs	r7, #10
 8007802:	9303      	str	r3, [sp, #12]
 8007804:	e01b      	b.n	800783e <_printf_i+0xd6>
 8007806:	680d      	ldr	r5, [r1, #0]
 8007808:	601a      	str	r2, [r3, #0]
 800780a:	0641      	lsls	r1, r0, #25
 800780c:	d5f1      	bpl.n	80077f2 <_printf_i+0x8a>
 800780e:	b22d      	sxth	r5, r5
 8007810:	e7ef      	b.n	80077f2 <_printf_i+0x8a>
 8007812:	680d      	ldr	r5, [r1, #0]
 8007814:	6819      	ldr	r1, [r3, #0]
 8007816:	1d08      	adds	r0, r1, #4
 8007818:	6018      	str	r0, [r3, #0]
 800781a:	062e      	lsls	r6, r5, #24
 800781c:	d501      	bpl.n	8007822 <_printf_i+0xba>
 800781e:	680d      	ldr	r5, [r1, #0]
 8007820:	e003      	b.n	800782a <_printf_i+0xc2>
 8007822:	066d      	lsls	r5, r5, #25
 8007824:	d5fb      	bpl.n	800781e <_printf_i+0xb6>
 8007826:	680d      	ldr	r5, [r1, #0]
 8007828:	b2ad      	uxth	r5, r5
 800782a:	4b56      	ldr	r3, [pc, #344]	; (8007984 <_printf_i+0x21c>)
 800782c:	2708      	movs	r7, #8
 800782e:	9303      	str	r3, [sp, #12]
 8007830:	2a6f      	cmp	r2, #111	; 0x6f
 8007832:	d000      	beq.n	8007836 <_printf_i+0xce>
 8007834:	3702      	adds	r7, #2
 8007836:	0023      	movs	r3, r4
 8007838:	2200      	movs	r2, #0
 800783a:	3343      	adds	r3, #67	; 0x43
 800783c:	701a      	strb	r2, [r3, #0]
 800783e:	6863      	ldr	r3, [r4, #4]
 8007840:	60a3      	str	r3, [r4, #8]
 8007842:	2b00      	cmp	r3, #0
 8007844:	db03      	blt.n	800784e <_printf_i+0xe6>
 8007846:	2204      	movs	r2, #4
 8007848:	6821      	ldr	r1, [r4, #0]
 800784a:	4391      	bics	r1, r2
 800784c:	6021      	str	r1, [r4, #0]
 800784e:	2d00      	cmp	r5, #0
 8007850:	d102      	bne.n	8007858 <_printf_i+0xf0>
 8007852:	9e04      	ldr	r6, [sp, #16]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00c      	beq.n	8007872 <_printf_i+0x10a>
 8007858:	9e04      	ldr	r6, [sp, #16]
 800785a:	0028      	movs	r0, r5
 800785c:	0039      	movs	r1, r7
 800785e:	f7f8 fce7 	bl	8000230 <__aeabi_uidivmod>
 8007862:	9b03      	ldr	r3, [sp, #12]
 8007864:	3e01      	subs	r6, #1
 8007866:	5c5b      	ldrb	r3, [r3, r1]
 8007868:	7033      	strb	r3, [r6, #0]
 800786a:	002b      	movs	r3, r5
 800786c:	0005      	movs	r5, r0
 800786e:	429f      	cmp	r7, r3
 8007870:	d9f3      	bls.n	800785a <_printf_i+0xf2>
 8007872:	2f08      	cmp	r7, #8
 8007874:	d109      	bne.n	800788a <_printf_i+0x122>
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	07db      	lsls	r3, r3, #31
 800787a:	d506      	bpl.n	800788a <_printf_i+0x122>
 800787c:	6863      	ldr	r3, [r4, #4]
 800787e:	6922      	ldr	r2, [r4, #16]
 8007880:	4293      	cmp	r3, r2
 8007882:	dc02      	bgt.n	800788a <_printf_i+0x122>
 8007884:	2330      	movs	r3, #48	; 0x30
 8007886:	3e01      	subs	r6, #1
 8007888:	7033      	strb	r3, [r6, #0]
 800788a:	9b04      	ldr	r3, [sp, #16]
 800788c:	1b9b      	subs	r3, r3, r6
 800788e:	6123      	str	r3, [r4, #16]
 8007890:	9b07      	ldr	r3, [sp, #28]
 8007892:	0021      	movs	r1, r4
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	9805      	ldr	r0, [sp, #20]
 8007898:	9b06      	ldr	r3, [sp, #24]
 800789a:	aa09      	add	r2, sp, #36	; 0x24
 800789c:	f7ff fef4 	bl	8007688 <_printf_common>
 80078a0:	1c43      	adds	r3, r0, #1
 80078a2:	d14c      	bne.n	800793e <_printf_i+0x1d6>
 80078a4:	2001      	movs	r0, #1
 80078a6:	4240      	negs	r0, r0
 80078a8:	b00b      	add	sp, #44	; 0x2c
 80078aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078ac:	3145      	adds	r1, #69	; 0x45
 80078ae:	700a      	strb	r2, [r1, #0]
 80078b0:	4a34      	ldr	r2, [pc, #208]	; (8007984 <_printf_i+0x21c>)
 80078b2:	9203      	str	r2, [sp, #12]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	6821      	ldr	r1, [r4, #0]
 80078b8:	ca20      	ldmia	r2!, {r5}
 80078ba:	601a      	str	r2, [r3, #0]
 80078bc:	0608      	lsls	r0, r1, #24
 80078be:	d516      	bpl.n	80078ee <_printf_i+0x186>
 80078c0:	07cb      	lsls	r3, r1, #31
 80078c2:	d502      	bpl.n	80078ca <_printf_i+0x162>
 80078c4:	2320      	movs	r3, #32
 80078c6:	4319      	orrs	r1, r3
 80078c8:	6021      	str	r1, [r4, #0]
 80078ca:	2710      	movs	r7, #16
 80078cc:	2d00      	cmp	r5, #0
 80078ce:	d1b2      	bne.n	8007836 <_printf_i+0xce>
 80078d0:	2320      	movs	r3, #32
 80078d2:	6822      	ldr	r2, [r4, #0]
 80078d4:	439a      	bics	r2, r3
 80078d6:	6022      	str	r2, [r4, #0]
 80078d8:	e7ad      	b.n	8007836 <_printf_i+0xce>
 80078da:	2220      	movs	r2, #32
 80078dc:	6809      	ldr	r1, [r1, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	6022      	str	r2, [r4, #0]
 80078e2:	0022      	movs	r2, r4
 80078e4:	2178      	movs	r1, #120	; 0x78
 80078e6:	3245      	adds	r2, #69	; 0x45
 80078e8:	7011      	strb	r1, [r2, #0]
 80078ea:	4a27      	ldr	r2, [pc, #156]	; (8007988 <_printf_i+0x220>)
 80078ec:	e7e1      	b.n	80078b2 <_printf_i+0x14a>
 80078ee:	0648      	lsls	r0, r1, #25
 80078f0:	d5e6      	bpl.n	80078c0 <_printf_i+0x158>
 80078f2:	b2ad      	uxth	r5, r5
 80078f4:	e7e4      	b.n	80078c0 <_printf_i+0x158>
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	680d      	ldr	r5, [r1, #0]
 80078fa:	1d10      	adds	r0, r2, #4
 80078fc:	6949      	ldr	r1, [r1, #20]
 80078fe:	6018      	str	r0, [r3, #0]
 8007900:	6813      	ldr	r3, [r2, #0]
 8007902:	062e      	lsls	r6, r5, #24
 8007904:	d501      	bpl.n	800790a <_printf_i+0x1a2>
 8007906:	6019      	str	r1, [r3, #0]
 8007908:	e002      	b.n	8007910 <_printf_i+0x1a8>
 800790a:	066d      	lsls	r5, r5, #25
 800790c:	d5fb      	bpl.n	8007906 <_printf_i+0x19e>
 800790e:	8019      	strh	r1, [r3, #0]
 8007910:	2300      	movs	r3, #0
 8007912:	9e04      	ldr	r6, [sp, #16]
 8007914:	6123      	str	r3, [r4, #16]
 8007916:	e7bb      	b.n	8007890 <_printf_i+0x128>
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	1d11      	adds	r1, r2, #4
 800791c:	6019      	str	r1, [r3, #0]
 800791e:	6816      	ldr	r6, [r2, #0]
 8007920:	2100      	movs	r1, #0
 8007922:	0030      	movs	r0, r6
 8007924:	6862      	ldr	r2, [r4, #4]
 8007926:	f000 f937 	bl	8007b98 <memchr>
 800792a:	2800      	cmp	r0, #0
 800792c:	d001      	beq.n	8007932 <_printf_i+0x1ca>
 800792e:	1b80      	subs	r0, r0, r6
 8007930:	6060      	str	r0, [r4, #4]
 8007932:	6863      	ldr	r3, [r4, #4]
 8007934:	6123      	str	r3, [r4, #16]
 8007936:	2300      	movs	r3, #0
 8007938:	9a04      	ldr	r2, [sp, #16]
 800793a:	7013      	strb	r3, [r2, #0]
 800793c:	e7a8      	b.n	8007890 <_printf_i+0x128>
 800793e:	6923      	ldr	r3, [r4, #16]
 8007940:	0032      	movs	r2, r6
 8007942:	9906      	ldr	r1, [sp, #24]
 8007944:	9805      	ldr	r0, [sp, #20]
 8007946:	9d07      	ldr	r5, [sp, #28]
 8007948:	47a8      	blx	r5
 800794a:	1c43      	adds	r3, r0, #1
 800794c:	d0aa      	beq.n	80078a4 <_printf_i+0x13c>
 800794e:	6823      	ldr	r3, [r4, #0]
 8007950:	079b      	lsls	r3, r3, #30
 8007952:	d415      	bmi.n	8007980 <_printf_i+0x218>
 8007954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007956:	68e0      	ldr	r0, [r4, #12]
 8007958:	4298      	cmp	r0, r3
 800795a:	daa5      	bge.n	80078a8 <_printf_i+0x140>
 800795c:	0018      	movs	r0, r3
 800795e:	e7a3      	b.n	80078a8 <_printf_i+0x140>
 8007960:	0022      	movs	r2, r4
 8007962:	2301      	movs	r3, #1
 8007964:	9906      	ldr	r1, [sp, #24]
 8007966:	9805      	ldr	r0, [sp, #20]
 8007968:	9e07      	ldr	r6, [sp, #28]
 800796a:	3219      	adds	r2, #25
 800796c:	47b0      	blx	r6
 800796e:	1c43      	adds	r3, r0, #1
 8007970:	d098      	beq.n	80078a4 <_printf_i+0x13c>
 8007972:	3501      	adds	r5, #1
 8007974:	68e3      	ldr	r3, [r4, #12]
 8007976:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007978:	1a9b      	subs	r3, r3, r2
 800797a:	42ab      	cmp	r3, r5
 800797c:	dcf0      	bgt.n	8007960 <_printf_i+0x1f8>
 800797e:	e7e9      	b.n	8007954 <_printf_i+0x1ec>
 8007980:	2500      	movs	r5, #0
 8007982:	e7f7      	b.n	8007974 <_printf_i+0x20c>
 8007984:	08008529 	.word	0x08008529
 8007988:	0800853a 	.word	0x0800853a

0800798c <_putc_r>:
 800798c:	b570      	push	{r4, r5, r6, lr}
 800798e:	0006      	movs	r6, r0
 8007990:	000d      	movs	r5, r1
 8007992:	0014      	movs	r4, r2
 8007994:	2800      	cmp	r0, #0
 8007996:	d004      	beq.n	80079a2 <_putc_r+0x16>
 8007998:	6983      	ldr	r3, [r0, #24]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d101      	bne.n	80079a2 <_putc_r+0x16>
 800799e:	f7ff f9b3 	bl	8006d08 <__sinit>
 80079a2:	4b1c      	ldr	r3, [pc, #112]	; (8007a14 <_putc_r+0x88>)
 80079a4:	429c      	cmp	r4, r3
 80079a6:	d124      	bne.n	80079f2 <_putc_r+0x66>
 80079a8:	6874      	ldr	r4, [r6, #4]
 80079aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079ac:	07db      	lsls	r3, r3, #31
 80079ae:	d405      	bmi.n	80079bc <_putc_r+0x30>
 80079b0:	89a3      	ldrh	r3, [r4, #12]
 80079b2:	059b      	lsls	r3, r3, #22
 80079b4:	d402      	bmi.n	80079bc <_putc_r+0x30>
 80079b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079b8:	f7ff fa47 	bl	8006e4a <__retarget_lock_acquire_recursive>
 80079bc:	68a3      	ldr	r3, [r4, #8]
 80079be:	3b01      	subs	r3, #1
 80079c0:	60a3      	str	r3, [r4, #8]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	da05      	bge.n	80079d2 <_putc_r+0x46>
 80079c6:	69a2      	ldr	r2, [r4, #24]
 80079c8:	4293      	cmp	r3, r2
 80079ca:	db1c      	blt.n	8007a06 <_putc_r+0x7a>
 80079cc:	b2eb      	uxtb	r3, r5
 80079ce:	2b0a      	cmp	r3, #10
 80079d0:	d019      	beq.n	8007a06 <_putc_r+0x7a>
 80079d2:	6823      	ldr	r3, [r4, #0]
 80079d4:	1c5a      	adds	r2, r3, #1
 80079d6:	6022      	str	r2, [r4, #0]
 80079d8:	701d      	strb	r5, [r3, #0]
 80079da:	b2ed      	uxtb	r5, r5
 80079dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079de:	07db      	lsls	r3, r3, #31
 80079e0:	d405      	bmi.n	80079ee <_putc_r+0x62>
 80079e2:	89a3      	ldrh	r3, [r4, #12]
 80079e4:	059b      	lsls	r3, r3, #22
 80079e6:	d402      	bmi.n	80079ee <_putc_r+0x62>
 80079e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079ea:	f7ff fa2f 	bl	8006e4c <__retarget_lock_release_recursive>
 80079ee:	0028      	movs	r0, r5
 80079f0:	bd70      	pop	{r4, r5, r6, pc}
 80079f2:	4b09      	ldr	r3, [pc, #36]	; (8007a18 <_putc_r+0x8c>)
 80079f4:	429c      	cmp	r4, r3
 80079f6:	d101      	bne.n	80079fc <_putc_r+0x70>
 80079f8:	68b4      	ldr	r4, [r6, #8]
 80079fa:	e7d6      	b.n	80079aa <_putc_r+0x1e>
 80079fc:	4b07      	ldr	r3, [pc, #28]	; (8007a1c <_putc_r+0x90>)
 80079fe:	429c      	cmp	r4, r3
 8007a00:	d1d3      	bne.n	80079aa <_putc_r+0x1e>
 8007a02:	68f4      	ldr	r4, [r6, #12]
 8007a04:	e7d1      	b.n	80079aa <_putc_r+0x1e>
 8007a06:	0029      	movs	r1, r5
 8007a08:	0022      	movs	r2, r4
 8007a0a:	0030      	movs	r0, r6
 8007a0c:	f7fe ff80 	bl	8006910 <__swbuf_r>
 8007a10:	0005      	movs	r5, r0
 8007a12:	e7e3      	b.n	80079dc <_putc_r+0x50>
 8007a14:	080084d8 	.word	0x080084d8
 8007a18:	080084f8 	.word	0x080084f8
 8007a1c:	080084b8 	.word	0x080084b8

08007a20 <_sbrk_r>:
 8007a20:	2300      	movs	r3, #0
 8007a22:	b570      	push	{r4, r5, r6, lr}
 8007a24:	4d06      	ldr	r5, [pc, #24]	; (8007a40 <_sbrk_r+0x20>)
 8007a26:	0004      	movs	r4, r0
 8007a28:	0008      	movs	r0, r1
 8007a2a:	602b      	str	r3, [r5, #0]
 8007a2c:	f7fa fba4 	bl	8002178 <_sbrk>
 8007a30:	1c43      	adds	r3, r0, #1
 8007a32:	d103      	bne.n	8007a3c <_sbrk_r+0x1c>
 8007a34:	682b      	ldr	r3, [r5, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d000      	beq.n	8007a3c <_sbrk_r+0x1c>
 8007a3a:	6023      	str	r3, [r4, #0]
 8007a3c:	bd70      	pop	{r4, r5, r6, pc}
 8007a3e:	46c0      	nop			; (mov r8, r8)
 8007a40:	20000dc0 	.word	0x20000dc0

08007a44 <__sread>:
 8007a44:	b570      	push	{r4, r5, r6, lr}
 8007a46:	000c      	movs	r4, r1
 8007a48:	250e      	movs	r5, #14
 8007a4a:	5f49      	ldrsh	r1, [r1, r5]
 8007a4c:	f000 f902 	bl	8007c54 <_read_r>
 8007a50:	2800      	cmp	r0, #0
 8007a52:	db03      	blt.n	8007a5c <__sread+0x18>
 8007a54:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007a56:	181b      	adds	r3, r3, r0
 8007a58:	6563      	str	r3, [r4, #84]	; 0x54
 8007a5a:	bd70      	pop	{r4, r5, r6, pc}
 8007a5c:	89a3      	ldrh	r3, [r4, #12]
 8007a5e:	4a02      	ldr	r2, [pc, #8]	; (8007a68 <__sread+0x24>)
 8007a60:	4013      	ands	r3, r2
 8007a62:	81a3      	strh	r3, [r4, #12]
 8007a64:	e7f9      	b.n	8007a5a <__sread+0x16>
 8007a66:	46c0      	nop			; (mov r8, r8)
 8007a68:	ffffefff 	.word	0xffffefff

08007a6c <__swrite>:
 8007a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6e:	001f      	movs	r7, r3
 8007a70:	898b      	ldrh	r3, [r1, #12]
 8007a72:	0005      	movs	r5, r0
 8007a74:	000c      	movs	r4, r1
 8007a76:	0016      	movs	r6, r2
 8007a78:	05db      	lsls	r3, r3, #23
 8007a7a:	d505      	bpl.n	8007a88 <__swrite+0x1c>
 8007a7c:	230e      	movs	r3, #14
 8007a7e:	5ec9      	ldrsh	r1, [r1, r3]
 8007a80:	2200      	movs	r2, #0
 8007a82:	2302      	movs	r3, #2
 8007a84:	f000 f874 	bl	8007b70 <_lseek_r>
 8007a88:	89a3      	ldrh	r3, [r4, #12]
 8007a8a:	4a05      	ldr	r2, [pc, #20]	; (8007aa0 <__swrite+0x34>)
 8007a8c:	0028      	movs	r0, r5
 8007a8e:	4013      	ands	r3, r2
 8007a90:	81a3      	strh	r3, [r4, #12]
 8007a92:	0032      	movs	r2, r6
 8007a94:	230e      	movs	r3, #14
 8007a96:	5ee1      	ldrsh	r1, [r4, r3]
 8007a98:	003b      	movs	r3, r7
 8007a9a:	f000 f81f 	bl	8007adc <_write_r>
 8007a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007aa0:	ffffefff 	.word	0xffffefff

08007aa4 <__sseek>:
 8007aa4:	b570      	push	{r4, r5, r6, lr}
 8007aa6:	000c      	movs	r4, r1
 8007aa8:	250e      	movs	r5, #14
 8007aaa:	5f49      	ldrsh	r1, [r1, r5]
 8007aac:	f000 f860 	bl	8007b70 <_lseek_r>
 8007ab0:	89a3      	ldrh	r3, [r4, #12]
 8007ab2:	1c42      	adds	r2, r0, #1
 8007ab4:	d103      	bne.n	8007abe <__sseek+0x1a>
 8007ab6:	4a05      	ldr	r2, [pc, #20]	; (8007acc <__sseek+0x28>)
 8007ab8:	4013      	ands	r3, r2
 8007aba:	81a3      	strh	r3, [r4, #12]
 8007abc:	bd70      	pop	{r4, r5, r6, pc}
 8007abe:	2280      	movs	r2, #128	; 0x80
 8007ac0:	0152      	lsls	r2, r2, #5
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	81a3      	strh	r3, [r4, #12]
 8007ac6:	6560      	str	r0, [r4, #84]	; 0x54
 8007ac8:	e7f8      	b.n	8007abc <__sseek+0x18>
 8007aca:	46c0      	nop			; (mov r8, r8)
 8007acc:	ffffefff 	.word	0xffffefff

08007ad0 <__sclose>:
 8007ad0:	b510      	push	{r4, lr}
 8007ad2:	230e      	movs	r3, #14
 8007ad4:	5ec9      	ldrsh	r1, [r1, r3]
 8007ad6:	f000 f815 	bl	8007b04 <_close_r>
 8007ada:	bd10      	pop	{r4, pc}

08007adc <_write_r>:
 8007adc:	b570      	push	{r4, r5, r6, lr}
 8007ade:	0004      	movs	r4, r0
 8007ae0:	0008      	movs	r0, r1
 8007ae2:	0011      	movs	r1, r2
 8007ae4:	001a      	movs	r2, r3
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	4d05      	ldr	r5, [pc, #20]	; (8007b00 <_write_r+0x24>)
 8007aea:	602b      	str	r3, [r5, #0]
 8007aec:	f7fa f924 	bl	8001d38 <_write>
 8007af0:	1c43      	adds	r3, r0, #1
 8007af2:	d103      	bne.n	8007afc <_write_r+0x20>
 8007af4:	682b      	ldr	r3, [r5, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d000      	beq.n	8007afc <_write_r+0x20>
 8007afa:	6023      	str	r3, [r4, #0]
 8007afc:	bd70      	pop	{r4, r5, r6, pc}
 8007afe:	46c0      	nop			; (mov r8, r8)
 8007b00:	20000dc0 	.word	0x20000dc0

08007b04 <_close_r>:
 8007b04:	2300      	movs	r3, #0
 8007b06:	b570      	push	{r4, r5, r6, lr}
 8007b08:	4d06      	ldr	r5, [pc, #24]	; (8007b24 <_close_r+0x20>)
 8007b0a:	0004      	movs	r4, r0
 8007b0c:	0008      	movs	r0, r1
 8007b0e:	602b      	str	r3, [r5, #0]
 8007b10:	f7fa f940 	bl	8001d94 <_close>
 8007b14:	1c43      	adds	r3, r0, #1
 8007b16:	d103      	bne.n	8007b20 <_close_r+0x1c>
 8007b18:	682b      	ldr	r3, [r5, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d000      	beq.n	8007b20 <_close_r+0x1c>
 8007b1e:	6023      	str	r3, [r4, #0]
 8007b20:	bd70      	pop	{r4, r5, r6, pc}
 8007b22:	46c0      	nop			; (mov r8, r8)
 8007b24:	20000dc0 	.word	0x20000dc0

08007b28 <_fstat_r>:
 8007b28:	2300      	movs	r3, #0
 8007b2a:	b570      	push	{r4, r5, r6, lr}
 8007b2c:	4d06      	ldr	r5, [pc, #24]	; (8007b48 <_fstat_r+0x20>)
 8007b2e:	0004      	movs	r4, r0
 8007b30:	0008      	movs	r0, r1
 8007b32:	0011      	movs	r1, r2
 8007b34:	602b      	str	r3, [r5, #0]
 8007b36:	f7fa f97f 	bl	8001e38 <_fstat>
 8007b3a:	1c43      	adds	r3, r0, #1
 8007b3c:	d103      	bne.n	8007b46 <_fstat_r+0x1e>
 8007b3e:	682b      	ldr	r3, [r5, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d000      	beq.n	8007b46 <_fstat_r+0x1e>
 8007b44:	6023      	str	r3, [r4, #0]
 8007b46:	bd70      	pop	{r4, r5, r6, pc}
 8007b48:	20000dc0 	.word	0x20000dc0

08007b4c <_isatty_r>:
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	b570      	push	{r4, r5, r6, lr}
 8007b50:	4d06      	ldr	r5, [pc, #24]	; (8007b6c <_isatty_r+0x20>)
 8007b52:	0004      	movs	r4, r0
 8007b54:	0008      	movs	r0, r1
 8007b56:	602b      	str	r3, [r5, #0]
 8007b58:	f7fa f8d8 	bl	8001d0c <_isatty>
 8007b5c:	1c43      	adds	r3, r0, #1
 8007b5e:	d103      	bne.n	8007b68 <_isatty_r+0x1c>
 8007b60:	682b      	ldr	r3, [r5, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d000      	beq.n	8007b68 <_isatty_r+0x1c>
 8007b66:	6023      	str	r3, [r4, #0]
 8007b68:	bd70      	pop	{r4, r5, r6, pc}
 8007b6a:	46c0      	nop			; (mov r8, r8)
 8007b6c:	20000dc0 	.word	0x20000dc0

08007b70 <_lseek_r>:
 8007b70:	b570      	push	{r4, r5, r6, lr}
 8007b72:	0004      	movs	r4, r0
 8007b74:	0008      	movs	r0, r1
 8007b76:	0011      	movs	r1, r2
 8007b78:	001a      	movs	r2, r3
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	4d05      	ldr	r5, [pc, #20]	; (8007b94 <_lseek_r+0x24>)
 8007b7e:	602b      	str	r3, [r5, #0]
 8007b80:	f7fa f91f 	bl	8001dc2 <_lseek>
 8007b84:	1c43      	adds	r3, r0, #1
 8007b86:	d103      	bne.n	8007b90 <_lseek_r+0x20>
 8007b88:	682b      	ldr	r3, [r5, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d000      	beq.n	8007b90 <_lseek_r+0x20>
 8007b8e:	6023      	str	r3, [r4, #0]
 8007b90:	bd70      	pop	{r4, r5, r6, pc}
 8007b92:	46c0      	nop			; (mov r8, r8)
 8007b94:	20000dc0 	.word	0x20000dc0

08007b98 <memchr>:
 8007b98:	b2c9      	uxtb	r1, r1
 8007b9a:	1882      	adds	r2, r0, r2
 8007b9c:	4290      	cmp	r0, r2
 8007b9e:	d101      	bne.n	8007ba4 <memchr+0xc>
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	4770      	bx	lr
 8007ba4:	7803      	ldrb	r3, [r0, #0]
 8007ba6:	428b      	cmp	r3, r1
 8007ba8:	d0fb      	beq.n	8007ba2 <memchr+0xa>
 8007baa:	3001      	adds	r0, #1
 8007bac:	e7f6      	b.n	8007b9c <memchr+0x4>

08007bae <memmove>:
 8007bae:	b510      	push	{r4, lr}
 8007bb0:	4288      	cmp	r0, r1
 8007bb2:	d902      	bls.n	8007bba <memmove+0xc>
 8007bb4:	188b      	adds	r3, r1, r2
 8007bb6:	4298      	cmp	r0, r3
 8007bb8:	d303      	bcc.n	8007bc2 <memmove+0x14>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	e007      	b.n	8007bce <memmove+0x20>
 8007bbe:	5c8b      	ldrb	r3, [r1, r2]
 8007bc0:	5483      	strb	r3, [r0, r2]
 8007bc2:	3a01      	subs	r2, #1
 8007bc4:	d2fb      	bcs.n	8007bbe <memmove+0x10>
 8007bc6:	bd10      	pop	{r4, pc}
 8007bc8:	5ccc      	ldrb	r4, [r1, r3]
 8007bca:	54c4      	strb	r4, [r0, r3]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d1fa      	bne.n	8007bc8 <memmove+0x1a>
 8007bd2:	e7f8      	b.n	8007bc6 <memmove+0x18>

08007bd4 <__malloc_lock>:
 8007bd4:	b510      	push	{r4, lr}
 8007bd6:	4802      	ldr	r0, [pc, #8]	; (8007be0 <__malloc_lock+0xc>)
 8007bd8:	f7ff f937 	bl	8006e4a <__retarget_lock_acquire_recursive>
 8007bdc:	bd10      	pop	{r4, pc}
 8007bde:	46c0      	nop			; (mov r8, r8)
 8007be0:	20000db4 	.word	0x20000db4

08007be4 <__malloc_unlock>:
 8007be4:	b510      	push	{r4, lr}
 8007be6:	4802      	ldr	r0, [pc, #8]	; (8007bf0 <__malloc_unlock+0xc>)
 8007be8:	f7ff f930 	bl	8006e4c <__retarget_lock_release_recursive>
 8007bec:	bd10      	pop	{r4, pc}
 8007bee:	46c0      	nop			; (mov r8, r8)
 8007bf0:	20000db4 	.word	0x20000db4

08007bf4 <_realloc_r>:
 8007bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bf6:	0007      	movs	r7, r0
 8007bf8:	000e      	movs	r6, r1
 8007bfa:	0014      	movs	r4, r2
 8007bfc:	2900      	cmp	r1, #0
 8007bfe:	d105      	bne.n	8007c0c <_realloc_r+0x18>
 8007c00:	0011      	movs	r1, r2
 8007c02:	f7ff fa07 	bl	8007014 <_malloc_r>
 8007c06:	0005      	movs	r5, r0
 8007c08:	0028      	movs	r0, r5
 8007c0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c0c:	2a00      	cmp	r2, #0
 8007c0e:	d103      	bne.n	8007c18 <_realloc_r+0x24>
 8007c10:	f7ff f994 	bl	8006f3c <_free_r>
 8007c14:	0025      	movs	r5, r4
 8007c16:	e7f7      	b.n	8007c08 <_realloc_r+0x14>
 8007c18:	f000 f830 	bl	8007c7c <_malloc_usable_size_r>
 8007c1c:	9001      	str	r0, [sp, #4]
 8007c1e:	4284      	cmp	r4, r0
 8007c20:	d803      	bhi.n	8007c2a <_realloc_r+0x36>
 8007c22:	0035      	movs	r5, r6
 8007c24:	0843      	lsrs	r3, r0, #1
 8007c26:	42a3      	cmp	r3, r4
 8007c28:	d3ee      	bcc.n	8007c08 <_realloc_r+0x14>
 8007c2a:	0021      	movs	r1, r4
 8007c2c:	0038      	movs	r0, r7
 8007c2e:	f7ff f9f1 	bl	8007014 <_malloc_r>
 8007c32:	1e05      	subs	r5, r0, #0
 8007c34:	d0e8      	beq.n	8007c08 <_realloc_r+0x14>
 8007c36:	9b01      	ldr	r3, [sp, #4]
 8007c38:	0022      	movs	r2, r4
 8007c3a:	429c      	cmp	r4, r3
 8007c3c:	d900      	bls.n	8007c40 <_realloc_r+0x4c>
 8007c3e:	001a      	movs	r2, r3
 8007c40:	0031      	movs	r1, r6
 8007c42:	0028      	movs	r0, r5
 8007c44:	f7fe fcac 	bl	80065a0 <memcpy>
 8007c48:	0031      	movs	r1, r6
 8007c4a:	0038      	movs	r0, r7
 8007c4c:	f7ff f976 	bl	8006f3c <_free_r>
 8007c50:	e7da      	b.n	8007c08 <_realloc_r+0x14>
	...

08007c54 <_read_r>:
 8007c54:	b570      	push	{r4, r5, r6, lr}
 8007c56:	0004      	movs	r4, r0
 8007c58:	0008      	movs	r0, r1
 8007c5a:	0011      	movs	r1, r2
 8007c5c:	001a      	movs	r2, r3
 8007c5e:	2300      	movs	r3, #0
 8007c60:	4d05      	ldr	r5, [pc, #20]	; (8007c78 <_read_r+0x24>)
 8007c62:	602b      	str	r3, [r5, #0]
 8007c64:	f7fa f8be 	bl	8001de4 <_read>
 8007c68:	1c43      	adds	r3, r0, #1
 8007c6a:	d103      	bne.n	8007c74 <_read_r+0x20>
 8007c6c:	682b      	ldr	r3, [r5, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d000      	beq.n	8007c74 <_read_r+0x20>
 8007c72:	6023      	str	r3, [r4, #0]
 8007c74:	bd70      	pop	{r4, r5, r6, pc}
 8007c76:	46c0      	nop			; (mov r8, r8)
 8007c78:	20000dc0 	.word	0x20000dc0

08007c7c <_malloc_usable_size_r>:
 8007c7c:	1f0b      	subs	r3, r1, #4
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	1f18      	subs	r0, r3, #4
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	da01      	bge.n	8007c8a <_malloc_usable_size_r+0xe>
 8007c86:	580b      	ldr	r3, [r1, r0]
 8007c88:	18c0      	adds	r0, r0, r3
 8007c8a:	4770      	bx	lr

08007c8c <_init>:
 8007c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8e:	46c0      	nop			; (mov r8, r8)
 8007c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c92:	bc08      	pop	{r3}
 8007c94:	469e      	mov	lr, r3
 8007c96:	4770      	bx	lr

08007c98 <_fini>:
 8007c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9a:	46c0      	nop			; (mov r8, r8)
 8007c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c9e:	bc08      	pop	{r3}
 8007ca0:	469e      	mov	lr, r3
 8007ca2:	4770      	bx	lr
 8007ca4:	0000      	movs	r0, r0
	...

08007ca8 <__FLASH_Program_Fast_veneer>:
 8007ca8:	b401      	push	{r0}
 8007caa:	4802      	ldr	r0, [pc, #8]	; (8007cb4 <__FLASH_Program_Fast_veneer+0xc>)
 8007cac:	4684      	mov	ip, r0
 8007cae:	bc01      	pop	{r0}
 8007cb0:	4760      	bx	ip
 8007cb2:	bf00      	nop
 8007cb4:	20000471 	.word	0x20000471

Disassembly of section .data:

20000400 <SystemCoreClock>:
20000400:	00f42400                                .$..

20000404 <uwTickPrio>:
20000404:	00000004                                ....

20000408 <uwTickFreq>:
20000408:	00000001                                ....

2000040c <_impure_ptr>:
2000040c:	20000410                                ... 

20000410 <impure_data>:
20000410:	00000000 080084d8 080084f8 080084b8     ................
	...

20000470 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000470:	b580      	push	{r7, lr}
20000472:	b088      	sub	sp, #32
20000474:	af00      	add	r7, sp, #0
20000476:	6078      	str	r0, [r7, #4]
20000478:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000047a:	231f      	movs	r3, #31
2000047c:	18fb      	adds	r3, r7, r3
2000047e:	2200      	movs	r2, #0
20000480:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000482:	687b      	ldr	r3, [r7, #4]
20000484:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000486:	683b      	ldr	r3, [r7, #0]
20000488:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000048a:	4b1a      	ldr	r3, [pc, #104]	; (200004f4 <FLASH_Program_Fast+0x84>)
2000048c:	695a      	ldr	r2, [r3, #20]
2000048e:	4b19      	ldr	r3, [pc, #100]	; (200004f4 <FLASH_Program_Fast+0x84>)
20000490:	2180      	movs	r1, #128	; 0x80
20000492:	02c9      	lsls	r1, r1, #11
20000494:	430a      	orrs	r2, r1
20000496:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000498:	f3ef 8310 	mrs	r3, PRIMASK
2000049c:	60fb      	str	r3, [r7, #12]
  return(result);
2000049e:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200004a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200004a2:	b672      	cpsid	i
}
200004a4:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200004a6:	e00f      	b.n	200004c8 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200004a8:	697a      	ldr	r2, [r7, #20]
200004aa:	69bb      	ldr	r3, [r7, #24]
200004ac:	6812      	ldr	r2, [r2, #0]
200004ae:	601a      	str	r2, [r3, #0]
    src += 4U;
200004b0:	697b      	ldr	r3, [r7, #20]
200004b2:	3304      	adds	r3, #4
200004b4:	617b      	str	r3, [r7, #20]
    dest += 4U;
200004b6:	69bb      	ldr	r3, [r7, #24]
200004b8:	3304      	adds	r3, #4
200004ba:	61bb      	str	r3, [r7, #24]
    index++;
200004bc:	211f      	movs	r1, #31
200004be:	187b      	adds	r3, r7, r1
200004c0:	781a      	ldrb	r2, [r3, #0]
200004c2:	187b      	adds	r3, r7, r1
200004c4:	3201      	adds	r2, #1
200004c6:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200004c8:	231f      	movs	r3, #31
200004ca:	18fb      	adds	r3, r7, r3
200004cc:	781b      	ldrb	r3, [r3, #0]
200004ce:	2b3f      	cmp	r3, #63	; 0x3f
200004d0:	d9ea      	bls.n	200004a8 <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
200004d2:	46c0      	nop			; (mov r8, r8)
200004d4:	4b07      	ldr	r3, [pc, #28]	; (200004f4 <FLASH_Program_Fast+0x84>)
200004d6:	691a      	ldr	r2, [r3, #16]
200004d8:	23c0      	movs	r3, #192	; 0xc0
200004da:	029b      	lsls	r3, r3, #10
200004dc:	4013      	ands	r3, r2
200004de:	d1f9      	bne.n	200004d4 <FLASH_Program_Fast+0x64>
200004e0:	693b      	ldr	r3, [r7, #16]
200004e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200004e4:	68bb      	ldr	r3, [r7, #8]
200004e6:	f383 8810 	msr	PRIMASK, r3
}
200004ea:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200004ec:	46c0      	nop			; (mov r8, r8)
200004ee:	46bd      	mov	sp, r7
200004f0:	b008      	add	sp, #32
200004f2:	bd80      	pop	{r7, pc}
200004f4:	40022000 	.word	0x40022000
