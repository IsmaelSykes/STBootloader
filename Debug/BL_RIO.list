
BL_RIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007928  080000b8  080000b8  000100b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a4  080079e0  080079e0  000179e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008184  08008184  0002050a  2**0
                  CONTENTS
  4 .ARM          00000000  08008184  08008184  0002050a  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008184  08008184  0002050a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008184  08008184  00018184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008188  08008188  00018188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000400  0800818c  00020400  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .shared_mem   00000012  200004f8  08008284  000204f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000008ac  20000510  08008296  00020510  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000dbc  08008296  00020dbc  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  0002050a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014bae  00000000  00000000  00020532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ff9  00000000  00000000  000350e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  000380e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fe8  00000000  00000000  000391e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b30d  00000000  00000000  0003a1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015077  00000000  00000000  000554d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6599  00000000  00000000  0006a54c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00110ae5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004638  00000000  00000000  00110b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000510 	.word	0x20000510
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080079b8 	.word	0x080079b8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000514 	.word	0x20000514
 80000fc:	080079b8 	.word	0x080079b8

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	; 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	; 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	; 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <crc32_for_byte>:
 * Invalid file names and files that cause errors are silently skipped.
 * The program reads from stdin if it is called with no arguments.
 *
 * From http://home.thep.lu.se/~bjorn/crc/ */

uint32_t crc32_for_byte(uint32_t r) {
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  for(int j = 0; j < 8; ++j)
 8000418:	2300      	movs	r3, #0
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	e00d      	b.n	800043a <crc32_for_byte+0x2a>
    r = (r & 1? 0: (uint32_t)0xEDB88320L) ^ r >> 1;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2201      	movs	r2, #1
 8000422:	4013      	ands	r3, r2
 8000424:	d001      	beq.n	800042a <crc32_for_byte+0x1a>
 8000426:	2300      	movs	r3, #0
 8000428:	e000      	b.n	800042c <crc32_for_byte+0x1c>
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <crc32_for_byte+0x40>)
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	0852      	lsrs	r2, r2, #1
 8000430:	4053      	eors	r3, r2
 8000432:	607b      	str	r3, [r7, #4]
  for(int j = 0; j < 8; ++j)
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	3301      	adds	r3, #1
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	2b07      	cmp	r3, #7
 800043e:	ddee      	ble.n	800041e <crc32_for_byte+0xe>
  return r ^ (uint32_t)0xFF000000L;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	22ff      	movs	r2, #255	; 0xff
 8000444:	0612      	lsls	r2, r2, #24
 8000446:	4053      	eors	r3, r2
}
 8000448:	0018      	movs	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	b004      	add	sp, #16
 800044e:	bd80      	pop	{r7, pc}
 8000450:	edb88320 	.word	0xedb88320

08000454 <crc32>:

uint32_t crc32(const void *data, uint32_t n_bytes) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0;
 800045e:	2300      	movs	r3, #0
 8000460:	617b      	str	r3, [r7, #20]
  static uint32_t table[0x100];
  if(!*table)
 8000462:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <crc32+0x78>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d111      	bne.n	800048e <crc32+0x3a>
    for(size_t i = 0; i < 0x100; ++i)
 800046a:	2300      	movs	r3, #0
 800046c:	613b      	str	r3, [r7, #16]
 800046e:	e00b      	b.n	8000488 <crc32+0x34>
      table[i] = crc32_for_byte(i);
 8000470:	693b      	ldr	r3, [r7, #16]
 8000472:	0018      	movs	r0, r3
 8000474:	f7ff ffcc 	bl	8000410 <crc32_for_byte>
 8000478:	0001      	movs	r1, r0
 800047a:	4b14      	ldr	r3, [pc, #80]	; (80004cc <crc32+0x78>)
 800047c:	693a      	ldr	r2, [r7, #16]
 800047e:	0092      	lsls	r2, r2, #2
 8000480:	50d1      	str	r1, [r2, r3]
    for(size_t i = 0; i < 0x100; ++i)
 8000482:	693b      	ldr	r3, [r7, #16]
 8000484:	3301      	adds	r3, #1
 8000486:	613b      	str	r3, [r7, #16]
 8000488:	693b      	ldr	r3, [r7, #16]
 800048a:	2bff      	cmp	r3, #255	; 0xff
 800048c:	d9f0      	bls.n	8000470 <crc32+0x1c>
  for(size_t i = 0; i < n_bytes; ++i)
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	e012      	b.n	80004ba <crc32+0x66>
    crc = table[(uint8_t)crc ^ ((uint8_t*)data)[i]] ^ crc >> 8;
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	b2da      	uxtb	r2, r3
 8000498:	6879      	ldr	r1, [r7, #4]
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	18cb      	adds	r3, r1, r3
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	4053      	eors	r3, r2
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	001a      	movs	r2, r3
 80004a6:	4b09      	ldr	r3, [pc, #36]	; (80004cc <crc32+0x78>)
 80004a8:	0092      	lsls	r2, r2, #2
 80004aa:	58d2      	ldr	r2, [r2, r3]
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	0a1b      	lsrs	r3, r3, #8
 80004b0:	4053      	eors	r3, r2
 80004b2:	617b      	str	r3, [r7, #20]
  for(size_t i = 0; i < n_bytes; ++i)
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	3301      	adds	r3, #1
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	68fa      	ldr	r2, [r7, #12]
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	429a      	cmp	r2, r3
 80004c0:	d3e8      	bcc.n	8000494 <crc32+0x40>

  return crc;
 80004c2:	697b      	ldr	r3, [r7, #20]
}
 80004c4:	0018      	movs	r0, r3
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b006      	add	sp, #24
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	2000052c 	.word	0x2000052c

080004d0 <image_get_header>:
#include "image.h"
#include "memoryMap.h"
#include "crc32.h"

const image_hdr_t *image_get_header(image_slot_t slot)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	0002      	movs	r2, r0
 80004d8:	1dfb      	adds	r3, r7, #7
 80004da:	701a      	strb	r2, [r3, #0]
    const image_hdr_t *hdr = NULL;
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]

    switch (slot)
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d002      	beq.n	80004ee <image_get_header+0x1e>
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	d003      	beq.n	80004f4 <image_get_header+0x24>
        break;
    case IMAGE_SLOT_2:
        hdr = (const image_hdr_t *) &__loader_rom_start__;
        break;
    default:
        break;
 80004ec:	e005      	b.n	80004fa <image_get_header+0x2a>
        hdr = (const image_hdr_t *) &__app_rom_start__;
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <image_get_header+0x54>)
 80004f0:	60fb      	str	r3, [r7, #12]
        break;
 80004f2:	e002      	b.n	80004fa <image_get_header+0x2a>
        hdr = (const image_hdr_t *) &__loader_rom_start__;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <image_get_header+0x58>)
 80004f6:	60fb      	str	r3, [r7, #12]
        break;
 80004f8:	46c0      	nop			; (mov r8, r8)
    }

    if (hdr && hdr->image_magic == IMAGE_MAGIC)
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d00b      	beq.n	8000518 <image_get_header+0x48>
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	781a      	ldrb	r2, [r3, #0]
 8000504:	785b      	ldrb	r3, [r3, #1]
 8000506:	021b      	lsls	r3, r3, #8
 8000508:	4313      	orrs	r3, r2
 800050a:	b29a      	uxth	r2, r3
 800050c:	23e7      	movs	r3, #231	; 0xe7
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	429a      	cmp	r2, r3
 8000512:	d101      	bne.n	8000518 <image_get_header+0x48>
    {
        return hdr;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	e000      	b.n	800051a <image_get_header+0x4a>
    }
    else
    {
        return NULL;
 8000518:	2300      	movs	r3, #0
    }
}
 800051a:	0018      	movs	r0, r3
 800051c:	46bd      	mov	sp, r7
 800051e:	b004      	add	sp, #16
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	0800c800 	.word	0x0800c800
 8000528:	08046800 	.word	0x08046800

0800052c <image_validate>:

int image_validate(image_slot_t slot, const image_hdr_t *hdr)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
 8000532:	0002      	movs	r2, r0
 8000534:	6039      	str	r1, [r7, #0]
 8000536:	1dfb      	adds	r3, r7, #7
 8000538:	701a      	strb	r2, [r3, #0]
    // void *addr = (slot == IMAGE_SLOT_1 ? &__apparom_start__ : &__appbrom_start__);
    void *addr = NULL;
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]

    switch (slot)
 800053e:	1dfb      	adds	r3, r7, #7
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d002      	beq.n	800054c <image_validate+0x20>
 8000546:	2b02      	cmp	r3, #2
 8000548:	d003      	beq.n	8000552 <image_validate+0x26>
 800054a:	e005      	b.n	8000558 <image_validate+0x2c>
    {
    case IMAGE_SLOT_1:
        addr = &__app_rom_start__;
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <image_validate+0xac>)
 800054e:	617b      	str	r3, [r7, #20]
        break;
 8000550:	e007      	b.n	8000562 <image_validate+0x36>
    case IMAGE_SLOT_2:
        addr = &__loader_rom_start__;
 8000552:	4b22      	ldr	r3, [pc, #136]	; (80005dc <image_validate+0xb0>)
 8000554:	617b      	str	r3, [r7, #20]
        break;
 8000556:	e004      	b.n	8000562 <image_validate+0x36>
    default:
        addr = NULL;
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
        return -1;
 800055c:	2301      	movs	r3, #1
 800055e:	425b      	negs	r3, r3
 8000560:	e036      	b.n	80005d0 <image_validate+0xa4>
    }

    addr += sizeof(image_hdr_t);
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	3320      	adds	r3, #32
 8000566:	617b      	str	r3, [r7, #20]
    uint32_t len = hdr->data_size;
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	7a1a      	ldrb	r2, [r3, #8]
 800056c:	7a59      	ldrb	r1, [r3, #9]
 800056e:	0209      	lsls	r1, r1, #8
 8000570:	430a      	orrs	r2, r1
 8000572:	7a99      	ldrb	r1, [r3, #10]
 8000574:	0409      	lsls	r1, r1, #16
 8000576:	430a      	orrs	r2, r1
 8000578:	7adb      	ldrb	r3, [r3, #11]
 800057a:	061b      	lsls	r3, r3, #24
 800057c:	4313      	orrs	r3, r2
 800057e:	613b      	str	r3, [r7, #16]
    uint32_t crc_calc = crc32(addr, len);
 8000580:	693a      	ldr	r2, [r7, #16]
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	0011      	movs	r1, r2
 8000586:	0018      	movs	r0, r3
 8000588:	f7ff ff64 	bl	8000454 <crc32>
 800058c:	0003      	movs	r3, r0
 800058e:	60fb      	str	r3, [r7, #12]
    uint32_t crc_image = hdr->crc;
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	791a      	ldrb	r2, [r3, #4]
 8000594:	7959      	ldrb	r1, [r3, #5]
 8000596:	0209      	lsls	r1, r1, #8
 8000598:	430a      	orrs	r2, r1
 800059a:	7999      	ldrb	r1, [r3, #6]
 800059c:	0409      	lsls	r1, r1, #16
 800059e:	430a      	orrs	r2, r1
 80005a0:	79db      	ldrb	r3, [r3, #7]
 80005a2:	061b      	lsls	r3, r3, #24
 80005a4:	4313      	orrs	r3, r2
 80005a6:	60bb      	str	r3, [r7, #8]

    if (crc_calc == crc_image) {
 80005a8:	68fa      	ldr	r2, [r7, #12]
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d107      	bne.n	80005c0 <image_validate+0x94>
        printf("CRC OK: %lx vs %lx\r\n", crc_image, crc_calc);
 80005b0:	68fa      	ldr	r2, [r7, #12]
 80005b2:	68b9      	ldr	r1, [r7, #8]
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <image_validate+0xb4>)
 80005b6:	0018      	movs	r0, r3
 80005b8:	f005 fef8 	bl	80063ac <iprintf>
        return 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	e007      	b.n	80005d0 <image_validate+0xa4>
    }
    else {
        printf("CRC mismatch: %lx vs %lx\r\n", crc_image, crc_calc);
 80005c0:	68fa      	ldr	r2, [r7, #12]
 80005c2:	68b9      	ldr	r1, [r7, #8]
 80005c4:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <image_validate+0xb8>)
 80005c6:	0018      	movs	r0, r3
 80005c8:	f005 fef0 	bl	80063ac <iprintf>
        return -1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	425b      	negs	r3, r3
    }

}
 80005d0:	0018      	movs	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	b006      	add	sp, #24
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	0800c800 	.word	0x0800c800
 80005dc:	08046800 	.word	0x08046800
 80005e0:	080079e0 	.word	0x080079e0
 80005e4:	080079f8 	.word	0x080079f8

080005e8 <HAL_UARTEx_RxEventCallback>:
#define STRINGIFY(x) #x
#define ADD_QUOTES(y) STRINGIFY(y)


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	000a      	movs	r2, r1
 80005f2:	1cbb      	adds	r3, r7, #2
 80005f4:	801a      	strh	r2, [r3, #0]
	  HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx_buff, sizeof rx_buff);
 80005f6:	2382      	movs	r3, #130	; 0x82
 80005f8:	009a      	lsls	r2, r3, #2
 80005fa:	4906      	ldr	r1, [pc, #24]	; (8000614 <HAL_UARTEx_RxEventCallback+0x2c>)
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <HAL_UARTEx_RxEventCallback+0x30>)
 80005fe:	0018      	movs	r0, r3
 8000600:	f005 fdd2 	bl	80061a8 <HAL_UARTEx_ReceiveToIdle_IT>
	  //memcpy(message,rx_buff,4);
	  dato_recivido = true;
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <HAL_UARTEx_RxEventCallback+0x34>)
 8000606:	2201      	movs	r2, #1
 8000608:	701a      	strb	r2, [r3, #0]
	  //counter++;
}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b002      	add	sp, #8
 8000610:	bd80      	pop	{r7, pc}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	20000b58 	.word	0x20000b58
 8000618:	20000a10 	.word	0x20000a10
 800061c:	20000b48 	.word	0x20000b48

08000620 <CRC16_X25>:
  0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,
  0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78
};

uint16_t CRC16_X25(const void * data, uint16_t sizeOfData, uint16_t startCrc)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	0008      	movs	r0, r1
 800062a:	0011      	movs	r1, r2
 800062c:	1cbb      	adds	r3, r7, #2
 800062e:	1c02      	adds	r2, r0, #0
 8000630:	801a      	strh	r2, [r3, #0]
 8000632:	003b      	movs	r3, r7
 8000634:	1c0a      	adds	r2, r1, #0
 8000636:	801a      	strh	r2, [r3, #0]
	  const uint8_t * dataPtr = (const uint8_t *) data;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	60fb      	str	r3, [r7, #12]

	  startCrc = startCrc ^ 0xffff;
 800063c:	003b      	movs	r3, r7
 800063e:	003a      	movs	r2, r7
 8000640:	8812      	ldrh	r2, [r2, #0]
 8000642:	43d2      	mvns	r2, r2
 8000644:	801a      	strh	r2, [r3, #0]

	  while (sizeOfData--) {
 8000646:	e012      	b.n	800066e <CRC16_X25+0x4e>
	    startCrc = crc16Table[(startCrc ^ *dataPtr++) & 0xFF] ^ (startCrc >> 8);
 8000648:	003b      	movs	r3, r7
 800064a:	881a      	ldrh	r2, [r3, #0]
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	1c59      	adds	r1, r3, #1
 8000650:	60f9      	str	r1, [r7, #12]
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	4053      	eors	r3, r2
 8000656:	22ff      	movs	r2, #255	; 0xff
 8000658:	401a      	ands	r2, r3
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <CRC16_X25+0x6c>)
 800065c:	0052      	lsls	r2, r2, #1
 800065e:	5ad1      	ldrh	r1, [r2, r3]
 8000660:	003b      	movs	r3, r7
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	0a1b      	lsrs	r3, r3, #8
 8000666:	b29a      	uxth	r2, r3
 8000668:	003b      	movs	r3, r7
 800066a:	404a      	eors	r2, r1
 800066c:	801a      	strh	r2, [r3, #0]
	  while (sizeOfData--) {
 800066e:	1cbb      	adds	r3, r7, #2
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	1cba      	adds	r2, r7, #2
 8000674:	1e59      	subs	r1, r3, #1
 8000676:	8011      	strh	r1, [r2, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1e5      	bne.n	8000648 <CRC16_X25+0x28>
	  }

	  return (startCrc ^ 0xffff);
 800067c:	003b      	movs	r3, r7
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	43db      	mvns	r3, r3
 8000682:	b29b      	uxth	r3, r3
}
 8000684:	0018      	movs	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	b004      	add	sp, #16
 800068a:	bd80      	pop	{r7, pc}
 800068c:	08007e64 	.word	0x08007e64

08000690 <write>:


uint32_t write(uint8_t *data,uint32_t begin)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b087      	sub	sp, #28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
	uint32_t end = begin+64;// return the address to next 512 bytes
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	3340      	adds	r3, #64	; 0x40
 800069e:	60fb      	str	r3, [r7, #12]
	uint32_t _index;
	uint16_t k = 0;
 80006a0:	2316      	movs	r3, #22
 80006a2:	18fb      	adds	r3, r7, r3
 80006a4:	2200      	movs	r2, #0
 80006a6:	801a      	strh	r2, [r3, #0]
	HAL_FLASH_Unlock();
 80006a8:	f001 ff74 	bl	8002594 <HAL_FLASH_Unlock>
	for(uint32_t i = begin; i<end; i++)// 64*8 = 512 bytes
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	e023      	b.n	80006fa <write+0x6a>
	{
	  _index = 8*i;
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	00db      	lsls	r3, r3, #3
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	4915      	ldr	r1, [pc, #84]	; (8000710 <write+0x80>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	4252      	negs	r2, r2
 80006be:	17d3      	asrs	r3, r2, #31
 80006c0:	600a      	str	r2, [r1, #0]
 80006c2:	604b      	str	r3, [r1, #4]
	  memset(&double_word,0xFF,8);
	  memcpy(&double_word,&data[k],8);
 80006c4:	2416      	movs	r4, #22
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	18d1      	adds	r1, r2, r3
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <write+0x80>)
 80006d0:	2208      	movs	r2, #8
 80006d2:	0018      	movs	r0, r3
 80006d4:	f005 fe58 	bl	8006388 <memcpy>
	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,loader_rom+_index,double_word);
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <write+0x84>)
 80006dc:	1899      	adds	r1, r3, r2
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <write+0x80>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	2001      	movs	r0, #1
 80006e6:	f001 ff07 	bl	80024f8 <HAL_FLASH_Program>
	  k+=8;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	193a      	adds	r2, r7, r4
 80006ee:	8812      	ldrh	r2, [r2, #0]
 80006f0:	3208      	adds	r2, #8
 80006f2:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = begin; i<end; i++)// 64*8 = 512 bytes
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	3301      	adds	r3, #1
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d3d7      	bcc.n	80006b2 <write+0x22>
	}
	HAL_FLASH_Lock();
 8000702:	f001 ff6b 	bl	80025dc <HAL_FLASH_Lock>
	return end;
 8000706:	68fb      	ldr	r3, [r7, #12]
}
 8000708:	0018      	movs	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	b007      	add	sp, #28
 800070e:	bd90      	pop	{r4, r7, pc}
 8000710:	20000b40 	.word	0x20000b40
 8000714:	08046800 	.word	0x08046800

08000718 <clear_app_rom>:



void clear_app_rom(void)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b087      	sub	sp, #28
 800071c:	af00      	add	r7, sp, #0
	printf("\r Clean APP_Room \r\n");
 800071e:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <clear_app_rom+0x98>)
 8000720:	0018      	movs	r0, r3
 8000722:	f005 fecf 	bl	80064c4 <puts>
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]

	HAL_FLASH_Unlock();
 800072a:	f001 ff33 	bl	8002594 <HAL_FLASH_Unlock>
	FLASH->OPTR |= FLASH_OPTR_DUAL_BANK_Msk;
 800072e:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <clear_app_rom+0x9c>)
 8000730:	6a1a      	ldr	r2, [r3, #32]
 8000732:	4b20      	ldr	r3, [pc, #128]	; (80007b4 <clear_app_rom+0x9c>)
 8000734:	2180      	movs	r1, #128	; 0x80
 8000736:	0389      	lsls	r1, r1, #14
 8000738:	430a      	orrs	r2, r1
 800073a:	621a      	str	r2, [r3, #32]
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800073c:	2408      	movs	r4, #8
 800073e:	193b      	adds	r3, r7, r4
 8000740:	2202      	movs	r2, #2
 8000742:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.Page = 25;
 8000744:	193b      	adds	r3, r7, r4
 8000746:	2219      	movs	r2, #25
 8000748:	609a      	str	r2, [r3, #8]
	  EraseInitStruct.Banks = FLASH_BANK_1;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2204      	movs	r2, #4
 800074e:	605a      	str	r2, [r3, #4]
	  EraseInitStruct.NbPages = 103;
 8000750:	193b      	adds	r3, r7, r4
 8000752:	2267      	movs	r2, #103	; 0x67
 8000754:	60da      	str	r2, [r3, #12]
	  HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8000756:	1d3a      	adds	r2, r7, #4
 8000758:	193b      	adds	r3, r7, r4
 800075a:	0011      	movs	r1, r2
 800075c:	0018      	movs	r0, r3
 800075e:	f001 ffc7 	bl	80026f0 <HAL_FLASHEx_Erase>
	  HAL_FLASH_Lock();
 8000762:	f001 ff3b 	bl	80025dc <HAL_FLASH_Lock>

	  PageError = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
	  HAL_FLASH_Unlock();
 800076a:	f001 ff13 	bl	8002594 <HAL_FLASH_Unlock>
	  FLASH->OPTR |= FLASH_OPTR_DUAL_BANK_Msk;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <clear_app_rom+0x9c>)
 8000770:	6a1a      	ldr	r2, [r3, #32]
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <clear_app_rom+0x9c>)
 8000774:	2180      	movs	r1, #128	; 0x80
 8000776:	0389      	lsls	r1, r1, #14
 8000778:	430a      	orrs	r2, r1
 800077a:	621a      	str	r2, [r3, #32]
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800077c:	0021      	movs	r1, r4
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2202      	movs	r2, #2
 8000782:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.Page = 128;
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2280      	movs	r2, #128	; 0x80
 8000788:	609a      	str	r2, [r3, #8]
	  EraseInitStruct.Banks = FLASH_BANK_2;
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	0212      	lsls	r2, r2, #8
 8000790:	605a      	str	r2, [r3, #4]
	  EraseInitStruct.NbPages = 13;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	220d      	movs	r2, #13
 8000796:	60da      	str	r2, [r3, #12]
	  HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8000798:	1d3a      	adds	r2, r7, #4
 800079a:	187b      	adds	r3, r7, r1
 800079c:	0011      	movs	r1, r2
 800079e:	0018      	movs	r0, r3
 80007a0:	f001 ffa6 	bl	80026f0 <HAL_FLASHEx_Erase>
	  HAL_FLASH_Lock();
 80007a4:	f001 ff1a 	bl	80025dc <HAL_FLASH_Lock>
}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b007      	add	sp, #28
 80007ae:	bd90      	pop	{r4, r7, pc}
 80007b0:	08007a14 	.word	0x08007a14
 80007b4:	40022000 	.word	0x40022000

080007b8 <clear_loader_rom>:

void clear_loader_rom(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
	printf("\r Clean Loader_Room \r\n");
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <clear_loader_rom+0x5c>)
 80007c0:	0018      	movs	r0, r3
 80007c2:	f005 fe7f 	bl	80064c4 <puts>
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
	  PageError = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
	  HAL_FLASH_Unlock();
 80007ce:	f001 fee1 	bl	8002594 <HAL_FLASH_Unlock>
	  FLASH->OPTR |= FLASH_OPTR_DUAL_BANK_Msk;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <clear_loader_rom+0x60>)
 80007d4:	6a1a      	ldr	r2, [r3, #32]
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <clear_loader_rom+0x60>)
 80007d8:	2180      	movs	r1, #128	; 0x80
 80007da:	0389      	lsls	r1, r1, #14
 80007dc:	430a      	orrs	r2, r1
 80007de:	621a      	str	r2, [r3, #32]
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80007e0:	2108      	movs	r1, #8
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2202      	movs	r2, #2
 80007e6:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.Page = 141;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	228d      	movs	r2, #141	; 0x8d
 80007ec:	609a      	str	r2, [r3, #8]
	  EraseInitStruct.Banks = FLASH_BANK_2;
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2280      	movs	r2, #128	; 0x80
 80007f2:	0212      	lsls	r2, r2, #8
 80007f4:	605a      	str	r2, [r3, #4]
	  EraseInitStruct.NbPages = 115;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2273      	movs	r2, #115	; 0x73
 80007fa:	60da      	str	r2, [r3, #12]
	  HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80007fc:	1d3a      	adds	r2, r7, #4
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	0011      	movs	r1, r2
 8000802:	0018      	movs	r0, r3
 8000804:	f001 ff74 	bl	80026f0 <HAL_FLASHEx_Erase>
	  HAL_FLASH_Lock();
 8000808:	f001 fee8 	bl	80025dc <HAL_FLASH_Lock>
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	b006      	add	sp, #24
 8000812:	bd80      	pop	{r7, pc}
 8000814:	08007a28 	.word	0x08007a28
 8000818:	40022000 	.word	0x40022000

0800081c <print_double_word>:

void print_double_word(uint32_t Address,uint64_t *doubleword)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
	uint8_t *ptr = (uint8_t*)doubleword;
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	60fb      	str	r3, [r7, #12]
	  	  printf("\r Address: %08lX, Data:  ",Address);
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <print_double_word+0x60>)
 800082e:	0011      	movs	r1, r2
 8000830:	0018      	movs	r0, r3
 8000832:	f005 fdbb 	bl	80063ac <iprintf>
	  	  for(uint8_t k = 0; k < 8; k++)
 8000836:	230b      	movs	r3, #11
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
 800083e:	e00f      	b.n	8000860 <print_double_word+0x44>
	  		  printf("%02X",*(ptr++));
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	1c5a      	adds	r2, r3, #1
 8000844:	60fa      	str	r2, [r7, #12]
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	001a      	movs	r2, r3
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <print_double_word+0x64>)
 800084c:	0011      	movs	r1, r2
 800084e:	0018      	movs	r0, r3
 8000850:	f005 fdac 	bl	80063ac <iprintf>
	  	  for(uint8_t k = 0; k < 8; k++)
 8000854:	210b      	movs	r1, #11
 8000856:	187b      	adds	r3, r7, r1
 8000858:	781a      	ldrb	r2, [r3, #0]
 800085a:	187b      	adds	r3, r7, r1
 800085c:	3201      	adds	r2, #1
 800085e:	701a      	strb	r2, [r3, #0]
 8000860:	230b      	movs	r3, #11
 8000862:	18fb      	adds	r3, r7, r3
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b07      	cmp	r3, #7
 8000868:	d9ea      	bls.n	8000840 <print_double_word+0x24>
	  	  printf("|\r\r\n");
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <print_double_word+0x68>)
 800086c:	0018      	movs	r0, r3
 800086e:	f005 fe29 	bl	80064c4 <puts>
}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	b004      	add	sp, #16
 8000878:	bd80      	pop	{r7, pc}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	08007a40 	.word	0x08007a40
 8000880:	08007a5c 	.word	0x08007a5c
 8000884:	08007a64 	.word	0x08007a64

08000888 <clone_rom>:

uint32_t clone_rom(uint32_t Firmware_zise)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	uint32_t rows = Firmware_zise/8;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	08db      	lsrs	r3, r3, #3
 8000894:	60fb      	str	r3, [r7, #12]
	uint32_t offset = Firmware_zise%8;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2207      	movs	r2, #7
 800089a:	4013      	ands	r3, r2
 800089c:	60bb      	str	r3, [r7, #8]
	uint32_t _index = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
	printf("\r Clear app rom \r\n");
 80008a2:	4b6c      	ldr	r3, [pc, #432]	; (8000a54 <clone_rom+0x1cc>)
 80008a4:	0018      	movs	r0, r3
 80008a6:	f005 fe0d 	bl	80064c4 <puts>

	for(int k = 0; k <10; k++)
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
 80008ae:	e01b      	b.n	80008e8 <clone_rom+0x60>
	{
		printf("\033\143");
 80008b0:	4b69      	ldr	r3, [pc, #420]	; (8000a58 <clone_rom+0x1d0>)
 80008b2:	0018      	movs	r0, r3
 80008b4:	f005 fd7a 	bl	80063ac <iprintf>
		for(int q = 0; q<=k; q++)
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	e009      	b.n	80008d2 <clone_rom+0x4a>
		{
			printf("�?�");
 80008be:	4b67      	ldr	r3, [pc, #412]	; (8000a5c <clone_rom+0x1d4>)
 80008c0:	0018      	movs	r0, r3
 80008c2:	f005 fd73 	bl	80063ac <iprintf>
			HAL_Delay(100);
 80008c6:	2064      	movs	r0, #100	; 0x64
 80008c8:	f001 fc36 	bl	8002138 <HAL_Delay>
		for(int q = 0; q<=k; q++)
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	3301      	adds	r3, #1
 80008d0:	617b      	str	r3, [r7, #20]
 80008d2:	697a      	ldr	r2, [r7, #20]
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	ddf1      	ble.n	80008be <clone_rom+0x36>
		}
		printf("\r\n");
 80008da:	4b61      	ldr	r3, [pc, #388]	; (8000a60 <clone_rom+0x1d8>)
 80008dc:	0018      	movs	r0, r3
 80008de:	f005 fdf1 	bl	80064c4 <puts>
	for(int k = 0; k <10; k++)
 80008e2:	69bb      	ldr	r3, [r7, #24]
 80008e4:	3301      	adds	r3, #1
 80008e6:	61bb      	str	r3, [r7, #24]
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	2b09      	cmp	r3, #9
 80008ec:	dde0      	ble.n	80008b0 <clone_rom+0x28>
	}

	clear_app_rom();
 80008ee:	f7ff ff13 	bl	8000718 <clear_app_rom>

	printf("\r ------ Clone to slot 1 ---------- \r\n");
 80008f2:	4b5c      	ldr	r3, [pc, #368]	; (8000a64 <clone_rom+0x1dc>)
 80008f4:	0018      	movs	r0, r3
 80008f6:	f005 fde5 	bl	80064c4 <puts>
	printf("\r rows: %ld \r\n",rows);
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	4b5a      	ldr	r3, [pc, #360]	; (8000a68 <clone_rom+0x1e0>)
 80008fe:	0011      	movs	r1, r2
 8000900:	0018      	movs	r0, r3
 8000902:	f005 fd53 	bl	80063ac <iprintf>
	printf("\r offset: %ld \r\n",offset);
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	4b58      	ldr	r3, [pc, #352]	; (8000a6c <clone_rom+0x1e4>)
 800090a:	0011      	movs	r1, r2
 800090c:	0018      	movs	r0, r3
 800090e:	f005 fd4d 	bl	80063ac <iprintf>
	HAL_FLASH_Unlock();
 8000912:	f001 fe3f 	bl	8002594 <HAL_FLASH_Unlock>
    for(uint32_t i = 0; i<=rows-1; i++)// 12288 /8 -1 = =rows,   11532/8 =
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	e03f      	b.n	800099c <clone_rom+0x114>
    {
    	_index = 8*i;
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	00db      	lsls	r3, r3, #3
 8000920:	61fb      	str	r3, [r7, #28]
  	  RDAddr = (uint64_t *)(loader_rom + _index);
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	4a52      	ldr	r2, [pc, #328]	; (8000a70 <clone_rom+0x1e8>)
 8000926:	4694      	mov	ip, r2
 8000928:	4463      	add	r3, ip
 800092a:	001a      	movs	r2, r3
 800092c:	4b51      	ldr	r3, [pc, #324]	; (8000a74 <clone_rom+0x1ec>)
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	4951      	ldr	r1, [pc, #324]	; (8000a78 <clone_rom+0x1f0>)
 8000932:	2201      	movs	r2, #1
 8000934:	4252      	negs	r2, r2
 8000936:	17d3      	asrs	r3, r2, #31
 8000938:	600a      	str	r2, [r1, #0]
 800093a:	604b      	str	r3, [r1, #4]
  	  memset(&double_word,0xFF,8);
  	  memcpy(&double_word,RDAddr,8);
 800093c:	4b4d      	ldr	r3, [pc, #308]	; (8000a74 <clone_rom+0x1ec>)
 800093e:	6819      	ldr	r1, [r3, #0]
 8000940:	4b4d      	ldr	r3, [pc, #308]	; (8000a78 <clone_rom+0x1f0>)
 8000942:	2208      	movs	r2, #8
 8000944:	0018      	movs	r0, r3
 8000946:	f005 fd1f 	bl	8006388 <memcpy>
  	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,app_rom+_index,double_word);
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	4a4b      	ldr	r2, [pc, #300]	; (8000a7c <clone_rom+0x1f4>)
 800094e:	1899      	adds	r1, r3, r2
 8000950:	4b49      	ldr	r3, [pc, #292]	; (8000a78 <clone_rom+0x1f0>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	2001      	movs	r0, #1
 8000958:	f001 fdce 	bl	80024f8 <HAL_FLASH_Program>
  	  crc_temp = CRC16_X25(RDAddr, 8, crc_temp);
 800095c:	4b45      	ldr	r3, [pc, #276]	; (8000a74 <clone_rom+0x1ec>)
 800095e:	6818      	ldr	r0, [r3, #0]
 8000960:	4b47      	ldr	r3, [pc, #284]	; (8000a80 <clone_rom+0x1f8>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	001a      	movs	r2, r3
 8000966:	2108      	movs	r1, #8
 8000968:	f7ff fe5a 	bl	8000620 <CRC16_X25>
 800096c:	0003      	movs	r3, r0
 800096e:	001a      	movs	r2, r3
 8000970:	4b43      	ldr	r3, [pc, #268]	; (8000a80 <clone_rom+0x1f8>)
 8000972:	801a      	strh	r2, [r3, #0]
	  printf(" \r crc parts_app_rom: %04X \n",crc_temp);
 8000974:	4b42      	ldr	r3, [pc, #264]	; (8000a80 <clone_rom+0x1f8>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	001a      	movs	r2, r3
 800097a:	4b42      	ldr	r3, [pc, #264]	; (8000a84 <clone_rom+0x1fc>)
 800097c:	0011      	movs	r1, r2
 800097e:	0018      	movs	r0, r3
 8000980:	f005 fd14 	bl	80063ac <iprintf>
	  print_double_word(loader_rom+_index,&double_word);
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	4a3a      	ldr	r2, [pc, #232]	; (8000a70 <clone_rom+0x1e8>)
 8000988:	4694      	mov	ip, r2
 800098a:	4463      	add	r3, ip
 800098c:	4a3a      	ldr	r2, [pc, #232]	; (8000a78 <clone_rom+0x1f0>)
 800098e:	0011      	movs	r1, r2
 8000990:	0018      	movs	r0, r3
 8000992:	f7ff ff43 	bl	800081c <print_double_word>
    for(uint32_t i = 0; i<=rows-1; i++)// 12288 /8 -1 = =rows,   11532/8 =
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	3301      	adds	r3, #1
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	3b01      	subs	r3, #1
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d9ba      	bls.n	800091c <clone_rom+0x94>
    }
    if(offset!=0)
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d042      	beq.n	8000a32 <clone_rom+0x1aa>
 80009ac:	4932      	ldr	r1, [pc, #200]	; (8000a78 <clone_rom+0x1f0>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	4252      	negs	r2, r2
 80009b2:	17d3      	asrs	r3, r2, #31
 80009b4:	600a      	str	r2, [r1, #0]
 80009b6:	604b      	str	r3, [r1, #4]
    {
    	memset(&double_word,0xFF,8);
		_index+= 8;
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	3308      	adds	r3, #8
 80009bc:	61fb      	str	r3, [r7, #28]
		RDAddr = (uint64_t *)(loader_rom + _index);
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	4a2b      	ldr	r2, [pc, #172]	; (8000a70 <clone_rom+0x1e8>)
 80009c2:	4694      	mov	ip, r2
 80009c4:	4463      	add	r3, ip
 80009c6:	001a      	movs	r2, r3
 80009c8:	4b2a      	ldr	r3, [pc, #168]	; (8000a74 <clone_rom+0x1ec>)
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	492a      	ldr	r1, [pc, #168]	; (8000a78 <clone_rom+0x1f0>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	4252      	negs	r2, r2
 80009d2:	17d3      	asrs	r3, r2, #31
 80009d4:	600a      	str	r2, [r1, #0]
 80009d6:	604b      	str	r3, [r1, #4]
		memset(&double_word,0xFF,8);
		memcpy(&double_word,RDAddr,offset);
 80009d8:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <clone_rom+0x1ec>)
 80009da:	6819      	ldr	r1, [r3, #0]
 80009dc:	68ba      	ldr	r2, [r7, #8]
 80009de:	4b26      	ldr	r3, [pc, #152]	; (8000a78 <clone_rom+0x1f0>)
 80009e0:	0018      	movs	r0, r3
 80009e2:	f005 fcd1 	bl	8006388 <memcpy>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,app_rom+_index,double_word);
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	4a24      	ldr	r2, [pc, #144]	; (8000a7c <clone_rom+0x1f4>)
 80009ea:	1899      	adds	r1, r3, r2
 80009ec:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <clone_rom+0x1f0>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	2001      	movs	r0, #1
 80009f4:	f001 fd80 	bl	80024f8 <HAL_FLASH_Program>
		crc_temp = CRC16_X25(&double_word,offset, crc_temp);
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	b299      	uxth	r1, r3
 80009fc:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <clone_rom+0x1f8>)
 80009fe:	881a      	ldrh	r2, [r3, #0]
 8000a00:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <clone_rom+0x1f0>)
 8000a02:	0018      	movs	r0, r3
 8000a04:	f7ff fe0c 	bl	8000620 <CRC16_X25>
 8000a08:	0003      	movs	r3, r0
 8000a0a:	001a      	movs	r2, r3
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <clone_rom+0x1f8>)
 8000a0e:	801a      	strh	r2, [r3, #0]
		printf(" \r crc parts_app_rom: %04X \n",crc_temp);
 8000a10:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <clone_rom+0x1f8>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	001a      	movs	r2, r3
 8000a16:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <clone_rom+0x1fc>)
 8000a18:	0011      	movs	r1, r2
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f005 fcc6 	bl	80063ac <iprintf>
		print_double_word(loader_rom+_index,&double_word);
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	4a13      	ldr	r2, [pc, #76]	; (8000a70 <clone_rom+0x1e8>)
 8000a24:	4694      	mov	ip, r2
 8000a26:	4463      	add	r3, ip
 8000a28:	4a13      	ldr	r2, [pc, #76]	; (8000a78 <clone_rom+0x1f0>)
 8000a2a:	0011      	movs	r1, r2
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f7ff fef5 	bl	800081c <print_double_word>
    }
    HAL_FLASH_Lock();
 8000a32:	f001 fdd3 	bl	80025dc <HAL_FLASH_Lock>


    if(crc_temp == CRC_16)
 8000a36:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <clone_rom+0x1f8>)
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <clone_rom+0x200>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d101      	bne.n	8000a48 <clone_rom+0x1c0>
   		return 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	e000      	b.n	8000a4a <clone_rom+0x1c2>
    else
    	return 1;
 8000a48:	2301      	movs	r3, #1
}
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b008      	add	sp, #32
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	08007a68 	.word	0x08007a68
 8000a58:	08007a7c 	.word	0x08007a7c
 8000a5c:	08007a80 	.word	0x08007a80
 8000a60:	08007a88 	.word	0x08007a88
 8000a64:	08007a8c 	.word	0x08007a8c
 8000a68:	08007ab4 	.word	0x08007ab4
 8000a6c:	08007ac4 	.word	0x08007ac4
 8000a70:	08046800 	.word	0x08046800
 8000a74:	20000b38 	.word	0x20000b38
 8000a78:	20000b40 	.word	0x20000b40
 8000a7c:	0800c800 	.word	0x0800c800
 8000a80:	20000d6e 	.word	0x20000d6e
 8000a84:	08007ad8 	.word	0x08007ad8
 8000a88:	20000d64 	.word	0x20000d64

08000a8c <wait>:

void wait(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	 while(dato_recivido == false)
 8000a90:	e006      	b.n	8000aa0 <wait+0x14>
	 {
		 printf("\r waiting... \r\n");
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <wait+0x2c>)
 8000a94:	0018      	movs	r0, r3
 8000a96:	f005 fd15 	bl	80064c4 <puts>
		 HAL_Delay(100);
 8000a9a:	2064      	movs	r0, #100	; 0x64
 8000a9c:	f001 fb4c 	bl	8002138 <HAL_Delay>
	 while(dato_recivido == false)
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <wait+0x30>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	4053      	eors	r3, r2
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d1f1      	bne.n	8000a92 <wait+0x6>
	 }
}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	08007af8 	.word	0x08007af8
 8000abc:	20000b48 	.word	0x20000b48

08000ac0 <update_firmware>:

uint32_t update_firmware (void)
{
 8000ac0:	b5b0      	push	{r4, r5, r7, lr}
 8000ac2:	b08e      	sub	sp, #56	; 0x38
 8000ac4:	af00      	add	r7, sp, #0
	 uint32_t err = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	637b      	str	r3, [r7, #52]	; 0x34
	 //uint8_t len=0;
	 uint8_t buffer[10];
	 uint8_t strnum[10];
	 uint8_t OK[3] = {0x4F,0x4B,0x20};
 8000aca:	2310      	movs	r3, #16
 8000acc:	18fb      	adds	r3, r7, r3
 8000ace:	4a87      	ldr	r2, [pc, #540]	; (8000cec <update_firmware+0x22c>)
 8000ad0:	8811      	ldrh	r1, [r2, #0]
 8000ad2:	8019      	strh	r1, [r3, #0]
 8000ad4:	7892      	ldrb	r2, [r2, #2]
 8000ad6:	709a      	strb	r2, [r3, #2]
	 uint8_t ERR[4] = {0x45,0x52,0x52,0x20};
 8000ad8:	230c      	movs	r3, #12
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	4a84      	ldr	r2, [pc, #528]	; (8000cf0 <update_firmware+0x230>)
 8000ade:	601a      	str	r2, [r3, #0]
	 uint32_t cmd7 [2] = {0x00,0x00};
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	605a      	str	r2, [r3, #4]
	 clear_loader_rom();
 8000aec:	f7ff fe64 	bl	80007b8 <clear_loader_rom>
	 HAL_UART_Transmit(&huart2,"FZ\n", (sizeof("FZ\n")-1),500);// begin
 8000af0:	23fa      	movs	r3, #250	; 0xfa
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	497f      	ldr	r1, [pc, #508]	; (8000cf4 <update_firmware+0x234>)
 8000af6:	4880      	ldr	r0, [pc, #512]	; (8000cf8 <update_firmware+0x238>)
 8000af8:	2203      	movs	r2, #3
 8000afa:	f003 fbeb 	bl	80042d4 <HAL_UART_Transmit>
	 printf("\r Send FZ ... \r\n");
 8000afe:	4b7f      	ldr	r3, [pc, #508]	; (8000cfc <update_firmware+0x23c>)
 8000b00:	0018      	movs	r0, r3
 8000b02:	f005 fcdf 	bl	80064c4 <puts>
	 wait();
 8000b06:	f7ff ffc1 	bl	8000a8c <wait>
	 dato_recivido = false;
 8000b0a:	4b7d      	ldr	r3, [pc, #500]	; (8000d00 <update_firmware+0x240>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
 8000b10:	4b7c      	ldr	r3, [pc, #496]	; (8000d04 <update_firmware+0x244>)
 8000b12:	681a      	ldr	r2, [r3, #0]

	memcpy(&FW_SIZE,&rx_buff[0],4);
 8000b14:	4b7c      	ldr	r3, [pc, #496]	; (8000d08 <update_firmware+0x248>)
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	4b7a      	ldr	r3, [pc, #488]	; (8000d04 <update_firmware+0x244>)
 8000b1a:	685a      	ldr	r2, [r3, #4]
	memcpy(&CRC_16,&rx_buff[4],4);
 8000b1c:	4b7b      	ldr	r3, [pc, #492]	; (8000d0c <update_firmware+0x24c>)
 8000b1e:	601a      	str	r2, [r3, #0]
	pages = (uint32_t)(FW_SIZE/512);
 8000b20:	4b79      	ldr	r3, [pc, #484]	; (8000d08 <update_firmware+0x248>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	0a5a      	lsrs	r2, r3, #9
 8000b26:	4b7a      	ldr	r3, [pc, #488]	; (8000d10 <update_firmware+0x250>)
 8000b28:	601a      	str	r2, [r3, #0]
	n_bytes = 512*pages;
 8000b2a:	4b79      	ldr	r3, [pc, #484]	; (8000d10 <update_firmware+0x250>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	025a      	lsls	r2, r3, #9
 8000b30:	4b78      	ldr	r3, [pc, #480]	; (8000d14 <update_firmware+0x254>)
 8000b32:	601a      	str	r2, [r3, #0]
	offset = FW_SIZE - n_bytes;
 8000b34:	4b74      	ldr	r3, [pc, #464]	; (8000d08 <update_firmware+0x248>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b76      	ldr	r3, [pc, #472]	; (8000d14 <update_firmware+0x254>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	1ad2      	subs	r2, r2, r3
 8000b3e:	4b76      	ldr	r3, [pc, #472]	; (8000d18 <update_firmware+0x258>)
 8000b40:	601a      	str	r2, [r3, #0]
	printf(" \r fw_size: %lX \n",FW_SIZE);
 8000b42:	4b71      	ldr	r3, [pc, #452]	; (8000d08 <update_firmware+0x248>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	4b75      	ldr	r3, [pc, #468]	; (8000d1c <update_firmware+0x25c>)
 8000b48:	0011      	movs	r1, r2
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f005 fc2e 	bl	80063ac <iprintf>
	printf(" \r crc_app: %lX \n",CRC_16);
 8000b50:	4b6e      	ldr	r3, [pc, #440]	; (8000d0c <update_firmware+0x24c>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b72      	ldr	r3, [pc, #456]	; (8000d20 <update_firmware+0x260>)
 8000b56:	0011      	movs	r1, r2
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f005 fc27 	bl	80063ac <iprintf>
	printf(" \r pages: %ld \n",pages);
 8000b5e:	4b6c      	ldr	r3, [pc, #432]	; (8000d10 <update_firmware+0x250>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	4b70      	ldr	r3, [pc, #448]	; (8000d24 <update_firmware+0x264>)
 8000b64:	0011      	movs	r1, r2
 8000b66:	0018      	movs	r0, r3
 8000b68:	f005 fc20 	bl	80063ac <iprintf>
	printf(" \r n_bytes: %ld \n",n_bytes);
 8000b6c:	4b69      	ldr	r3, [pc, #420]	; (8000d14 <update_firmware+0x254>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b6d      	ldr	r3, [pc, #436]	; (8000d28 <update_firmware+0x268>)
 8000b72:	0011      	movs	r1, r2
 8000b74:	0018      	movs	r0, r3
 8000b76:	f005 fc19 	bl	80063ac <iprintf>
	printf(" \r offset: %ld \n",offset);
 8000b7a:	4b67      	ldr	r3, [pc, #412]	; (8000d18 <update_firmware+0x258>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b6b      	ldr	r3, [pc, #428]	; (8000d2c <update_firmware+0x26c>)
 8000b80:	0011      	movs	r1, r2
 8000b82:	0018      	movs	r0, r3
 8000b84:	f005 fc12 	bl	80063ac <iprintf>
	HAL_UART_Transmit(&huart2,"OK\n", (sizeof("OK\n")-1),500);
 8000b88:	23fa      	movs	r3, #250	; 0xfa
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	4968      	ldr	r1, [pc, #416]	; (8000d30 <update_firmware+0x270>)
 8000b8e:	485a      	ldr	r0, [pc, #360]	; (8000cf8 <update_firmware+0x238>)
 8000b90:	2203      	movs	r2, #3
 8000b92:	f003 fb9f 	bl	80042d4 <HAL_UART_Transmit>
	memset(rx_buff,'\0',sizeof(rx_buff));
 8000b96:	2382      	movs	r3, #130	; 0x82
 8000b98:	009a      	lsls	r2, r3, #2
 8000b9a:	4b5a      	ldr	r3, [pc, #360]	; (8000d04 <update_firmware+0x244>)
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f005 fbfb 	bl	800639a <memset>
	wait();
 8000ba4:	f7ff ff72 	bl	8000a8c <wait>
	 dato_recivido = false;
 8000ba8:	4b55      	ldr	r3, [pc, #340]	; (8000d00 <update_firmware+0x240>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]

	 printf(" \r Starting loader.......... \r\n");
 8000bae:	4b61      	ldr	r3, [pc, #388]	; (8000d34 <update_firmware+0x274>)
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f005 fc87 	bl	80064c4 <puts>
	int i =0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	633b      	str	r3, [r7, #48]	; 0x30
	while( i<=pages-1)
 8000bba:	e10e      	b.n	8000dda <update_firmware+0x31a>
 8000bbc:	4b51      	ldr	r3, [pc, #324]	; (8000d04 <update_firmware+0x244>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
	{
		memcpy(&index_page,&rx_buff[0],4);
 8000bc0:	4b5d      	ldr	r3, [pc, #372]	; (8000d38 <update_firmware+0x278>)
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	4b4f      	ldr	r3, [pc, #316]	; (8000d04 <update_firmware+0x244>)
 8000bc6:	685a      	ldr	r2, [r3, #4]
		memcpy(&crc_part,&rx_buff[4],4);
 8000bc8:	4b5c      	ldr	r3, [pc, #368]	; (8000d3c <update_firmware+0x27c>)
 8000bca:	601a      	str	r2, [r3, #0]
		printf(" \r index: %lX \n",index_page);
 8000bcc:	4b5a      	ldr	r3, [pc, #360]	; (8000d38 <update_firmware+0x278>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b5b      	ldr	r3, [pc, #364]	; (8000d40 <update_firmware+0x280>)
 8000bd2:	0011      	movs	r1, r2
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f005 fbe9 	bl	80063ac <iprintf>
		printf(" \r crc_part: %lX \n",crc_part);
 8000bda:	4b58      	ldr	r3, [pc, #352]	; (8000d3c <update_firmware+0x27c>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	4b59      	ldr	r3, [pc, #356]	; (8000d44 <update_firmware+0x284>)
 8000be0:	0011      	movs	r1, r2
 8000be2:	0018      	movs	r0, r3
 8000be4:	f005 fbe2 	bl	80063ac <iprintf>
		crc = CRC16_X25(&rx_buff[8], 512, 0);
 8000be8:	2380      	movs	r3, #128	; 0x80
 8000bea:	0099      	lsls	r1, r3, #2
 8000bec:	4b56      	ldr	r3, [pc, #344]	; (8000d48 <update_firmware+0x288>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f7ff fd15 	bl	8000620 <CRC16_X25>
 8000bf6:	0003      	movs	r3, r0
 8000bf8:	001a      	movs	r2, r3
 8000bfa:	4b54      	ldr	r3, [pc, #336]	; (8000d4c <update_firmware+0x28c>)
 8000bfc:	801a      	strh	r2, [r3, #0]
		crc_rec = CRC16_X25(&rx_buff[8], 512, crc_rec);
 8000bfe:	4b54      	ldr	r3, [pc, #336]	; (8000d50 <update_firmware+0x290>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	0099      	lsls	r1, r3, #2
 8000c08:	4b4f      	ldr	r3, [pc, #316]	; (8000d48 <update_firmware+0x288>)
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f7ff fd08 	bl	8000620 <CRC16_X25>
 8000c10:	0003      	movs	r3, r0
 8000c12:	001a      	movs	r2, r3
 8000c14:	4b4e      	ldr	r3, [pc, #312]	; (8000d50 <update_firmware+0x290>)
 8000c16:	601a      	str	r2, [r3, #0]
		printf(" \r crc computed: %X \r\n",crc);
 8000c18:	4b4c      	ldr	r3, [pc, #304]	; (8000d4c <update_firmware+0x28c>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	4b4d      	ldr	r3, [pc, #308]	; (8000d54 <update_firmware+0x294>)
 8000c20:	0011      	movs	r1, r2
 8000c22:	0018      	movs	r0, r3
 8000c24:	f005 fbc2 	bl	80063ac <iprintf>
		printf(" \r crc_rec: %lX \r\n",crc_rec);
 8000c28:	4b49      	ldr	r3, [pc, #292]	; (8000d50 <update_firmware+0x290>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b4a      	ldr	r3, [pc, #296]	; (8000d58 <update_firmware+0x298>)
 8000c2e:	0011      	movs	r1, r2
 8000c30:	0018      	movs	r0, r3
 8000c32:	f005 fbbb 	bl	80063ac <iprintf>

		if(crc == crc_part)
 8000c36:	4b45      	ldr	r3, [pc, #276]	; (8000d4c <update_firmware+0x28c>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	001a      	movs	r2, r3
 8000c3c:	4b3f      	ldr	r3, [pc, #252]	; (8000d3c <update_firmware+0x27c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d000      	beq.n	8000c46 <update_firmware+0x186>
 8000c44:	e090      	b.n	8000d68 <update_firmware+0x2a8>
		{
			a = write(&rx_buff[8],a);
 8000c46:	4b45      	ldr	r3, [pc, #276]	; (8000d5c <update_firmware+0x29c>)
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	001a      	movs	r2, r3
 8000c4c:	4b3e      	ldr	r3, [pc, #248]	; (8000d48 <update_firmware+0x288>)
 8000c4e:	0011      	movs	r1, r2
 8000c50:	0018      	movs	r0, r3
 8000c52:	f7ff fd1d 	bl	8000690 <write>
 8000c56:	0003      	movs	r3, r0
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	4b40      	ldr	r3, [pc, #256]	; (8000d5c <update_firmware+0x29c>)
 8000c5c:	801a      	strh	r2, [r3, #0]

		  memset(buffer,'\0',sizeof(buffer));
 8000c5e:	2420      	movs	r4, #32
 8000c60:	193b      	adds	r3, r7, r4
 8000c62:	220a      	movs	r2, #10
 8000c64:	2100      	movs	r1, #0
 8000c66:	0018      	movs	r0, r3
 8000c68:	f005 fb97 	bl	800639a <memset>
		  memset(strnum,'\0',sizeof(strnum));
 8000c6c:	2514      	movs	r5, #20
 8000c6e:	197b      	adds	r3, r7, r5
 8000c70:	220a      	movs	r2, #10
 8000c72:	2100      	movs	r1, #0
 8000c74:	0018      	movs	r0, r3
 8000c76:	f005 fb90 	bl	800639a <memset>
		  snprintf(strnum,sizeof(strnum), "%ld",index_page);
 8000c7a:	4b2f      	ldr	r3, [pc, #188]	; (8000d38 <update_firmware+0x278>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a38      	ldr	r2, [pc, #224]	; (8000d60 <update_firmware+0x2a0>)
 8000c80:	1978      	adds	r0, r7, r5
 8000c82:	210a      	movs	r1, #10
 8000c84:	f005 fcf0 	bl	8006668 <sniprintf>
		  //printf("strnum: %s, len: %d \n",strnum,strlen(strnum));
		  memcpy(&buffer[0], OK, sizeof(OK));
 8000c88:	193a      	adds	r2, r7, r4
 8000c8a:	2310      	movs	r3, #16
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	0010      	movs	r0, r2
 8000c90:	0019      	movs	r1, r3
 8000c92:	2303      	movs	r3, #3
 8000c94:	001a      	movs	r2, r3
 8000c96:	f005 fb77 	bl	8006388 <memcpy>
		  memcpy(&buffer[sizeof(OK)], strnum,strlen(strnum));
 8000c9a:	197b      	adds	r3, r7, r5
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f7ff fa2f 	bl	8000100 <strlen>
 8000ca2:	0002      	movs	r2, r0
 8000ca4:	1979      	adds	r1, r7, r5
 8000ca6:	193b      	adds	r3, r7, r4
 8000ca8:	3303      	adds	r3, #3
 8000caa:	0018      	movs	r0, r3
 8000cac:	f005 fb6c 	bl	8006388 <memcpy>
		  printf(" \r %s\r\n",buffer);
 8000cb0:	193a      	adds	r2, r7, r4
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	; (8000d64 <update_firmware+0x2a4>)
 8000cb4:	0011      	movs	r1, r2
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f005 fb78 	bl	80063ac <iprintf>
		  HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer),500);
 8000cbc:	193b      	adds	r3, r7, r4
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f7ff fa1e 	bl	8000100 <strlen>
 8000cc4:	0003      	movs	r3, r0
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	23fa      	movs	r3, #250	; 0xfa
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	1939      	adds	r1, r7, r4
 8000cce:	480a      	ldr	r0, [pc, #40]	; (8000cf8 <update_firmware+0x238>)
 8000cd0:	f003 fb00 	bl	80042d4 <HAL_UART_Transmit>
			wait();
 8000cd4:	f7ff feda 	bl	8000a8c <wait>
			dato_recivido = false;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <update_firmware+0x240>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
			err = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	637b      	str	r3, [r7, #52]	; 0x34
			i++;
 8000ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
 8000ce8:	e077      	b.n	8000dda <update_firmware+0x31a>
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	08007cf0 	.word	0x08007cf0
 8000cf0:	20525245 	.word	0x20525245
 8000cf4:	08007b08 	.word	0x08007b08
 8000cf8:	20000a10 	.word	0x20000a10
 8000cfc:	08007b0c 	.word	0x08007b0c
 8000d00:	20000b48 	.word	0x20000b48
 8000d04:	20000b58 	.word	0x20000b58
 8000d08:	20000d60 	.word	0x20000d60
 8000d0c:	20000d64 	.word	0x20000d64
 8000d10:	20000b4c 	.word	0x20000b4c
 8000d14:	20000b54 	.word	0x20000b54
 8000d18:	20000b50 	.word	0x20000b50
 8000d1c:	08007b1c 	.word	0x08007b1c
 8000d20:	08007b30 	.word	0x08007b30
 8000d24:	08007b44 	.word	0x08007b44
 8000d28:	08007b54 	.word	0x08007b54
 8000d2c:	08007b68 	.word	0x08007b68
 8000d30:	08007b7c 	.word	0x08007b7c
 8000d34:	08007b80 	.word	0x08007b80
 8000d38:	20000d68 	.word	0x20000d68
 8000d3c:	20000d78 	.word	0x20000d78
 8000d40:	08007ba0 	.word	0x08007ba0
 8000d44:	08007bb0 	.word	0x08007bb0
 8000d48:	20000b60 	.word	0x20000b60
 8000d4c:	20000d6c 	.word	0x20000d6c
 8000d50:	20000d7c 	.word	0x20000d7c
 8000d54:	08007bc4 	.word	0x08007bc4
 8000d58:	08007bdc 	.word	0x08007bdc
 8000d5c:	20000d70 	.word	0x20000d70
 8000d60:	08007bf0 	.word	0x08007bf0
 8000d64:	08007bf4 	.word	0x08007bf4
		}
		else
		{
			err = 1;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	637b      	str	r3, [r7, #52]	; 0x34
			i = i;
			memset(buffer,'\0',sizeof(buffer));
 8000d6c:	2420      	movs	r4, #32
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	220a      	movs	r2, #10
 8000d72:	2100      	movs	r1, #0
 8000d74:	0018      	movs	r0, r3
 8000d76:	f005 fb10 	bl	800639a <memset>
		  memset(strnum,'\0',sizeof(strnum));
 8000d7a:	2514      	movs	r5, #20
 8000d7c:	197b      	adds	r3, r7, r5
 8000d7e:	220a      	movs	r2, #10
 8000d80:	2100      	movs	r1, #0
 8000d82:	0018      	movs	r0, r3
 8000d84:	f005 fb09 	bl	800639a <memset>
		  snprintf(strnum,sizeof(strnum), "%ld",index_page);
 8000d88:	4bc7      	ldr	r3, [pc, #796]	; (80010a8 <update_firmware+0x5e8>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4ac7      	ldr	r2, [pc, #796]	; (80010ac <update_firmware+0x5ec>)
 8000d8e:	1978      	adds	r0, r7, r5
 8000d90:	210a      	movs	r1, #10
 8000d92:	f005 fc69 	bl	8006668 <sniprintf>
		  memcpy(&buffer[0], ERR, sizeof(ERR));
 8000d96:	193b      	adds	r3, r7, r4
 8000d98:	220c      	movs	r2, #12
 8000d9a:	18ba      	adds	r2, r7, r2
 8000d9c:	6812      	ldr	r2, [r2, #0]
 8000d9e:	601a      	str	r2, [r3, #0]
		  memcpy(&buffer[sizeof(ERR)], strnum,strlen(strnum));
 8000da0:	197b      	adds	r3, r7, r5
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff f9ac 	bl	8000100 <strlen>
 8000da8:	0002      	movs	r2, r0
 8000daa:	1979      	adds	r1, r7, r5
 8000dac:	193b      	adds	r3, r7, r4
 8000dae:	3304      	adds	r3, #4
 8000db0:	0018      	movs	r0, r3
 8000db2:	f005 fae9 	bl	8006388 <memcpy>
		  printf(" \r buffer: %s\r\n",buffer);
 8000db6:	193a      	adds	r2, r7, r4
 8000db8:	4bbd      	ldr	r3, [pc, #756]	; (80010b0 <update_firmware+0x5f0>)
 8000dba:	0011      	movs	r1, r2
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f005 faf5 	bl	80063ac <iprintf>
		  HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer),500);
 8000dc2:	193b      	adds	r3, r7, r4
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f7ff f99b 	bl	8000100 <strlen>
 8000dca:	0003      	movs	r3, r0
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	23fa      	movs	r3, #250	; 0xfa
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	1939      	adds	r1, r7, r4
 8000dd4:	48b7      	ldr	r0, [pc, #732]	; (80010b4 <update_firmware+0x5f4>)
 8000dd6:	f003 fa7d 	bl	80042d4 <HAL_UART_Transmit>
	while( i<=pages-1)
 8000dda:	4bb7      	ldr	r3, [pc, #732]	; (80010b8 <update_firmware+0x5f8>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	1e5a      	subs	r2, r3, #1
 8000de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d300      	bcc.n	8000de8 <update_firmware+0x328>
 8000de6:	e6e9      	b.n	8000bbc <update_firmware+0xfc>
		  //return -1;
		}

	}// end while
	if(offset!=0)
 8000de8:	4bb4      	ldr	r3, [pc, #720]	; (80010bc <update_firmware+0x5fc>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d100      	bne.n	8000df2 <update_firmware+0x332>
 8000df0:	e106      	b.n	8001000 <update_firmware+0x540>
	{
		printf(" \r --------------Last Page ----------- \n");
 8000df2:	4bb3      	ldr	r3, [pc, #716]	; (80010c0 <update_firmware+0x600>)
 8000df4:	0018      	movs	r0, r3
 8000df6:	f005 fb65 	bl	80064c4 <puts>
 8000dfa:	4bb2      	ldr	r3, [pc, #712]	; (80010c4 <update_firmware+0x604>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
		memcpy(&index_page,&rx_buff[0],4);
 8000dfe:	4baa      	ldr	r3, [pc, #680]	; (80010a8 <update_firmware+0x5e8>)
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	4bb0      	ldr	r3, [pc, #704]	; (80010c4 <update_firmware+0x604>)
 8000e04:	685a      	ldr	r2, [r3, #4]
		memcpy(&crc_part,&rx_buff[4],4);
 8000e06:	4bb0      	ldr	r3, [pc, #704]	; (80010c8 <update_firmware+0x608>)
 8000e08:	601a      	str	r2, [r3, #0]
		printf(" \r index: %lX \n",index_page);
 8000e0a:	4ba7      	ldr	r3, [pc, #668]	; (80010a8 <update_firmware+0x5e8>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4baf      	ldr	r3, [pc, #700]	; (80010cc <update_firmware+0x60c>)
 8000e10:	0011      	movs	r1, r2
 8000e12:	0018      	movs	r0, r3
 8000e14:	f005 faca 	bl	80063ac <iprintf>
		printf(" \r crc_part: %lX \n",crc_part);
 8000e18:	4bab      	ldr	r3, [pc, #684]	; (80010c8 <update_firmware+0x608>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4bac      	ldr	r3, [pc, #688]	; (80010d0 <update_firmware+0x610>)
 8000e1e:	0011      	movs	r1, r2
 8000e20:	0018      	movs	r0, r3
 8000e22:	f005 fac3 	bl	80063ac <iprintf>
		crc = CRC16_X25(&rx_buff[8], offset, 0);//offset
 8000e26:	4ba5      	ldr	r3, [pc, #660]	; (80010bc <update_firmware+0x5fc>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	b299      	uxth	r1, r3
 8000e2c:	4ba9      	ldr	r3, [pc, #676]	; (80010d4 <update_firmware+0x614>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	0018      	movs	r0, r3
 8000e32:	f7ff fbf5 	bl	8000620 <CRC16_X25>
 8000e36:	0003      	movs	r3, r0
 8000e38:	001a      	movs	r2, r3
 8000e3a:	4ba7      	ldr	r3, [pc, #668]	; (80010d8 <update_firmware+0x618>)
 8000e3c:	801a      	strh	r2, [r3, #0]
		crc_rec = CRC16_X25(&rx_buff[8], offset, crc_rec);
 8000e3e:	4b9f      	ldr	r3, [pc, #636]	; (80010bc <update_firmware+0x5fc>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	b299      	uxth	r1, r3
 8000e44:	4ba5      	ldr	r3, [pc, #660]	; (80010dc <update_firmware+0x61c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	4ba2      	ldr	r3, [pc, #648]	; (80010d4 <update_firmware+0x614>)
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff fbe7 	bl	8000620 <CRC16_X25>
 8000e52:	0003      	movs	r3, r0
 8000e54:	001a      	movs	r2, r3
 8000e56:	4ba1      	ldr	r3, [pc, #644]	; (80010dc <update_firmware+0x61c>)
 8000e58:	601a      	str	r2, [r3, #0]
		printf(" \r crc computed: %X \r\n",crc);
 8000e5a:	4b9f      	ldr	r3, [pc, #636]	; (80010d8 <update_firmware+0x618>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	001a      	movs	r2, r3
 8000e60:	4b9f      	ldr	r3, [pc, #636]	; (80010e0 <update_firmware+0x620>)
 8000e62:	0011      	movs	r1, r2
 8000e64:	0018      	movs	r0, r3
 8000e66:	f005 faa1 	bl	80063ac <iprintf>
		printf(" \r crc_rec: %lX \r\n",crc_rec);
 8000e6a:	4b9c      	ldr	r3, [pc, #624]	; (80010dc <update_firmware+0x61c>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	4b9d      	ldr	r3, [pc, #628]	; (80010e4 <update_firmware+0x624>)
 8000e70:	0011      	movs	r1, r2
 8000e72:	0018      	movs	r0, r3
 8000e74:	f005 fa9a 	bl	80063ac <iprintf>


		if(crc == crc_part)
 8000e78:	4b97      	ldr	r3, [pc, #604]	; (80010d8 <update_firmware+0x618>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	001a      	movs	r2, r3
 8000e7e:	4b92      	ldr	r3, [pc, #584]	; (80010c8 <update_firmware+0x608>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d000      	beq.n	8000e88 <update_firmware+0x3c8>
 8000e86:	e082      	b.n	8000f8e <update_firmware+0x4ce>
		{
			a = write(&rx_buff[8],a);
 8000e88:	4b97      	ldr	r3, [pc, #604]	; (80010e8 <update_firmware+0x628>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	001a      	movs	r2, r3
 8000e8e:	4b91      	ldr	r3, [pc, #580]	; (80010d4 <update_firmware+0x614>)
 8000e90:	0011      	movs	r1, r2
 8000e92:	0018      	movs	r0, r3
 8000e94:	f7ff fbfc 	bl	8000690 <write>
 8000e98:	0003      	movs	r3, r0
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	4b92      	ldr	r3, [pc, #584]	; (80010e8 <update_firmware+0x628>)
 8000e9e:	801a      	strh	r2, [r3, #0]

		  memset(buffer,'\0',sizeof(buffer));
 8000ea0:	2420      	movs	r4, #32
 8000ea2:	193b      	adds	r3, r7, r4
 8000ea4:	220a      	movs	r2, #10
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f005 fa76 	bl	800639a <memset>
		  memset(strnum,'\0',sizeof(strnum));
 8000eae:	2514      	movs	r5, #20
 8000eb0:	197b      	adds	r3, r7, r5
 8000eb2:	220a      	movs	r2, #10
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f005 fa6f 	bl	800639a <memset>
		  snprintf(strnum,sizeof(strnum), "%d",index_page);
 8000ebc:	4b7a      	ldr	r3, [pc, #488]	; (80010a8 <update_firmware+0x5e8>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a8a      	ldr	r2, [pc, #552]	; (80010ec <update_firmware+0x62c>)
 8000ec2:	1978      	adds	r0, r7, r5
 8000ec4:	210a      	movs	r1, #10
 8000ec6:	f005 fbcf 	bl	8006668 <sniprintf>
		  //printf("strnum: %s, len: %d \n",strnum,strlen(strnum));
		  memcpy(&buffer[0], OK, sizeof(OK));
 8000eca:	193a      	adds	r2, r7, r4
 8000ecc:	2310      	movs	r3, #16
 8000ece:	18fb      	adds	r3, r7, r3
 8000ed0:	0010      	movs	r0, r2
 8000ed2:	0019      	movs	r1, r3
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	001a      	movs	r2, r3
 8000ed8:	f005 fa56 	bl	8006388 <memcpy>
		  memcpy(&buffer[sizeof(OK)], strnum,strlen(strnum));
 8000edc:	197b      	adds	r3, r7, r5
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f7ff f90e 	bl	8000100 <strlen>
 8000ee4:	0002      	movs	r2, r0
 8000ee6:	1979      	adds	r1, r7, r5
 8000ee8:	193b      	adds	r3, r7, r4
 8000eea:	3303      	adds	r3, #3
 8000eec:	0018      	movs	r0, r3
 8000eee:	f005 fa4b 	bl	8006388 <memcpy>
		  printf(" \r buffer: %s\r\n",buffer);
 8000ef2:	193a      	adds	r2, r7, r4
 8000ef4:	4b6e      	ldr	r3, [pc, #440]	; (80010b0 <update_firmware+0x5f0>)
 8000ef6:	0011      	movs	r1, r2
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f005 fa57 	bl	80063ac <iprintf>
		  HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer),500);
 8000efe:	193b      	adds	r3, r7, r4
 8000f00:	0018      	movs	r0, r3
 8000f02:	f7ff f8fd 	bl	8000100 <strlen>
 8000f06:	0003      	movs	r3, r0
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	23fa      	movs	r3, #250	; 0xfa
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	1939      	adds	r1, r7, r4
 8000f10:	4868      	ldr	r0, [pc, #416]	; (80010b4 <update_firmware+0x5f4>)
 8000f12:	f003 f9df 	bl	80042d4 <HAL_UART_Transmit>
		  cmd7[0] = crc_rec;
 8000f16:	4b71      	ldr	r3, [pc, #452]	; (80010dc <update_firmware+0x61c>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	601a      	str	r2, [r3, #0]
		  cmd7[1] = 0xFFFFFFFF;
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2201      	movs	r2, #1
 8000f22:	4252      	negs	r2, r2
 8000f24:	605a      	str	r2, [r3, #4]
		  printf("\r ************************************* \r\n");
 8000f26:	4b72      	ldr	r3, [pc, #456]	; (80010f0 <update_firmware+0x630>)
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f005 facb 	bl	80064c4 <puts>
		  printf(" \r crc rec: %lX \r\n",crc_rec);
 8000f2e:	4b6b      	ldr	r3, [pc, #428]	; (80010dc <update_firmware+0x61c>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	4b70      	ldr	r3, [pc, #448]	; (80010f4 <update_firmware+0x634>)
 8000f34:	0011      	movs	r1, r2
 8000f36:	0018      	movs	r0, r3
 8000f38:	f005 fa38 	bl	80063ac <iprintf>
		  printf(" \r crc_app: %lX \n",CRC_16);
 8000f3c:	4b6e      	ldr	r3, [pc, #440]	; (80010f8 <update_firmware+0x638>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b6e      	ldr	r3, [pc, #440]	; (80010fc <update_firmware+0x63c>)
 8000f42:	0011      	movs	r1, r2
 8000f44:	0018      	movs	r0, r3
 8000f46:	f005 fa31 	bl	80063ac <iprintf>
		  printf("\r ************************************* \r\n");
 8000f4a:	4b69      	ldr	r3, [pc, #420]	; (80010f0 <update_firmware+0x630>)
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f005 fab9 	bl	80064c4 <puts>
		  HAL_Delay(200);
 8000f52:	20c8      	movs	r0, #200	; 0xc8
 8000f54:	f001 f8f0 	bl	8002138 <HAL_Delay>
		  HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 8000f58:	23fa      	movs	r3, #250	; 0xfa
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	1d39      	adds	r1, r7, #4
 8000f5e:	4855      	ldr	r0, [pc, #340]	; (80010b4 <update_firmware+0x5f4>)
 8000f60:	2208      	movs	r2, #8
 8000f62:	f003 f9b7 	bl	80042d4 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 8000f66:	23fa      	movs	r3, #250	; 0xfa
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	1d39      	adds	r1, r7, #4
 8000f6c:	4851      	ldr	r0, [pc, #324]	; (80010b4 <update_firmware+0x5f4>)
 8000f6e:	2208      	movs	r2, #8
 8000f70:	f003 f9b0 	bl	80042d4 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 8000f74:	23fa      	movs	r3, #250	; 0xfa
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	1d39      	adds	r1, r7, #4
 8000f7a:	484e      	ldr	r0, [pc, #312]	; (80010b4 <update_firmware+0x5f4>)
 8000f7c:	2208      	movs	r2, #8
 8000f7e:	f003 f9a9 	bl	80042d4 <HAL_UART_Transmit>
		//wait();
		dato_recivido = false;
 8000f82:	4b5f      	ldr	r3, [pc, #380]	; (8001100 <update_firmware+0x640>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
		err = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8000f8c:	e038      	b.n	8001000 <update_firmware+0x540>
		}
		else{
			err = 1;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	637b      	str	r3, [r7, #52]	; 0x34
			memset(buffer,'\0',sizeof(buffer));
 8000f92:	2420      	movs	r4, #32
 8000f94:	193b      	adds	r3, r7, r4
 8000f96:	220a      	movs	r2, #10
 8000f98:	2100      	movs	r1, #0
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f005 f9fd 	bl	800639a <memset>
			  memset(strnum,'\0',sizeof(strnum));
 8000fa0:	2514      	movs	r5, #20
 8000fa2:	197b      	adds	r3, r7, r5
 8000fa4:	220a      	movs	r2, #10
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f005 f9f6 	bl	800639a <memset>
			  snprintf(strnum,sizeof(strnum), "%d",index_page);
 8000fae:	4b3e      	ldr	r3, [pc, #248]	; (80010a8 <update_firmware+0x5e8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a4e      	ldr	r2, [pc, #312]	; (80010ec <update_firmware+0x62c>)
 8000fb4:	1978      	adds	r0, r7, r5
 8000fb6:	210a      	movs	r1, #10
 8000fb8:	f005 fb56 	bl	8006668 <sniprintf>
			  memcpy(&buffer[0], ERR, sizeof(ERR));
 8000fbc:	193b      	adds	r3, r7, r4
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	18ba      	adds	r2, r7, r2
 8000fc2:	6812      	ldr	r2, [r2, #0]
 8000fc4:	601a      	str	r2, [r3, #0]
			  memcpy(&buffer[sizeof(ERR)], strnum,strlen(strnum));
 8000fc6:	197b      	adds	r3, r7, r5
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f7ff f899 	bl	8000100 <strlen>
 8000fce:	0002      	movs	r2, r0
 8000fd0:	1979      	adds	r1, r7, r5
 8000fd2:	193b      	adds	r3, r7, r4
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f005 f9d6 	bl	8006388 <memcpy>
			  printf(" \r buffer: %s\r\n",buffer);
 8000fdc:	193a      	adds	r2, r7, r4
 8000fde:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <update_firmware+0x5f0>)
 8000fe0:	0011      	movs	r1, r2
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f005 f9e2 	bl	80063ac <iprintf>
			  HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer),500);
 8000fe8:	193b      	adds	r3, r7, r4
 8000fea:	0018      	movs	r0, r3
 8000fec:	f7ff f888 	bl	8000100 <strlen>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	23fa      	movs	r3, #250	; 0xfa
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	1939      	adds	r1, r7, r4
 8000ffa:	482e      	ldr	r0, [pc, #184]	; (80010b4 <update_firmware+0x5f4>)
 8000ffc:	f003 f96a 	bl	80042d4 <HAL_UART_Transmit>
			  //return -1;
		}
	}// offset

//---------------- Validate -------------------------
	const image_hdr_t *hdr = NULL;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
	hdr = image_get_header(IMAGE_SLOT_2);//magic
 8001004:	2002      	movs	r0, #2
 8001006:	f7ff fa63 	bl	80004d0 <image_get_header>
 800100a:	0003      	movs	r3, r0
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (hdr == NULL)
 800100e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001010:	2b00      	cmp	r3, #0
 8001012:	d106      	bne.n	8001022 <update_firmware+0x562>
	{
		printf("Magic incorrect \r\n");
 8001014:	4b3b      	ldr	r3, [pc, #236]	; (8001104 <update_firmware+0x644>)
 8001016:	0018      	movs	r0, r3
 8001018:	f005 fa54 	bl	80064c4 <puts>
		err =  -1;
 800101c:	2301      	movs	r3, #1
 800101e:	425b      	negs	r3, r3
 8001020:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (image_validate(IMAGE_SLOT_2, hdr) != 0)//crc
 8001022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001024:	0019      	movs	r1, r3
 8001026:	2002      	movs	r0, #2
 8001028:	f7ff fa80 	bl	800052c <image_validate>
 800102c:	1e03      	subs	r3, r0, #0
 800102e:	d006      	beq.n	800103e <update_firmware+0x57e>
	{
		printf("CRC incorrect \r\n");
 8001030:	4b35      	ldr	r3, [pc, #212]	; (8001108 <update_firmware+0x648>)
 8001032:	0018      	movs	r0, r3
 8001034:	f005 fa46 	bl	80064c4 <puts>
		err = -1;
 8001038:	2301      	movs	r3, #1
 800103a:	425b      	negs	r3, r3
 800103c:	637b      	str	r3, [r7, #52]	; 0x34
	}//*/
// -------------------------- Clone ----------------------------
	printf("Check Slot 2 \r\n");
 800103e:	4b33      	ldr	r3, [pc, #204]	; (800110c <update_firmware+0x64c>)
 8001040:	0018      	movs	r0, r3
 8001042:	f005 fa3f 	bl	80064c4 <puts>
	HAL_Delay(4000);
 8001046:	23fa      	movs	r3, #250	; 0xfa
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	0018      	movs	r0, r3
 800104c:	f001 f874 	bl	8002138 <HAL_Delay>
	printf("Ready to write to  Slot 1 \r\n");
 8001050:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <update_firmware+0x650>)
 8001052:	0018      	movs	r0, r3
 8001054:	f005 fa36 	bl	80064c4 <puts>
	HAL_Delay(4000);
 8001058:	23fa      	movs	r3, #250	; 0xfa
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	0018      	movs	r0, r3
 800105e:	f001 f86b 	bl	8002138 <HAL_Delay>

	if((CRC_16 == crc_rec) && (err == 0))
 8001062:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <update_firmware+0x638>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <update_firmware+0x61c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	d109      	bne.n	8001082 <update_firmware+0x5c2>
 800106e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001070:	2b00      	cmp	r3, #0
 8001072:	d106      	bne.n	8001082 <update_firmware+0x5c2>
		err = clone_rom(FW_SIZE);
 8001074:	4b27      	ldr	r3, [pc, #156]	; (8001114 <update_firmware+0x654>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	0018      	movs	r0, r3
 800107a:	f7ff fc05 	bl	8000888 <clone_rom>
 800107e:	0003      	movs	r3, r0
 8001080:	637b      	str	r3, [r7, #52]	; 0x34
	if ( err == 0)
 8001082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001084:	2b00      	cmp	r3, #0
 8001086:	d105      	bne.n	8001094 <update_firmware+0x5d4>
	{
		printf("UPDATE SUCCESSFULLY\r\n");
 8001088:	4b23      	ldr	r3, [pc, #140]	; (8001118 <update_firmware+0x658>)
 800108a:	0018      	movs	r0, r3
 800108c:	f005 fa1a 	bl	80064c4 <puts>
		return 0;
 8001090:	2300      	movs	r3, #0
 8001092:	e005      	b.n	80010a0 <update_firmware+0x5e0>
	}
	else
	{
		printf("UPDATE FAIL\r\n");
 8001094:	4b21      	ldr	r3, [pc, #132]	; (800111c <update_firmware+0x65c>)
 8001096:	0018      	movs	r0, r3
 8001098:	f005 fa14 	bl	80064c4 <puts>
		return -1;
 800109c:	2301      	movs	r3, #1
 800109e:	425b      	negs	r3, r3
	}//*/

}// get_Firmware()
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b00e      	add	sp, #56	; 0x38
 80010a6:	bdb0      	pop	{r4, r5, r7, pc}
 80010a8:	20000d68 	.word	0x20000d68
 80010ac:	08007bf0 	.word	0x08007bf0
 80010b0:	08007bfc 	.word	0x08007bfc
 80010b4:	20000a10 	.word	0x20000a10
 80010b8:	20000b4c 	.word	0x20000b4c
 80010bc:	20000b50 	.word	0x20000b50
 80010c0:	08007c0c 	.word	0x08007c0c
 80010c4:	20000b58 	.word	0x20000b58
 80010c8:	20000d78 	.word	0x20000d78
 80010cc:	08007ba0 	.word	0x08007ba0
 80010d0:	08007bb0 	.word	0x08007bb0
 80010d4:	20000b60 	.word	0x20000b60
 80010d8:	20000d6c 	.word	0x20000d6c
 80010dc:	20000d7c 	.word	0x20000d7c
 80010e0:	08007bc4 	.word	0x08007bc4
 80010e4:	08007bdc 	.word	0x08007bdc
 80010e8:	20000d70 	.word	0x20000d70
 80010ec:	08007c34 	.word	0x08007c34
 80010f0:	08007c38 	.word	0x08007c38
 80010f4:	08007c64 	.word	0x08007c64
 80010f8:	20000d64 	.word	0x20000d64
 80010fc:	08007b30 	.word	0x08007b30
 8001100:	20000b48 	.word	0x20000b48
 8001104:	08007c78 	.word	0x08007c78
 8001108:	08007c8c 	.word	0x08007c8c
 800110c:	08007c9c 	.word	0x08007c9c
 8001110:	08007cac 	.word	0x08007cac
 8001114:	20000d60 	.word	0x20000d60
 8001118:	08007cc8 	.word	0x08007cc8
 800111c:	08007ce0 	.word	0x08007ce0

08001120 <BootJumpASM>:

__attribute__( (naked, noreturn) ) static void BootJumpASM(uint32_t PC, uint32_t SP) {
	__asm("           \n\
 8001120:	f381 8808 	msr	MSP, r1
 8001124:	4700      	bx	r0
			msr msp, r1 /* load r1 into MSP */\n\
			bx r0       /* branch to the address at r0 */\n\
	");
}
 8001126:	46c0      	nop			; (mov r8, r8)

08001128 <image_start>:

 void image_start(const image_hdr_t *hdr) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8001130:	200f      	movs	r0, #15
 8001132:	183b      	adds	r3, r7, r0
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001138:	b672      	cpsid	i
}
 800113a:	46c0      	nop			; (mov r8, r8)
	/* Disable interrupts */
	//Disable IRQ
	__disable_irq();

	//Disable the system timer
	SysTick->CTRL = 0;
 800113c:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <image_start+0xb8>)
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]

	//Clear the exception pending bit
	SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk ;
 8001142:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <image_start+0xbc>)
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <image_start+0xbc>)
 8001148:	2180      	movs	r1, #128	; 0x80
 800114a:	0489      	lsls	r1, r1, #18
 800114c:	430a      	orrs	r2, r1
 800114e:	605a      	str	r2, [r3, #4]

	//Disable IRQs
    for (i = 0; i < 8; i++) {
 8001150:	183b      	adds	r3, r7, r0
 8001152:	2200      	movs	r2, #0
 8001154:	701a      	strb	r2, [r3, #0]
 8001156:	e015      	b.n	8001184 <image_start+0x5c>
        NVIC->ICER[i] = 0xFFFFFFFF; // disable IRQ
 8001158:	4923      	ldr	r1, [pc, #140]	; (80011e8 <image_start+0xc0>)
 800115a:	200f      	movs	r0, #15
 800115c:	183b      	adds	r3, r7, r0
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	3320      	adds	r3, #32
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	2201      	movs	r2, #1
 8001166:	4252      	negs	r2, r2
 8001168:	505a      	str	r2, [r3, r1]
        NVIC->ICPR[i] = 0xFFFFFFFF; // clear pending IRQ
 800116a:	491f      	ldr	r1, [pc, #124]	; (80011e8 <image_start+0xc0>)
 800116c:	183b      	adds	r3, r7, r0
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	3360      	adds	r3, #96	; 0x60
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	2201      	movs	r2, #1
 8001176:	4252      	negs	r2, r2
 8001178:	505a      	str	r2, [r3, r1]
    for (i = 0; i < 8; i++) {
 800117a:	183b      	adds	r3, r7, r0
 800117c:	781a      	ldrb	r2, [r3, #0]
 800117e:	183b      	adds	r3, r7, r0
 8001180:	3201      	adds	r2, #1
 8001182:	701a      	strb	r2, [r3, #0]
 8001184:	230f      	movs	r3, #15
 8001186:	18fb      	adds	r3, r7, r3
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b07      	cmp	r3, #7
 800118c:	d9e4      	bls.n	8001158 <image_start+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800118e:	f3bf 8f4f 	dsb	sy
}
 8001192:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8001194:	f3bf 8f6f 	isb	sy
}
 8001198:	46c0      	nop			; (mov r8, r8)
	//Barriers
	__DSB();
	__ISB();

	//const DeviceVectors *vectors = (const DeviceVectors *) hdr->vector_addr;
	uint32_t *isr = (uint32_t *)hdr->vector_addr;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	7c1a      	ldrb	r2, [r3, #16]
 800119e:	7c59      	ldrb	r1, [r3, #17]
 80011a0:	0209      	lsls	r1, r1, #8
 80011a2:	430a      	orrs	r2, r1
 80011a4:	7c99      	ldrb	r1, [r3, #18]
 80011a6:	0409      	lsls	r1, r1, #16
 80011a8:	430a      	orrs	r2, r1
 80011aa:	7cdb      	ldrb	r3, [r3, #19]
 80011ac:	061b      	lsls	r3, r3, #24
 80011ae:	4313      	orrs	r3, r2
 80011b0:	60bb      	str	r3, [r7, #8]
    SCB->VTOR = (uint32_t)isr & SCB_VTOR_TBLOFF_Msk;
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <image_start+0xbc>)
 80011b6:	21ff      	movs	r1, #255	; 0xff
 80011b8:	438a      	bics	r2, r1
 80011ba:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80011bc:	f3bf 8f4f 	dsb	sy
}
 80011c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80011c2:	f3bf 8f6f 	isb	sy
}
 80011c6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("cpsie i" : : : "memory");
 80011c8:	b662      	cpsie	i
}
 80011ca:	46c0      	nop			; (mov r8, r8)
	__ISB();

	/* Enable interrrupts */
	__enable_irq();

    BootJumpASM(isr[1], isr[0]);
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	3304      	adds	r3, #4
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	0019      	movs	r1, r3
 80011d8:	0010      	movs	r0, r2
 80011da:	f7ff ffa1 	bl	8001120 <BootJumpASM>
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	e000e010 	.word	0xe000e010
 80011e4:	e000ed00 	.word	0xe000ed00
 80011e8:	e000e100 	.word	0xe000e100

080011ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f2:	f000 ff1b 	bl	800202c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f6:	f000 f933 	bl	8001460 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init_user();
 80011fa:	f000 fb33 	bl	8001864 <MX_GPIO_Init_user>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  MX_USART2_UART_Init();
 80011fe:	f000 fa81 	bl	8001704 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001202:	f000 f975 	bl	80014f0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001206:	f000 f9cd 	bl	80015a4 <MX_TIM3_Init>
  MX_USART5_UART_Init();
 800120a:	f000 fac9 	bl	80017a0 <MX_USART5_UART_Init>
  MX_TIM15_Init();
 800120e:	f000 fa1f 	bl	8001650 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
   RetargetInit(&huart5);
 8001212:	4b7d      	ldr	r3, [pc, #500]	; (8001408 <main+0x21c>)
 8001214:	0018      	movs	r0, r3
 8001216:	f000 fc55 	bl	8001ac4 <RetargetInit>
   /*HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);// BOOT/*/

   printf("\r ------ Start Bootooader ----- \r\n");
 800121a:	4b7c      	ldr	r3, [pc, #496]	; (800140c <main+0x220>)
 800121c:	0018      	movs	r0, r3
 800121e:	f005 f951 	bl	80064c4 <puts>
   HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx_buff, sizeof rx_buff);
 8001222:	2382      	movs	r3, #130	; 0x82
 8001224:	009a      	lsls	r2, r3, #2
 8001226:	497a      	ldr	r1, [pc, #488]	; (8001410 <main+0x224>)
 8001228:	4b7a      	ldr	r3, [pc, #488]	; (8001414 <main+0x228>)
 800122a:	0018      	movs	r0, r3
 800122c:	f004 ffbc 	bl	80061a8 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	shared_memory_init();
 8001230:	f000 fbbc 	bl	80019ac <shared_memory_init>
	timer_flag = 0;
 8001234:	4b78      	ldr	r3, [pc, #480]	; (8001418 <main+0x22c>)
 8001236:	2200      	movs	r2, #0
 8001238:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim1);
 800123a:	4b78      	ldr	r3, [pc, #480]	; (800141c <main+0x230>)
 800123c:	0018      	movs	r0, r3
 800123e:	f002 fb9d 	bl	800397c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim15);
 8001242:	4b77      	ldr	r3, [pc, #476]	; (8001420 <main+0x234>)
 8001244:	0018      	movs	r0, r3
 8001246:	f002 fb99 	bl	800397c <HAL_TIM_Base_Start_IT>


	while (1)
	{
		HAL_Delay(5);
 800124a:	2005      	movs	r0, #5
 800124c:	f000 ff74 	bl	8002138 <HAL_Delay>
		boot = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_14);// 1/0
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	01da      	lsls	r2, r3, #7
 8001254:	23a0      	movs	r3, #160	; 0xa0
 8001256:	05db      	lsls	r3, r3, #23
 8001258:	0011      	movs	r1, r2
 800125a:	0018      	movs	r0, r3
 800125c:	f001 fc64 	bl	8002b28 <HAL_GPIO_ReadPin>
 8001260:	0003      	movs	r3, r0
 8001262:	b29a      	uxth	r2, r3
 8001264:	4b6f      	ldr	r3, [pc, #444]	; (8001424 <main+0x238>)
 8001266:	801a      	strh	r2, [r3, #0]
		printf("\r boot: %d \r\n",boot);
 8001268:	4b6e      	ldr	r3, [pc, #440]	; (8001424 <main+0x238>)
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	001a      	movs	r2, r3
 800126e:	4b6e      	ldr	r3, [pc, #440]	; (8001428 <main+0x23c>)
 8001270:	0011      	movs	r1, r2
 8001272:	0018      	movs	r0, r3
 8001274:	f005 f89a 	bl	80063ac <iprintf>
		bootloader = timer_flag & boot;
 8001278:	4b67      	ldr	r3, [pc, #412]	; (8001418 <main+0x22c>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	4a69      	ldr	r2, [pc, #420]	; (8001424 <main+0x238>)
 800127e:	8812      	ldrh	r2, [r2, #0]
 8001280:	4013      	ands	r3, r2
 8001282:	b29b      	uxth	r3, r3
 8001284:	1e5a      	subs	r2, r3, #1
 8001286:	4193      	sbcs	r3, r2
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4b68      	ldr	r3, [pc, #416]	; (800142c <main+0x240>)
 800128c:	701a      	strb	r2, [r3, #0]
		if(bootloader)
 800128e:	4b67      	ldr	r3, [pc, #412]	; (800142c <main+0x240>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00b      	beq.n	80012ae <main+0xc2>
		{
			printf(" App \n\r");
 8001296:	4b66      	ldr	r3, [pc, #408]	; (8001430 <main+0x244>)
 8001298:	0018      	movs	r0, r3
 800129a:	f005 f887 	bl	80063ac <iprintf>
			HAL_TIM_Base_Stop_IT(&htim1);
 800129e:	4b5f      	ldr	r3, [pc, #380]	; (800141c <main+0x230>)
 80012a0:	0018      	movs	r0, r3
 80012a2:	f002 fbc7 	bl	8003a34 <HAL_TIM_Base_Stop_IT>
			shared_mem_set_app_update_requested(false);
 80012a6:	2000      	movs	r0, #0
 80012a8:	f000 fbe8 	bl	8001a7c <shared_mem_set_app_update_requested>
 80012ac:	e00a      	b.n	80012c4 <main+0xd8>
		}
		else
		{
			printf(" \r Bootloader \r\n");
 80012ae:	4b61      	ldr	r3, [pc, #388]	; (8001434 <main+0x248>)
 80012b0:	0018      	movs	r0, r3
 80012b2:	f005 f907 	bl	80064c4 <puts>
			HAL_TIM_Base_Stop_IT(&htim1);
 80012b6:	4b59      	ldr	r3, [pc, #356]	; (800141c <main+0x230>)
 80012b8:	0018      	movs	r0, r3
 80012ba:	f002 fbbb 	bl	8003a34 <HAL_TIM_Base_Stop_IT>
			shared_mem_set_app_update_requested(true);
 80012be:	2001      	movs	r0, #1
 80012c0:	f000 fbdc 	bl	8001a7c <shared_mem_set_app_update_requested>
		}




		if (shared_mem_is_bl_upd_requested()) {//bootloader
 80012c4:	f000 fb99 	bl	80019fa <shared_mem_is_bl_upd_requested>
 80012c8:	1e03      	subs	r3, r0, #0
 80012ca:	d01f      	beq.n	800130c <main+0x120>
			hdr = image_get_header(IMAGE_SLOT_2); // get address y magic
 80012cc:	2002      	movs	r0, #2
 80012ce:	f7ff f8ff 	bl	80004d0 <image_get_header>
 80012d2:	0002      	movs	r2, r0
 80012d4:	4b58      	ldr	r3, [pc, #352]	; (8001438 <main+0x24c>)
 80012d6:	601a      	str	r2, [r3, #0]

		// Load the updater (apparom)
		if (hdr == NULL)
 80012d8:	4b57      	ldr	r3, [pc, #348]	; (8001438 <main+0x24c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d104      	bne.n	80012ea <main+0xfe>
		{
			printf("No image found in slot 2\r\n");
 80012e0:	4b56      	ldr	r3, [pc, #344]	; (800143c <main+0x250>)
 80012e2:	0018      	movs	r0, r3
 80012e4:	f005 f8ee 	bl	80064c4 <puts>
 80012e8:	e005      	b.n	80012f6 <main+0x10a>
		}
		else
		{
			if (image_validate(IMAGE_SLOT_2, hdr) != 0) {// addr =  &__loader_rom_start__ + sizeof(image_hdr_t), len -> crc(add, len)
 80012ea:	4b53      	ldr	r3, [pc, #332]	; (8001438 <main+0x24c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	0019      	movs	r1, r3
 80012f0:	2002      	movs	r0, #2
 80012f2:	f7ff f91b 	bl	800052c <image_validate>
			}
		}
		//ioport_set_pin_level(RED_LED, false);
		//ioport_set_pin_level(GREEN_LED, false);
		//ioport_set_pin_level(BLUE_LED, false);
		printf("Jumping to updater\r\n");
 80012f6:	4b52      	ldr	r3, [pc, #328]	; (8001440 <main+0x254>)
 80012f8:	0018      	movs	r0, r3
 80012fa:	f005 f8e3 	bl	80064c4 <puts>
		shared_mem_increment_boot_counter();
 80012fe:	f000 fb85 	bl	8001a0c <shared_mem_increment_boot_counter>
		//printf("Boot count: %d \r\n",shared_mem_get_boot_counter());
		image_start(hdr);
 8001302:	4b4d      	ldr	r3, [pc, #308]	; (8001438 <main+0x24c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	0018      	movs	r0, r3
 8001308:	f7ff ff0e 	bl	8001128 <image_start>

	}

	if (!shared_mem_is_app_upd_requested()) {//app //boot 1
 800130c:	f000 fb6c 	bl	80019e8 <shared_mem_is_app_upd_requested>
 8001310:	0003      	movs	r3, r0
 8001312:	001a      	movs	r2, r3
 8001314:	2301      	movs	r3, #1
 8001316:	4053      	eors	r3, r2
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d037      	beq.n	800138e <main+0x1a2>
		// Boot count, maybe not neccessary or implement a better thing to handle this
		const uint8_t max_boot_attemps = 4;
 800131e:	1dfb      	adds	r3, r7, #7
 8001320:	2204      	movs	r2, #4
 8001322:	701a      	strb	r2, [r3, #0]
		if (shared_mem_get_boot_counter() >= max_boot_attemps)
 8001324:	f000 fb8a 	bl	8001a3c <shared_mem_get_boot_counter>
 8001328:	0003      	movs	r3, r0
 800132a:	001a      	movs	r2, r3
 800132c:	1dfb      	adds	r3, r7, #7
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4293      	cmp	r3, r2
 8001332:	d809      	bhi.n	8001348 <main+0x15c>
		{
			shared_mem_clear_boot_counter();
 8001334:	f000 fb78 	bl	8001a28 <shared_mem_clear_boot_counter>
			printf("App unstable, entering to DFU mode\r\n");
 8001338:	4b42      	ldr	r3, [pc, #264]	; (8001444 <main+0x258>)
 800133a:	0018      	movs	r0, r3
 800133c:	f005 f8c2 	bl	80064c4 <puts>
			break;
 8001340:	46c0      	nop			; (mov r8, r8)

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }//end while
	HAL_NVIC_SystemReset(); //resetea el uC
 8001342:	f001 f800 	bl	8002346 <HAL_NVIC_SystemReset>
 8001346:	e05a      	b.n	80013fe <main+0x212>
		hdr = image_get_header(IMAGE_SLOT_1);// get address y magic
 8001348:	2001      	movs	r0, #1
 800134a:	f7ff f8c1 	bl	80004d0 <image_get_header>
 800134e:	0002      	movs	r2, r0
 8001350:	4b39      	ldr	r3, [pc, #228]	; (8001438 <main+0x24c>)
 8001352:	601a      	str	r2, [r3, #0]
		if (hdr == NULL)
 8001354:	4b38      	ldr	r3, [pc, #224]	; (8001438 <main+0x24c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d104      	bne.n	8001366 <main+0x17a>
			printf("No image found in slot 1\r\n");
 800135c:	4b3a      	ldr	r3, [pc, #232]	; (8001448 <main+0x25c>)
 800135e:	0018      	movs	r0, r3
 8001360:	f005 f8b0 	bl	80064c4 <puts>
			goto invalid;
 8001364:	e04b      	b.n	80013fe <main+0x212>
		if (image_validate(IMAGE_SLOT_1, hdr) != 0) { // addr =  &__loader_rom_start__ + sizeof(image_hdr_t), len -> crc(add, len)
 8001366:	4b34      	ldr	r3, [pc, #208]	; (8001438 <main+0x24c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	0019      	movs	r1, r3
 800136c:	2001      	movs	r0, #1
 800136e:	f7ff f8dd 	bl	800052c <image_validate>
 8001372:	1e03      	subs	r3, r0, #0
 8001374:	d142      	bne.n	80013fc <main+0x210>
		printf("Jumping to application\r\n\n");
 8001376:	4b35      	ldr	r3, [pc, #212]	; (800144c <main+0x260>)
 8001378:	0018      	movs	r0, r3
 800137a:	f005 f8a3 	bl	80064c4 <puts>
		shared_mem_increment_boot_counter();
 800137e:	f000 fb45 	bl	8001a0c <shared_mem_increment_boot_counter>
		image_start(hdr);
 8001382:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <main+0x24c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	0018      	movs	r0, r3
 8001388:	f7ff fece 	bl	8001128 <image_start>
 800138c:	e75d      	b.n	800124a <main+0x5e>
	else if (shared_mem_is_app_upd_requested())
 800138e:	f000 fb2b 	bl	80019e8 <shared_mem_is_app_upd_requested>
 8001392:	1e03      	subs	r3, r0, #0
 8001394:	d100      	bne.n	8001398 <main+0x1ac>
 8001396:	e758      	b.n	800124a <main+0x5e>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8001398:	23a0      	movs	r3, #160	; 0xa0
 800139a:	05db      	lsls	r3, r3, #23
 800139c:	2201      	movs	r2, #1
 800139e:	2180      	movs	r1, #128	; 0x80
 80013a0:	0018      	movs	r0, r3
 80013a2:	f001 fbde 	bl	8002b62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 80013a6:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <main+0x264>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	2102      	movs	r1, #2
 80013ac:	0018      	movs	r0, r3
 80013ae:	f001 fbd8 	bl	8002b62 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80013b2:	4b27      	ldr	r3, [pc, #156]	; (8001450 <main+0x264>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	2101      	movs	r1, #1
 80013b8:	0018      	movs	r0, r3
 80013ba:	f001 fbd2 	bl	8002b62 <HAL_GPIO_WritePin>
		if (update_firmware() == 0)
 80013be:	f7ff fb7f 	bl	8000ac0 <update_firmware>
 80013c2:	1e03      	subs	r3, r0, #0
 80013c4:	d000      	beq.n	80013c8 <main+0x1dc>
 80013c6:	e740      	b.n	800124a <main+0x5e>
			printf("Update completed, restarting\r\n");
 80013c8:	4b22      	ldr	r3, [pc, #136]	; (8001454 <main+0x268>)
 80013ca:	0018      	movs	r0, r3
 80013cc:	f005 f87a 	bl	80064c4 <puts>
			shared_mem_set_update_completed();
 80013d0:	f000 fb3e 	bl	8001a50 <shared_mem_set_update_completed>
			shared_mem_clear_boot_counter();
 80013d4:	f000 fb28 	bl	8001a28 <shared_mem_clear_boot_counter>
			shared_mem_clear_ota_info();
 80013d8:	f000 fb46 	bl	8001a68 <shared_mem_clear_ota_info>
			shared_mem_set_app_update_requested(false);
 80013dc:	2000      	movs	r0, #0
 80013de:	f000 fb4d 	bl	8001a7c <shared_mem_set_app_update_requested>
			shared_mem_set_update();
 80013e2:	f000 fb5b 	bl	8001a9c <shared_mem_set_update>
			printf("\r shared_mem_get_update: %d \r\n",shared_mem_get_update());
 80013e6:	f000 fb63 	bl	8001ab0 <shared_mem_get_update>
 80013ea:	0002      	movs	r2, r0
 80013ec:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <main+0x26c>)
 80013ee:	0011      	movs	r1, r2
 80013f0:	0018      	movs	r0, r3
 80013f2:	f004 ffdb 	bl	80063ac <iprintf>
			HAL_NVIC_SystemReset();
 80013f6:	f000 ffa6 	bl	8002346 <HAL_NVIC_SystemReset>
		HAL_Delay(5);
 80013fa:	e726      	b.n	800124a <main+0x5e>
			goto invalid;
 80013fc:	46c0      	nop			; (mov r8, r8)

	invalid:
		printf("\r\nFlash a valid application\r\n");
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <main+0x270>)
 8001400:	0018      	movs	r0, r3
 8001402:	f005 f85f 	bl	80064c4 <puts>
		while (true)
		{
			__asm__ __volatile__("");
 8001406:	e7fe      	b.n	8001406 <main+0x21a>
 8001408:	20000aa4 	.word	0x20000aa4
 800140c:	08007cf4 	.word	0x08007cf4
 8001410:	20000b58 	.word	0x20000b58
 8001414:	20000a10 	.word	0x20000a10
 8001418:	20000d74 	.word	0x20000d74
 800141c:	2000092c 	.word	0x2000092c
 8001420:	200009c4 	.word	0x200009c4
 8001424:	20000d72 	.word	0x20000d72
 8001428:	08007d18 	.word	0x08007d18
 800142c:	20000b49 	.word	0x20000b49
 8001430:	08007d28 	.word	0x08007d28
 8001434:	08007d30 	.word	0x08007d30
 8001438:	20000d80 	.word	0x20000d80
 800143c:	08007d40 	.word	0x08007d40
 8001440:	08007d5c 	.word	0x08007d5c
 8001444:	08007d70 	.word	0x08007d70
 8001448:	08007d94 	.word	0x08007d94
 800144c:	08007db0 	.word	0x08007db0
 8001450:	50000400 	.word	0x50000400
 8001454:	08007dcc 	.word	0x08007dcc
 8001458:	08007dec 	.word	0x08007dec
 800145c:	08007e0c 	.word	0x08007e0c

08001460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b093      	sub	sp, #76	; 0x4c
 8001464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001466:	2410      	movs	r4, #16
 8001468:	193b      	adds	r3, r7, r4
 800146a:	0018      	movs	r0, r3
 800146c:	2338      	movs	r3, #56	; 0x38
 800146e:	001a      	movs	r2, r3
 8001470:	2100      	movs	r1, #0
 8001472:	f004 ff92 	bl	800639a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001476:	003b      	movs	r3, r7
 8001478:	0018      	movs	r0, r3
 800147a:	2310      	movs	r3, #16
 800147c:	001a      	movs	r2, r3
 800147e:	2100      	movs	r1, #0
 8001480:	f004 ff8b 	bl	800639a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	0018      	movs	r0, r3
 800148a:	f001 fb87 	bl	8002b9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800148e:	193b      	adds	r3, r7, r4
 8001490:	2202      	movs	r2, #2
 8001492:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001494:	193b      	adds	r3, r7, r4
 8001496:	2280      	movs	r2, #128	; 0x80
 8001498:	0052      	lsls	r2, r2, #1
 800149a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800149c:	193b      	adds	r3, r7, r4
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014a2:	193b      	adds	r3, r7, r4
 80014a4:	2240      	movs	r2, #64	; 0x40
 80014a6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014a8:	193b      	adds	r3, r7, r4
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ae:	193b      	adds	r3, r7, r4
 80014b0:	0018      	movs	r0, r3
 80014b2:	f001 fbbf 	bl	8002c34 <HAL_RCC_OscConfig>
 80014b6:	1e03      	subs	r3, r0, #0
 80014b8:	d001      	beq.n	80014be <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80014ba:	f000 fa3f 	bl	800193c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014be:	003b      	movs	r3, r7
 80014c0:	2207      	movs	r2, #7
 80014c2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014c4:	003b      	movs	r3, r7
 80014c6:	2200      	movs	r2, #0
 80014c8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ca:	003b      	movs	r3, r7
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014d0:	003b      	movs	r3, r7
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014d6:	003b      	movs	r3, r7
 80014d8:	2100      	movs	r1, #0
 80014da:	0018      	movs	r0, r3
 80014dc:	f001 fec4 	bl	8003268 <HAL_RCC_ClockConfig>
 80014e0:	1e03      	subs	r3, r0, #0
 80014e2:	d001      	beq.n	80014e8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80014e4:	f000 fa2a 	bl	800193c <Error_Handler>
  }
}
 80014e8:	46c0      	nop			; (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b013      	add	sp, #76	; 0x4c
 80014ee:	bd90      	pop	{r4, r7, pc}

080014f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f6:	2310      	movs	r3, #16
 80014f8:	18fb      	adds	r3, r7, r3
 80014fa:	0018      	movs	r0, r3
 80014fc:	2310      	movs	r3, #16
 80014fe:	001a      	movs	r2, r3
 8001500:	2100      	movs	r1, #0
 8001502:	f004 ff4a 	bl	800639a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	0018      	movs	r0, r3
 800150a:	230c      	movs	r3, #12
 800150c:	001a      	movs	r2, r3
 800150e:	2100      	movs	r1, #0
 8001510:	f004 ff43 	bl	800639a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001514:	4b21      	ldr	r3, [pc, #132]	; (800159c <MX_TIM1_Init+0xac>)
 8001516:	4a22      	ldr	r2, [pc, #136]	; (80015a0 <MX_TIM1_Init+0xb0>)
 8001518:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 800151a:	4b20      	ldr	r3, [pc, #128]	; (800159c <MX_TIM1_Init+0xac>)
 800151c:	220f      	movs	r2, #15
 800151e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001520:	4b1e      	ldr	r3, [pc, #120]	; (800159c <MX_TIM1_Init+0xac>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8001526:	4b1d      	ldr	r3, [pc, #116]	; (800159c <MX_TIM1_Init+0xac>)
 8001528:	22fa      	movs	r2, #250	; 0xfa
 800152a:	0052      	lsls	r2, r2, #1
 800152c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152e:	4b1b      	ldr	r3, [pc, #108]	; (800159c <MX_TIM1_Init+0xac>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001534:	4b19      	ldr	r3, [pc, #100]	; (800159c <MX_TIM1_Init+0xac>)
 8001536:	2200      	movs	r2, #0
 8001538:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <MX_TIM1_Init+0xac>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001540:	4b16      	ldr	r3, [pc, #88]	; (800159c <MX_TIM1_Init+0xac>)
 8001542:	0018      	movs	r0, r3
 8001544:	f002 f9c2 	bl	80038cc <HAL_TIM_Base_Init>
 8001548:	1e03      	subs	r3, r0, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 800154c:	f000 f9f6 	bl	800193c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001550:	2110      	movs	r1, #16
 8001552:	187b      	adds	r3, r7, r1
 8001554:	2280      	movs	r2, #128	; 0x80
 8001556:	0152      	lsls	r2, r2, #5
 8001558:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800155a:	187a      	adds	r2, r7, r1
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <MX_TIM1_Init+0xac>)
 800155e:	0011      	movs	r1, r2
 8001560:	0018      	movs	r0, r3
 8001562:	f002 fbc7 	bl	8003cf4 <HAL_TIM_ConfigClockSource>
 8001566:	1e03      	subs	r3, r0, #0
 8001568:	d001      	beq.n	800156e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800156a:	f000 f9e7 	bl	800193c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	2200      	movs	r2, #0
 8001578:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001580:	1d3a      	adds	r2, r7, #4
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <MX_TIM1_Init+0xac>)
 8001584:	0011      	movs	r1, r2
 8001586:	0018      	movs	r0, r3
 8001588:	f002 fdc6 	bl	8004118 <HAL_TIMEx_MasterConfigSynchronization>
 800158c:	1e03      	subs	r3, r0, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001590:	f000 f9d4 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001594:	46c0      	nop			; (mov r8, r8)
 8001596:	46bd      	mov	sp, r7
 8001598:	b008      	add	sp, #32
 800159a:	bd80      	pop	{r7, pc}
 800159c:	2000092c 	.word	0x2000092c
 80015a0:	40012c00 	.word	0x40012c00

080015a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015aa:	2310      	movs	r3, #16
 80015ac:	18fb      	adds	r3, r7, r3
 80015ae:	0018      	movs	r0, r3
 80015b0:	2310      	movs	r3, #16
 80015b2:	001a      	movs	r2, r3
 80015b4:	2100      	movs	r1, #0
 80015b6:	f004 fef0 	bl	800639a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	0018      	movs	r0, r3
 80015be:	230c      	movs	r3, #12
 80015c0:	001a      	movs	r2, r3
 80015c2:	2100      	movs	r1, #0
 80015c4:	f004 fee9 	bl	800639a <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <MX_TIM3_Init+0xa0>)
 80015ca:	4a1f      	ldr	r2, [pc, #124]	; (8001648 <MX_TIM3_Init+0xa4>)
 80015cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000-1;
 80015ce:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <MX_TIM3_Init+0xa0>)
 80015d0:	4a1e      	ldr	r2, [pc, #120]	; (800164c <MX_TIM3_Init+0xa8>)
 80015d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <MX_TIM3_Init+0xa0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8000;
 80015da:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <MX_TIM3_Init+0xa0>)
 80015dc:	22fa      	movs	r2, #250	; 0xfa
 80015de:	0152      	lsls	r2, r2, #5
 80015e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <MX_TIM3_Init+0xa0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e8:	4b16      	ldr	r3, [pc, #88]	; (8001644 <MX_TIM3_Init+0xa0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <MX_TIM3_Init+0xa0>)
 80015f0:	0018      	movs	r0, r3
 80015f2:	f002 f96b 	bl	80038cc <HAL_TIM_Base_Init>
 80015f6:	1e03      	subs	r3, r0, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80015fa:	f000 f99f 	bl	800193c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015fe:	2110      	movs	r1, #16
 8001600:	187b      	adds	r3, r7, r1
 8001602:	2280      	movs	r2, #128	; 0x80
 8001604:	0152      	lsls	r2, r2, #5
 8001606:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001608:	187a      	adds	r2, r7, r1
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_TIM3_Init+0xa0>)
 800160c:	0011      	movs	r1, r2
 800160e:	0018      	movs	r0, r3
 8001610:	f002 fb70 	bl	8003cf4 <HAL_TIM_ConfigClockSource>
 8001614:	1e03      	subs	r3, r0, #0
 8001616:	d001      	beq.n	800161c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001618:	f000 f990 	bl	800193c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001628:	1d3a      	adds	r2, r7, #4
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_TIM3_Init+0xa0>)
 800162c:	0011      	movs	r1, r2
 800162e:	0018      	movs	r0, r3
 8001630:	f002 fd72 	bl	8004118 <HAL_TIMEx_MasterConfigSynchronization>
 8001634:	1e03      	subs	r3, r0, #0
 8001636:	d001      	beq.n	800163c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001638:	f000 f980 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800163c:	46c0      	nop			; (mov r8, r8)
 800163e:	46bd      	mov	sp, r7
 8001640:	b008      	add	sp, #32
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000978 	.word	0x20000978
 8001648:	40000400 	.word	0x40000400
 800164c:	00003e7f 	.word	0x00003e7f

08001650 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001656:	2310      	movs	r3, #16
 8001658:	18fb      	adds	r3, r7, r3
 800165a:	0018      	movs	r0, r3
 800165c:	2310      	movs	r3, #16
 800165e:	001a      	movs	r2, r3
 8001660:	2100      	movs	r1, #0
 8001662:	f004 fe9a 	bl	800639a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	0018      	movs	r0, r3
 800166a:	230c      	movs	r3, #12
 800166c:	001a      	movs	r2, r3
 800166e:	2100      	movs	r1, #0
 8001670:	f004 fe93 	bl	800639a <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <MX_TIM15_Init+0xa4>)
 8001676:	4a20      	ldr	r2, [pc, #128]	; (80016f8 <MX_TIM15_Init+0xa8>)
 8001678:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 16000-1;
 800167a:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <MX_TIM15_Init+0xa4>)
 800167c:	4a1f      	ldr	r2, [pc, #124]	; (80016fc <MX_TIM15_Init+0xac>)
 800167e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001680:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <MX_TIM15_Init+0xa4>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 60000;
 8001686:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <MX_TIM15_Init+0xa4>)
 8001688:	4a1d      	ldr	r2, [pc, #116]	; (8001700 <MX_TIM15_Init+0xb0>)
 800168a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168c:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <MX_TIM15_Init+0xa4>)
 800168e:	2200      	movs	r2, #0
 8001690:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001692:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <MX_TIM15_Init+0xa4>)
 8001694:	2200      	movs	r2, #0
 8001696:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001698:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <MX_TIM15_Init+0xa4>)
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <MX_TIM15_Init+0xa4>)
 80016a0:	0018      	movs	r0, r3
 80016a2:	f002 f913 	bl	80038cc <HAL_TIM_Base_Init>
 80016a6:	1e03      	subs	r3, r0, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 80016aa:	f000 f947 	bl	800193c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ae:	2110      	movs	r1, #16
 80016b0:	187b      	adds	r3, r7, r1
 80016b2:	2280      	movs	r2, #128	; 0x80
 80016b4:	0152      	lsls	r2, r2, #5
 80016b6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80016b8:	187a      	adds	r2, r7, r1
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <MX_TIM15_Init+0xa4>)
 80016bc:	0011      	movs	r1, r2
 80016be:	0018      	movs	r0, r3
 80016c0:	f002 fb18 	bl	8003cf4 <HAL_TIM_ConfigClockSource>
 80016c4:	1e03      	subs	r3, r0, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80016c8:	f000 f938 	bl	800193c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80016d8:	1d3a      	adds	r2, r7, #4
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <MX_TIM15_Init+0xa4>)
 80016dc:	0011      	movs	r1, r2
 80016de:	0018      	movs	r0, r3
 80016e0:	f002 fd1a 	bl	8004118 <HAL_TIMEx_MasterConfigSynchronization>
 80016e4:	1e03      	subs	r3, r0, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 80016e8:	f000 f928 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80016ec:	46c0      	nop			; (mov r8, r8)
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b008      	add	sp, #32
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200009c4 	.word	0x200009c4
 80016f8:	40014000 	.word	0x40014000
 80016fc:	00003e7f 	.word	0x00003e7f
 8001700:	0000ea60 	.word	0x0000ea60

08001704 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001708:	4b23      	ldr	r3, [pc, #140]	; (8001798 <MX_USART2_UART_Init+0x94>)
 800170a:	4a24      	ldr	r2, [pc, #144]	; (800179c <MX_USART2_UART_Init+0x98>)
 800170c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800170e:	4b22      	ldr	r3, [pc, #136]	; (8001798 <MX_USART2_UART_Init+0x94>)
 8001710:	2296      	movs	r2, #150	; 0x96
 8001712:	0192      	lsls	r2, r2, #6
 8001714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001716:	4b20      	ldr	r3, [pc, #128]	; (8001798 <MX_USART2_UART_Init+0x94>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800171c:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <MX_USART2_UART_Init+0x94>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001722:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <MX_USART2_UART_Init+0x94>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001728:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <MX_USART2_UART_Init+0x94>)
 800172a:	220c      	movs	r2, #12
 800172c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172e:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <MX_USART2_UART_Init+0x94>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001734:	4b18      	ldr	r3, [pc, #96]	; (8001798 <MX_USART2_UART_Init+0x94>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800173a:	4b17      	ldr	r3, [pc, #92]	; (8001798 <MX_USART2_UART_Init+0x94>)
 800173c:	2200      	movs	r2, #0
 800173e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001740:	4b15      	ldr	r3, [pc, #84]	; (8001798 <MX_USART2_UART_Init+0x94>)
 8001742:	2200      	movs	r2, #0
 8001744:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001746:	4b14      	ldr	r3, [pc, #80]	; (8001798 <MX_USART2_UART_Init+0x94>)
 8001748:	2200      	movs	r2, #0
 800174a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <MX_USART2_UART_Init+0x94>)
 800174e:	0018      	movs	r0, r3
 8001750:	f002 fd6a 	bl	8004228 <HAL_UART_Init>
 8001754:	1e03      	subs	r3, r0, #0
 8001756:	d001      	beq.n	800175c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001758:	f000 f8f0 	bl	800193c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800175c:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <MX_USART2_UART_Init+0x94>)
 800175e:	2100      	movs	r1, #0
 8001760:	0018      	movs	r0, r3
 8001762:	f004 fc9f 	bl	80060a4 <HAL_UARTEx_SetTxFifoThreshold>
 8001766:	1e03      	subs	r3, r0, #0
 8001768:	d001      	beq.n	800176e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800176a:	f000 f8e7 	bl	800193c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <MX_USART2_UART_Init+0x94>)
 8001770:	2100      	movs	r1, #0
 8001772:	0018      	movs	r0, r3
 8001774:	f004 fcd6 	bl	8006124 <HAL_UARTEx_SetRxFifoThreshold>
 8001778:	1e03      	subs	r3, r0, #0
 800177a:	d001      	beq.n	8001780 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800177c:	f000 f8de 	bl	800193c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <MX_USART2_UART_Init+0x94>)
 8001782:	0018      	movs	r0, r3
 8001784:	f004 fc54 	bl	8006030 <HAL_UARTEx_DisableFifoMode>
 8001788:	1e03      	subs	r3, r0, #0
 800178a:	d001      	beq.n	8001790 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800178c:	f000 f8d6 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001790:	46c0      	nop			; (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	20000a10 	.word	0x20000a10
 800179c:	40004400 	.word	0x40004400

080017a0 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <MX_USART5_UART_Init+0x60>)
 80017a6:	4a17      	ldr	r2, [pc, #92]	; (8001804 <MX_USART5_UART_Init+0x64>)
 80017a8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <MX_USART5_UART_Init+0x60>)
 80017ac:	22e1      	movs	r2, #225	; 0xe1
 80017ae:	0252      	lsls	r2, r2, #9
 80017b0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80017b2:	4b13      	ldr	r3, [pc, #76]	; (8001800 <MX_USART5_UART_Init+0x60>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <MX_USART5_UART_Init+0x60>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <MX_USART5_UART_Init+0x60>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80017c4:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <MX_USART5_UART_Init+0x60>)
 80017c6:	220c      	movs	r2, #12
 80017c8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <MX_USART5_UART_Init+0x60>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <MX_USART5_UART_Init+0x60>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <MX_USART5_UART_Init+0x60>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <MX_USART5_UART_Init+0x60>)
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <MX_USART5_UART_Init+0x60>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <MX_USART5_UART_Init+0x60>)
 80017ea:	0018      	movs	r0, r3
 80017ec:	f002 fd1c 	bl	8004228 <HAL_UART_Init>
 80017f0:	1e03      	subs	r3, r0, #0
 80017f2:	d001      	beq.n	80017f8 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 80017f4:	f000 f8a2 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 80017f8:	46c0      	nop			; (mov r8, r8)
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	20000aa4 	.word	0x20000aa4
 8001804:	40005000 	.word	0x40005000

08001808 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0d      	ldr	r2, [pc, #52]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d102      	bne.n	8001820 <HAL_TIM_PeriodElapsedCallback+0x18>
	  {
		timer_flag = 1 ;
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800181c:	2201      	movs	r2, #1
 800181e:	801a      	strh	r2, [r3, #0]
	  }

   if(htim->Instance == TIM3)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0b      	ldr	r2, [pc, #44]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d102      	bne.n	8001830 <HAL_TIM_PeriodElapsedCallback+0x28>
     {
	   dato_recivido = 1;// offset is 0 or page integers
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800182c:	2201      	movs	r2, #1
 800182e:	701a      	strb	r2, [r3, #0]
     }

   if(htim->Instance == TIM15)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a09      	ldr	r2, [pc, #36]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d103      	bne.n	8001842 <HAL_TIM_PeriodElapsedCallback+0x3a>
     {
		printf("TIMER15\r\n\n");
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800183c:	0018      	movs	r0, r3
 800183e:	f004 fe41 	bl	80064c4 <puts>
		//printf("Jumping to application\r\n\n");
		//shared_mem_increment_boot_counter();
		//printf("Boot count: %d \r\n",shared_mem_get_boot_counter());
		//image_start(hdr);
     }
}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	46bd      	mov	sp, r7
 8001846:	b002      	add	sp, #8
 8001848:	bd80      	pop	{r7, pc}
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	40012c00 	.word	0x40012c00
 8001850:	20000d74 	.word	0x20000d74
 8001854:	40000400 	.word	0x40000400
 8001858:	20000b48 	.word	0x20000b48
 800185c:	40014000 	.word	0x40014000
 8001860:	08007e2c 	.word	0x08007e2c

08001864 <MX_GPIO_Init_user>:



static void MX_GPIO_Init_user(void)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	240c      	movs	r4, #12
 800186c:	193b      	adds	r3, r7, r4
 800186e:	0018      	movs	r0, r3
 8001870:	2314      	movs	r3, #20
 8001872:	001a      	movs	r2, r3
 8001874:	2100      	movs	r1, #0
 8001876:	f004 fd90 	bl	800639a <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187a:	4b2e      	ldr	r3, [pc, #184]	; (8001934 <MX_GPIO_Init_user+0xd0>)
 800187c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800187e:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <MX_GPIO_Init_user+0xd0>)
 8001880:	2104      	movs	r1, #4
 8001882:	430a      	orrs	r2, r1
 8001884:	635a      	str	r2, [r3, #52]	; 0x34
 8001886:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <MX_GPIO_Init_user+0xd0>)
 8001888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188a:	2204      	movs	r2, #4
 800188c:	4013      	ands	r3, r2
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	4b28      	ldr	r3, [pc, #160]	; (8001934 <MX_GPIO_Init_user+0xd0>)
 8001894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001896:	4b27      	ldr	r3, [pc, #156]	; (8001934 <MX_GPIO_Init_user+0xd0>)
 8001898:	2101      	movs	r1, #1
 800189a:	430a      	orrs	r2, r1
 800189c:	635a      	str	r2, [r3, #52]	; 0x34
 800189e:	4b25      	ldr	r3, [pc, #148]	; (8001934 <MX_GPIO_Init_user+0xd0>)
 80018a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a2:	2201      	movs	r2, #1
 80018a4:	4013      	ands	r3, r2
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018aa:	4b22      	ldr	r3, [pc, #136]	; (8001934 <MX_GPIO_Init_user+0xd0>)
 80018ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ae:	4b21      	ldr	r3, [pc, #132]	; (8001934 <MX_GPIO_Init_user+0xd0>)
 80018b0:	2102      	movs	r1, #2
 80018b2:	430a      	orrs	r2, r1
 80018b4:	635a      	str	r2, [r3, #52]	; 0x34
 80018b6:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <MX_GPIO_Init_user+0xd0>)
 80018b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ba:	2202      	movs	r2, #2
 80018bc:	4013      	ands	r3, r2
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_14, GPIO_PIN_RESET);
 80018c2:	2381      	movs	r3, #129	; 0x81
 80018c4:	01d9      	lsls	r1, r3, #7
 80018c6:	23a0      	movs	r3, #160	; 0xa0
 80018c8:	05db      	lsls	r3, r3, #23
 80018ca:	2200      	movs	r2, #0
 80018cc:	0018      	movs	r0, r3
 80018ce:	f001 f948 	bl	8002b62 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(RST_COMM_GPIO_Port, RST_COMM_Pin, GPIO_PIN_RESET);
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4818      	ldr	r0, [pc, #96]	; (8001938 <MX_GPIO_Init_user+0xd4>)
 80018d8:	2200      	movs	r2, #0
 80018da:	0019      	movs	r1, r3
 80018dc:	f001 f941 	bl	8002b62 <HAL_GPIO_WritePin>


	  /*Configure GPIO pin : RST_COMM_Pin */
	  GPIO_InitStruct.Pin = RST_COMM_Pin;
 80018e0:	193b      	adds	r3, r7, r4
 80018e2:	2280      	movs	r2, #128	; 0x80
 80018e4:	0052      	lsls	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e8:	193b      	adds	r3, r7, r4
 80018ea:	2201      	movs	r2, #1
 80018ec:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	193b      	adds	r3, r7, r4
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	193b      	adds	r3, r7, r4
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(RST_COMM_GPIO_Port, &GPIO_InitStruct);
 80018fa:	193b      	adds	r3, r7, r4
 80018fc:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <MX_GPIO_Init_user+0xd4>)
 80018fe:	0019      	movs	r1, r3
 8001900:	0010      	movs	r0, r2
 8001902:	f000 ffa5 	bl	8002850 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
  /*Configure GPIO pin : PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001906:	0021      	movs	r1, r4
 8001908:	187b      	adds	r3, r7, r1
 800190a:	2280      	movs	r2, #128	; 0x80
 800190c:	01d2      	lsls	r2, r2, #7
 800190e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001910:	187b      	adds	r3, r7, r1
 8001912:	2200      	movs	r2, #0
 8001914:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001916:	187b      	adds	r3, r7, r1
 8001918:	2201      	movs	r2, #1
 800191a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	187a      	adds	r2, r7, r1
 800191e:	23a0      	movs	r3, #160	; 0xa0
 8001920:	05db      	lsls	r3, r3, #23
 8001922:	0011      	movs	r1, r2
 8001924:	0018      	movs	r0, r3
 8001926:	f000 ff93 	bl	8002850 <HAL_GPIO_Init>


}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	46bd      	mov	sp, r7
 800192e:	b009      	add	sp, #36	; 0x24
 8001930:	bd90      	pop	{r4, r7, pc}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	40021000 	.word	0x40021000
 8001938:	50000400 	.word	0x50000400

0800193c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001940:	b672      	cpsid	i
}
 8001942:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001944:	e7fe      	b.n	8001944 <Error_Handler+0x8>
	...

08001948 <prv_set_flag>:
  BL_UPDATE_REQUEST = 1 << 1,

  FLAG_BG_FAULT = 1 << 2,
};

static void prv_set_flag(uint32_t flag, bool value) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	000a      	movs	r2, r1
 8001952:	1cfb      	adds	r3, r7, #3
 8001954:	701a      	strb	r2, [r3, #0]
    if (value) {
 8001956:	1cfb      	adds	r3, r7, #3
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d006      	beq.n	800196c <prv_set_flag+0x24>
        shared_data.flags |= flag;
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <prv_set_flag+0x3c>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	431a      	orrs	r2, r3
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <prv_set_flag+0x3c>)
 8001968:	601a      	str	r2, [r3, #0]
    } else {
        shared_data.flags &= ~flag;
    }
}
 800196a:	e006      	b.n	800197a <prv_set_flag+0x32>
        shared_data.flags &= ~flag;
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <prv_set_flag+0x3c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	43d2      	mvns	r2, r2
 8001974:	401a      	ands	r2, r3
 8001976:	4b03      	ldr	r3, [pc, #12]	; (8001984 <prv_set_flag+0x3c>)
 8001978:	601a      	str	r2, [r3, #0]
}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	46bd      	mov	sp, r7
 800197e:	b002      	add	sp, #8
 8001980:	bd80      	pop	{r7, pc}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	200004f8 	.word	0x200004f8

08001988 <prv_get_flag>:

static bool prv_get_flag(uint32_t flag) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
    return shared_data.flags & flag;
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <prv_get_flag+0x20>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	4013      	ands	r3, r2
 8001998:	1e5a      	subs	r2, r3, #1
 800199a:	4193      	sbcs	r3, r2
 800199c:	b2db      	uxtb	r3, r3
}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b002      	add	sp, #8
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	200004f8 	.word	0x200004f8

080019ac <shared_memory_init>:

void shared_memory_init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  if (shared_data.magic != MAGIC)
 80019b0:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <shared_memory_init+0x34>)
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	23e7      	movs	r3, #231	; 0xe7
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d00d      	beq.n	80019d8 <shared_memory_init+0x2c>
  {
    printf("Shared memory uninitialized, setting MAGIC\r\n");
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <shared_memory_init+0x38>)
 80019be:	0018      	movs	r0, r3
 80019c0:	f004 fd80 	bl	80064c4 <puts>
    memset(&shared_data, 0, sizeof (shared_data_t));
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <shared_memory_init+0x34>)
 80019c6:	2212      	movs	r2, #18
 80019c8:	2100      	movs	r1, #0
 80019ca:	0018      	movs	r0, r3
 80019cc:	f004 fce5 	bl	800639a <memset>
    shared_data.magic = MAGIC;
 80019d0:	23e7      	movs	r3, #231	; 0xe7
 80019d2:	005a      	lsls	r2, r3, #1
 80019d4:	4b02      	ldr	r3, [pc, #8]	; (80019e0 <shared_memory_init+0x34>)
 80019d6:	605a      	str	r2, [r3, #4]
  }
}
 80019d8:	46c0      	nop			; (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	200004f8 	.word	0x200004f8
 80019e4:	08007e38 	.word	0x08007e38

080019e8 <shared_mem_is_app_upd_requested>:

bool shared_mem_is_app_upd_requested(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  return prv_get_flag(APP_UPDATE_REQUEST);
 80019ec:	2001      	movs	r0, #1
 80019ee:	f7ff ffcb 	bl	8001988 <prv_get_flag>
 80019f2:	0003      	movs	r3, r0
}
 80019f4:	0018      	movs	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <shared_mem_is_bl_upd_requested>:

bool shared_mem_is_bl_upd_requested(void)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	af00      	add	r7, sp, #0
  return prv_get_flag(BL_UPDATE_REQUEST);
 80019fe:	2002      	movs	r0, #2
 8001a00:	f7ff ffc2 	bl	8001988 <prv_get_flag>
 8001a04:	0003      	movs	r3, r0
}
 8001a06:	0018      	movs	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <shared_mem_increment_boot_counter>:
{
  return prv_get_flag(FLAG_BG_FAULT);
}

void shared_mem_increment_boot_counter(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  shared_data.boot_count++;
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <shared_mem_increment_boot_counter+0x18>)
 8001a12:	7c1b      	ldrb	r3, [r3, #16]
 8001a14:	3301      	adds	r3, #1
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	4b02      	ldr	r3, [pc, #8]	; (8001a24 <shared_mem_increment_boot_counter+0x18>)
 8001a1a:	741a      	strb	r2, [r3, #16]
}
 8001a1c:	46c0      	nop			; (mov r8, r8)
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	200004f8 	.word	0x200004f8

08001a28 <shared_mem_clear_boot_counter>:

void shared_mem_clear_boot_counter(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  shared_data.boot_count = 0;
 8001a2c:	4b02      	ldr	r3, [pc, #8]	; (8001a38 <shared_mem_clear_boot_counter+0x10>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	741a      	strb	r2, [r3, #16]
}
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	200004f8 	.word	0x200004f8

08001a3c <shared_mem_get_boot_counter>:

uint8_t shared_mem_get_boot_counter(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  return shared_data.boot_count;
 8001a40:	4b02      	ldr	r3, [pc, #8]	; (8001a4c <shared_mem_get_boot_counter+0x10>)
 8001a42:	7c1b      	ldrb	r3, [r3, #16]
}
 8001a44:	0018      	movs	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	200004f8 	.word	0x200004f8

08001a50 <shared_mem_set_update_completed>:
{
  return shared_data.update_size;
}

void shared_mem_set_update_completed(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  memcpy(shared_data.fota_status, "DONE", 4);
 8001a54:	4b02      	ldr	r3, [pc, #8]	; (8001a60 <shared_mem_set_update_completed+0x10>)
 8001a56:	4a03      	ldr	r2, [pc, #12]	; (8001a64 <shared_mem_set_update_completed+0x14>)
 8001a58:	60da      	str	r2, [r3, #12]
}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	200004f8 	.word	0x200004f8
 8001a64:	454e4f44 	.word	0x454e4f44

08001a68 <shared_mem_clear_ota_info>:

void shared_mem_clear_ota_info(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  shared_data.update_size = 0;
 8001a6c:	4b02      	ldr	r3, [pc, #8]	; (8001a78 <shared_mem_clear_ota_info+0x10>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]

}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	200004f8 	.word	0x200004f8

08001a7c <shared_mem_set_app_update_requested>:

void shared_mem_set_app_update_requested(bool value)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	0002      	movs	r2, r0
 8001a84:	1dfb      	adds	r3, r7, #7
 8001a86:	701a      	strb	r2, [r3, #0]
  prv_set_flag(APP_UPDATE_REQUEST, value);
 8001a88:	1dfb      	adds	r3, r7, #7
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	0019      	movs	r1, r3
 8001a8e:	2001      	movs	r0, #1
 8001a90:	f7ff ff5a 	bl	8001948 <prv_set_flag>
}
 8001a94:	46c0      	nop			; (mov r8, r8)
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b002      	add	sp, #8
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <shared_mem_set_update>:
  shared_data.update_size = size;
}


void shared_mem_set_update(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
	shared_data.update = 1;
 8001aa0:	4b02      	ldr	r3, [pc, #8]	; (8001aac <shared_mem_set_update+0x10>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	745a      	strb	r2, [r3, #17]
}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	200004f8 	.word	0x200004f8

08001ab0 <shared_mem_get_update>:
{
	shared_data.update = 0;
}

int shared_mem_get_update(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	return shared_data.update;
 8001ab4:	4b02      	ldr	r3, [pc, #8]	; (8001ac0 <shared_mem_get_update+0x10>)
 8001ab6:	7c5b      	ldrb	r3, [r3, #17]
}
 8001ab8:	0018      	movs	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	200004f8 	.word	0x200004f8

08001ac4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001acc:	4b07      	ldr	r3, [pc, #28]	; (8001aec <RetargetInit+0x28>)
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	601a      	str	r2, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <RetargetInit+0x2c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6898      	ldr	r0, [r3, #8]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	2202      	movs	r2, #2
 8001adc:	2100      	movs	r1, #0
 8001ade:	f004 fcfb 	bl	80064d8 <setvbuf>
}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b002      	add	sp, #8
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	20000d84 	.word	0x20000d84
 8001af0:	2000040c 	.word	0x2000040c

08001af4 <_isatty>:

int _isatty(int fd) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	db04      	blt.n	8001b0c <_isatty+0x18>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	dc01      	bgt.n	8001b0c <_isatty+0x18>
    return 1;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e005      	b.n	8001b18 <_isatty+0x24>

  errno = EBADF;
 8001b0c:	f004 fc12 	bl	8006334 <__errno>
 8001b10:	0003      	movs	r3, r0
 8001b12:	2209      	movs	r2, #9
 8001b14:	601a      	str	r2, [r3, #0]
  return 0;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	0018      	movs	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	b002      	add	sp, #8
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_write>:

int _write(int fd, char* ptr, int len) {
 8001b20:	b5b0      	push	{r4, r5, r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d002      	beq.n	8001b38 <_write+0x18>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d114      	bne.n	8001b62 <_write+0x42>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <_write+0x58>)
 8001b3a:	6818      	ldr	r0, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	2517      	movs	r5, #23
 8001b42:	197c      	adds	r4, r7, r5
 8001b44:	2301      	movs	r3, #1
 8001b46:	425b      	negs	r3, r3
 8001b48:	68b9      	ldr	r1, [r7, #8]
 8001b4a:	f002 fbc3 	bl	80042d4 <HAL_UART_Transmit>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 8001b52:	197b      	adds	r3, r7, r5
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <_write+0x3e>
      return len;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	e008      	b.n	8001b70 <_write+0x50>
    else
      return EIO;
 8001b5e:	2305      	movs	r3, #5
 8001b60:	e006      	b.n	8001b70 <_write+0x50>
  }
  errno = EBADF;
 8001b62:	f004 fbe7 	bl	8006334 <__errno>
 8001b66:	0003      	movs	r3, r0
 8001b68:	2209      	movs	r2, #9
 8001b6a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	425b      	negs	r3, r3
}
 8001b70:	0018      	movs	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b006      	add	sp, #24
 8001b76:	bdb0      	pop	{r4, r5, r7, pc}
 8001b78:	20000d84 	.word	0x20000d84

08001b7c <_close>:

int _close(int fd) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	db04      	blt.n	8001b94 <_close+0x18>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	dc01      	bgt.n	8001b94 <_close+0x18>
    return 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	e006      	b.n	8001ba2 <_close+0x26>

  errno = EBADF;
 8001b94:	f004 fbce 	bl	8006334 <__errno>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	2209      	movs	r2, #9
 8001b9c:	601a      	str	r2, [r3, #0]
  return -1;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	425b      	negs	r3, r3
}
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	b002      	add	sp, #8
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	60f8      	str	r0, [r7, #12]
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001bb6:	f004 fbbd 	bl	8006334 <__errno>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	2209      	movs	r2, #9
 8001bbe:	601a      	str	r2, [r3, #0]
  return -1;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	425b      	negs	r3, r3
}
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	b004      	add	sp, #16
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <_read>:

int _read(int fd, char* ptr, int len) {
 8001bcc:	b5b0      	push	{r4, r5, r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d113      	bne.n	8001c06 <_read+0x3a>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001bde:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <_read+0x50>)
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	2517      	movs	r5, #23
 8001be4:	197c      	adds	r4, r7, r5
 8001be6:	2301      	movs	r3, #1
 8001be8:	425b      	negs	r3, r3
 8001bea:	68b9      	ldr	r1, [r7, #8]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f002 fc0d 	bl	800440c <HAL_UART_Receive>
 8001bf2:	0003      	movs	r3, r0
 8001bf4:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 8001bf6:	197b      	adds	r3, r7, r5
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <_read+0x36>
      return 1;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e008      	b.n	8001c14 <_read+0x48>
    else
      return EIO;
 8001c02:	2305      	movs	r3, #5
 8001c04:	e006      	b.n	8001c14 <_read+0x48>
  }
  errno = EBADF;
 8001c06:	f004 fb95 	bl	8006334 <__errno>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	2209      	movs	r2, #9
 8001c0e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c10:	2301      	movs	r3, #1
 8001c12:	425b      	negs	r3, r3
}
 8001c14:	0018      	movs	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b006      	add	sp, #24
 8001c1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c1c:	20000d84 	.word	0x20000d84

08001c20 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	db08      	blt.n	8001c42 <_fstat+0x22>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	dc05      	bgt.n	8001c42 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2280      	movs	r2, #128	; 0x80
 8001c3a:	0192      	lsls	r2, r2, #6
 8001c3c:	605a      	str	r2, [r3, #4]
    return 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e005      	b.n	8001c4e <_fstat+0x2e>
  }

  errno = EBADF;
 8001c42:	f004 fb77 	bl	8006334 <__errno>
 8001c46:	0003      	movs	r3, r0
 8001c48:	2209      	movs	r2, #9
 8001c4a:	601a      	str	r2, [r3, #0]
  return 0;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	0018      	movs	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b002      	add	sp, #8
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <HAL_MspInit+0x44>)
 8001c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <HAL_MspInit+0x44>)
 8001c64:	2101      	movs	r1, #1
 8001c66:	430a      	orrs	r2, r1
 8001c68:	641a      	str	r2, [r3, #64]	; 0x40
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <HAL_MspInit+0x44>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4013      	ands	r3, r2
 8001c72:	607b      	str	r3, [r7, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_MspInit+0x44>)
 8001c78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <HAL_MspInit+0x44>)
 8001c7c:	2180      	movs	r1, #128	; 0x80
 8001c7e:	0549      	lsls	r1, r1, #21
 8001c80:	430a      	orrs	r2, r1
 8001c82:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_MspInit+0x44>)
 8001c86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	055b      	lsls	r3, r3, #21
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	46bd      	mov	sp, r7
 8001c96:	b002      	add	sp, #8
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a29      	ldr	r2, [pc, #164]	; (8001d54 <HAL_TIM_Base_MspInit+0xb4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d11e      	bne.n	8001cf0 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cb2:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <HAL_TIM_Base_MspInit+0xb8>)
 8001cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cb6:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <HAL_TIM_Base_MspInit+0xb8>)
 8001cb8:	2180      	movs	r1, #128	; 0x80
 8001cba:	0109      	lsls	r1, r1, #4
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	641a      	str	r2, [r3, #64]	; 0x40
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <HAL_TIM_Base_MspInit+0xb8>)
 8001cc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	4013      	ands	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	200d      	movs	r0, #13
 8001cd4:	f000 fb12 	bl	80022fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001cd8:	200d      	movs	r0, #13
 8001cda:	f000 fb24 	bl	8002326 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	200e      	movs	r0, #14
 8001ce4:	f000 fb0a 	bl	80022fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001ce8:	200e      	movs	r0, #14
 8001cea:	f000 fb1c 	bl	8002326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001cee:	e02c      	b.n	8001d4a <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM3)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a19      	ldr	r2, [pc, #100]	; (8001d5c <HAL_TIM_Base_MspInit+0xbc>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d10c      	bne.n	8001d14 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cfa:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <HAL_TIM_Base_MspInit+0xb8>)
 8001cfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cfe:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <HAL_TIM_Base_MspInit+0xb8>)
 8001d00:	2102      	movs	r1, #2
 8001d02:	430a      	orrs	r2, r1
 8001d04:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d06:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <HAL_TIM_Base_MspInit+0xb8>)
 8001d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]
}
 8001d12:	e01a      	b.n	8001d4a <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM15)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a11      	ldr	r2, [pc, #68]	; (8001d60 <HAL_TIM_Base_MspInit+0xc0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d115      	bne.n	8001d4a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <HAL_TIM_Base_MspInit+0xb8>)
 8001d20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d22:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <HAL_TIM_Base_MspInit+0xb8>)
 8001d24:	2180      	movs	r1, #128	; 0x80
 8001d26:	0249      	lsls	r1, r1, #9
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	641a      	str	r2, [r3, #64]	; 0x40
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <HAL_TIM_Base_MspInit+0xb8>)
 8001d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	025b      	lsls	r3, r3, #9
 8001d34:	4013      	ands	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	2014      	movs	r0, #20
 8001d40:	f000 fadc 	bl	80022fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001d44:	2014      	movs	r0, #20
 8001d46:	f000 faee 	bl	8002326 <HAL_NVIC_EnableIRQ>
}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	b006      	add	sp, #24
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	40012c00 	.word	0x40012c00
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40000400 	.word	0x40000400
 8001d60:	40014000 	.word	0x40014000

08001d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d64:	b590      	push	{r4, r7, lr}
 8001d66:	b097      	sub	sp, #92	; 0x5c
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	2344      	movs	r3, #68	; 0x44
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	0018      	movs	r0, r3
 8001d72:	2314      	movs	r3, #20
 8001d74:	001a      	movs	r2, r3
 8001d76:	2100      	movs	r1, #0
 8001d78:	f004 fb0f 	bl	800639a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d7c:	2418      	movs	r4, #24
 8001d7e:	193b      	adds	r3, r7, r4
 8001d80:	0018      	movs	r0, r3
 8001d82:	232c      	movs	r3, #44	; 0x2c
 8001d84:	001a      	movs	r2, r3
 8001d86:	2100      	movs	r1, #0
 8001d88:	f004 fb07 	bl	800639a <memset>
  if(huart->Instance==USART2)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a45      	ldr	r2, [pc, #276]	; (8001ea8 <HAL_UART_MspInit+0x144>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d147      	bne.n	8001e26 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d96:	193b      	adds	r3, r7, r4
 8001d98:	2202      	movs	r2, #2
 8001d9a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d9c:	193b      	adds	r3, r7, r4
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001da2:	193b      	adds	r3, r7, r4
 8001da4:	0018      	movs	r0, r3
 8001da6:	f001 fc09 	bl	80035bc <HAL_RCCEx_PeriphCLKConfig>
 8001daa:	1e03      	subs	r3, r0, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001dae:	f7ff fdc5 	bl	800193c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001db2:	4b3e      	ldr	r3, [pc, #248]	; (8001eac <HAL_UART_MspInit+0x148>)
 8001db4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001db6:	4b3d      	ldr	r3, [pc, #244]	; (8001eac <HAL_UART_MspInit+0x148>)
 8001db8:	2180      	movs	r1, #128	; 0x80
 8001dba:	0289      	lsls	r1, r1, #10
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001dc0:	4b3a      	ldr	r3, [pc, #232]	; (8001eac <HAL_UART_MspInit+0x148>)
 8001dc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	029b      	lsls	r3, r3, #10
 8001dc8:	4013      	ands	r3, r2
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dce:	4b37      	ldr	r3, [pc, #220]	; (8001eac <HAL_UART_MspInit+0x148>)
 8001dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dd2:	4b36      	ldr	r3, [pc, #216]	; (8001eac <HAL_UART_MspInit+0x148>)
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	635a      	str	r2, [r3, #52]	; 0x34
 8001dda:	4b34      	ldr	r3, [pc, #208]	; (8001eac <HAL_UART_MspInit+0x148>)
 8001ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dde:	2201      	movs	r2, #1
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001de6:	2144      	movs	r1, #68	; 0x44
 8001de8:	187b      	adds	r3, r7, r1
 8001dea:	220c      	movs	r2, #12
 8001dec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dee:	187b      	adds	r3, r7, r1
 8001df0:	2202      	movs	r2, #2
 8001df2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	187b      	adds	r3, r7, r1
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	187b      	adds	r3, r7, r1
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001e00:	187b      	adds	r3, r7, r1
 8001e02:	2201      	movs	r2, #1
 8001e04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e06:	187a      	adds	r2, r7, r1
 8001e08:	23a0      	movs	r3, #160	; 0xa0
 8001e0a:	05db      	lsls	r3, r3, #23
 8001e0c:	0011      	movs	r1, r2
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f000 fd1e 	bl	8002850 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e14:	2200      	movs	r2, #0
 8001e16:	2100      	movs	r1, #0
 8001e18:	201c      	movs	r0, #28
 8001e1a:	f000 fa6f 	bl	80022fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e1e:	201c      	movs	r0, #28
 8001e20:	f000 fa81 	bl	8002326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8001e24:	e03c      	b.n	8001ea0 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART5)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a21      	ldr	r2, [pc, #132]	; (8001eb0 <HAL_UART_MspInit+0x14c>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d137      	bne.n	8001ea0 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART5_CLK_ENABLE();
 8001e30:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <HAL_UART_MspInit+0x148>)
 8001e32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e34:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <HAL_UART_MspInit+0x148>)
 8001e36:	2180      	movs	r1, #128	; 0x80
 8001e38:	0049      	lsls	r1, r1, #1
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e3e:	4b1b      	ldr	r3, [pc, #108]	; (8001eac <HAL_UART_MspInit+0x148>)
 8001e40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e42:	2380      	movs	r3, #128	; 0x80
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4013      	ands	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4c:	4b17      	ldr	r3, [pc, #92]	; (8001eac <HAL_UART_MspInit+0x148>)
 8001e4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e50:	4b16      	ldr	r3, [pc, #88]	; (8001eac <HAL_UART_MspInit+0x148>)
 8001e52:	2102      	movs	r1, #2
 8001e54:	430a      	orrs	r2, r1
 8001e56:	635a      	str	r2, [r3, #52]	; 0x34
 8001e58:	4b14      	ldr	r3, [pc, #80]	; (8001eac <HAL_UART_MspInit+0x148>)
 8001e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	4013      	ands	r3, r2
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e64:	2144      	movs	r1, #68	; 0x44
 8001e66:	187b      	adds	r3, r7, r1
 8001e68:	2203      	movs	r2, #3
 8001e6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6c:	187b      	adds	r3, r7, r1
 8001e6e:	2202      	movs	r2, #2
 8001e70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	187b      	adds	r3, r7, r1
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e78:	187b      	adds	r3, r7, r1
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART5;
 8001e7e:	187b      	adds	r3, r7, r1
 8001e80:	2208      	movs	r2, #8
 8001e82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e84:	187b      	adds	r3, r7, r1
 8001e86:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <HAL_UART_MspInit+0x150>)
 8001e88:	0019      	movs	r1, r3
 8001e8a:	0010      	movs	r0, r2
 8001e8c:	f000 fce0 	bl	8002850 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_5_6_IRQn, 0, 0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2100      	movs	r1, #0
 8001e94:	201d      	movs	r0, #29
 8001e96:	f000 fa31 	bl	80022fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_IRQn);
 8001e9a:	201d      	movs	r0, #29
 8001e9c:	f000 fa43 	bl	8002326 <HAL_NVIC_EnableIRQ>
}
 8001ea0:	46c0      	nop			; (mov r8, r8)
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b017      	add	sp, #92	; 0x5c
 8001ea6:	bd90      	pop	{r4, r7, pc}
 8001ea8:	40004400 	.word	0x40004400
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40005000 	.word	0x40005000
 8001eb4:	50000400 	.word	0x50000400

08001eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <NMI_Handler+0x4>

08001ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ec2:	e7fe      	b.n	8001ec2 <HardFault_Handler+0x4>

08001ec4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ec8:	46c0      	nop			; (mov r8, r8)
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001edc:	f000 f910 	bl	8002100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ee0:	46c0      	nop			; (mov r8, r8)
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001eec:	4b03      	ldr	r3, [pc, #12]	; (8001efc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001eee:	0018      	movs	r0, r3
 8001ef0:	f001 fdce 	bl	8003a90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001ef4:	46c0      	nop			; (mov r8, r8)
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	2000092c 	.word	0x2000092c

08001f00 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f04:	4b03      	ldr	r3, [pc, #12]	; (8001f14 <TIM1_CC_IRQHandler+0x14>)
 8001f06:	0018      	movs	r0, r3
 8001f08:	f001 fdc2 	bl	8003a90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001f0c:	46c0      	nop			; (mov r8, r8)
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	2000092c 	.word	0x2000092c

08001f18 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <TIM15_IRQHandler+0x14>)
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f001 fdb6 	bl	8003a90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8001f24:	46c0      	nop			; (mov r8, r8)
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	200009c4 	.word	0x200009c4

08001f30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f34:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <USART2_IRQHandler+0x14>)
 8001f36:	0018      	movs	r0, r3
 8001f38:	f002 fb4a 	bl	80045d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f3c:	46c0      	nop			; (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	20000a10 	.word	0x20000a10

08001f48 <USART3_4_5_6_IRQHandler>:

/**
  * @brief This function handles USART3, USART4, USART5, USART6 globlal Interrupts (combined with EXTI 28).
  */
void USART3_4_5_6_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_5_6_IRQn 0 */

  /* USER CODE END USART3_4_5_6_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <USART3_4_5_6_IRQHandler+0x14>)
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f002 fb3e 	bl	80045d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_5_6_IRQn 1 */

  /* USER CODE END USART3_4_5_6_IRQn 1 */
}
 8001f54:	46c0      	nop			; (mov r8, r8)
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	20000aa4 	.word	0x20000aa4

08001f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f68:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <_sbrk+0x5c>)
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <_sbrk+0x60>)
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f74:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <_sbrk+0x64>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d102      	bne.n	8001f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <_sbrk+0x64>)
 8001f7e:	4a12      	ldr	r2, [pc, #72]	; (8001fc8 <_sbrk+0x68>)
 8001f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <_sbrk+0x64>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	18d3      	adds	r3, r2, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d207      	bcs.n	8001fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f90:	f004 f9d0 	bl	8006334 <__errno>
 8001f94:	0003      	movs	r3, r0
 8001f96:	220c      	movs	r2, #12
 8001f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	425b      	negs	r3, r3
 8001f9e:	e009      	b.n	8001fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <_sbrk+0x64>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fa6:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	18d2      	adds	r2, r2, r3
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <_sbrk+0x64>)
 8001fb0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
}
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b006      	add	sp, #24
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20024000 	.word	0x20024000
 8001fc0:	00000400 	.word	0x00000400
 8001fc4:	20000d88 	.word	0x20000d88
 8001fc8:	20000dc0 	.word	0x20000dc0

08001fcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fd0:	46c0      	nop			; (mov r8, r8)
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fd8:	480d      	ldr	r0, [pc, #52]	; (8002010 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fda:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fdc:	f7ff fff6 	bl	8001fcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fe0:	480c      	ldr	r0, [pc, #48]	; (8002014 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fe2:	490d      	ldr	r1, [pc, #52]	; (8002018 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fe4:	4a0d      	ldr	r2, [pc, #52]	; (800201c <LoopForever+0xe>)
  movs r3, #0
 8001fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe8:	e002      	b.n	8001ff0 <LoopCopyDataInit>

08001fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fee:	3304      	adds	r3, #4

08001ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff4:	d3f9      	bcc.n	8001fea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ff6:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ff8:	4c0a      	ldr	r4, [pc, #40]	; (8002024 <LoopForever+0x16>)
  movs r3, #0
 8001ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ffc:	e001      	b.n	8002002 <LoopFillZerobss>

08001ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002000:	3204      	adds	r2, #4

08002002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002004:	d3fb      	bcc.n	8001ffe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002006:	f004 f99b 	bl	8006340 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800200a:	f7ff f8ef 	bl	80011ec <main>

0800200e <LoopForever>:

LoopForever:
  b LoopForever
 800200e:	e7fe      	b.n	800200e <LoopForever>
  ldr   r0, =_estack
 8002010:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8002014:	20000400 	.word	0x20000400
  ldr r1, =_edata
 8002018:	200004f8 	.word	0x200004f8
  ldr r2, =_sidata
 800201c:	0800818c 	.word	0x0800818c
  ldr r2, =_sbss
 8002020:	20000510 	.word	0x20000510
  ldr r4, =_ebss
 8002024:	20000dbc 	.word	0x20000dbc

08002028 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002028:	e7fe      	b.n	8002028 <ADC1_IRQHandler>
	...

0800202c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002032:	1dfb      	adds	r3, r7, #7
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_Init+0x3c>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <HAL_Init+0x3c>)
 800203e:	2180      	movs	r1, #128	; 0x80
 8002040:	0049      	lsls	r1, r1, #1
 8002042:	430a      	orrs	r2, r1
 8002044:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002046:	2003      	movs	r0, #3
 8002048:	f000 f810 	bl	800206c <HAL_InitTick>
 800204c:	1e03      	subs	r3, r0, #0
 800204e:	d003      	beq.n	8002058 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002050:	1dfb      	adds	r3, r7, #7
 8002052:	2201      	movs	r2, #1
 8002054:	701a      	strb	r2, [r3, #0]
 8002056:	e001      	b.n	800205c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002058:	f7ff fdfe 	bl	8001c58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800205c:	1dfb      	adds	r3, r7, #7
 800205e:	781b      	ldrb	r3, [r3, #0]
}
 8002060:	0018      	movs	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	b002      	add	sp, #8
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40022000 	.word	0x40022000

0800206c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002074:	230f      	movs	r3, #15
 8002076:	18fb      	adds	r3, r7, r3
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800207c:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <HAL_InitTick+0x88>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d02b      	beq.n	80020dc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002084:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <HAL_InitTick+0x8c>)
 8002086:	681c      	ldr	r4, [r3, #0]
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <HAL_InitTick+0x88>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	0019      	movs	r1, r3
 800208e:	23fa      	movs	r3, #250	; 0xfa
 8002090:	0098      	lsls	r0, r3, #2
 8002092:	f7fe f847 	bl	8000124 <__udivsi3>
 8002096:	0003      	movs	r3, r0
 8002098:	0019      	movs	r1, r3
 800209a:	0020      	movs	r0, r4
 800209c:	f7fe f842 	bl	8000124 <__udivsi3>
 80020a0:	0003      	movs	r3, r0
 80020a2:	0018      	movs	r0, r3
 80020a4:	f000 f953 	bl	800234e <HAL_SYSTICK_Config>
 80020a8:	1e03      	subs	r3, r0, #0
 80020aa:	d112      	bne.n	80020d2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d80a      	bhi.n	80020c8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	2301      	movs	r3, #1
 80020b6:	425b      	negs	r3, r3
 80020b8:	2200      	movs	r2, #0
 80020ba:	0018      	movs	r0, r3
 80020bc:	f000 f91e 	bl	80022fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020c0:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <HAL_InitTick+0x90>)
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	e00d      	b.n	80020e4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80020c8:	230f      	movs	r3, #15
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	2201      	movs	r2, #1
 80020ce:	701a      	strb	r2, [r3, #0]
 80020d0:	e008      	b.n	80020e4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020d2:	230f      	movs	r3, #15
 80020d4:	18fb      	adds	r3, r7, r3
 80020d6:	2201      	movs	r2, #1
 80020d8:	701a      	strb	r2, [r3, #0]
 80020da:	e003      	b.n	80020e4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020dc:	230f      	movs	r3, #15
 80020de:	18fb      	adds	r3, r7, r3
 80020e0:	2201      	movs	r2, #1
 80020e2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80020e4:	230f      	movs	r3, #15
 80020e6:	18fb      	adds	r3, r7, r3
 80020e8:	781b      	ldrb	r3, [r3, #0]
}
 80020ea:	0018      	movs	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b005      	add	sp, #20
 80020f0:	bd90      	pop	{r4, r7, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	20000408 	.word	0x20000408
 80020f8:	20000400 	.word	0x20000400
 80020fc:	20000404 	.word	0x20000404

08002100 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <HAL_IncTick+0x1c>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	001a      	movs	r2, r3
 800210a:	4b05      	ldr	r3, [pc, #20]	; (8002120 <HAL_IncTick+0x20>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	18d2      	adds	r2, r2, r3
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <HAL_IncTick+0x20>)
 8002112:	601a      	str	r2, [r3, #0]
}
 8002114:	46c0      	nop			; (mov r8, r8)
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	20000408 	.word	0x20000408
 8002120:	20000d8c 	.word	0x20000d8c

08002124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  return uwTick;
 8002128:	4b02      	ldr	r3, [pc, #8]	; (8002134 <HAL_GetTick+0x10>)
 800212a:	681b      	ldr	r3, [r3, #0]
}
 800212c:	0018      	movs	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	20000d8c 	.word	0x20000d8c

08002138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002140:	f7ff fff0 	bl	8002124 <HAL_GetTick>
 8002144:	0003      	movs	r3, r0
 8002146:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	3301      	adds	r3, #1
 8002150:	d005      	beq.n	800215e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002152:	4b0a      	ldr	r3, [pc, #40]	; (800217c <HAL_Delay+0x44>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	001a      	movs	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	189b      	adds	r3, r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	f7ff ffe0 	bl	8002124 <HAL_GetTick>
 8002164:	0002      	movs	r2, r0
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	429a      	cmp	r2, r3
 800216e:	d8f7      	bhi.n	8002160 <HAL_Delay+0x28>
  {
  }
}
 8002170:	46c0      	nop			; (mov r8, r8)
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	46bd      	mov	sp, r7
 8002176:	b004      	add	sp, #16
 8002178:	bd80      	pop	{r7, pc}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	20000408 	.word	0x20000408

08002180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	0002      	movs	r2, r0
 8002188:	1dfb      	adds	r3, r7, #7
 800218a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800218c:	1dfb      	adds	r3, r7, #7
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b7f      	cmp	r3, #127	; 0x7f
 8002192:	d809      	bhi.n	80021a8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002194:	1dfb      	adds	r3, r7, #7
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	001a      	movs	r2, r3
 800219a:	231f      	movs	r3, #31
 800219c:	401a      	ands	r2, r3
 800219e:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <__NVIC_EnableIRQ+0x30>)
 80021a0:	2101      	movs	r1, #1
 80021a2:	4091      	lsls	r1, r2
 80021a4:	000a      	movs	r2, r1
 80021a6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80021a8:	46c0      	nop			; (mov r8, r8)
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b002      	add	sp, #8
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	e000e100 	.word	0xe000e100

080021b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b4:	b590      	push	{r4, r7, lr}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	0002      	movs	r2, r0
 80021bc:	6039      	str	r1, [r7, #0]
 80021be:	1dfb      	adds	r3, r7, #7
 80021c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021c2:	1dfb      	adds	r3, r7, #7
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b7f      	cmp	r3, #127	; 0x7f
 80021c8:	d828      	bhi.n	800221c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021ca:	4a2f      	ldr	r2, [pc, #188]	; (8002288 <__NVIC_SetPriority+0xd4>)
 80021cc:	1dfb      	adds	r3, r7, #7
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	b25b      	sxtb	r3, r3
 80021d2:	089b      	lsrs	r3, r3, #2
 80021d4:	33c0      	adds	r3, #192	; 0xc0
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	589b      	ldr	r3, [r3, r2]
 80021da:	1dfa      	adds	r2, r7, #7
 80021dc:	7812      	ldrb	r2, [r2, #0]
 80021de:	0011      	movs	r1, r2
 80021e0:	2203      	movs	r2, #3
 80021e2:	400a      	ands	r2, r1
 80021e4:	00d2      	lsls	r2, r2, #3
 80021e6:	21ff      	movs	r1, #255	; 0xff
 80021e8:	4091      	lsls	r1, r2
 80021ea:	000a      	movs	r2, r1
 80021ec:	43d2      	mvns	r2, r2
 80021ee:	401a      	ands	r2, r3
 80021f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	019b      	lsls	r3, r3, #6
 80021f6:	22ff      	movs	r2, #255	; 0xff
 80021f8:	401a      	ands	r2, r3
 80021fa:	1dfb      	adds	r3, r7, #7
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	0018      	movs	r0, r3
 8002200:	2303      	movs	r3, #3
 8002202:	4003      	ands	r3, r0
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002208:	481f      	ldr	r0, [pc, #124]	; (8002288 <__NVIC_SetPriority+0xd4>)
 800220a:	1dfb      	adds	r3, r7, #7
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	b25b      	sxtb	r3, r3
 8002210:	089b      	lsrs	r3, r3, #2
 8002212:	430a      	orrs	r2, r1
 8002214:	33c0      	adds	r3, #192	; 0xc0
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800221a:	e031      	b.n	8002280 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800221c:	4a1b      	ldr	r2, [pc, #108]	; (800228c <__NVIC_SetPriority+0xd8>)
 800221e:	1dfb      	adds	r3, r7, #7
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	0019      	movs	r1, r3
 8002224:	230f      	movs	r3, #15
 8002226:	400b      	ands	r3, r1
 8002228:	3b08      	subs	r3, #8
 800222a:	089b      	lsrs	r3, r3, #2
 800222c:	3306      	adds	r3, #6
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	18d3      	adds	r3, r2, r3
 8002232:	3304      	adds	r3, #4
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	1dfa      	adds	r2, r7, #7
 8002238:	7812      	ldrb	r2, [r2, #0]
 800223a:	0011      	movs	r1, r2
 800223c:	2203      	movs	r2, #3
 800223e:	400a      	ands	r2, r1
 8002240:	00d2      	lsls	r2, r2, #3
 8002242:	21ff      	movs	r1, #255	; 0xff
 8002244:	4091      	lsls	r1, r2
 8002246:	000a      	movs	r2, r1
 8002248:	43d2      	mvns	r2, r2
 800224a:	401a      	ands	r2, r3
 800224c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	019b      	lsls	r3, r3, #6
 8002252:	22ff      	movs	r2, #255	; 0xff
 8002254:	401a      	ands	r2, r3
 8002256:	1dfb      	adds	r3, r7, #7
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	0018      	movs	r0, r3
 800225c:	2303      	movs	r3, #3
 800225e:	4003      	ands	r3, r0
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002264:	4809      	ldr	r0, [pc, #36]	; (800228c <__NVIC_SetPriority+0xd8>)
 8002266:	1dfb      	adds	r3, r7, #7
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	001c      	movs	r4, r3
 800226c:	230f      	movs	r3, #15
 800226e:	4023      	ands	r3, r4
 8002270:	3b08      	subs	r3, #8
 8002272:	089b      	lsrs	r3, r3, #2
 8002274:	430a      	orrs	r2, r1
 8002276:	3306      	adds	r3, #6
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	18c3      	adds	r3, r0, r3
 800227c:	3304      	adds	r3, #4
 800227e:	601a      	str	r2, [r3, #0]
}
 8002280:	46c0      	nop			; (mov r8, r8)
 8002282:	46bd      	mov	sp, r7
 8002284:	b003      	add	sp, #12
 8002286:	bd90      	pop	{r4, r7, pc}
 8002288:	e000e100 	.word	0xe000e100
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002294:	f3bf 8f4f 	dsb	sy
}
 8002298:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800229a:	4b04      	ldr	r3, [pc, #16]	; (80022ac <__NVIC_SystemReset+0x1c>)
 800229c:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <__NVIC_SystemReset+0x20>)
 800229e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80022a0:	f3bf 8f4f 	dsb	sy
}
 80022a4:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	e7fd      	b.n	80022a6 <__NVIC_SystemReset+0x16>
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	e000ed00 	.word	0xe000ed00
 80022b0:	05fa0004 	.word	0x05fa0004

080022b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	1e5a      	subs	r2, r3, #1
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	045b      	lsls	r3, r3, #17
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d301      	bcc.n	80022cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022c8:	2301      	movs	r3, #1
 80022ca:	e010      	b.n	80022ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022cc:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <SysTick_Config+0x44>)
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	3a01      	subs	r2, #1
 80022d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022d4:	2301      	movs	r3, #1
 80022d6:	425b      	negs	r3, r3
 80022d8:	2103      	movs	r1, #3
 80022da:	0018      	movs	r0, r3
 80022dc:	f7ff ff6a 	bl	80021b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <SysTick_Config+0x44>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022e6:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <SysTick_Config+0x44>)
 80022e8:	2207      	movs	r2, #7
 80022ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	0018      	movs	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b002      	add	sp, #8
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	e000e010 	.word	0xe000e010

080022fc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	210f      	movs	r1, #15
 8002308:	187b      	adds	r3, r7, r1
 800230a:	1c02      	adds	r2, r0, #0
 800230c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	187b      	adds	r3, r7, r1
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	b25b      	sxtb	r3, r3
 8002316:	0011      	movs	r1, r2
 8002318:	0018      	movs	r0, r3
 800231a:	f7ff ff4b 	bl	80021b4 <__NVIC_SetPriority>
}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	46bd      	mov	sp, r7
 8002322:	b004      	add	sp, #16
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	0002      	movs	r2, r0
 800232e:	1dfb      	adds	r3, r7, #7
 8002330:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002332:	1dfb      	adds	r3, r7, #7
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	b25b      	sxtb	r3, r3
 8002338:	0018      	movs	r0, r3
 800233a:	f7ff ff21 	bl	8002180 <__NVIC_EnableIRQ>
}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	46bd      	mov	sp, r7
 8002342:	b002      	add	sp, #8
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800234a:	f7ff ffa1 	bl	8002290 <__NVIC_SystemReset>

0800234e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	0018      	movs	r0, r3
 800235a:	f7ff ffab 	bl	80022b4 <SysTick_Config>
 800235e:	0003      	movs	r3, r0
}
 8002360:	0018      	movs	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	b002      	add	sp, #8
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e04f      	b.n	800241a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2225      	movs	r2, #37	; 0x25
 800237e:	5c9b      	ldrb	r3, [r3, r2]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d008      	beq.n	8002398 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2204      	movs	r2, #4
 800238a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2224      	movs	r2, #36	; 0x24
 8002390:	2100      	movs	r1, #0
 8002392:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e040      	b.n	800241a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	210e      	movs	r1, #14
 80023a4:	438a      	bics	r2, r1
 80023a6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b2:	491c      	ldr	r1, [pc, #112]	; (8002424 <HAL_DMA_Abort+0xbc>)
 80023b4:	400a      	ands	r2, r1
 80023b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2101      	movs	r1, #1
 80023c4:	438a      	bics	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023cc:	221c      	movs	r2, #28
 80023ce:	401a      	ands	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	2101      	movs	r1, #1
 80023d6:	4091      	lsls	r1, r2
 80023d8:	000a      	movs	r2, r1
 80023da:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00c      	beq.n	8002408 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f8:	490a      	ldr	r1, [pc, #40]	; (8002424 <HAL_DMA_Abort+0xbc>)
 80023fa:	400a      	ands	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002406:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2225      	movs	r2, #37	; 0x25
 800240c:	2101      	movs	r1, #1
 800240e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2224      	movs	r2, #36	; 0x24
 8002414:	2100      	movs	r1, #0
 8002416:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	0018      	movs	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	b002      	add	sp, #8
 8002420:	bd80      	pop	{r7, pc}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	fffffeff 	.word	0xfffffeff

08002428 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002430:	210f      	movs	r1, #15
 8002432:	187b      	adds	r3, r7, r1
 8002434:	2200      	movs	r2, #0
 8002436:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2225      	movs	r2, #37	; 0x25
 800243c:	5c9b      	ldrb	r3, [r3, r2]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d006      	beq.n	8002452 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2204      	movs	r2, #4
 8002448:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800244a:	187b      	adds	r3, r7, r1
 800244c:	2201      	movs	r2, #1
 800244e:	701a      	strb	r2, [r3, #0]
 8002450:	e048      	b.n	80024e4 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	210e      	movs	r1, #14
 800245e:	438a      	bics	r2, r1
 8002460:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2101      	movs	r1, #1
 800246e:	438a      	bics	r2, r1
 8002470:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800247c:	491d      	ldr	r1, [pc, #116]	; (80024f4 <HAL_DMA_Abort_IT+0xcc>)
 800247e:	400a      	ands	r2, r1
 8002480:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	221c      	movs	r2, #28
 8002488:	401a      	ands	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	2101      	movs	r1, #1
 8002490:	4091      	lsls	r1, r2
 8002492:	000a      	movs	r2, r1
 8002494:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800249e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00c      	beq.n	80024c2 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b2:	4910      	ldr	r1, [pc, #64]	; (80024f4 <HAL_DMA_Abort_IT+0xcc>)
 80024b4:	400a      	ands	r2, r1
 80024b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80024c0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2225      	movs	r2, #37	; 0x25
 80024c6:	2101      	movs	r1, #1
 80024c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2224      	movs	r2, #36	; 0x24
 80024ce:	2100      	movs	r1, #0
 80024d0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d004      	beq.n	80024e4 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	0010      	movs	r0, r2
 80024e2:	4798      	blx	r3
    }
  }
  return status;
 80024e4:	230f      	movs	r3, #15
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	781b      	ldrb	r3, [r3, #0]
}
 80024ea:	0018      	movs	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	b004      	add	sp, #16
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	46c0      	nop			; (mov r8, r8)
 80024f4:	fffffeff 	.word	0xfffffeff

080024f8 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80024f8:	b5b0      	push	{r4, r5, r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	603a      	str	r2, [r7, #0]
 8002504:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002506:	4b21      	ldr	r3, [pc, #132]	; (800258c <HAL_FLASH_Program+0x94>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_FLASH_Program+0x1a>
 800250e:	2302      	movs	r3, #2
 8002510:	e038      	b.n	8002584 <HAL_FLASH_Program+0x8c>
 8002512:	4b1e      	ldr	r3, [pc, #120]	; (800258c <HAL_FLASH_Program+0x94>)
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002518:	4b1c      	ldr	r3, [pc, #112]	; (800258c <HAL_FLASH_Program+0x94>)
 800251a:	2200      	movs	r2, #0
 800251c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800251e:	2517      	movs	r5, #23
 8002520:	197c      	adds	r4, r7, r5
 8002522:	23fa      	movs	r3, #250	; 0xfa
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	0018      	movs	r0, r3
 8002528:	f000 f874 	bl	8002614 <FLASH_WaitForLastOperation>
 800252c:	0003      	movs	r3, r0
 800252e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002530:	197b      	adds	r3, r7, r5
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d11f      	bne.n	8002578 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d106      	bne.n	800254c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68b9      	ldr	r1, [r7, #8]
 8002544:	0008      	movs	r0, r1
 8002546:	f000 f8b3 	bl	80026b0 <FLASH_Program_DoubleWord>
 800254a:	e005      	b.n	8002558 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	0011      	movs	r1, r2
 8002552:	0018      	movs	r0, r3
 8002554:	f005 fa3c 	bl	80079d0 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002558:	2317      	movs	r3, #23
 800255a:	18fc      	adds	r4, r7, r3
 800255c:	23fa      	movs	r3, #250	; 0xfa
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	0018      	movs	r0, r3
 8002562:	f000 f857 	bl	8002614 <FLASH_WaitForLastOperation>
 8002566:	0003      	movs	r3, r0
 8002568:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800256a:	4b09      	ldr	r3, [pc, #36]	; (8002590 <HAL_FLASH_Program+0x98>)
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	43d9      	mvns	r1, r3
 8002572:	4b07      	ldr	r3, [pc, #28]	; (8002590 <HAL_FLASH_Program+0x98>)
 8002574:	400a      	ands	r2, r1
 8002576:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <HAL_FLASH_Program+0x94>)
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800257e:	2317      	movs	r3, #23
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	781b      	ldrb	r3, [r3, #0]
}
 8002584:	0018      	movs	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	b006      	add	sp, #24
 800258a:	bdb0      	pop	{r4, r5, r7, pc}
 800258c:	20000d90 	.word	0x20000d90
 8002590:	40022000 	.word	0x40022000

08002594 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800259a:	1dfb      	adds	r3, r7, #7
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80025a0:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <HAL_FLASH_Unlock+0x3c>)
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	da0c      	bge.n	80025c2 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80025a8:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_FLASH_Unlock+0x3c>)
 80025aa:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <HAL_FLASH_Unlock+0x40>)
 80025ac:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80025ae:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <HAL_FLASH_Unlock+0x3c>)
 80025b0:	4a09      	ldr	r2, [pc, #36]	; (80025d8 <HAL_FLASH_Unlock+0x44>)
 80025b2:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_FLASH_Unlock+0x3c>)
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	da02      	bge.n	80025c2 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 80025bc:	1dfb      	adds	r3, r7, #7
 80025be:	2201      	movs	r2, #1
 80025c0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80025c2:	1dfb      	adds	r3, r7, #7
 80025c4:	781b      	ldrb	r3, [r3, #0]
}
 80025c6:	0018      	movs	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b002      	add	sp, #8
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	40022000 	.word	0x40022000
 80025d4:	45670123 	.word	0x45670123
 80025d8:	cdef89ab 	.word	0xcdef89ab

080025dc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80025e2:	1dfb      	adds	r3, r7, #7
 80025e4:	2201      	movs	r2, #1
 80025e6:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80025e8:	4b09      	ldr	r3, [pc, #36]	; (8002610 <HAL_FLASH_Lock+0x34>)
 80025ea:	695a      	ldr	r2, [r3, #20]
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <HAL_FLASH_Lock+0x34>)
 80025ee:	2180      	movs	r1, #128	; 0x80
 80025f0:	0609      	lsls	r1, r1, #24
 80025f2:	430a      	orrs	r2, r1
 80025f4:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_FLASH_Lock+0x34>)
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	da02      	bge.n	8002604 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 80025fe:	1dfb      	adds	r3, r7, #7
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002604:	1dfb      	adds	r3, r7, #7
 8002606:	781b      	ldrb	r3, [r3, #0]
}
 8002608:	0018      	movs	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	b002      	add	sp, #8
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40022000 	.word	0x40022000

08002614 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 800261c:	f7ff fd82 	bl	8002124 <HAL_GetTick>
 8002620:	0002      	movs	r2, r0
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	189b      	adds	r3, r3, r2
 8002626:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 8002628:	23c0      	movs	r3, #192	; 0xc0
 800262a:	029b      	lsls	r3, r3, #10
 800262c:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 800262e:	e007      	b.n	8002640 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 8002630:	f7ff fd78 	bl	8002124 <HAL_GetTick>
 8002634:	0002      	movs	r2, r0
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4293      	cmp	r3, r2
 800263a:	d801      	bhi.n	8002640 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e02a      	b.n	8002696 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 8002640:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <FLASH_WaitForLastOperation+0x8c>)
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	4013      	ands	r3, r2
 8002648:	d1f2      	bne.n	8002630 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <FLASH_WaitForLastOperation+0x8c>)
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	4a15      	ldr	r2, [pc, #84]	; (80026a4 <FLASH_WaitForLastOperation+0x90>)
 8002650:	4013      	ands	r3, r2
 8002652:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8002654:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <FLASH_WaitForLastOperation+0x8c>)
 8002656:	4a14      	ldr	r2, [pc, #80]	; (80026a8 <FLASH_WaitForLastOperation+0x94>)
 8002658:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d004      	beq.n	800266a <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8002660:	4b12      	ldr	r3, [pc, #72]	; (80026ac <FLASH_WaitForLastOperation+0x98>)
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e015      	b.n	8002696 <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 800266a:	f7ff fd5b 	bl	8002124 <HAL_GetTick>
 800266e:	0002      	movs	r2, r0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	189b      	adds	r3, r3, r2
 8002674:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8002676:	e007      	b.n	8002688 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 8002678:	f7ff fd54 	bl	8002124 <HAL_GetTick>
 800267c:	0002      	movs	r2, r0
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4293      	cmp	r3, r2
 8002682:	d801      	bhi.n	8002688 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e006      	b.n	8002696 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <FLASH_WaitForLastOperation+0x8c>)
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	2380      	movs	r3, #128	; 0x80
 800268e:	02db      	lsls	r3, r3, #11
 8002690:	4013      	ands	r3, r2
 8002692:	d1f1      	bne.n	8002678 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	0018      	movs	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	b004      	add	sp, #16
 800269c:	bd80      	pop	{r7, pc}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	40022000 	.word	0x40022000
 80026a4:	000083fa 	.word	0x000083fa
 80026a8:	000883fb 	.word	0x000883fb
 80026ac:	20000d90 	.word	0x20000d90

080026b0 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80026b0:	b5b0      	push	{r4, r5, r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	603a      	str	r2, [r7, #0]
 80026ba:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <FLASH_Program_DoubleWord+0x3c>)
 80026be:	695a      	ldr	r2, [r3, #20]
 80026c0:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <FLASH_Program_DoubleWord+0x3c>)
 80026c2:	2101      	movs	r1, #1
 80026c4:	430a      	orrs	r2, r1
 80026c6:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80026ce:	f3bf 8f6f 	isb	sy
}
 80026d2:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	001c      	movs	r4, r3
 80026d8:	2300      	movs	r3, #0
 80026da:	001d      	movs	r5, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	3304      	adds	r3, #4
 80026e0:	0022      	movs	r2, r4
 80026e2:	601a      	str	r2, [r3, #0]
}
 80026e4:	46c0      	nop			; (mov r8, r8)
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b004      	add	sp, #16
 80026ea:	bdb0      	pop	{r4, r5, r7, pc}
 80026ec:	40022000 	.word	0x40022000

080026f0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80026f0:	b5b0      	push	{r4, r5, r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80026fa:	4b33      	ldr	r3, [pc, #204]	; (80027c8 <HAL_FLASHEx_Erase+0xd8>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_FLASHEx_Erase+0x16>
 8002702:	2302      	movs	r3, #2
 8002704:	e05c      	b.n	80027c0 <HAL_FLASHEx_Erase+0xd0>
 8002706:	4b30      	ldr	r3, [pc, #192]	; (80027c8 <HAL_FLASHEx_Erase+0xd8>)
 8002708:	2201      	movs	r2, #1
 800270a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800270c:	4b2e      	ldr	r3, [pc, #184]	; (80027c8 <HAL_FLASHEx_Erase+0xd8>)
 800270e:	2200      	movs	r2, #0
 8002710:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002712:	250f      	movs	r5, #15
 8002714:	197c      	adds	r4, r7, r5
 8002716:	23fa      	movs	r3, #250	; 0xfa
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	0018      	movs	r0, r3
 800271c:	f7ff ff7a 	bl	8002614 <FLASH_WaitForLastOperation>
 8002720:	0003      	movs	r3, r0
 8002722:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002724:	002c      	movs	r4, r5
 8002726:	193b      	adds	r3, r7, r4
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d142      	bne.n	80027b4 <HAL_FLASHEx_Erase+0xc4>
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2b04      	cmp	r3, #4
 8002734:	d10d      	bne.n	8002752 <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	0018      	movs	r0, r3
 800273c:	f000 f848 	bl	80027d0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002740:	193c      	adds	r4, r7, r4
 8002742:	23fa      	movs	r3, #250	; 0xfa
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	0018      	movs	r0, r3
 8002748:	f7ff ff64 	bl	8002614 <FLASH_WaitForLastOperation>
 800274c:	0003      	movs	r3, r0
 800274e:	7023      	strb	r3, [r4, #0]
 8002750:	e030      	b.n	80027b4 <HAL_FLASHEx_Erase+0xc4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2201      	movs	r2, #1
 8002756:	4252      	negs	r2, r2
 8002758:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	e01a      	b.n	8002798 <HAL_FLASHEx_Erase+0xa8>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	0011      	movs	r1, r2
 800276a:	0018      	movs	r0, r3
 800276c:	f000 f844 	bl	80027f8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002770:	250f      	movs	r5, #15
 8002772:	197c      	adds	r4, r7, r5
 8002774:	23fa      	movs	r3, #250	; 0xfa
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	0018      	movs	r0, r3
 800277a:	f7ff ff4b 	bl	8002614 <FLASH_WaitForLastOperation>
 800277e:	0003      	movs	r3, r0
 8002780:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8002782:	197b      	adds	r3, r7, r5
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_FLASHEx_Erase+0xa2>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	601a      	str	r2, [r3, #0]
          break;
 8002790:	e00a      	b.n	80027a8 <HAL_FLASHEx_Erase+0xb8>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	3301      	adds	r3, #1
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	18d3      	adds	r3, r2, r3
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d3dc      	bcc.n	8002762 <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80027a8:	4b08      	ldr	r3, [pc, #32]	; (80027cc <HAL_FLASHEx_Erase+0xdc>)
 80027aa:	695a      	ldr	r2, [r3, #20]
 80027ac:	4b07      	ldr	r3, [pc, #28]	; (80027cc <HAL_FLASHEx_Erase+0xdc>)
 80027ae:	2102      	movs	r1, #2
 80027b0:	438a      	bics	r2, r1
 80027b2:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80027b4:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <HAL_FLASHEx_Erase+0xd8>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80027ba:	230f      	movs	r3, #15
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	781b      	ldrb	r3, [r3, #0]
}
 80027c0:	0018      	movs	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b004      	add	sp, #16
 80027c6:	bdb0      	pop	{r4, r5, r7, pc}
 80027c8:	20000d90 	.word	0x20000d90
 80027cc:	40022000 	.word	0x40022000

080027d0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <FLASH_MassErase+0x24>)
 80027da:	695a      	ldr	r2, [r3, #20]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	431a      	orrs	r2, r3
 80027e0:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <FLASH_MassErase+0x24>)
 80027e2:	2180      	movs	r1, #128	; 0x80
 80027e4:	0249      	lsls	r1, r1, #9
 80027e6:	430a      	orrs	r2, r1
 80027e8:	615a      	str	r2, [r3, #20]
}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	46bd      	mov	sp, r7
 80027ee:	b002      	add	sp, #8
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	40022000 	.word	0x40022000

080027f8 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8002802:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <FLASH_PageErase+0x48>)
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	4a0f      	ldr	r2, [pc, #60]	; (8002844 <FLASH_PageErase+0x4c>)
 8002808:	4013      	ands	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b04      	cmp	r3, #4
 8002810:	d005      	beq.n	800281e <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2280      	movs	r2, #128	; 0x80
 8002816:	0192      	lsls	r2, r2, #6
 8002818:	4313      	orrs	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	e003      	b.n	8002826 <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4a09      	ldr	r2, [pc, #36]	; (8002848 <FLASH_PageErase+0x50>)
 8002822:	4013      	ands	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
  }
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	00da      	lsls	r2, r3, #3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	431a      	orrs	r2, r3
 800282e:	4b04      	ldr	r3, [pc, #16]	; (8002840 <FLASH_PageErase+0x48>)
 8002830:	4906      	ldr	r1, [pc, #24]	; (800284c <FLASH_PageErase+0x54>)
 8002832:	430a      	orrs	r2, r1
 8002834:	615a      	str	r2, [r3, #20]
}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	46bd      	mov	sp, r7
 800283a:	b004      	add	sp, #16
 800283c:	bd80      	pop	{r7, pc}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	40022000 	.word	0x40022000
 8002844:	ffffe007 	.word	0xffffe007
 8002848:	ffffdfff 	.word	0xffffdfff
 800284c:	00010002 	.word	0x00010002

08002850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800285e:	e14d      	b.n	8002afc <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2101      	movs	r1, #1
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	4091      	lsls	r1, r2
 800286a:	000a      	movs	r2, r1
 800286c:	4013      	ands	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d100      	bne.n	8002878 <HAL_GPIO_Init+0x28>
 8002876:	e13e      	b.n	8002af6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2203      	movs	r2, #3
 800287e:	4013      	ands	r3, r2
 8002880:	2b01      	cmp	r3, #1
 8002882:	d005      	beq.n	8002890 <HAL_GPIO_Init+0x40>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2203      	movs	r2, #3
 800288a:	4013      	ands	r3, r2
 800288c:	2b02      	cmp	r3, #2
 800288e:	d130      	bne.n	80028f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	2203      	movs	r2, #3
 800289c:	409a      	lsls	r2, r3
 800289e:	0013      	movs	r3, r2
 80028a0:	43da      	mvns	r2, r3
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4013      	ands	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	409a      	lsls	r2, r3
 80028b2:	0013      	movs	r3, r2
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028c6:	2201      	movs	r2, #1
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	409a      	lsls	r2, r3
 80028cc:	0013      	movs	r3, r2
 80028ce:	43da      	mvns	r2, r3
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4013      	ands	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	091b      	lsrs	r3, r3, #4
 80028dc:	2201      	movs	r2, #1
 80028de:	401a      	ands	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	409a      	lsls	r2, r3
 80028e4:	0013      	movs	r3, r2
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2203      	movs	r2, #3
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d017      	beq.n	800292e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	2203      	movs	r2, #3
 800290a:	409a      	lsls	r2, r3
 800290c:	0013      	movs	r3, r2
 800290e:	43da      	mvns	r2, r3
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	409a      	lsls	r2, r3
 8002920:	0013      	movs	r3, r2
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2203      	movs	r2, #3
 8002934:	4013      	ands	r3, r2
 8002936:	2b02      	cmp	r3, #2
 8002938:	d123      	bne.n	8002982 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	08da      	lsrs	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3208      	adds	r2, #8
 8002942:	0092      	lsls	r2, r2, #2
 8002944:	58d3      	ldr	r3, [r2, r3]
 8002946:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2207      	movs	r2, #7
 800294c:	4013      	ands	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	220f      	movs	r2, #15
 8002952:	409a      	lsls	r2, r3
 8002954:	0013      	movs	r3, r2
 8002956:	43da      	mvns	r2, r3
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4013      	ands	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2107      	movs	r1, #7
 8002966:	400b      	ands	r3, r1
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	409a      	lsls	r2, r3
 800296c:	0013      	movs	r3, r2
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	08da      	lsrs	r2, r3, #3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3208      	adds	r2, #8
 800297c:	0092      	lsls	r2, r2, #2
 800297e:	6939      	ldr	r1, [r7, #16]
 8002980:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	2203      	movs	r2, #3
 800298e:	409a      	lsls	r2, r3
 8002990:	0013      	movs	r3, r2
 8002992:	43da      	mvns	r2, r3
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4013      	ands	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2203      	movs	r2, #3
 80029a0:	401a      	ands	r2, r3
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	409a      	lsls	r2, r3
 80029a8:	0013      	movs	r3, r2
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	23c0      	movs	r3, #192	; 0xc0
 80029bc:	029b      	lsls	r3, r3, #10
 80029be:	4013      	ands	r3, r2
 80029c0:	d100      	bne.n	80029c4 <HAL_GPIO_Init+0x174>
 80029c2:	e098      	b.n	8002af6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80029c4:	4a53      	ldr	r2, [pc, #332]	; (8002b14 <HAL_GPIO_Init+0x2c4>)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	089b      	lsrs	r3, r3, #2
 80029ca:	3318      	adds	r3, #24
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	589b      	ldr	r3, [r3, r2]
 80029d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2203      	movs	r2, #3
 80029d6:	4013      	ands	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	220f      	movs	r2, #15
 80029dc:	409a      	lsls	r2, r3
 80029de:	0013      	movs	r3, r2
 80029e0:	43da      	mvns	r2, r3
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4013      	ands	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	23a0      	movs	r3, #160	; 0xa0
 80029ec:	05db      	lsls	r3, r3, #23
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d019      	beq.n	8002a26 <HAL_GPIO_Init+0x1d6>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a48      	ldr	r2, [pc, #288]	; (8002b18 <HAL_GPIO_Init+0x2c8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d013      	beq.n	8002a22 <HAL_GPIO_Init+0x1d2>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a47      	ldr	r2, [pc, #284]	; (8002b1c <HAL_GPIO_Init+0x2cc>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00d      	beq.n	8002a1e <HAL_GPIO_Init+0x1ce>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a46      	ldr	r2, [pc, #280]	; (8002b20 <HAL_GPIO_Init+0x2d0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d007      	beq.n	8002a1a <HAL_GPIO_Init+0x1ca>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a45      	ldr	r2, [pc, #276]	; (8002b24 <HAL_GPIO_Init+0x2d4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d101      	bne.n	8002a16 <HAL_GPIO_Init+0x1c6>
 8002a12:	2304      	movs	r3, #4
 8002a14:	e008      	b.n	8002a28 <HAL_GPIO_Init+0x1d8>
 8002a16:	2305      	movs	r3, #5
 8002a18:	e006      	b.n	8002a28 <HAL_GPIO_Init+0x1d8>
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e004      	b.n	8002a28 <HAL_GPIO_Init+0x1d8>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e002      	b.n	8002a28 <HAL_GPIO_Init+0x1d8>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <HAL_GPIO_Init+0x1d8>
 8002a26:	2300      	movs	r3, #0
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	2103      	movs	r1, #3
 8002a2c:	400a      	ands	r2, r1
 8002a2e:	00d2      	lsls	r2, r2, #3
 8002a30:	4093      	lsls	r3, r2
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002a38:	4936      	ldr	r1, [pc, #216]	; (8002b14 <HAL_GPIO_Init+0x2c4>)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	089b      	lsrs	r3, r3, #2
 8002a3e:	3318      	adds	r3, #24
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a46:	4b33      	ldr	r3, [pc, #204]	; (8002b14 <HAL_GPIO_Init+0x2c4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4013      	ands	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	035b      	lsls	r3, r3, #13
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a6a:	4b2a      	ldr	r3, [pc, #168]	; (8002b14 <HAL_GPIO_Init+0x2c4>)
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002a70:	4b28      	ldr	r3, [pc, #160]	; (8002b14 <HAL_GPIO_Init+0x2c4>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	43da      	mvns	r2, r3
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	2380      	movs	r3, #128	; 0x80
 8002a86:	039b      	lsls	r3, r3, #14
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d003      	beq.n	8002a94 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a94:	4b1f      	ldr	r3, [pc, #124]	; (8002b14 <HAL_GPIO_Init+0x2c4>)
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a9a:	4a1e      	ldr	r2, [pc, #120]	; (8002b14 <HAL_GPIO_Init+0x2c4>)
 8002a9c:	2384      	movs	r3, #132	; 0x84
 8002a9e:	58d3      	ldr	r3, [r2, r3]
 8002aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	43da      	mvns	r2, r3
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	2380      	movs	r3, #128	; 0x80
 8002ab2:	029b      	lsls	r3, r3, #10
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ac0:	4914      	ldr	r1, [pc, #80]	; (8002b14 <HAL_GPIO_Init+0x2c4>)
 8002ac2:	2284      	movs	r2, #132	; 0x84
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002ac8:	4a12      	ldr	r2, [pc, #72]	; (8002b14 <HAL_GPIO_Init+0x2c4>)
 8002aca:	2380      	movs	r3, #128	; 0x80
 8002acc:	58d3      	ldr	r3, [r2, r3]
 8002ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	43da      	mvns	r2, r3
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	2380      	movs	r3, #128	; 0x80
 8002ae0:	025b      	lsls	r3, r3, #9
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002aee:	4909      	ldr	r1, [pc, #36]	; (8002b14 <HAL_GPIO_Init+0x2c4>)
 8002af0:	2280      	movs	r2, #128	; 0x80
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	3301      	adds	r3, #1
 8002afa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	40da      	lsrs	r2, r3
 8002b04:	1e13      	subs	r3, r2, #0
 8002b06:	d000      	beq.n	8002b0a <HAL_GPIO_Init+0x2ba>
 8002b08:	e6aa      	b.n	8002860 <HAL_GPIO_Init+0x10>
  }
}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	46c0      	nop			; (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b006      	add	sp, #24
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40021800 	.word	0x40021800
 8002b18:	50000400 	.word	0x50000400
 8002b1c:	50000800 	.word	0x50000800
 8002b20:	50000c00 	.word	0x50000c00
 8002b24:	50001000 	.word	0x50001000

08002b28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	000a      	movs	r2, r1
 8002b32:	1cbb      	adds	r3, r7, #2
 8002b34:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	1cba      	adds	r2, r7, #2
 8002b3c:	8812      	ldrh	r2, [r2, #0]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d004      	beq.n	8002b4c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002b42:	230f      	movs	r3, #15
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	2201      	movs	r2, #1
 8002b48:	701a      	strb	r2, [r3, #0]
 8002b4a:	e003      	b.n	8002b54 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b4c:	230f      	movs	r3, #15
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002b54:	230f      	movs	r3, #15
 8002b56:	18fb      	adds	r3, r7, r3
 8002b58:	781b      	ldrb	r3, [r3, #0]
}
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b004      	add	sp, #16
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	0008      	movs	r0, r1
 8002b6c:	0011      	movs	r1, r2
 8002b6e:	1cbb      	adds	r3, r7, #2
 8002b70:	1c02      	adds	r2, r0, #0
 8002b72:	801a      	strh	r2, [r3, #0]
 8002b74:	1c7b      	adds	r3, r7, #1
 8002b76:	1c0a      	adds	r2, r1, #0
 8002b78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b7a:	1c7b      	adds	r3, r7, #1
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d004      	beq.n	8002b8c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b82:	1cbb      	adds	r3, r7, #2
 8002b84:	881a      	ldrh	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b8a:	e003      	b.n	8002b94 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b8c:	1cbb      	adds	r3, r7, #2
 8002b8e:	881a      	ldrh	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b94:	46c0      	nop			; (mov r8, r8)
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b002      	add	sp, #8
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002ba4:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a19      	ldr	r2, [pc, #100]	; (8002c10 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	0019      	movs	r1, r3
 8002bae:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d11f      	bne.n	8002c00 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002bc0:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	0013      	movs	r3, r2
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	189b      	adds	r3, r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4912      	ldr	r1, [pc, #72]	; (8002c18 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f7fd faa8 	bl	8000124 <__udivsi3>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bda:	e008      	b.n	8002bee <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	3b01      	subs	r3, #1
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	e001      	b.n	8002bee <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e009      	b.n	8002c02 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bee:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d0ed      	beq.n	8002bdc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	0018      	movs	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	b004      	add	sp, #16
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	40007000 	.word	0x40007000
 8002c10:	fffff9ff 	.word	0xfffff9ff
 8002c14:	20000400 	.word	0x20000400
 8002c18:	000f4240 	.word	0x000f4240

08002c1c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002c20:	4b03      	ldr	r3, [pc, #12]	; (8002c30 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	23e0      	movs	r3, #224	; 0xe0
 8002c26:	01db      	lsls	r3, r3, #7
 8002c28:	4013      	ands	r3, r2
}
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40021000 	.word	0x40021000

08002c34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e2fe      	b.n	8003244 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d100      	bne.n	8002c52 <HAL_RCC_OscConfig+0x1e>
 8002c50:	e07c      	b.n	8002d4c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c52:	4bc3      	ldr	r3, [pc, #780]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2238      	movs	r2, #56	; 0x38
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c5c:	4bc0      	ldr	r3, [pc, #768]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2203      	movs	r2, #3
 8002c62:	4013      	ands	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	2b10      	cmp	r3, #16
 8002c6a:	d102      	bne.n	8002c72 <HAL_RCC_OscConfig+0x3e>
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	d002      	beq.n	8002c78 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d10b      	bne.n	8002c90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c78:	4bb9      	ldr	r3, [pc, #740]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	029b      	lsls	r3, r3, #10
 8002c80:	4013      	ands	r3, r2
 8002c82:	d062      	beq.n	8002d4a <HAL_RCC_OscConfig+0x116>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d15e      	bne.n	8002d4a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e2d9      	b.n	8003244 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	025b      	lsls	r3, r3, #9
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d107      	bne.n	8002cac <HAL_RCC_OscConfig+0x78>
 8002c9c:	4bb0      	ldr	r3, [pc, #704]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	4baf      	ldr	r3, [pc, #700]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002ca2:	2180      	movs	r1, #128	; 0x80
 8002ca4:	0249      	lsls	r1, r1, #9
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	e020      	b.n	8002cee <HAL_RCC_OscConfig+0xba>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	23a0      	movs	r3, #160	; 0xa0
 8002cb2:	02db      	lsls	r3, r3, #11
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d10e      	bne.n	8002cd6 <HAL_RCC_OscConfig+0xa2>
 8002cb8:	4ba9      	ldr	r3, [pc, #676]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	4ba8      	ldr	r3, [pc, #672]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002cbe:	2180      	movs	r1, #128	; 0x80
 8002cc0:	02c9      	lsls	r1, r1, #11
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	4ba6      	ldr	r3, [pc, #664]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	4ba5      	ldr	r3, [pc, #660]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002ccc:	2180      	movs	r1, #128	; 0x80
 8002cce:	0249      	lsls	r1, r1, #9
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	e00b      	b.n	8002cee <HAL_RCC_OscConfig+0xba>
 8002cd6:	4ba2      	ldr	r3, [pc, #648]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	4ba1      	ldr	r3, [pc, #644]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002cdc:	49a1      	ldr	r1, [pc, #644]	; (8002f64 <HAL_RCC_OscConfig+0x330>)
 8002cde:	400a      	ands	r2, r1
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	4b9f      	ldr	r3, [pc, #636]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	4b9e      	ldr	r3, [pc, #632]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002ce8:	499f      	ldr	r1, [pc, #636]	; (8002f68 <HAL_RCC_OscConfig+0x334>)
 8002cea:	400a      	ands	r2, r1
 8002cec:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d014      	beq.n	8002d20 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf6:	f7ff fa15 	bl	8002124 <HAL_GetTick>
 8002cfa:	0003      	movs	r3, r0
 8002cfc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d00:	f7ff fa10 	bl	8002124 <HAL_GetTick>
 8002d04:	0002      	movs	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	; 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e298      	b.n	8003244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d12:	4b93      	ldr	r3, [pc, #588]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	029b      	lsls	r3, r3, #10
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0xcc>
 8002d1e:	e015      	b.n	8002d4c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7ff fa00 	bl	8002124 <HAL_GetTick>
 8002d24:	0003      	movs	r3, r0
 8002d26:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d2a:	f7ff f9fb 	bl	8002124 <HAL_GetTick>
 8002d2e:	0002      	movs	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b64      	cmp	r3, #100	; 0x64
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e283      	b.n	8003244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d3c:	4b88      	ldr	r3, [pc, #544]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	029b      	lsls	r3, r3, #10
 8002d44:	4013      	ands	r3, r2
 8002d46:	d1f0      	bne.n	8002d2a <HAL_RCC_OscConfig+0xf6>
 8002d48:	e000      	b.n	8002d4c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d4a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2202      	movs	r2, #2
 8002d52:	4013      	ands	r3, r2
 8002d54:	d100      	bne.n	8002d58 <HAL_RCC_OscConfig+0x124>
 8002d56:	e099      	b.n	8002e8c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d58:	4b81      	ldr	r3, [pc, #516]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2238      	movs	r2, #56	; 0x38
 8002d5e:	4013      	ands	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d62:	4b7f      	ldr	r3, [pc, #508]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	2203      	movs	r2, #3
 8002d68:	4013      	ands	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2b10      	cmp	r3, #16
 8002d70:	d102      	bne.n	8002d78 <HAL_RCC_OscConfig+0x144>
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d002      	beq.n	8002d7e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d135      	bne.n	8002dea <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d7e:	4b78      	ldr	r3, [pc, #480]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	2380      	movs	r3, #128	; 0x80
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4013      	ands	r3, r2
 8002d88:	d005      	beq.n	8002d96 <HAL_RCC_OscConfig+0x162>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e256      	b.n	8003244 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d96:	4b72      	ldr	r3, [pc, #456]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	4a74      	ldr	r2, [pc, #464]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	0019      	movs	r1, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	021a      	lsls	r2, r3, #8
 8002da6:	4b6e      	ldr	r3, [pc, #440]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002da8:	430a      	orrs	r2, r1
 8002daa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d112      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002db2:	4b6b      	ldr	r3, [pc, #428]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a6e      	ldr	r2, [pc, #440]	; (8002f70 <HAL_RCC_OscConfig+0x33c>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	0019      	movs	r1, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	4b67      	ldr	r3, [pc, #412]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002dc6:	4b66      	ldr	r3, [pc, #408]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	0adb      	lsrs	r3, r3, #11
 8002dcc:	2207      	movs	r2, #7
 8002dce:	4013      	ands	r3, r2
 8002dd0:	4a68      	ldr	r2, [pc, #416]	; (8002f74 <HAL_RCC_OscConfig+0x340>)
 8002dd2:	40da      	lsrs	r2, r3
 8002dd4:	4b68      	ldr	r3, [pc, #416]	; (8002f78 <HAL_RCC_OscConfig+0x344>)
 8002dd6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002dd8:	4b68      	ldr	r3, [pc, #416]	; (8002f7c <HAL_RCC_OscConfig+0x348>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f7ff f945 	bl	800206c <HAL_InitTick>
 8002de2:	1e03      	subs	r3, r0, #0
 8002de4:	d051      	beq.n	8002e8a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e22c      	b.n	8003244 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d030      	beq.n	8002e54 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002df2:	4b5b      	ldr	r3, [pc, #364]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a5e      	ldr	r2, [pc, #376]	; (8002f70 <HAL_RCC_OscConfig+0x33c>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	0019      	movs	r1, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	4b57      	ldr	r3, [pc, #348]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002e02:	430a      	orrs	r2, r1
 8002e04:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002e06:	4b56      	ldr	r3, [pc, #344]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	4b55      	ldr	r3, [pc, #340]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002e0c:	2180      	movs	r1, #128	; 0x80
 8002e0e:	0049      	lsls	r1, r1, #1
 8002e10:	430a      	orrs	r2, r1
 8002e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7ff f986 	bl	8002124 <HAL_GetTick>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e1e:	f7ff f981 	bl	8002124 <HAL_GetTick>
 8002e22:	0002      	movs	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e209      	b.n	8003244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e30:	4b4b      	ldr	r3, [pc, #300]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3c:	4b48      	ldr	r3, [pc, #288]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	4a4a      	ldr	r2, [pc, #296]	; (8002f6c <HAL_RCC_OscConfig+0x338>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	0019      	movs	r1, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	021a      	lsls	r2, r3, #8
 8002e4c:	4b44      	ldr	r3, [pc, #272]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	e01b      	b.n	8002e8c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002e54:	4b42      	ldr	r3, [pc, #264]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4b41      	ldr	r3, [pc, #260]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002e5a:	4949      	ldr	r1, [pc, #292]	; (8002f80 <HAL_RCC_OscConfig+0x34c>)
 8002e5c:	400a      	ands	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7ff f960 	bl	8002124 <HAL_GetTick>
 8002e64:	0003      	movs	r3, r0
 8002e66:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6a:	f7ff f95b 	bl	8002124 <HAL_GetTick>
 8002e6e:	0002      	movs	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e1e3      	b.n	8003244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e7c:	4b38      	ldr	r3, [pc, #224]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	2380      	movs	r3, #128	; 0x80
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4013      	ands	r3, r2
 8002e86:	d1f0      	bne.n	8002e6a <HAL_RCC_OscConfig+0x236>
 8002e88:	e000      	b.n	8002e8c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e8a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2208      	movs	r2, #8
 8002e92:	4013      	ands	r3, r2
 8002e94:	d047      	beq.n	8002f26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002e96:	4b32      	ldr	r3, [pc, #200]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2238      	movs	r2, #56	; 0x38
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b18      	cmp	r3, #24
 8002ea0:	d10a      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002ea2:	4b2f      	ldr	r3, [pc, #188]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d03c      	beq.n	8002f26 <HAL_RCC_OscConfig+0x2f2>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d138      	bne.n	8002f26 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e1c5      	b.n	8003244 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d019      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002ec0:	4b27      	ldr	r3, [pc, #156]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002ec2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ec4:	4b26      	ldr	r3, [pc, #152]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7ff f92a 	bl	8002124 <HAL_GetTick>
 8002ed0:	0003      	movs	r3, r0
 8002ed2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed6:	f7ff f925 	bl	8002124 <HAL_GetTick>
 8002eda:	0002      	movs	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e1ad      	b.n	8003244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ee8:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eec:	2202      	movs	r2, #2
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d0f1      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x2a2>
 8002ef2:	e018      	b.n	8002f26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002ef4:	4b1a      	ldr	r3, [pc, #104]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002ef6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ef8:	4b19      	ldr	r3, [pc, #100]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002efa:	2101      	movs	r1, #1
 8002efc:	438a      	bics	r2, r1
 8002efe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7ff f910 	bl	8002124 <HAL_GetTick>
 8002f04:	0003      	movs	r3, r0
 8002f06:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f0a:	f7ff f90b 	bl	8002124 <HAL_GetTick>
 8002f0e:	0002      	movs	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e193      	b.n	8003244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f1c:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f20:	2202      	movs	r2, #2
 8002f22:	4013      	ands	r3, r2
 8002f24:	d1f1      	bne.n	8002f0a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d100      	bne.n	8002f32 <HAL_RCC_OscConfig+0x2fe>
 8002f30:	e0c6      	b.n	80030c0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f32:	231f      	movs	r3, #31
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	2200      	movs	r2, #0
 8002f38:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2238      	movs	r2, #56	; 0x38
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b20      	cmp	r3, #32
 8002f44:	d11e      	bne.n	8002f84 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002f46:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <HAL_RCC_OscConfig+0x32c>)
 8002f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d100      	bne.n	8002f52 <HAL_RCC_OscConfig+0x31e>
 8002f50:	e0b6      	b.n	80030c0 <HAL_RCC_OscConfig+0x48c>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d000      	beq.n	8002f5c <HAL_RCC_OscConfig+0x328>
 8002f5a:	e0b1      	b.n	80030c0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e171      	b.n	8003244 <HAL_RCC_OscConfig+0x610>
 8002f60:	40021000 	.word	0x40021000
 8002f64:	fffeffff 	.word	0xfffeffff
 8002f68:	fffbffff 	.word	0xfffbffff
 8002f6c:	ffff80ff 	.word	0xffff80ff
 8002f70:	ffffc7ff 	.word	0xffffc7ff
 8002f74:	00f42400 	.word	0x00f42400
 8002f78:	20000400 	.word	0x20000400
 8002f7c:	20000404 	.word	0x20000404
 8002f80:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f84:	4bb1      	ldr	r3, [pc, #708]	; (800324c <HAL_RCC_OscConfig+0x618>)
 8002f86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	055b      	lsls	r3, r3, #21
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d101      	bne.n	8002f94 <HAL_RCC_OscConfig+0x360>
 8002f90:	2301      	movs	r3, #1
 8002f92:	e000      	b.n	8002f96 <HAL_RCC_OscConfig+0x362>
 8002f94:	2300      	movs	r3, #0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d011      	beq.n	8002fbe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002f9a:	4bac      	ldr	r3, [pc, #688]	; (800324c <HAL_RCC_OscConfig+0x618>)
 8002f9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f9e:	4bab      	ldr	r3, [pc, #684]	; (800324c <HAL_RCC_OscConfig+0x618>)
 8002fa0:	2180      	movs	r1, #128	; 0x80
 8002fa2:	0549      	lsls	r1, r1, #21
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002fa8:	4ba8      	ldr	r3, [pc, #672]	; (800324c <HAL_RCC_OscConfig+0x618>)
 8002faa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	055b      	lsls	r3, r3, #21
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002fb6:	231f      	movs	r3, #31
 8002fb8:	18fb      	adds	r3, r7, r3
 8002fba:	2201      	movs	r2, #1
 8002fbc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fbe:	4ba4      	ldr	r3, [pc, #656]	; (8003250 <HAL_RCC_OscConfig+0x61c>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d11a      	bne.n	8003000 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fca:	4ba1      	ldr	r3, [pc, #644]	; (8003250 <HAL_RCC_OscConfig+0x61c>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	4ba0      	ldr	r3, [pc, #640]	; (8003250 <HAL_RCC_OscConfig+0x61c>)
 8002fd0:	2180      	movs	r1, #128	; 0x80
 8002fd2:	0049      	lsls	r1, r1, #1
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002fd8:	f7ff f8a4 	bl	8002124 <HAL_GetTick>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe2:	f7ff f89f 	bl	8002124 <HAL_GetTick>
 8002fe6:	0002      	movs	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e127      	b.n	8003244 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ff4:	4b96      	ldr	r3, [pc, #600]	; (8003250 <HAL_RCC_OscConfig+0x61c>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d106      	bne.n	8003016 <HAL_RCC_OscConfig+0x3e2>
 8003008:	4b90      	ldr	r3, [pc, #576]	; (800324c <HAL_RCC_OscConfig+0x618>)
 800300a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800300c:	4b8f      	ldr	r3, [pc, #572]	; (800324c <HAL_RCC_OscConfig+0x618>)
 800300e:	2101      	movs	r1, #1
 8003010:	430a      	orrs	r2, r1
 8003012:	65da      	str	r2, [r3, #92]	; 0x5c
 8003014:	e01c      	b.n	8003050 <HAL_RCC_OscConfig+0x41c>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b05      	cmp	r3, #5
 800301c:	d10c      	bne.n	8003038 <HAL_RCC_OscConfig+0x404>
 800301e:	4b8b      	ldr	r3, [pc, #556]	; (800324c <HAL_RCC_OscConfig+0x618>)
 8003020:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003022:	4b8a      	ldr	r3, [pc, #552]	; (800324c <HAL_RCC_OscConfig+0x618>)
 8003024:	2104      	movs	r1, #4
 8003026:	430a      	orrs	r2, r1
 8003028:	65da      	str	r2, [r3, #92]	; 0x5c
 800302a:	4b88      	ldr	r3, [pc, #544]	; (800324c <HAL_RCC_OscConfig+0x618>)
 800302c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800302e:	4b87      	ldr	r3, [pc, #540]	; (800324c <HAL_RCC_OscConfig+0x618>)
 8003030:	2101      	movs	r1, #1
 8003032:	430a      	orrs	r2, r1
 8003034:	65da      	str	r2, [r3, #92]	; 0x5c
 8003036:	e00b      	b.n	8003050 <HAL_RCC_OscConfig+0x41c>
 8003038:	4b84      	ldr	r3, [pc, #528]	; (800324c <HAL_RCC_OscConfig+0x618>)
 800303a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800303c:	4b83      	ldr	r3, [pc, #524]	; (800324c <HAL_RCC_OscConfig+0x618>)
 800303e:	2101      	movs	r1, #1
 8003040:	438a      	bics	r2, r1
 8003042:	65da      	str	r2, [r3, #92]	; 0x5c
 8003044:	4b81      	ldr	r3, [pc, #516]	; (800324c <HAL_RCC_OscConfig+0x618>)
 8003046:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003048:	4b80      	ldr	r3, [pc, #512]	; (800324c <HAL_RCC_OscConfig+0x618>)
 800304a:	2104      	movs	r1, #4
 800304c:	438a      	bics	r2, r1
 800304e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d014      	beq.n	8003082 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003058:	f7ff f864 	bl	8002124 <HAL_GetTick>
 800305c:	0003      	movs	r3, r0
 800305e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003060:	e009      	b.n	8003076 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003062:	f7ff f85f 	bl	8002124 <HAL_GetTick>
 8003066:	0002      	movs	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	4a79      	ldr	r2, [pc, #484]	; (8003254 <HAL_RCC_OscConfig+0x620>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e0e6      	b.n	8003244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003076:	4b75      	ldr	r3, [pc, #468]	; (800324c <HAL_RCC_OscConfig+0x618>)
 8003078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307a:	2202      	movs	r2, #2
 800307c:	4013      	ands	r3, r2
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x42e>
 8003080:	e013      	b.n	80030aa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003082:	f7ff f84f 	bl	8002124 <HAL_GetTick>
 8003086:	0003      	movs	r3, r0
 8003088:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800308a:	e009      	b.n	80030a0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308c:	f7ff f84a 	bl	8002124 <HAL_GetTick>
 8003090:	0002      	movs	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	4a6f      	ldr	r2, [pc, #444]	; (8003254 <HAL_RCC_OscConfig+0x620>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e0d1      	b.n	8003244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030a0:	4b6a      	ldr	r3, [pc, #424]	; (800324c <HAL_RCC_OscConfig+0x618>)
 80030a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a4:	2202      	movs	r2, #2
 80030a6:	4013      	ands	r3, r2
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80030aa:	231f      	movs	r3, #31
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d105      	bne.n	80030c0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80030b4:	4b65      	ldr	r3, [pc, #404]	; (800324c <HAL_RCC_OscConfig+0x618>)
 80030b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030b8:	4b64      	ldr	r3, [pc, #400]	; (800324c <HAL_RCC_OscConfig+0x618>)
 80030ba:	4967      	ldr	r1, [pc, #412]	; (8003258 <HAL_RCC_OscConfig+0x624>)
 80030bc:	400a      	ands	r2, r1
 80030be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d100      	bne.n	80030ca <HAL_RCC_OscConfig+0x496>
 80030c8:	e0bb      	b.n	8003242 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030ca:	4b60      	ldr	r3, [pc, #384]	; (800324c <HAL_RCC_OscConfig+0x618>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2238      	movs	r2, #56	; 0x38
 80030d0:	4013      	ands	r3, r2
 80030d2:	2b10      	cmp	r3, #16
 80030d4:	d100      	bne.n	80030d8 <HAL_RCC_OscConfig+0x4a4>
 80030d6:	e07b      	b.n	80031d0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d156      	bne.n	800318e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e0:	4b5a      	ldr	r3, [pc, #360]	; (800324c <HAL_RCC_OscConfig+0x618>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4b59      	ldr	r3, [pc, #356]	; (800324c <HAL_RCC_OscConfig+0x618>)
 80030e6:	495d      	ldr	r1, [pc, #372]	; (800325c <HAL_RCC_OscConfig+0x628>)
 80030e8:	400a      	ands	r2, r1
 80030ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7ff f81a 	bl	8002124 <HAL_GetTick>
 80030f0:	0003      	movs	r3, r0
 80030f2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f6:	f7ff f815 	bl	8002124 <HAL_GetTick>
 80030fa:	0002      	movs	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e09d      	b.n	8003244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003108:	4b50      	ldr	r3, [pc, #320]	; (800324c <HAL_RCC_OscConfig+0x618>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	2380      	movs	r3, #128	; 0x80
 800310e:	049b      	lsls	r3, r3, #18
 8003110:	4013      	ands	r3, r2
 8003112:	d1f0      	bne.n	80030f6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003114:	4b4d      	ldr	r3, [pc, #308]	; (800324c <HAL_RCC_OscConfig+0x618>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	4a51      	ldr	r2, [pc, #324]	; (8003260 <HAL_RCC_OscConfig+0x62c>)
 800311a:	4013      	ands	r3, r2
 800311c:	0019      	movs	r1, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1a      	ldr	r2, [r3, #32]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003140:	431a      	orrs	r2, r3
 8003142:	4b42      	ldr	r3, [pc, #264]	; (800324c <HAL_RCC_OscConfig+0x618>)
 8003144:	430a      	orrs	r2, r1
 8003146:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003148:	4b40      	ldr	r3, [pc, #256]	; (800324c <HAL_RCC_OscConfig+0x618>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b3f      	ldr	r3, [pc, #252]	; (800324c <HAL_RCC_OscConfig+0x618>)
 800314e:	2180      	movs	r1, #128	; 0x80
 8003150:	0449      	lsls	r1, r1, #17
 8003152:	430a      	orrs	r2, r1
 8003154:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003156:	4b3d      	ldr	r3, [pc, #244]	; (800324c <HAL_RCC_OscConfig+0x618>)
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	4b3c      	ldr	r3, [pc, #240]	; (800324c <HAL_RCC_OscConfig+0x618>)
 800315c:	2180      	movs	r1, #128	; 0x80
 800315e:	0549      	lsls	r1, r1, #21
 8003160:	430a      	orrs	r2, r1
 8003162:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fe ffde 	bl	8002124 <HAL_GetTick>
 8003168:	0003      	movs	r3, r0
 800316a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316e:	f7fe ffd9 	bl	8002124 <HAL_GetTick>
 8003172:	0002      	movs	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e061      	b.n	8003244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003180:	4b32      	ldr	r3, [pc, #200]	; (800324c <HAL_RCC_OscConfig+0x618>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	2380      	movs	r3, #128	; 0x80
 8003186:	049b      	lsls	r3, r3, #18
 8003188:	4013      	ands	r3, r2
 800318a:	d0f0      	beq.n	800316e <HAL_RCC_OscConfig+0x53a>
 800318c:	e059      	b.n	8003242 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800318e:	4b2f      	ldr	r3, [pc, #188]	; (800324c <HAL_RCC_OscConfig+0x618>)
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	4b2e      	ldr	r3, [pc, #184]	; (800324c <HAL_RCC_OscConfig+0x618>)
 8003194:	4931      	ldr	r1, [pc, #196]	; (800325c <HAL_RCC_OscConfig+0x628>)
 8003196:	400a      	ands	r2, r1
 8003198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319a:	f7fe ffc3 	bl	8002124 <HAL_GetTick>
 800319e:	0003      	movs	r3, r0
 80031a0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a4:	f7fe ffbe 	bl	8002124 <HAL_GetTick>
 80031a8:	0002      	movs	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e046      	b.n	8003244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031b6:	4b25      	ldr	r3, [pc, #148]	; (800324c <HAL_RCC_OscConfig+0x618>)
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	2380      	movs	r3, #128	; 0x80
 80031bc:	049b      	lsls	r3, r3, #18
 80031be:	4013      	ands	r3, r2
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80031c2:	4b22      	ldr	r3, [pc, #136]	; (800324c <HAL_RCC_OscConfig+0x618>)
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	4b21      	ldr	r3, [pc, #132]	; (800324c <HAL_RCC_OscConfig+0x618>)
 80031c8:	4926      	ldr	r1, [pc, #152]	; (8003264 <HAL_RCC_OscConfig+0x630>)
 80031ca:	400a      	ands	r2, r1
 80031cc:	60da      	str	r2, [r3, #12]
 80031ce:	e038      	b.n	8003242 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e033      	b.n	8003244 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80031dc:	4b1b      	ldr	r3, [pc, #108]	; (800324c <HAL_RCC_OscConfig+0x618>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2203      	movs	r2, #3
 80031e6:	401a      	ands	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d126      	bne.n	800323e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2270      	movs	r2, #112	; 0x70
 80031f4:	401a      	ands	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d11f      	bne.n	800323e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	23fe      	movs	r3, #254	; 0xfe
 8003202:	01db      	lsls	r3, r3, #7
 8003204:	401a      	ands	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800320c:	429a      	cmp	r2, r3
 800320e:	d116      	bne.n	800323e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	23f8      	movs	r3, #248	; 0xf8
 8003214:	039b      	lsls	r3, r3, #14
 8003216:	401a      	ands	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d10e      	bne.n	800323e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	23e0      	movs	r3, #224	; 0xe0
 8003224:	051b      	lsls	r3, r3, #20
 8003226:	401a      	ands	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800322c:	429a      	cmp	r2, r3
 800322e:	d106      	bne.n	800323e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	0f5b      	lsrs	r3, r3, #29
 8003234:	075a      	lsls	r2, r3, #29
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800323a:	429a      	cmp	r2, r3
 800323c:	d001      	beq.n	8003242 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	0018      	movs	r0, r3
 8003246:	46bd      	mov	sp, r7
 8003248:	b008      	add	sp, #32
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40021000 	.word	0x40021000
 8003250:	40007000 	.word	0x40007000
 8003254:	00001388 	.word	0x00001388
 8003258:	efffffff 	.word	0xefffffff
 800325c:	feffffff 	.word	0xfeffffff
 8003260:	11c1808c 	.word	0x11c1808c
 8003264:	eefefffc 	.word	0xeefefffc

08003268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0e9      	b.n	8003450 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800327c:	4b76      	ldr	r3, [pc, #472]	; (8003458 <HAL_RCC_ClockConfig+0x1f0>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2207      	movs	r2, #7
 8003282:	4013      	ands	r3, r2
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d91e      	bls.n	80032c8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328a:	4b73      	ldr	r3, [pc, #460]	; (8003458 <HAL_RCC_ClockConfig+0x1f0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2207      	movs	r2, #7
 8003290:	4393      	bics	r3, r2
 8003292:	0019      	movs	r1, r3
 8003294:	4b70      	ldr	r3, [pc, #448]	; (8003458 <HAL_RCC_ClockConfig+0x1f0>)
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800329c:	f7fe ff42 	bl	8002124 <HAL_GetTick>
 80032a0:	0003      	movs	r3, r0
 80032a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032a4:	e009      	b.n	80032ba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a6:	f7fe ff3d 	bl	8002124 <HAL_GetTick>
 80032aa:	0002      	movs	r2, r0
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	4a6a      	ldr	r2, [pc, #424]	; (800345c <HAL_RCC_ClockConfig+0x1f4>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e0ca      	b.n	8003450 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032ba:	4b67      	ldr	r3, [pc, #412]	; (8003458 <HAL_RCC_ClockConfig+0x1f0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2207      	movs	r2, #7
 80032c0:	4013      	ands	r3, r2
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d1ee      	bne.n	80032a6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2202      	movs	r2, #2
 80032ce:	4013      	ands	r3, r2
 80032d0:	d015      	beq.n	80032fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2204      	movs	r2, #4
 80032d8:	4013      	ands	r3, r2
 80032da:	d006      	beq.n	80032ea <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80032dc:	4b60      	ldr	r3, [pc, #384]	; (8003460 <HAL_RCC_ClockConfig+0x1f8>)
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	4b5f      	ldr	r3, [pc, #380]	; (8003460 <HAL_RCC_ClockConfig+0x1f8>)
 80032e2:	21e0      	movs	r1, #224	; 0xe0
 80032e4:	01c9      	lsls	r1, r1, #7
 80032e6:	430a      	orrs	r2, r1
 80032e8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032ea:	4b5d      	ldr	r3, [pc, #372]	; (8003460 <HAL_RCC_ClockConfig+0x1f8>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	4a5d      	ldr	r2, [pc, #372]	; (8003464 <HAL_RCC_ClockConfig+0x1fc>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	0019      	movs	r1, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	4b59      	ldr	r3, [pc, #356]	; (8003460 <HAL_RCC_ClockConfig+0x1f8>)
 80032fa:	430a      	orrs	r2, r1
 80032fc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2201      	movs	r2, #1
 8003304:	4013      	ands	r3, r2
 8003306:	d057      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d107      	bne.n	8003320 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003310:	4b53      	ldr	r3, [pc, #332]	; (8003460 <HAL_RCC_ClockConfig+0x1f8>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	029b      	lsls	r3, r3, #10
 8003318:	4013      	ands	r3, r2
 800331a:	d12b      	bne.n	8003374 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e097      	b.n	8003450 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b02      	cmp	r3, #2
 8003326:	d107      	bne.n	8003338 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003328:	4b4d      	ldr	r3, [pc, #308]	; (8003460 <HAL_RCC_ClockConfig+0x1f8>)
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	2380      	movs	r3, #128	; 0x80
 800332e:	049b      	lsls	r3, r3, #18
 8003330:	4013      	ands	r3, r2
 8003332:	d11f      	bne.n	8003374 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e08b      	b.n	8003450 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d107      	bne.n	8003350 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003340:	4b47      	ldr	r3, [pc, #284]	; (8003460 <HAL_RCC_ClockConfig+0x1f8>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	4013      	ands	r3, r2
 800334a:	d113      	bne.n	8003374 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e07f      	b.n	8003450 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b03      	cmp	r3, #3
 8003356:	d106      	bne.n	8003366 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003358:	4b41      	ldr	r3, [pc, #260]	; (8003460 <HAL_RCC_ClockConfig+0x1f8>)
 800335a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800335c:	2202      	movs	r2, #2
 800335e:	4013      	ands	r3, r2
 8003360:	d108      	bne.n	8003374 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e074      	b.n	8003450 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003366:	4b3e      	ldr	r3, [pc, #248]	; (8003460 <HAL_RCC_ClockConfig+0x1f8>)
 8003368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336a:	2202      	movs	r2, #2
 800336c:	4013      	ands	r3, r2
 800336e:	d101      	bne.n	8003374 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e06d      	b.n	8003450 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003374:	4b3a      	ldr	r3, [pc, #232]	; (8003460 <HAL_RCC_ClockConfig+0x1f8>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2207      	movs	r2, #7
 800337a:	4393      	bics	r3, r2
 800337c:	0019      	movs	r1, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	4b37      	ldr	r3, [pc, #220]	; (8003460 <HAL_RCC_ClockConfig+0x1f8>)
 8003384:	430a      	orrs	r2, r1
 8003386:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003388:	f7fe fecc 	bl	8002124 <HAL_GetTick>
 800338c:	0003      	movs	r3, r0
 800338e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003390:	e009      	b.n	80033a6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003392:	f7fe fec7 	bl	8002124 <HAL_GetTick>
 8003396:	0002      	movs	r2, r0
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	4a2f      	ldr	r2, [pc, #188]	; (800345c <HAL_RCC_ClockConfig+0x1f4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e054      	b.n	8003450 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a6:	4b2e      	ldr	r3, [pc, #184]	; (8003460 <HAL_RCC_ClockConfig+0x1f8>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	2238      	movs	r2, #56	; 0x38
 80033ac:	401a      	ands	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d1ec      	bne.n	8003392 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033b8:	4b27      	ldr	r3, [pc, #156]	; (8003458 <HAL_RCC_ClockConfig+0x1f0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2207      	movs	r2, #7
 80033be:	4013      	ands	r3, r2
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d21e      	bcs.n	8003404 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c6:	4b24      	ldr	r3, [pc, #144]	; (8003458 <HAL_RCC_ClockConfig+0x1f0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2207      	movs	r2, #7
 80033cc:	4393      	bics	r3, r2
 80033ce:	0019      	movs	r1, r3
 80033d0:	4b21      	ldr	r3, [pc, #132]	; (8003458 <HAL_RCC_ClockConfig+0x1f0>)
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033d8:	f7fe fea4 	bl	8002124 <HAL_GetTick>
 80033dc:	0003      	movs	r3, r0
 80033de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033e0:	e009      	b.n	80033f6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e2:	f7fe fe9f 	bl	8002124 <HAL_GetTick>
 80033e6:	0002      	movs	r2, r0
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	4a1b      	ldr	r2, [pc, #108]	; (800345c <HAL_RCC_ClockConfig+0x1f4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e02c      	b.n	8003450 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033f6:	4b18      	ldr	r3, [pc, #96]	; (8003458 <HAL_RCC_ClockConfig+0x1f0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2207      	movs	r2, #7
 80033fc:	4013      	ands	r3, r2
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d1ee      	bne.n	80033e2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2204      	movs	r2, #4
 800340a:	4013      	ands	r3, r2
 800340c:	d009      	beq.n	8003422 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800340e:	4b14      	ldr	r3, [pc, #80]	; (8003460 <HAL_RCC_ClockConfig+0x1f8>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	4a15      	ldr	r2, [pc, #84]	; (8003468 <HAL_RCC_ClockConfig+0x200>)
 8003414:	4013      	ands	r3, r2
 8003416:	0019      	movs	r1, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	4b10      	ldr	r3, [pc, #64]	; (8003460 <HAL_RCC_ClockConfig+0x1f8>)
 800341e:	430a      	orrs	r2, r1
 8003420:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003422:	f000 f829 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8003426:	0001      	movs	r1, r0
 8003428:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <HAL_RCC_ClockConfig+0x1f8>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	0a1b      	lsrs	r3, r3, #8
 800342e:	220f      	movs	r2, #15
 8003430:	401a      	ands	r2, r3
 8003432:	4b0e      	ldr	r3, [pc, #56]	; (800346c <HAL_RCC_ClockConfig+0x204>)
 8003434:	0092      	lsls	r2, r2, #2
 8003436:	58d3      	ldr	r3, [r2, r3]
 8003438:	221f      	movs	r2, #31
 800343a:	4013      	ands	r3, r2
 800343c:	000a      	movs	r2, r1
 800343e:	40da      	lsrs	r2, r3
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_RCC_ClockConfig+0x208>)
 8003442:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003444:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <HAL_RCC_ClockConfig+0x20c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	0018      	movs	r0, r3
 800344a:	f7fe fe0f 	bl	800206c <HAL_InitTick>
 800344e:	0003      	movs	r3, r0
}
 8003450:	0018      	movs	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	b004      	add	sp, #16
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40022000 	.word	0x40022000
 800345c:	00001388 	.word	0x00001388
 8003460:	40021000 	.word	0x40021000
 8003464:	fffff0ff 	.word	0xfffff0ff
 8003468:	ffff8fff 	.word	0xffff8fff
 800346c:	08008064 	.word	0x08008064
 8003470:	20000400 	.word	0x20000400
 8003474:	20000404 	.word	0x20000404

08003478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800347e:	4b3c      	ldr	r3, [pc, #240]	; (8003570 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2238      	movs	r2, #56	; 0x38
 8003484:	4013      	ands	r3, r2
 8003486:	d10f      	bne.n	80034a8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003488:	4b39      	ldr	r3, [pc, #228]	; (8003570 <HAL_RCC_GetSysClockFreq+0xf8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	0adb      	lsrs	r3, r3, #11
 800348e:	2207      	movs	r2, #7
 8003490:	4013      	ands	r3, r2
 8003492:	2201      	movs	r2, #1
 8003494:	409a      	lsls	r2, r3
 8003496:	0013      	movs	r3, r2
 8003498:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800349a:	6839      	ldr	r1, [r7, #0]
 800349c:	4835      	ldr	r0, [pc, #212]	; (8003574 <HAL_RCC_GetSysClockFreq+0xfc>)
 800349e:	f7fc fe41 	bl	8000124 <__udivsi3>
 80034a2:	0003      	movs	r3, r0
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	e05d      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034a8:	4b31      	ldr	r3, [pc, #196]	; (8003570 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2238      	movs	r2, #56	; 0x38
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d102      	bne.n	80034ba <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034b4:	4b30      	ldr	r3, [pc, #192]	; (8003578 <HAL_RCC_GetSysClockFreq+0x100>)
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	e054      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034ba:	4b2d      	ldr	r3, [pc, #180]	; (8003570 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2238      	movs	r2, #56	; 0x38
 80034c0:	4013      	ands	r3, r2
 80034c2:	2b10      	cmp	r3, #16
 80034c4:	d138      	bne.n	8003538 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80034c6:	4b2a      	ldr	r3, [pc, #168]	; (8003570 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	2203      	movs	r2, #3
 80034cc:	4013      	ands	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034d0:	4b27      	ldr	r3, [pc, #156]	; (8003570 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	2207      	movs	r2, #7
 80034d8:	4013      	ands	r3, r2
 80034da:	3301      	adds	r3, #1
 80034dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d10d      	bne.n	8003500 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	4824      	ldr	r0, [pc, #144]	; (8003578 <HAL_RCC_GetSysClockFreq+0x100>)
 80034e8:	f7fc fe1c 	bl	8000124 <__udivsi3>
 80034ec:	0003      	movs	r3, r0
 80034ee:	0019      	movs	r1, r3
 80034f0:	4b1f      	ldr	r3, [pc, #124]	; (8003570 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	0a1b      	lsrs	r3, r3, #8
 80034f6:	227f      	movs	r2, #127	; 0x7f
 80034f8:	4013      	ands	r3, r2
 80034fa:	434b      	muls	r3, r1
 80034fc:	617b      	str	r3, [r7, #20]
        break;
 80034fe:	e00d      	b.n	800351c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	481c      	ldr	r0, [pc, #112]	; (8003574 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003504:	f7fc fe0e 	bl	8000124 <__udivsi3>
 8003508:	0003      	movs	r3, r0
 800350a:	0019      	movs	r1, r3
 800350c:	4b18      	ldr	r3, [pc, #96]	; (8003570 <HAL_RCC_GetSysClockFreq+0xf8>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	0a1b      	lsrs	r3, r3, #8
 8003512:	227f      	movs	r2, #127	; 0x7f
 8003514:	4013      	ands	r3, r2
 8003516:	434b      	muls	r3, r1
 8003518:	617b      	str	r3, [r7, #20]
        break;
 800351a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800351c:	4b14      	ldr	r3, [pc, #80]	; (8003570 <HAL_RCC_GetSysClockFreq+0xf8>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	0f5b      	lsrs	r3, r3, #29
 8003522:	2207      	movs	r2, #7
 8003524:	4013      	ands	r3, r2
 8003526:	3301      	adds	r3, #1
 8003528:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	6978      	ldr	r0, [r7, #20]
 800352e:	f7fc fdf9 	bl	8000124 <__udivsi3>
 8003532:	0003      	movs	r3, r0
 8003534:	613b      	str	r3, [r7, #16]
 8003536:	e015      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003538:	4b0d      	ldr	r3, [pc, #52]	; (8003570 <HAL_RCC_GetSysClockFreq+0xf8>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2238      	movs	r2, #56	; 0x38
 800353e:	4013      	ands	r3, r2
 8003540:	2b20      	cmp	r3, #32
 8003542:	d103      	bne.n	800354c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	021b      	lsls	r3, r3, #8
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	e00b      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800354c:	4b08      	ldr	r3, [pc, #32]	; (8003570 <HAL_RCC_GetSysClockFreq+0xf8>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2238      	movs	r2, #56	; 0x38
 8003552:	4013      	ands	r3, r2
 8003554:	2b18      	cmp	r3, #24
 8003556:	d103      	bne.n	8003560 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003558:	23fa      	movs	r3, #250	; 0xfa
 800355a:	01db      	lsls	r3, r3, #7
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	e001      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003564:	693b      	ldr	r3, [r7, #16]
}
 8003566:	0018      	movs	r0, r3
 8003568:	46bd      	mov	sp, r7
 800356a:	b006      	add	sp, #24
 800356c:	bd80      	pop	{r7, pc}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	40021000 	.word	0x40021000
 8003574:	00f42400 	.word	0x00f42400
 8003578:	007a1200 	.word	0x007a1200

0800357c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003580:	4b02      	ldr	r3, [pc, #8]	; (800358c <HAL_RCC_GetHCLKFreq+0x10>)
 8003582:	681b      	ldr	r3, [r3, #0]
}
 8003584:	0018      	movs	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	20000400 	.word	0x20000400

08003590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003590:	b5b0      	push	{r4, r5, r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003594:	f7ff fff2 	bl	800357c <HAL_RCC_GetHCLKFreq>
 8003598:	0004      	movs	r4, r0
 800359a:	f7ff fb3f 	bl	8002c1c <LL_RCC_GetAPB1Prescaler>
 800359e:	0003      	movs	r3, r0
 80035a0:	0b1a      	lsrs	r2, r3, #12
 80035a2:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035a4:	0092      	lsls	r2, r2, #2
 80035a6:	58d3      	ldr	r3, [r2, r3]
 80035a8:	221f      	movs	r2, #31
 80035aa:	4013      	ands	r3, r2
 80035ac:	40dc      	lsrs	r4, r3
 80035ae:	0023      	movs	r3, r4
}
 80035b0:	0018      	movs	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bdb0      	pop	{r4, r5, r7, pc}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	080080a4 	.word	0x080080a4

080035bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80035c4:	2313      	movs	r3, #19
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035cc:	2312      	movs	r3, #18
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	2200      	movs	r2, #0
 80035d2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	2380      	movs	r3, #128	; 0x80
 80035da:	029b      	lsls	r3, r3, #10
 80035dc:	4013      	ands	r3, r2
 80035de:	d100      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80035e0:	e0a3      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035e2:	2011      	movs	r0, #17
 80035e4:	183b      	adds	r3, r7, r0
 80035e6:	2200      	movs	r2, #0
 80035e8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ea:	4bb0      	ldr	r3, [pc, #704]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035ee:	2380      	movs	r3, #128	; 0x80
 80035f0:	055b      	lsls	r3, r3, #21
 80035f2:	4013      	ands	r3, r2
 80035f4:	d110      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f6:	4bad      	ldr	r3, [pc, #692]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035fa:	4bac      	ldr	r3, [pc, #688]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035fc:	2180      	movs	r1, #128	; 0x80
 80035fe:	0549      	lsls	r1, r1, #21
 8003600:	430a      	orrs	r2, r1
 8003602:	63da      	str	r2, [r3, #60]	; 0x3c
 8003604:	4ba9      	ldr	r3, [pc, #676]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003606:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003608:	2380      	movs	r3, #128	; 0x80
 800360a:	055b      	lsls	r3, r3, #21
 800360c:	4013      	ands	r3, r2
 800360e:	60bb      	str	r3, [r7, #8]
 8003610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003612:	183b      	adds	r3, r7, r0
 8003614:	2201      	movs	r2, #1
 8003616:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003618:	4ba5      	ldr	r3, [pc, #660]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	4ba4      	ldr	r3, [pc, #656]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800361e:	2180      	movs	r1, #128	; 0x80
 8003620:	0049      	lsls	r1, r1, #1
 8003622:	430a      	orrs	r2, r1
 8003624:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003626:	f7fe fd7d 	bl	8002124 <HAL_GetTick>
 800362a:	0003      	movs	r3, r0
 800362c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800362e:	e00b      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003630:	f7fe fd78 	bl	8002124 <HAL_GetTick>
 8003634:	0002      	movs	r2, r0
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d904      	bls.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800363e:	2313      	movs	r3, #19
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	2203      	movs	r2, #3
 8003644:	701a      	strb	r2, [r3, #0]
        break;
 8003646:	e005      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003648:	4b99      	ldr	r3, [pc, #612]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	4013      	ands	r3, r2
 8003652:	d0ed      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003654:	2313      	movs	r3, #19
 8003656:	18fb      	adds	r3, r7, r3
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d154      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800365e:	4b93      	ldr	r3, [pc, #588]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003660:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003662:	23c0      	movs	r3, #192	; 0xc0
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4013      	ands	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d019      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	429a      	cmp	r2, r3
 8003678:	d014      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800367a:	4b8c      	ldr	r3, [pc, #560]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800367c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367e:	4a8d      	ldr	r2, [pc, #564]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003680:	4013      	ands	r3, r2
 8003682:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003684:	4b89      	ldr	r3, [pc, #548]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003686:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003688:	4b88      	ldr	r3, [pc, #544]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800368a:	2180      	movs	r1, #128	; 0x80
 800368c:	0249      	lsls	r1, r1, #9
 800368e:	430a      	orrs	r2, r1
 8003690:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003692:	4b86      	ldr	r3, [pc, #536]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003694:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003696:	4b85      	ldr	r3, [pc, #532]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003698:	4987      	ldr	r1, [pc, #540]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800369a:	400a      	ands	r2, r1
 800369c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800369e:	4b83      	ldr	r3, [pc, #524]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2201      	movs	r2, #1
 80036a8:	4013      	ands	r3, r2
 80036aa:	d016      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7fe fd3a 	bl	8002124 <HAL_GetTick>
 80036b0:	0003      	movs	r3, r0
 80036b2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036b4:	e00c      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b6:	f7fe fd35 	bl	8002124 <HAL_GetTick>
 80036ba:	0002      	movs	r2, r0
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	4a7e      	ldr	r2, [pc, #504]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d904      	bls.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80036c6:	2313      	movs	r3, #19
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	2203      	movs	r2, #3
 80036cc:	701a      	strb	r2, [r3, #0]
            break;
 80036ce:	e004      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036d0:	4b76      	ldr	r3, [pc, #472]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d4:	2202      	movs	r2, #2
 80036d6:	4013      	ands	r3, r2
 80036d8:	d0ed      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80036da:	2313      	movs	r3, #19
 80036dc:	18fb      	adds	r3, r7, r3
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10a      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036e4:	4b71      	ldr	r3, [pc, #452]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e8:	4a72      	ldr	r2, [pc, #456]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	0019      	movs	r1, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036f2:	4b6e      	ldr	r3, [pc, #440]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036f4:	430a      	orrs	r2, r1
 80036f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80036f8:	e00c      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036fa:	2312      	movs	r3, #18
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	2213      	movs	r2, #19
 8003700:	18ba      	adds	r2, r7, r2
 8003702:	7812      	ldrb	r2, [r2, #0]
 8003704:	701a      	strb	r2, [r3, #0]
 8003706:	e005      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003708:	2312      	movs	r3, #18
 800370a:	18fb      	adds	r3, r7, r3
 800370c:	2213      	movs	r2, #19
 800370e:	18ba      	adds	r2, r7, r2
 8003710:	7812      	ldrb	r2, [r2, #0]
 8003712:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003714:	2311      	movs	r3, #17
 8003716:	18fb      	adds	r3, r7, r3
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d105      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800371e:	4b63      	ldr	r3, [pc, #396]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003720:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003722:	4b62      	ldr	r3, [pc, #392]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003724:	4966      	ldr	r1, [pc, #408]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003726:	400a      	ands	r2, r1
 8003728:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2201      	movs	r2, #1
 8003730:	4013      	ands	r3, r2
 8003732:	d009      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003734:	4b5d      	ldr	r3, [pc, #372]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003738:	2203      	movs	r2, #3
 800373a:	4393      	bics	r3, r2
 800373c:	0019      	movs	r1, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	4b5a      	ldr	r3, [pc, #360]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003744:	430a      	orrs	r2, r1
 8003746:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2202      	movs	r2, #2
 800374e:	4013      	ands	r3, r2
 8003750:	d009      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003752:	4b56      	ldr	r3, [pc, #344]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003756:	220c      	movs	r2, #12
 8003758:	4393      	bics	r3, r2
 800375a:	0019      	movs	r1, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	4b52      	ldr	r3, [pc, #328]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003762:	430a      	orrs	r2, r1
 8003764:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2204      	movs	r2, #4
 800376c:	4013      	ands	r3, r2
 800376e:	d009      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003770:	4b4e      	ldr	r3, [pc, #312]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003774:	2230      	movs	r2, #48	; 0x30
 8003776:	4393      	bics	r3, r2
 8003778:	0019      	movs	r1, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	4b4b      	ldr	r3, [pc, #300]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003780:	430a      	orrs	r2, r1
 8003782:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2220      	movs	r2, #32
 800378a:	4013      	ands	r3, r2
 800378c:	d009      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800378e:	4b47      	ldr	r3, [pc, #284]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003792:	4a4c      	ldr	r2, [pc, #304]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003794:	4013      	ands	r3, r2
 8003796:	0019      	movs	r1, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691a      	ldr	r2, [r3, #16]
 800379c:	4b43      	ldr	r3, [pc, #268]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800379e:	430a      	orrs	r2, r1
 80037a0:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2240      	movs	r2, #64	; 0x40
 80037a8:	4013      	ands	r3, r2
 80037aa:	d009      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037ac:	4b3f      	ldr	r3, [pc, #252]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b0:	4a45      	ldr	r2, [pc, #276]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	0019      	movs	r1, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	695a      	ldr	r2, [r3, #20]
 80037ba:	4b3c      	ldr	r3, [pc, #240]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037bc:	430a      	orrs	r2, r1
 80037be:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	2380      	movs	r3, #128	; 0x80
 80037c6:	01db      	lsls	r3, r3, #7
 80037c8:	4013      	ands	r3, r2
 80037ca:	d015      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037cc:	4b37      	ldr	r3, [pc, #220]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	0899      	lsrs	r1, r3, #2
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a1a      	ldr	r2, [r3, #32]
 80037d8:	4b34      	ldr	r3, [pc, #208]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037da:	430a      	orrs	r2, r1
 80037dc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1a      	ldr	r2, [r3, #32]
 80037e2:	2380      	movs	r3, #128	; 0x80
 80037e4:	05db      	lsls	r3, r3, #23
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d106      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80037ea:	4b30      	ldr	r3, [pc, #192]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	4b2f      	ldr	r3, [pc, #188]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037f0:	2180      	movs	r1, #128	; 0x80
 80037f2:	0249      	lsls	r1, r1, #9
 80037f4:	430a      	orrs	r2, r1
 80037f6:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	2380      	movs	r3, #128	; 0x80
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	4013      	ands	r3, r2
 8003802:	d014      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003804:	4b29      	ldr	r3, [pc, #164]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003808:	2203      	movs	r2, #3
 800380a:	4393      	bics	r3, r2
 800380c:	0019      	movs	r1, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699a      	ldr	r2, [r3, #24]
 8003812:	4b26      	ldr	r3, [pc, #152]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003814:	430a      	orrs	r2, r1
 8003816:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d106      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003820:	4b22      	ldr	r3, [pc, #136]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	4b21      	ldr	r3, [pc, #132]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003826:	2180      	movs	r1, #128	; 0x80
 8003828:	0249      	lsls	r1, r1, #9
 800382a:	430a      	orrs	r2, r1
 800382c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	2380      	movs	r3, #128	; 0x80
 8003834:	019b      	lsls	r3, r3, #6
 8003836:	4013      	ands	r3, r2
 8003838:	d014      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800383a:	4b1c      	ldr	r3, [pc, #112]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800383c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383e:	220c      	movs	r2, #12
 8003840:	4393      	bics	r3, r2
 8003842:	0019      	movs	r1, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	69da      	ldr	r2, [r3, #28]
 8003848:	4b18      	ldr	r3, [pc, #96]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800384a:	430a      	orrs	r2, r1
 800384c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	2b04      	cmp	r3, #4
 8003854:	d106      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003856:	4b15      	ldr	r3, [pc, #84]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	4b14      	ldr	r3, [pc, #80]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800385c:	2180      	movs	r1, #128	; 0x80
 800385e:	0249      	lsls	r1, r1, #9
 8003860:	430a      	orrs	r2, r1
 8003862:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	2380      	movs	r3, #128	; 0x80
 800386a:	045b      	lsls	r3, r3, #17
 800386c:	4013      	ands	r3, r2
 800386e:	d016      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003870:	4b0e      	ldr	r3, [pc, #56]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003874:	4a13      	ldr	r2, [pc, #76]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003876:	4013      	ands	r3, r2
 8003878:	0019      	movs	r1, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800387e:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003880:	430a      	orrs	r2, r1
 8003882:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003888:	2380      	movs	r3, #128	; 0x80
 800388a:	019b      	lsls	r3, r3, #6
 800388c:	429a      	cmp	r2, r3
 800388e:	d106      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003890:	4b06      	ldr	r3, [pc, #24]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	4b05      	ldr	r3, [pc, #20]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003896:	2180      	movs	r1, #128	; 0x80
 8003898:	0449      	lsls	r1, r1, #17
 800389a:	430a      	orrs	r2, r1
 800389c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800389e:	2312      	movs	r3, #18
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	781b      	ldrb	r3, [r3, #0]
}
 80038a4:	0018      	movs	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	b006      	add	sp, #24
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40007000 	.word	0x40007000
 80038b4:	fffffcff 	.word	0xfffffcff
 80038b8:	fffeffff 	.word	0xfffeffff
 80038bc:	00001388 	.word	0x00001388
 80038c0:	efffffff 	.word	0xefffffff
 80038c4:	ffffcfff 	.word	0xffffcfff
 80038c8:	ffff3fff 	.word	0xffff3fff

080038cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e04a      	b.n	8003974 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	223d      	movs	r2, #61	; 0x3d
 80038e2:	5c9b      	ldrb	r3, [r3, r2]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d107      	bne.n	80038fa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	223c      	movs	r2, #60	; 0x3c
 80038ee:	2100      	movs	r1, #0
 80038f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	0018      	movs	r0, r3
 80038f6:	f7fe f9d3 	bl	8001ca0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	223d      	movs	r2, #61	; 0x3d
 80038fe:	2102      	movs	r1, #2
 8003900:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3304      	adds	r3, #4
 800390a:	0019      	movs	r1, r3
 800390c:	0010      	movs	r0, r2
 800390e:	f000 fae7 	bl	8003ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2248      	movs	r2, #72	; 0x48
 8003916:	2101      	movs	r1, #1
 8003918:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	223e      	movs	r2, #62	; 0x3e
 800391e:	2101      	movs	r1, #1
 8003920:	5499      	strb	r1, [r3, r2]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	223f      	movs	r2, #63	; 0x3f
 8003926:	2101      	movs	r1, #1
 8003928:	5499      	strb	r1, [r3, r2]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2240      	movs	r2, #64	; 0x40
 800392e:	2101      	movs	r1, #1
 8003930:	5499      	strb	r1, [r3, r2]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2241      	movs	r2, #65	; 0x41
 8003936:	2101      	movs	r1, #1
 8003938:	5499      	strb	r1, [r3, r2]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2242      	movs	r2, #66	; 0x42
 800393e:	2101      	movs	r1, #1
 8003940:	5499      	strb	r1, [r3, r2]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2243      	movs	r2, #67	; 0x43
 8003946:	2101      	movs	r1, #1
 8003948:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2244      	movs	r2, #68	; 0x44
 800394e:	2101      	movs	r1, #1
 8003950:	5499      	strb	r1, [r3, r2]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2245      	movs	r2, #69	; 0x45
 8003956:	2101      	movs	r1, #1
 8003958:	5499      	strb	r1, [r3, r2]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2246      	movs	r2, #70	; 0x46
 800395e:	2101      	movs	r1, #1
 8003960:	5499      	strb	r1, [r3, r2]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2247      	movs	r2, #71	; 0x47
 8003966:	2101      	movs	r1, #1
 8003968:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	223d      	movs	r2, #61	; 0x3d
 800396e:	2101      	movs	r1, #1
 8003970:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	0018      	movs	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	b002      	add	sp, #8
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	223d      	movs	r2, #61	; 0x3d
 8003988:	5c9b      	ldrb	r3, [r3, r2]
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b01      	cmp	r3, #1
 800398e:	d001      	beq.n	8003994 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e041      	b.n	8003a18 <HAL_TIM_Base_Start_IT+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	223d      	movs	r2, #61	; 0x3d
 8003998:	2102      	movs	r1, #2
 800399a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2101      	movs	r1, #1
 80039a8:	430a      	orrs	r2, r1
 80039aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a1b      	ldr	r2, [pc, #108]	; (8003a20 <HAL_TIM_Base_Start_IT+0xa4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00e      	beq.n	80039d4 <HAL_TIM_Base_Start_IT+0x58>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a1a      	ldr	r2, [pc, #104]	; (8003a24 <HAL_TIM_Base_Start_IT+0xa8>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d009      	beq.n	80039d4 <HAL_TIM_Base_Start_IT+0x58>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a18      	ldr	r2, [pc, #96]	; (8003a28 <HAL_TIM_Base_Start_IT+0xac>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d004      	beq.n	80039d4 <HAL_TIM_Base_Start_IT+0x58>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a17      	ldr	r2, [pc, #92]	; (8003a2c <HAL_TIM_Base_Start_IT+0xb0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d116      	bne.n	8003a02 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	4a15      	ldr	r2, [pc, #84]	; (8003a30 <HAL_TIM_Base_Start_IT+0xb4>)
 80039dc:	4013      	ands	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2b06      	cmp	r3, #6
 80039e4:	d016      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x98>
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	2380      	movs	r3, #128	; 0x80
 80039ea:	025b      	lsls	r3, r3, #9
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d011      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x98>
    {
      __HAL_TIM_ENABLE(htim);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2101      	movs	r1, #1
 80039fc:	430a      	orrs	r2, r1
 80039fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a00:	e008      	b.n	8003a14 <HAL_TIM_Base_Start_IT+0x98>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	e000      	b.n	8003a16 <HAL_TIM_Base_Start_IT+0x9a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a14:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	0018      	movs	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	b004      	add	sp, #16
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40012c00 	.word	0x40012c00
 8003a24:	40000400 	.word	0x40000400
 8003a28:	40000800 	.word	0x40000800
 8003a2c:	40014000 	.word	0x40014000
 8003a30:	00010007 	.word	0x00010007

08003a34 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2101      	movs	r1, #1
 8003a48:	438a      	bics	r2, r1
 8003a4a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	4a0d      	ldr	r2, [pc, #52]	; (8003a88 <HAL_TIM_Base_Stop_IT+0x54>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	d10d      	bne.n	8003a74 <HAL_TIM_Base_Stop_IT+0x40>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	4a0b      	ldr	r2, [pc, #44]	; (8003a8c <HAL_TIM_Base_Stop_IT+0x58>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	d107      	bne.n	8003a74 <HAL_TIM_Base_Stop_IT+0x40>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2101      	movs	r1, #1
 8003a70:	438a      	bics	r2, r1
 8003a72:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	223d      	movs	r2, #61	; 0x3d
 8003a78:	2101      	movs	r1, #1
 8003a7a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	0018      	movs	r0, r3
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b002      	add	sp, #8
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	00001111 	.word	0x00001111
 8003a8c:	00000444 	.word	0x00000444

08003a90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d124      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	2202      	movs	r2, #2
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d11d      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2203      	movs	r2, #3
 8003aba:	4252      	negs	r2, r2
 8003abc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	2203      	movs	r2, #3
 8003acc:	4013      	ands	r3, r2
 8003ace:	d004      	beq.n	8003ada <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f000 f9ec 	bl	8003eb0 <HAL_TIM_IC_CaptureCallback>
 8003ad8:	e007      	b.n	8003aea <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	0018      	movs	r0, r3
 8003ade:	f000 f9df 	bl	8003ea0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f000 f9eb 	bl	8003ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	2204      	movs	r2, #4
 8003af8:	4013      	ands	r3, r2
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d125      	bne.n	8003b4a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	2204      	movs	r2, #4
 8003b06:	4013      	ands	r3, r2
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d11e      	bne.n	8003b4a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2205      	movs	r2, #5
 8003b12:	4252      	negs	r2, r2
 8003b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	23c0      	movs	r3, #192	; 0xc0
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4013      	ands	r3, r2
 8003b28:	d004      	beq.n	8003b34 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f000 f9bf 	bl	8003eb0 <HAL_TIM_IC_CaptureCallback>
 8003b32:	e007      	b.n	8003b44 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	0018      	movs	r0, r3
 8003b38:	f000 f9b2 	bl	8003ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	0018      	movs	r0, r3
 8003b40:	f000 f9be 	bl	8003ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	2208      	movs	r2, #8
 8003b52:	4013      	ands	r3, r2
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d124      	bne.n	8003ba2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	2208      	movs	r2, #8
 8003b60:	4013      	ands	r3, r2
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d11d      	bne.n	8003ba2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2209      	movs	r2, #9
 8003b6c:	4252      	negs	r2, r2
 8003b6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2204      	movs	r2, #4
 8003b74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	2203      	movs	r2, #3
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d004      	beq.n	8003b8c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	0018      	movs	r0, r3
 8003b86:	f000 f993 	bl	8003eb0 <HAL_TIM_IC_CaptureCallback>
 8003b8a:	e007      	b.n	8003b9c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f000 f986 	bl	8003ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	0018      	movs	r0, r3
 8003b98:	f000 f992 	bl	8003ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	2210      	movs	r2, #16
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b10      	cmp	r3, #16
 8003bae:	d125      	bne.n	8003bfc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	2210      	movs	r2, #16
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2b10      	cmp	r3, #16
 8003bbc:	d11e      	bne.n	8003bfc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2211      	movs	r2, #17
 8003bc4:	4252      	negs	r2, r2
 8003bc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2208      	movs	r2, #8
 8003bcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	69da      	ldr	r2, [r3, #28]
 8003bd4:	23c0      	movs	r3, #192	; 0xc0
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4013      	ands	r3, r2
 8003bda:	d004      	beq.n	8003be6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	0018      	movs	r0, r3
 8003be0:	f000 f966 	bl	8003eb0 <HAL_TIM_IC_CaptureCallback>
 8003be4:	e007      	b.n	8003bf6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	0018      	movs	r0, r3
 8003bea:	f000 f959 	bl	8003ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	f000 f965 	bl	8003ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	2201      	movs	r2, #1
 8003c04:	4013      	ands	r3, r2
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d10f      	bne.n	8003c2a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	4013      	ands	r3, r2
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d108      	bne.n	8003c2a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	4252      	negs	r2, r2
 8003c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	0018      	movs	r0, r3
 8003c26:	f7fd fdef 	bl	8001808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	2280      	movs	r2, #128	; 0x80
 8003c32:	4013      	ands	r3, r2
 8003c34:	2b80      	cmp	r3, #128	; 0x80
 8003c36:	d10f      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	2280      	movs	r2, #128	; 0x80
 8003c40:	4013      	ands	r3, r2
 8003c42:	2b80      	cmp	r3, #128	; 0x80
 8003c44:	d108      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2281      	movs	r2, #129	; 0x81
 8003c4c:	4252      	negs	r2, r2
 8003c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	0018      	movs	r0, r3
 8003c54:	f000 fad8 	bl	8004208 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691a      	ldr	r2, [r3, #16]
 8003c5e:	2380      	movs	r3, #128	; 0x80
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	401a      	ands	r2, r3
 8003c64:	2380      	movs	r3, #128	; 0x80
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d10e      	bne.n	8003c8a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	2280      	movs	r2, #128	; 0x80
 8003c74:	4013      	ands	r3, r2
 8003c76:	2b80      	cmp	r3, #128	; 0x80
 8003c78:	d107      	bne.n	8003c8a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a1c      	ldr	r2, [pc, #112]	; (8003cf0 <HAL_TIM_IRQHandler+0x260>)
 8003c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	0018      	movs	r0, r3
 8003c86:	f000 fac7 	bl	8004218 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	2240      	movs	r2, #64	; 0x40
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b40      	cmp	r3, #64	; 0x40
 8003c96:	d10f      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	2240      	movs	r2, #64	; 0x40
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b40      	cmp	r3, #64	; 0x40
 8003ca4:	d108      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2241      	movs	r2, #65	; 0x41
 8003cac:	4252      	negs	r2, r2
 8003cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f000 f90c 	bl	8003ed0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d10f      	bne.n	8003ce6 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	4013      	ands	r3, r2
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	d108      	bne.n	8003ce6 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2221      	movs	r2, #33	; 0x21
 8003cda:	4252      	negs	r2, r2
 8003cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f000 fa89 	bl	80041f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b002      	add	sp, #8
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	fffffeff 	.word	0xfffffeff

08003cf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cfe:	230f      	movs	r3, #15
 8003d00:	18fb      	adds	r3, r7, r3
 8003d02:	2200      	movs	r2, #0
 8003d04:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	223c      	movs	r2, #60	; 0x3c
 8003d0a:	5c9b      	ldrb	r3, [r3, r2]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_TIM_ConfigClockSource+0x20>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e0bc      	b.n	8003e8e <HAL_TIM_ConfigClockSource+0x19a>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	223c      	movs	r2, #60	; 0x3c
 8003d18:	2101      	movs	r1, #1
 8003d1a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	223d      	movs	r2, #61	; 0x3d
 8003d20:	2102      	movs	r1, #2
 8003d22:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4a5a      	ldr	r2, [pc, #360]	; (8003e98 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4a59      	ldr	r2, [pc, #356]	; (8003e9c <HAL_TIM_ConfigClockSource+0x1a8>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2280      	movs	r2, #128	; 0x80
 8003d4a:	0192      	lsls	r2, r2, #6
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d040      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0xde>
 8003d50:	2280      	movs	r2, #128	; 0x80
 8003d52:	0192      	lsls	r2, r2, #6
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d900      	bls.n	8003d5a <HAL_TIM_ConfigClockSource+0x66>
 8003d58:	e088      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x178>
 8003d5a:	2280      	movs	r2, #128	; 0x80
 8003d5c:	0152      	lsls	r2, r2, #5
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d100      	bne.n	8003d64 <HAL_TIM_ConfigClockSource+0x70>
 8003d62:	e088      	b.n	8003e76 <HAL_TIM_ConfigClockSource+0x182>
 8003d64:	2280      	movs	r2, #128	; 0x80
 8003d66:	0152      	lsls	r2, r2, #5
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d900      	bls.n	8003d6e <HAL_TIM_ConfigClockSource+0x7a>
 8003d6c:	e07e      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x178>
 8003d6e:	2b70      	cmp	r3, #112	; 0x70
 8003d70:	d018      	beq.n	8003da4 <HAL_TIM_ConfigClockSource+0xb0>
 8003d72:	d900      	bls.n	8003d76 <HAL_TIM_ConfigClockSource+0x82>
 8003d74:	e07a      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x178>
 8003d76:	2b60      	cmp	r3, #96	; 0x60
 8003d78:	d04f      	beq.n	8003e1a <HAL_TIM_ConfigClockSource+0x126>
 8003d7a:	d900      	bls.n	8003d7e <HAL_TIM_ConfigClockSource+0x8a>
 8003d7c:	e076      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x178>
 8003d7e:	2b50      	cmp	r3, #80	; 0x50
 8003d80:	d03b      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0x106>
 8003d82:	d900      	bls.n	8003d86 <HAL_TIM_ConfigClockSource+0x92>
 8003d84:	e072      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x178>
 8003d86:	2b40      	cmp	r3, #64	; 0x40
 8003d88:	d057      	beq.n	8003e3a <HAL_TIM_ConfigClockSource+0x146>
 8003d8a:	d900      	bls.n	8003d8e <HAL_TIM_ConfigClockSource+0x9a>
 8003d8c:	e06e      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x178>
 8003d8e:	2b30      	cmp	r3, #48	; 0x30
 8003d90:	d063      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x166>
 8003d92:	d86b      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x178>
 8003d94:	2b20      	cmp	r3, #32
 8003d96:	d060      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x166>
 8003d98:	d868      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x178>
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d05d      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x166>
 8003d9e:	2b10      	cmp	r3, #16
 8003da0:	d05b      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x166>
 8003da2:	e063      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6818      	ldr	r0, [r3, #0]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	6899      	ldr	r1, [r3, #8]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f000 f990 	bl	80040d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2277      	movs	r2, #119	; 0x77
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	609a      	str	r2, [r3, #8]
      break;
 8003dd0:	e052      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	6899      	ldr	r1, [r3, #8]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f000 f979 	bl	80040d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2180      	movs	r1, #128	; 0x80
 8003df2:	01c9      	lsls	r1, r1, #7
 8003df4:	430a      	orrs	r2, r1
 8003df6:	609a      	str	r2, [r3, #8]
      break;
 8003df8:	e03e      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6818      	ldr	r0, [r3, #0]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	6859      	ldr	r1, [r3, #4]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	001a      	movs	r2, r3
 8003e08:	f000 f8ea 	bl	8003fe0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2150      	movs	r1, #80	; 0x50
 8003e12:	0018      	movs	r0, r3
 8003e14:	f000 f944 	bl	80040a0 <TIM_ITRx_SetConfig>
      break;
 8003e18:	e02e      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6818      	ldr	r0, [r3, #0]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	6859      	ldr	r1, [r3, #4]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	001a      	movs	r2, r3
 8003e28:	f000 f908 	bl	800403c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2160      	movs	r1, #96	; 0x60
 8003e32:	0018      	movs	r0, r3
 8003e34:	f000 f934 	bl	80040a0 <TIM_ITRx_SetConfig>
      break;
 8003e38:	e01e      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	6859      	ldr	r1, [r3, #4]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	001a      	movs	r2, r3
 8003e48:	f000 f8ca 	bl	8003fe0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2140      	movs	r1, #64	; 0x40
 8003e52:	0018      	movs	r0, r3
 8003e54:	f000 f924 	bl	80040a0 <TIM_ITRx_SetConfig>
      break;
 8003e58:	e00e      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	0019      	movs	r1, r3
 8003e64:	0010      	movs	r0, r2
 8003e66:	f000 f91b 	bl	80040a0 <TIM_ITRx_SetConfig>
      break;
 8003e6a:	e005      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003e6c:	230f      	movs	r3, #15
 8003e6e:	18fb      	adds	r3, r7, r3
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
      break;
 8003e74:	e000      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003e76:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	223d      	movs	r2, #61	; 0x3d
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	223c      	movs	r2, #60	; 0x3c
 8003e84:	2100      	movs	r1, #0
 8003e86:	5499      	strb	r1, [r3, r2]

  return status;
 8003e88:	230f      	movs	r3, #15
 8003e8a:	18fb      	adds	r3, r7, r3
 8003e8c:	781b      	ldrb	r3, [r3, #0]
}
 8003e8e:	0018      	movs	r0, r3
 8003e90:	46bd      	mov	sp, r7
 8003e92:	b004      	add	sp, #16
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	46c0      	nop			; (mov r8, r8)
 8003e98:	ffceff88 	.word	0xffceff88
 8003e9c:	ffff00ff 	.word	0xffff00ff

08003ea0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ea8:	46c0      	nop			; (mov r8, r8)
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b002      	add	sp, #8
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003eb8:	46c0      	nop			; (mov r8, r8)
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	b002      	add	sp, #8
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ec8:	46c0      	nop			; (mov r8, r8)
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	b002      	add	sp, #8
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ed8:	46c0      	nop			; (mov r8, r8)
 8003eda:	46bd      	mov	sp, r7
 8003edc:	b002      	add	sp, #8
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a33      	ldr	r2, [pc, #204]	; (8003fc0 <TIM_Base_SetConfig+0xe0>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d007      	beq.n	8003f08 <TIM_Base_SetConfig+0x28>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a32      	ldr	r2, [pc, #200]	; (8003fc4 <TIM_Base_SetConfig+0xe4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d003      	beq.n	8003f08 <TIM_Base_SetConfig+0x28>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a31      	ldr	r2, [pc, #196]	; (8003fc8 <TIM_Base_SetConfig+0xe8>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d108      	bne.n	8003f1a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2270      	movs	r2, #112	; 0x70
 8003f0c:	4393      	bics	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a28      	ldr	r2, [pc, #160]	; (8003fc0 <TIM_Base_SetConfig+0xe0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d017      	beq.n	8003f52 <TIM_Base_SetConfig+0x72>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a27      	ldr	r2, [pc, #156]	; (8003fc4 <TIM_Base_SetConfig+0xe4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d013      	beq.n	8003f52 <TIM_Base_SetConfig+0x72>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a26      	ldr	r2, [pc, #152]	; (8003fc8 <TIM_Base_SetConfig+0xe8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00f      	beq.n	8003f52 <TIM_Base_SetConfig+0x72>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a25      	ldr	r2, [pc, #148]	; (8003fcc <TIM_Base_SetConfig+0xec>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d00b      	beq.n	8003f52 <TIM_Base_SetConfig+0x72>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a24      	ldr	r2, [pc, #144]	; (8003fd0 <TIM_Base_SetConfig+0xf0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d007      	beq.n	8003f52 <TIM_Base_SetConfig+0x72>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a23      	ldr	r2, [pc, #140]	; (8003fd4 <TIM_Base_SetConfig+0xf4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d003      	beq.n	8003f52 <TIM_Base_SetConfig+0x72>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a22      	ldr	r2, [pc, #136]	; (8003fd8 <TIM_Base_SetConfig+0xf8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d108      	bne.n	8003f64 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4a21      	ldr	r2, [pc, #132]	; (8003fdc <TIM_Base_SetConfig+0xfc>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2280      	movs	r2, #128	; 0x80
 8003f68:	4393      	bics	r3, r2
 8003f6a:	001a      	movs	r2, r3
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a0c      	ldr	r2, [pc, #48]	; (8003fc0 <TIM_Base_SetConfig+0xe0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00b      	beq.n	8003faa <TIM_Base_SetConfig+0xca>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a0e      	ldr	r2, [pc, #56]	; (8003fd0 <TIM_Base_SetConfig+0xf0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d007      	beq.n	8003faa <TIM_Base_SetConfig+0xca>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a0d      	ldr	r2, [pc, #52]	; (8003fd4 <TIM_Base_SetConfig+0xf4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d003      	beq.n	8003faa <TIM_Base_SetConfig+0xca>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a0c      	ldr	r2, [pc, #48]	; (8003fd8 <TIM_Base_SetConfig+0xf8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d103      	bne.n	8003fb2 <TIM_Base_SetConfig+0xd2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	615a      	str	r2, [r3, #20]
}
 8003fb8:	46c0      	nop			; (mov r8, r8)
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b004      	add	sp, #16
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40012c00 	.word	0x40012c00
 8003fc4:	40000400 	.word	0x40000400
 8003fc8:	40000800 	.word	0x40000800
 8003fcc:	40002000 	.word	0x40002000
 8003fd0:	40014000 	.word	0x40014000
 8003fd4:	40014400 	.word	0x40014400
 8003fd8:	40014800 	.word	0x40014800
 8003fdc:	fffffcff 	.word	0xfffffcff

08003fe0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	4393      	bics	r3, r2
 8003ffa:	001a      	movs	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	22f0      	movs	r2, #240	; 0xf0
 800400a:	4393      	bics	r3, r2
 800400c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	4313      	orrs	r3, r2
 8004016:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	220a      	movs	r2, #10
 800401c:	4393      	bics	r3, r2
 800401e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	4313      	orrs	r3, r2
 8004026:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	621a      	str	r2, [r3, #32]
}
 8004034:	46c0      	nop			; (mov r8, r8)
 8004036:	46bd      	mov	sp, r7
 8004038:	b006      	add	sp, #24
 800403a:	bd80      	pop	{r7, pc}

0800403c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	2210      	movs	r2, #16
 800404e:	4393      	bics	r3, r2
 8004050:	001a      	movs	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	4a0d      	ldr	r2, [pc, #52]	; (800409c <TIM_TI2_ConfigInputStage+0x60>)
 8004066:	4013      	ands	r3, r2
 8004068:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	031b      	lsls	r3, r3, #12
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	4313      	orrs	r3, r2
 8004072:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	22a0      	movs	r2, #160	; 0xa0
 8004078:	4393      	bics	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	621a      	str	r2, [r3, #32]
}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	46bd      	mov	sp, r7
 8004096:	b006      	add	sp, #24
 8004098:	bd80      	pop	{r7, pc}
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	ffff0fff 	.word	0xffff0fff

080040a0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4a08      	ldr	r2, [pc, #32]	; (80040d4 <TIM_ITRx_SetConfig+0x34>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4313      	orrs	r3, r2
 80040be:	2207      	movs	r2, #7
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	609a      	str	r2, [r3, #8]
}
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	46bd      	mov	sp, r7
 80040ce:	b004      	add	sp, #16
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	ffcfff8f 	.word	0xffcfff8f

080040d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	4a09      	ldr	r2, [pc, #36]	; (8004114 <TIM_ETR_SetConfig+0x3c>)
 80040f0:	4013      	ands	r3, r2
 80040f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	021a      	lsls	r2, r3, #8
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	431a      	orrs	r2, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4313      	orrs	r3, r2
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	4313      	orrs	r3, r2
 8004104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	609a      	str	r2, [r3, #8]
}
 800410c:	46c0      	nop			; (mov r8, r8)
 800410e:	46bd      	mov	sp, r7
 8004110:	b006      	add	sp, #24
 8004112:	bd80      	pop	{r7, pc}
 8004114:	ffff00ff 	.word	0xffff00ff

08004118 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	223c      	movs	r2, #60	; 0x3c
 8004126:	5c9b      	ldrb	r3, [r3, r2]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800412c:	2302      	movs	r3, #2
 800412e:	e054      	b.n	80041da <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	223c      	movs	r2, #60	; 0x3c
 8004134:	2101      	movs	r1, #1
 8004136:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	223d      	movs	r2, #61	; 0x3d
 800413c:	2102      	movs	r1, #2
 800413e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a23      	ldr	r2, [pc, #140]	; (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d108      	bne.n	800416c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4a22      	ldr	r2, [pc, #136]	; (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800415e:	4013      	ands	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2270      	movs	r2, #112	; 0x70
 8004170:	4393      	bics	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a16      	ldr	r2, [pc, #88]	; (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d00e      	beq.n	80041ae <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a15      	ldr	r2, [pc, #84]	; (80041ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d009      	beq.n	80041ae <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a14      	ldr	r2, [pc, #80]	; (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d004      	beq.n	80041ae <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a12      	ldr	r2, [pc, #72]	; (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d10c      	bne.n	80041c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2280      	movs	r2, #128	; 0x80
 80041b2:	4393      	bics	r3, r2
 80041b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	4313      	orrs	r3, r2
 80041be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	223d      	movs	r2, #61	; 0x3d
 80041cc:	2101      	movs	r1, #1
 80041ce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	223c      	movs	r2, #60	; 0x3c
 80041d4:	2100      	movs	r1, #0
 80041d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	0018      	movs	r0, r3
 80041dc:	46bd      	mov	sp, r7
 80041de:	b004      	add	sp, #16
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	40012c00 	.word	0x40012c00
 80041e8:	ff0fffff 	.word	0xff0fffff
 80041ec:	40000400 	.word	0x40000400
 80041f0:	40000800 	.word	0x40000800
 80041f4:	40014000 	.word	0x40014000

080041f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004200:	46c0      	nop			; (mov r8, r8)
 8004202:	46bd      	mov	sp, r7
 8004204:	b002      	add	sp, #8
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004210:	46c0      	nop			; (mov r8, r8)
 8004212:	46bd      	mov	sp, r7
 8004214:	b002      	add	sp, #8
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004220:	46c0      	nop			; (mov r8, r8)
 8004222:	46bd      	mov	sp, r7
 8004224:	b002      	add	sp, #8
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e046      	b.n	80042c8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2288      	movs	r2, #136	; 0x88
 800423e:	589b      	ldr	r3, [r3, r2]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d107      	bne.n	8004254 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2284      	movs	r2, #132	; 0x84
 8004248:	2100      	movs	r1, #0
 800424a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	0018      	movs	r0, r3
 8004250:	f7fd fd88 	bl	8001d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2288      	movs	r2, #136	; 0x88
 8004258:	2124      	movs	r1, #36	; 0x24
 800425a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2101      	movs	r1, #1
 8004268:	438a      	bics	r2, r1
 800426a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	0018      	movs	r0, r3
 8004270:	f000 fcec 	bl	8004c4c <UART_SetConfig>
 8004274:	0003      	movs	r3, r0
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e024      	b.n	80042c8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	0018      	movs	r0, r3
 800428a:	f000 fec1 	bl	8005010 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	490d      	ldr	r1, [pc, #52]	; (80042d0 <HAL_UART_Init+0xa8>)
 800429a:	400a      	ands	r2, r1
 800429c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	212a      	movs	r1, #42	; 0x2a
 80042aa:	438a      	bics	r2, r1
 80042ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2101      	movs	r1, #1
 80042ba:	430a      	orrs	r2, r1
 80042bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	0018      	movs	r0, r3
 80042c2:	f000 ff59 	bl	8005178 <UART_CheckIdleState>
 80042c6:	0003      	movs	r3, r0
}
 80042c8:	0018      	movs	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b002      	add	sp, #8
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	ffffb7ff 	.word	0xffffb7ff

080042d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08a      	sub	sp, #40	; 0x28
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	1dbb      	adds	r3, r7, #6
 80042e2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2288      	movs	r2, #136	; 0x88
 80042e8:	589b      	ldr	r3, [r3, r2]
 80042ea:	2b20      	cmp	r3, #32
 80042ec:	d000      	beq.n	80042f0 <HAL_UART_Transmit+0x1c>
 80042ee:	e088      	b.n	8004402 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_UART_Transmit+0x2a>
 80042f6:	1dbb      	adds	r3, r7, #6
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e080      	b.n	8004404 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	2380      	movs	r3, #128	; 0x80
 8004308:	015b      	lsls	r3, r3, #5
 800430a:	429a      	cmp	r2, r3
 800430c:	d109      	bne.n	8004322 <HAL_UART_Transmit+0x4e>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d105      	bne.n	8004322 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2201      	movs	r2, #1
 800431a:	4013      	ands	r3, r2
 800431c:	d001      	beq.n	8004322 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e070      	b.n	8004404 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2290      	movs	r2, #144	; 0x90
 8004326:	2100      	movs	r1, #0
 8004328:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2288      	movs	r2, #136	; 0x88
 800432e:	2121      	movs	r1, #33	; 0x21
 8004330:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004332:	f7fd fef7 	bl	8002124 <HAL_GetTick>
 8004336:	0003      	movs	r3, r0
 8004338:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	1dba      	adds	r2, r7, #6
 800433e:	2154      	movs	r1, #84	; 0x54
 8004340:	8812      	ldrh	r2, [r2, #0]
 8004342:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	1dba      	adds	r2, r7, #6
 8004348:	2156      	movs	r1, #86	; 0x56
 800434a:	8812      	ldrh	r2, [r2, #0]
 800434c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	015b      	lsls	r3, r3, #5
 8004356:	429a      	cmp	r2, r3
 8004358:	d108      	bne.n	800436c <HAL_UART_Transmit+0x98>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d104      	bne.n	800436c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004362:	2300      	movs	r3, #0
 8004364:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	e003      	b.n	8004374 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004370:	2300      	movs	r3, #0
 8004372:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004374:	e02c      	b.n	80043d0 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	0013      	movs	r3, r2
 8004380:	2200      	movs	r2, #0
 8004382:	2180      	movs	r1, #128	; 0x80
 8004384:	f000 ff46 	bl	8005214 <UART_WaitOnFlagUntilTimeout>
 8004388:	1e03      	subs	r3, r0, #0
 800438a:	d001      	beq.n	8004390 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e039      	b.n	8004404 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10b      	bne.n	80043ae <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	001a      	movs	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	05d2      	lsls	r2, r2, #23
 80043a2:	0dd2      	lsrs	r2, r2, #23
 80043a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	3302      	adds	r3, #2
 80043aa:	61bb      	str	r3, [r7, #24]
 80043ac:	e007      	b.n	80043be <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	781a      	ldrb	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	3301      	adds	r3, #1
 80043bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2256      	movs	r2, #86	; 0x56
 80043c2:	5a9b      	ldrh	r3, [r3, r2]
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b299      	uxth	r1, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2256      	movs	r2, #86	; 0x56
 80043ce:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2256      	movs	r2, #86	; 0x56
 80043d4:	5a9b      	ldrh	r3, [r3, r2]
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1cc      	bne.n	8004376 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	0013      	movs	r3, r2
 80043e6:	2200      	movs	r2, #0
 80043e8:	2140      	movs	r1, #64	; 0x40
 80043ea:	f000 ff13 	bl	8005214 <UART_WaitOnFlagUntilTimeout>
 80043ee:	1e03      	subs	r3, r0, #0
 80043f0:	d001      	beq.n	80043f6 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e006      	b.n	8004404 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2288      	movs	r2, #136	; 0x88
 80043fa:	2120      	movs	r1, #32
 80043fc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	e000      	b.n	8004404 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8004402:	2302      	movs	r3, #2
  }
}
 8004404:	0018      	movs	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	b008      	add	sp, #32
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08a      	sub	sp, #40	; 0x28
 8004410:	af02      	add	r7, sp, #8
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	1dbb      	adds	r3, r7, #6
 800441a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	228c      	movs	r2, #140	; 0x8c
 8004420:	589b      	ldr	r3, [r3, r2]
 8004422:	2b20      	cmp	r3, #32
 8004424:	d000      	beq.n	8004428 <HAL_UART_Receive+0x1c>
 8004426:	e0cc      	b.n	80045c2 <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_UART_Receive+0x2a>
 800442e:	1dbb      	adds	r3, r7, #6
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e0c4      	b.n	80045c4 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	2380      	movs	r3, #128	; 0x80
 8004440:	015b      	lsls	r3, r3, #5
 8004442:	429a      	cmp	r2, r3
 8004444:	d109      	bne.n	800445a <HAL_UART_Receive+0x4e>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d105      	bne.n	800445a <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2201      	movs	r2, #1
 8004452:	4013      	ands	r3, r2
 8004454:	d001      	beq.n	800445a <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e0b4      	b.n	80045c4 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2290      	movs	r2, #144	; 0x90
 800445e:	2100      	movs	r1, #0
 8004460:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	228c      	movs	r2, #140	; 0x8c
 8004466:	2122      	movs	r1, #34	; 0x22
 8004468:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004470:	f7fd fe58 	bl	8002124 <HAL_GetTick>
 8004474:	0003      	movs	r3, r0
 8004476:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	1dba      	adds	r2, r7, #6
 800447c:	215c      	movs	r1, #92	; 0x5c
 800447e:	8812      	ldrh	r2, [r2, #0]
 8004480:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	1dba      	adds	r2, r7, #6
 8004486:	215e      	movs	r1, #94	; 0x5e
 8004488:	8812      	ldrh	r2, [r2, #0]
 800448a:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	2380      	movs	r3, #128	; 0x80
 8004492:	015b      	lsls	r3, r3, #5
 8004494:	429a      	cmp	r2, r3
 8004496:	d10d      	bne.n	80044b4 <HAL_UART_Receive+0xa8>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d104      	bne.n	80044aa <HAL_UART_Receive+0x9e>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2260      	movs	r2, #96	; 0x60
 80044a4:	4949      	ldr	r1, [pc, #292]	; (80045cc <HAL_UART_Receive+0x1c0>)
 80044a6:	5299      	strh	r1, [r3, r2]
 80044a8:	e02e      	b.n	8004508 <HAL_UART_Receive+0xfc>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2260      	movs	r2, #96	; 0x60
 80044ae:	21ff      	movs	r1, #255	; 0xff
 80044b0:	5299      	strh	r1, [r3, r2]
 80044b2:	e029      	b.n	8004508 <HAL_UART_Receive+0xfc>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10d      	bne.n	80044d8 <HAL_UART_Receive+0xcc>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d104      	bne.n	80044ce <HAL_UART_Receive+0xc2>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2260      	movs	r2, #96	; 0x60
 80044c8:	21ff      	movs	r1, #255	; 0xff
 80044ca:	5299      	strh	r1, [r3, r2]
 80044cc:	e01c      	b.n	8004508 <HAL_UART_Receive+0xfc>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2260      	movs	r2, #96	; 0x60
 80044d2:	217f      	movs	r1, #127	; 0x7f
 80044d4:	5299      	strh	r1, [r3, r2]
 80044d6:	e017      	b.n	8004508 <HAL_UART_Receive+0xfc>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	2380      	movs	r3, #128	; 0x80
 80044de:	055b      	lsls	r3, r3, #21
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d10d      	bne.n	8004500 <HAL_UART_Receive+0xf4>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d104      	bne.n	80044f6 <HAL_UART_Receive+0xea>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2260      	movs	r2, #96	; 0x60
 80044f0:	217f      	movs	r1, #127	; 0x7f
 80044f2:	5299      	strh	r1, [r3, r2]
 80044f4:	e008      	b.n	8004508 <HAL_UART_Receive+0xfc>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2260      	movs	r2, #96	; 0x60
 80044fa:	213f      	movs	r1, #63	; 0x3f
 80044fc:	5299      	strh	r1, [r3, r2]
 80044fe:	e003      	b.n	8004508 <HAL_UART_Receive+0xfc>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2260      	movs	r2, #96	; 0x60
 8004504:	2100      	movs	r1, #0
 8004506:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004508:	2312      	movs	r3, #18
 800450a:	18fb      	adds	r3, r7, r3
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	2160      	movs	r1, #96	; 0x60
 8004510:	5a52      	ldrh	r2, [r2, r1]
 8004512:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	2380      	movs	r3, #128	; 0x80
 800451a:	015b      	lsls	r3, r3, #5
 800451c:	429a      	cmp	r2, r3
 800451e:	d108      	bne.n	8004532 <HAL_UART_Receive+0x126>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d104      	bne.n	8004532 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8004528:	2300      	movs	r3, #0
 800452a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	61bb      	str	r3, [r7, #24]
 8004530:	e003      	b.n	800453a <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004536:	2300      	movs	r3, #0
 8004538:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800453a:	e036      	b.n	80045aa <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	0013      	movs	r3, r2
 8004546:	2200      	movs	r2, #0
 8004548:	2120      	movs	r1, #32
 800454a:	f000 fe63 	bl	8005214 <UART_WaitOnFlagUntilTimeout>
 800454e:	1e03      	subs	r3, r0, #0
 8004550:	d001      	beq.n	8004556 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e036      	b.n	80045c4 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10e      	bne.n	800457a <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	b29b      	uxth	r3, r3
 8004564:	2212      	movs	r2, #18
 8004566:	18ba      	adds	r2, r7, r2
 8004568:	8812      	ldrh	r2, [r2, #0]
 800456a:	4013      	ands	r3, r2
 800456c:	b29a      	uxth	r2, r3
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	3302      	adds	r3, #2
 8004576:	61bb      	str	r3, [r7, #24]
 8004578:	e00e      	b.n	8004598 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2212      	movs	r2, #18
 8004584:	18ba      	adds	r2, r7, r2
 8004586:	8812      	ldrh	r2, [r2, #0]
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	4013      	ands	r3, r2
 800458c:	b2da      	uxtb	r2, r3
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	3301      	adds	r3, #1
 8004596:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	225e      	movs	r2, #94	; 0x5e
 800459c:	5a9b      	ldrh	r3, [r3, r2]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b299      	uxth	r1, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	225e      	movs	r2, #94	; 0x5e
 80045a8:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	225e      	movs	r2, #94	; 0x5e
 80045ae:	5a9b      	ldrh	r3, [r3, r2]
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1c2      	bne.n	800453c <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	228c      	movs	r2, #140	; 0x8c
 80045ba:	2120      	movs	r1, #32
 80045bc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	e000      	b.n	80045c4 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 80045c2:	2302      	movs	r3, #2
  }
}
 80045c4:	0018      	movs	r0, r3
 80045c6:	46bd      	mov	sp, r7
 80045c8:	b008      	add	sp, #32
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	000001ff 	.word	0x000001ff

080045d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045d0:	b5b0      	push	{r4, r5, r7, lr}
 80045d2:	b0aa      	sub	sp, #168	; 0xa8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	22a4      	movs	r2, #164	; 0xa4
 80045e0:	18b9      	adds	r1, r7, r2
 80045e2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	20a0      	movs	r0, #160	; 0xa0
 80045ec:	1839      	adds	r1, r7, r0
 80045ee:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	249c      	movs	r4, #156	; 0x9c
 80045f8:	1939      	adds	r1, r7, r4
 80045fa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80045fc:	0011      	movs	r1, r2
 80045fe:	18bb      	adds	r3, r7, r2
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4aa2      	ldr	r2, [pc, #648]	; (800488c <HAL_UART_IRQHandler+0x2bc>)
 8004604:	4013      	ands	r3, r2
 8004606:	2298      	movs	r2, #152	; 0x98
 8004608:	18bd      	adds	r5, r7, r2
 800460a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800460c:	18bb      	adds	r3, r7, r2
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d11a      	bne.n	800464a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004614:	187b      	adds	r3, r7, r1
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2220      	movs	r2, #32
 800461a:	4013      	ands	r3, r2
 800461c:	d015      	beq.n	800464a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800461e:	183b      	adds	r3, r7, r0
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2220      	movs	r2, #32
 8004624:	4013      	ands	r3, r2
 8004626:	d105      	bne.n	8004634 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004628:	193b      	adds	r3, r7, r4
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	055b      	lsls	r3, r3, #21
 8004630:	4013      	ands	r3, r2
 8004632:	d00a      	beq.n	800464a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004638:	2b00      	cmp	r3, #0
 800463a:	d100      	bne.n	800463e <HAL_UART_IRQHandler+0x6e>
 800463c:	e2dc      	b.n	8004bf8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	0010      	movs	r0, r2
 8004646:	4798      	blx	r3
      }
      return;
 8004648:	e2d6      	b.n	8004bf8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800464a:	2398      	movs	r3, #152	; 0x98
 800464c:	18fb      	adds	r3, r7, r3
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d100      	bne.n	8004656 <HAL_UART_IRQHandler+0x86>
 8004654:	e122      	b.n	800489c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004656:	239c      	movs	r3, #156	; 0x9c
 8004658:	18fb      	adds	r3, r7, r3
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a8c      	ldr	r2, [pc, #560]	; (8004890 <HAL_UART_IRQHandler+0x2c0>)
 800465e:	4013      	ands	r3, r2
 8004660:	d106      	bne.n	8004670 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004662:	23a0      	movs	r3, #160	; 0xa0
 8004664:	18fb      	adds	r3, r7, r3
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a8a      	ldr	r2, [pc, #552]	; (8004894 <HAL_UART_IRQHandler+0x2c4>)
 800466a:	4013      	ands	r3, r2
 800466c:	d100      	bne.n	8004670 <HAL_UART_IRQHandler+0xa0>
 800466e:	e115      	b.n	800489c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004670:	23a4      	movs	r3, #164	; 0xa4
 8004672:	18fb      	adds	r3, r7, r3
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2201      	movs	r2, #1
 8004678:	4013      	ands	r3, r2
 800467a:	d012      	beq.n	80046a2 <HAL_UART_IRQHandler+0xd2>
 800467c:	23a0      	movs	r3, #160	; 0xa0
 800467e:	18fb      	adds	r3, r7, r3
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	2380      	movs	r3, #128	; 0x80
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	4013      	ands	r3, r2
 8004688:	d00b      	beq.n	80046a2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2201      	movs	r2, #1
 8004690:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2290      	movs	r2, #144	; 0x90
 8004696:	589b      	ldr	r3, [r3, r2]
 8004698:	2201      	movs	r2, #1
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2190      	movs	r1, #144	; 0x90
 80046a0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046a2:	23a4      	movs	r3, #164	; 0xa4
 80046a4:	18fb      	adds	r3, r7, r3
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2202      	movs	r2, #2
 80046aa:	4013      	ands	r3, r2
 80046ac:	d011      	beq.n	80046d2 <HAL_UART_IRQHandler+0x102>
 80046ae:	239c      	movs	r3, #156	; 0x9c
 80046b0:	18fb      	adds	r3, r7, r3
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2201      	movs	r2, #1
 80046b6:	4013      	ands	r3, r2
 80046b8:	d00b      	beq.n	80046d2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2202      	movs	r2, #2
 80046c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2290      	movs	r2, #144	; 0x90
 80046c6:	589b      	ldr	r3, [r3, r2]
 80046c8:	2204      	movs	r2, #4
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2190      	movs	r1, #144	; 0x90
 80046d0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046d2:	23a4      	movs	r3, #164	; 0xa4
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2204      	movs	r2, #4
 80046da:	4013      	ands	r3, r2
 80046dc:	d011      	beq.n	8004702 <HAL_UART_IRQHandler+0x132>
 80046de:	239c      	movs	r3, #156	; 0x9c
 80046e0:	18fb      	adds	r3, r7, r3
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2201      	movs	r2, #1
 80046e6:	4013      	ands	r3, r2
 80046e8:	d00b      	beq.n	8004702 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2204      	movs	r2, #4
 80046f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2290      	movs	r2, #144	; 0x90
 80046f6:	589b      	ldr	r3, [r3, r2]
 80046f8:	2202      	movs	r2, #2
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2190      	movs	r1, #144	; 0x90
 8004700:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004702:	23a4      	movs	r3, #164	; 0xa4
 8004704:	18fb      	adds	r3, r7, r3
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2208      	movs	r2, #8
 800470a:	4013      	ands	r3, r2
 800470c:	d017      	beq.n	800473e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800470e:	23a0      	movs	r3, #160	; 0xa0
 8004710:	18fb      	adds	r3, r7, r3
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2220      	movs	r2, #32
 8004716:	4013      	ands	r3, r2
 8004718:	d105      	bne.n	8004726 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800471a:	239c      	movs	r3, #156	; 0x9c
 800471c:	18fb      	adds	r3, r7, r3
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a5b      	ldr	r2, [pc, #364]	; (8004890 <HAL_UART_IRQHandler+0x2c0>)
 8004722:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004724:	d00b      	beq.n	800473e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2208      	movs	r2, #8
 800472c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2290      	movs	r2, #144	; 0x90
 8004732:	589b      	ldr	r3, [r3, r2]
 8004734:	2208      	movs	r2, #8
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2190      	movs	r1, #144	; 0x90
 800473c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800473e:	23a4      	movs	r3, #164	; 0xa4
 8004740:	18fb      	adds	r3, r7, r3
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	2380      	movs	r3, #128	; 0x80
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	4013      	ands	r3, r2
 800474a:	d013      	beq.n	8004774 <HAL_UART_IRQHandler+0x1a4>
 800474c:	23a0      	movs	r3, #160	; 0xa0
 800474e:	18fb      	adds	r3, r7, r3
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	2380      	movs	r3, #128	; 0x80
 8004754:	04db      	lsls	r3, r3, #19
 8004756:	4013      	ands	r3, r2
 8004758:	d00c      	beq.n	8004774 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2280      	movs	r2, #128	; 0x80
 8004760:	0112      	lsls	r2, r2, #4
 8004762:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2290      	movs	r2, #144	; 0x90
 8004768:	589b      	ldr	r3, [r3, r2]
 800476a:	2220      	movs	r2, #32
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2190      	movs	r1, #144	; 0x90
 8004772:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2290      	movs	r2, #144	; 0x90
 8004778:	589b      	ldr	r3, [r3, r2]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d100      	bne.n	8004780 <HAL_UART_IRQHandler+0x1b0>
 800477e:	e23d      	b.n	8004bfc <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004780:	23a4      	movs	r3, #164	; 0xa4
 8004782:	18fb      	adds	r3, r7, r3
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2220      	movs	r2, #32
 8004788:	4013      	ands	r3, r2
 800478a:	d015      	beq.n	80047b8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800478c:	23a0      	movs	r3, #160	; 0xa0
 800478e:	18fb      	adds	r3, r7, r3
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2220      	movs	r2, #32
 8004794:	4013      	ands	r3, r2
 8004796:	d106      	bne.n	80047a6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004798:	239c      	movs	r3, #156	; 0x9c
 800479a:	18fb      	adds	r3, r7, r3
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	2380      	movs	r3, #128	; 0x80
 80047a0:	055b      	lsls	r3, r3, #21
 80047a2:	4013      	ands	r3, r2
 80047a4:	d008      	beq.n	80047b8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d004      	beq.n	80047b8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	0010      	movs	r0, r2
 80047b6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2290      	movs	r2, #144	; 0x90
 80047bc:	589b      	ldr	r3, [r3, r2]
 80047be:	2194      	movs	r1, #148	; 0x94
 80047c0:	187a      	adds	r2, r7, r1
 80047c2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	2240      	movs	r2, #64	; 0x40
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b40      	cmp	r3, #64	; 0x40
 80047d0:	d004      	beq.n	80047dc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047d2:	187b      	adds	r3, r7, r1
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2228      	movs	r2, #40	; 0x28
 80047d8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047da:	d04c      	beq.n	8004876 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	0018      	movs	r0, r3
 80047e0:	f000 ff04 	bl	80055ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2240      	movs	r2, #64	; 0x40
 80047ec:	4013      	ands	r3, r2
 80047ee:	2b40      	cmp	r3, #64	; 0x40
 80047f0:	d13c      	bne.n	800486c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047f2:	f3ef 8310 	mrs	r3, PRIMASK
 80047f6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80047f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047fa:	2090      	movs	r0, #144	; 0x90
 80047fc:	183a      	adds	r2, r7, r0
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	2301      	movs	r3, #1
 8004802:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004804:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004806:	f383 8810 	msr	PRIMASK, r3
}
 800480a:	46c0      	nop			; (mov r8, r8)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689a      	ldr	r2, [r3, #8]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2140      	movs	r1, #64	; 0x40
 8004818:	438a      	bics	r2, r1
 800481a:	609a      	str	r2, [r3, #8]
 800481c:	183b      	adds	r3, r7, r0
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004822:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004824:	f383 8810 	msr	PRIMASK, r3
}
 8004828:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2280      	movs	r2, #128	; 0x80
 800482e:	589b      	ldr	r3, [r3, r2]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d016      	beq.n	8004862 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2280      	movs	r2, #128	; 0x80
 8004838:	589b      	ldr	r3, [r3, r2]
 800483a:	4a17      	ldr	r2, [pc, #92]	; (8004898 <HAL_UART_IRQHandler+0x2c8>)
 800483c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2280      	movs	r2, #128	; 0x80
 8004842:	589b      	ldr	r3, [r3, r2]
 8004844:	0018      	movs	r0, r3
 8004846:	f7fd fdef 	bl	8002428 <HAL_DMA_Abort_IT>
 800484a:	1e03      	subs	r3, r0, #0
 800484c:	d01c      	beq.n	8004888 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2280      	movs	r2, #128	; 0x80
 8004852:	589b      	ldr	r3, [r3, r2]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	2180      	movs	r1, #128	; 0x80
 800485a:	5852      	ldr	r2, [r2, r1]
 800485c:	0010      	movs	r0, r2
 800485e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004860:	e012      	b.n	8004888 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	0018      	movs	r0, r3
 8004866:	f000 f9e9 	bl	8004c3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800486a:	e00d      	b.n	8004888 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	0018      	movs	r0, r3
 8004870:	f000 f9e4 	bl	8004c3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004874:	e008      	b.n	8004888 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	0018      	movs	r0, r3
 800487a:	f000 f9df 	bl	8004c3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2290      	movs	r2, #144	; 0x90
 8004882:	2100      	movs	r1, #0
 8004884:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004886:	e1b9      	b.n	8004bfc <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004888:	46c0      	nop			; (mov r8, r8)
    return;
 800488a:	e1b7      	b.n	8004bfc <HAL_UART_IRQHandler+0x62c>
 800488c:	0000080f 	.word	0x0000080f
 8004890:	10000001 	.word	0x10000001
 8004894:	04000120 	.word	0x04000120
 8004898:	080056b9 	.word	0x080056b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d000      	beq.n	80048a6 <HAL_UART_IRQHandler+0x2d6>
 80048a4:	e13e      	b.n	8004b24 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80048a6:	23a4      	movs	r3, #164	; 0xa4
 80048a8:	18fb      	adds	r3, r7, r3
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2210      	movs	r2, #16
 80048ae:	4013      	ands	r3, r2
 80048b0:	d100      	bne.n	80048b4 <HAL_UART_IRQHandler+0x2e4>
 80048b2:	e137      	b.n	8004b24 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80048b4:	23a0      	movs	r3, #160	; 0xa0
 80048b6:	18fb      	adds	r3, r7, r3
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2210      	movs	r2, #16
 80048bc:	4013      	ands	r3, r2
 80048be:	d100      	bne.n	80048c2 <HAL_UART_IRQHandler+0x2f2>
 80048c0:	e130      	b.n	8004b24 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2210      	movs	r2, #16
 80048c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	2240      	movs	r2, #64	; 0x40
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b40      	cmp	r3, #64	; 0x40
 80048d6:	d000      	beq.n	80048da <HAL_UART_IRQHandler+0x30a>
 80048d8:	e0a4      	b.n	8004a24 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2280      	movs	r2, #128	; 0x80
 80048de:	589b      	ldr	r3, [r3, r2]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	217e      	movs	r1, #126	; 0x7e
 80048e6:	187b      	adds	r3, r7, r1
 80048e8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80048ea:	187b      	adds	r3, r7, r1
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d100      	bne.n	80048f4 <HAL_UART_IRQHandler+0x324>
 80048f2:	e185      	b.n	8004c00 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	225c      	movs	r2, #92	; 0x5c
 80048f8:	5a9b      	ldrh	r3, [r3, r2]
 80048fa:	187a      	adds	r2, r7, r1
 80048fc:	8812      	ldrh	r2, [r2, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d300      	bcc.n	8004904 <HAL_UART_IRQHandler+0x334>
 8004902:	e17d      	b.n	8004c00 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	187a      	adds	r2, r7, r1
 8004908:	215e      	movs	r1, #94	; 0x5e
 800490a:	8812      	ldrh	r2, [r2, #0]
 800490c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2280      	movs	r2, #128	; 0x80
 8004912:	589b      	ldr	r3, [r3, r2]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2220      	movs	r2, #32
 800491a:	4013      	ands	r3, r2
 800491c:	d170      	bne.n	8004a00 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800491e:	f3ef 8310 	mrs	r3, PRIMASK
 8004922:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004926:	67bb      	str	r3, [r7, #120]	; 0x78
 8004928:	2301      	movs	r3, #1
 800492a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800492c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800492e:	f383 8810 	msr	PRIMASK, r3
}
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	49b4      	ldr	r1, [pc, #720]	; (8004c10 <HAL_UART_IRQHandler+0x640>)
 8004940:	400a      	ands	r2, r1
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004946:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494a:	f383 8810 	msr	PRIMASK, r3
}
 800494e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004950:	f3ef 8310 	mrs	r3, PRIMASK
 8004954:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004958:	677b      	str	r3, [r7, #116]	; 0x74
 800495a:	2301      	movs	r3, #1
 800495c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800495e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004960:	f383 8810 	msr	PRIMASK, r3
}
 8004964:	46c0      	nop			; (mov r8, r8)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2101      	movs	r1, #1
 8004972:	438a      	bics	r2, r1
 8004974:	609a      	str	r2, [r3, #8]
 8004976:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004978:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800497a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800497c:	f383 8810 	msr	PRIMASK, r3
}
 8004980:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004982:	f3ef 8310 	mrs	r3, PRIMASK
 8004986:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004988:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800498a:	673b      	str	r3, [r7, #112]	; 0x70
 800498c:	2301      	movs	r3, #1
 800498e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004992:	f383 8810 	msr	PRIMASK, r3
}
 8004996:	46c0      	nop			; (mov r8, r8)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2140      	movs	r1, #64	; 0x40
 80049a4:	438a      	bics	r2, r1
 80049a6:	609a      	str	r2, [r3, #8]
 80049a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049aa:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ae:	f383 8810 	msr	PRIMASK, r3
}
 80049b2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	228c      	movs	r2, #140	; 0x8c
 80049b8:	2120      	movs	r1, #32
 80049ba:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049c2:	f3ef 8310 	mrs	r3, PRIMASK
 80049c6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80049c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049cc:	2301      	movs	r3, #1
 80049ce:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049d2:	f383 8810 	msr	PRIMASK, r3
}
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2110      	movs	r1, #16
 80049e4:	438a      	bics	r2, r1
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ee:	f383 8810 	msr	PRIMASK, r3
}
 80049f2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2280      	movs	r2, #128	; 0x80
 80049f8:	589b      	ldr	r3, [r3, r2]
 80049fa:	0018      	movs	r0, r3
 80049fc:	f7fd fcb4 	bl	8002368 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	225c      	movs	r2, #92	; 0x5c
 8004a0a:	5a9a      	ldrh	r2, [r3, r2]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	215e      	movs	r1, #94	; 0x5e
 8004a10:	5a5b      	ldrh	r3, [r3, r1]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	0011      	movs	r1, r2
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f7fb fde3 	bl	80005e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a22:	e0ed      	b.n	8004c00 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	225c      	movs	r2, #92	; 0x5c
 8004a28:	5a99      	ldrh	r1, [r3, r2]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	225e      	movs	r2, #94	; 0x5e
 8004a2e:	5a9b      	ldrh	r3, [r3, r2]
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	208e      	movs	r0, #142	; 0x8e
 8004a34:	183b      	adds	r3, r7, r0
 8004a36:	1a8a      	subs	r2, r1, r2
 8004a38:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	225e      	movs	r2, #94	; 0x5e
 8004a3e:	5a9b      	ldrh	r3, [r3, r2]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d100      	bne.n	8004a48 <HAL_UART_IRQHandler+0x478>
 8004a46:	e0dd      	b.n	8004c04 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004a48:	183b      	adds	r3, r7, r0
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d100      	bne.n	8004a52 <HAL_UART_IRQHandler+0x482>
 8004a50:	e0d8      	b.n	8004c04 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a52:	f3ef 8310 	mrs	r3, PRIMASK
 8004a56:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a58:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a5a:	2488      	movs	r4, #136	; 0x88
 8004a5c:	193a      	adds	r2, r7, r4
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	2301      	movs	r3, #1
 8004a62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	f383 8810 	msr	PRIMASK, r3
}
 8004a6a:	46c0      	nop			; (mov r8, r8)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4967      	ldr	r1, [pc, #412]	; (8004c14 <HAL_UART_IRQHandler+0x644>)
 8004a78:	400a      	ands	r2, r1
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	193b      	adds	r3, r7, r4
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f383 8810 	msr	PRIMASK, r3
}
 8004a88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a8e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a90:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a92:	2484      	movs	r4, #132	; 0x84
 8004a94:	193a      	adds	r2, r7, r4
 8004a96:	6013      	str	r3, [r2, #0]
 8004a98:	2301      	movs	r3, #1
 8004a9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	f383 8810 	msr	PRIMASK, r3
}
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	495a      	ldr	r1, [pc, #360]	; (8004c18 <HAL_UART_IRQHandler+0x648>)
 8004ab0:	400a      	ands	r2, r1
 8004ab2:	609a      	str	r2, [r3, #8]
 8004ab4:	193b      	adds	r3, r7, r4
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	f383 8810 	msr	PRIMASK, r3
}
 8004ac0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	228c      	movs	r2, #140	; 0x8c
 8004ac6:	2120      	movs	r1, #32
 8004ac8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8004ada:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ade:	2480      	movs	r4, #128	; 0x80
 8004ae0:	193a      	adds	r2, r7, r4
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	f383 8810 	msr	PRIMASK, r3
}
 8004aee:	46c0      	nop			; (mov r8, r8)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2110      	movs	r1, #16
 8004afc:	438a      	bics	r2, r1
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	193b      	adds	r3, r7, r4
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b08:	f383 8810 	msr	PRIMASK, r3
}
 8004b0c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2202      	movs	r2, #2
 8004b12:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b14:	183b      	adds	r3, r7, r0
 8004b16:	881a      	ldrh	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	0011      	movs	r1, r2
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f7fb fd63 	bl	80005e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b22:	e06f      	b.n	8004c04 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b24:	23a4      	movs	r3, #164	; 0xa4
 8004b26:	18fb      	adds	r3, r7, r3
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	2380      	movs	r3, #128	; 0x80
 8004b2c:	035b      	lsls	r3, r3, #13
 8004b2e:	4013      	ands	r3, r2
 8004b30:	d010      	beq.n	8004b54 <HAL_UART_IRQHandler+0x584>
 8004b32:	239c      	movs	r3, #156	; 0x9c
 8004b34:	18fb      	adds	r3, r7, r3
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	2380      	movs	r3, #128	; 0x80
 8004b3a:	03db      	lsls	r3, r3, #15
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	d009      	beq.n	8004b54 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2280      	movs	r2, #128	; 0x80
 8004b46:	0352      	lsls	r2, r2, #13
 8004b48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f001 fa57 	bl	8006000 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b52:	e05a      	b.n	8004c0a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004b54:	23a4      	movs	r3, #164	; 0xa4
 8004b56:	18fb      	adds	r3, r7, r3
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2280      	movs	r2, #128	; 0x80
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	d016      	beq.n	8004b8e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004b60:	23a0      	movs	r3, #160	; 0xa0
 8004b62:	18fb      	adds	r3, r7, r3
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2280      	movs	r2, #128	; 0x80
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d106      	bne.n	8004b7a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004b6c:	239c      	movs	r3, #156	; 0x9c
 8004b6e:	18fb      	adds	r3, r7, r3
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	2380      	movs	r3, #128	; 0x80
 8004b74:	041b      	lsls	r3, r3, #16
 8004b76:	4013      	ands	r3, r2
 8004b78:	d009      	beq.n	8004b8e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d042      	beq.n	8004c08 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	0010      	movs	r0, r2
 8004b8a:	4798      	blx	r3
    }
    return;
 8004b8c:	e03c      	b.n	8004c08 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b8e:	23a4      	movs	r3, #164	; 0xa4
 8004b90:	18fb      	adds	r3, r7, r3
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2240      	movs	r2, #64	; 0x40
 8004b96:	4013      	ands	r3, r2
 8004b98:	d00a      	beq.n	8004bb0 <HAL_UART_IRQHandler+0x5e0>
 8004b9a:	23a0      	movs	r3, #160	; 0xa0
 8004b9c:	18fb      	adds	r3, r7, r3
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2240      	movs	r2, #64	; 0x40
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	d004      	beq.n	8004bb0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f000 fd9c 	bl	80056e6 <UART_EndTransmit_IT>
    return;
 8004bae:	e02c      	b.n	8004c0a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004bb0:	23a4      	movs	r3, #164	; 0xa4
 8004bb2:	18fb      	adds	r3, r7, r3
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	2380      	movs	r3, #128	; 0x80
 8004bb8:	041b      	lsls	r3, r3, #16
 8004bba:	4013      	ands	r3, r2
 8004bbc:	d00b      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x606>
 8004bbe:	23a0      	movs	r3, #160	; 0xa0
 8004bc0:	18fb      	adds	r3, r7, r3
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	2380      	movs	r3, #128	; 0x80
 8004bc6:	05db      	lsls	r3, r3, #23
 8004bc8:	4013      	ands	r3, r2
 8004bca:	d004      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	0018      	movs	r0, r3
 8004bd0:	f001 fa26 	bl	8006020 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bd4:	e019      	b.n	8004c0a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004bd6:	23a4      	movs	r3, #164	; 0xa4
 8004bd8:	18fb      	adds	r3, r7, r3
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	2380      	movs	r3, #128	; 0x80
 8004bde:	045b      	lsls	r3, r3, #17
 8004be0:	4013      	ands	r3, r2
 8004be2:	d012      	beq.n	8004c0a <HAL_UART_IRQHandler+0x63a>
 8004be4:	23a0      	movs	r3, #160	; 0xa0
 8004be6:	18fb      	adds	r3, r7, r3
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	da0d      	bge.n	8004c0a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f001 fa0d 	bl	8006010 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bf6:	e008      	b.n	8004c0a <HAL_UART_IRQHandler+0x63a>
      return;
 8004bf8:	46c0      	nop			; (mov r8, r8)
 8004bfa:	e006      	b.n	8004c0a <HAL_UART_IRQHandler+0x63a>
    return;
 8004bfc:	46c0      	nop			; (mov r8, r8)
 8004bfe:	e004      	b.n	8004c0a <HAL_UART_IRQHandler+0x63a>
      return;
 8004c00:	46c0      	nop			; (mov r8, r8)
 8004c02:	e002      	b.n	8004c0a <HAL_UART_IRQHandler+0x63a>
      return;
 8004c04:	46c0      	nop			; (mov r8, r8)
 8004c06:	e000      	b.n	8004c0a <HAL_UART_IRQHandler+0x63a>
    return;
 8004c08:	46c0      	nop			; (mov r8, r8)
  }
}
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	b02a      	add	sp, #168	; 0xa8
 8004c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8004c10:	fffffeff 	.word	0xfffffeff
 8004c14:	fffffedf 	.word	0xfffffedf
 8004c18:	effffffe 	.word	0xeffffffe

08004c1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c24:	46c0      	nop			; (mov r8, r8)
 8004c26:	46bd      	mov	sp, r7
 8004c28:	b002      	add	sp, #8
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004c34:	46c0      	nop			; (mov r8, r8)
 8004c36:	46bd      	mov	sp, r7
 8004c38:	b002      	add	sp, #8
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c44:	46c0      	nop			; (mov r8, r8)
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b002      	add	sp, #8
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c54:	231b      	movs	r3, #27
 8004c56:	18fb      	adds	r3, r7, r3
 8004c58:	2200      	movs	r2, #0
 8004c5a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4ab4      	ldr	r2, [pc, #720]	; (8004f4c <UART_SetConfig+0x300>)
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	0019      	movs	r1, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	69fa      	ldr	r2, [r7, #28]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	4aaf      	ldr	r2, [pc, #700]	; (8004f50 <UART_SetConfig+0x304>)
 8004c92:	4013      	ands	r3, r2
 8004c94:	0019      	movs	r1, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	69fa      	ldr	r2, [r7, #28]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	4aa6      	ldr	r2, [pc, #664]	; (8004f54 <UART_SetConfig+0x308>)
 8004cba:	4013      	ands	r3, r2
 8004cbc:	0019      	movs	r1, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69fa      	ldr	r2, [r7, #28]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cce:	220f      	movs	r2, #15
 8004cd0:	4393      	bics	r3, r2
 8004cd2:	0019      	movs	r1, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a9c      	ldr	r2, [pc, #624]	; (8004f58 <UART_SetConfig+0x30c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d127      	bne.n	8004d3a <UART_SetConfig+0xee>
 8004cea:	4b9c      	ldr	r3, [pc, #624]	; (8004f5c <UART_SetConfig+0x310>)
 8004cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cee:	2203      	movs	r2, #3
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	2b03      	cmp	r3, #3
 8004cf4:	d017      	beq.n	8004d26 <UART_SetConfig+0xda>
 8004cf6:	d81b      	bhi.n	8004d30 <UART_SetConfig+0xe4>
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d00a      	beq.n	8004d12 <UART_SetConfig+0xc6>
 8004cfc:	d818      	bhi.n	8004d30 <UART_SetConfig+0xe4>
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <UART_SetConfig+0xbc>
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d00a      	beq.n	8004d1c <UART_SetConfig+0xd0>
 8004d06:	e013      	b.n	8004d30 <UART_SetConfig+0xe4>
 8004d08:	231a      	movs	r3, #26
 8004d0a:	18fb      	adds	r3, r7, r3
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	701a      	strb	r2, [r3, #0]
 8004d10:	e08f      	b.n	8004e32 <UART_SetConfig+0x1e6>
 8004d12:	231a      	movs	r3, #26
 8004d14:	18fb      	adds	r3, r7, r3
 8004d16:	2202      	movs	r2, #2
 8004d18:	701a      	strb	r2, [r3, #0]
 8004d1a:	e08a      	b.n	8004e32 <UART_SetConfig+0x1e6>
 8004d1c:	231a      	movs	r3, #26
 8004d1e:	18fb      	adds	r3, r7, r3
 8004d20:	2204      	movs	r2, #4
 8004d22:	701a      	strb	r2, [r3, #0]
 8004d24:	e085      	b.n	8004e32 <UART_SetConfig+0x1e6>
 8004d26:	231a      	movs	r3, #26
 8004d28:	18fb      	adds	r3, r7, r3
 8004d2a:	2208      	movs	r2, #8
 8004d2c:	701a      	strb	r2, [r3, #0]
 8004d2e:	e080      	b.n	8004e32 <UART_SetConfig+0x1e6>
 8004d30:	231a      	movs	r3, #26
 8004d32:	18fb      	adds	r3, r7, r3
 8004d34:	2210      	movs	r2, #16
 8004d36:	701a      	strb	r2, [r3, #0]
 8004d38:	e07b      	b.n	8004e32 <UART_SetConfig+0x1e6>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a88      	ldr	r2, [pc, #544]	; (8004f60 <UART_SetConfig+0x314>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d127      	bne.n	8004d94 <UART_SetConfig+0x148>
 8004d44:	4b85      	ldr	r3, [pc, #532]	; (8004f5c <UART_SetConfig+0x310>)
 8004d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d48:	220c      	movs	r2, #12
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	2b0c      	cmp	r3, #12
 8004d4e:	d017      	beq.n	8004d80 <UART_SetConfig+0x134>
 8004d50:	d81b      	bhi.n	8004d8a <UART_SetConfig+0x13e>
 8004d52:	2b08      	cmp	r3, #8
 8004d54:	d00a      	beq.n	8004d6c <UART_SetConfig+0x120>
 8004d56:	d818      	bhi.n	8004d8a <UART_SetConfig+0x13e>
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <UART_SetConfig+0x116>
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d00a      	beq.n	8004d76 <UART_SetConfig+0x12a>
 8004d60:	e013      	b.n	8004d8a <UART_SetConfig+0x13e>
 8004d62:	231a      	movs	r3, #26
 8004d64:	18fb      	adds	r3, r7, r3
 8004d66:	2200      	movs	r2, #0
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	e062      	b.n	8004e32 <UART_SetConfig+0x1e6>
 8004d6c:	231a      	movs	r3, #26
 8004d6e:	18fb      	adds	r3, r7, r3
 8004d70:	2202      	movs	r2, #2
 8004d72:	701a      	strb	r2, [r3, #0]
 8004d74:	e05d      	b.n	8004e32 <UART_SetConfig+0x1e6>
 8004d76:	231a      	movs	r3, #26
 8004d78:	18fb      	adds	r3, r7, r3
 8004d7a:	2204      	movs	r2, #4
 8004d7c:	701a      	strb	r2, [r3, #0]
 8004d7e:	e058      	b.n	8004e32 <UART_SetConfig+0x1e6>
 8004d80:	231a      	movs	r3, #26
 8004d82:	18fb      	adds	r3, r7, r3
 8004d84:	2208      	movs	r2, #8
 8004d86:	701a      	strb	r2, [r3, #0]
 8004d88:	e053      	b.n	8004e32 <UART_SetConfig+0x1e6>
 8004d8a:	231a      	movs	r3, #26
 8004d8c:	18fb      	adds	r3, r7, r3
 8004d8e:	2210      	movs	r2, #16
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	e04e      	b.n	8004e32 <UART_SetConfig+0x1e6>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a72      	ldr	r2, [pc, #456]	; (8004f64 <UART_SetConfig+0x318>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d127      	bne.n	8004dee <UART_SetConfig+0x1a2>
 8004d9e:	4b6f      	ldr	r3, [pc, #444]	; (8004f5c <UART_SetConfig+0x310>)
 8004da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da2:	2230      	movs	r2, #48	; 0x30
 8004da4:	4013      	ands	r3, r2
 8004da6:	2b30      	cmp	r3, #48	; 0x30
 8004da8:	d017      	beq.n	8004dda <UART_SetConfig+0x18e>
 8004daa:	d81b      	bhi.n	8004de4 <UART_SetConfig+0x198>
 8004dac:	2b20      	cmp	r3, #32
 8004dae:	d00a      	beq.n	8004dc6 <UART_SetConfig+0x17a>
 8004db0:	d818      	bhi.n	8004de4 <UART_SetConfig+0x198>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <UART_SetConfig+0x170>
 8004db6:	2b10      	cmp	r3, #16
 8004db8:	d00a      	beq.n	8004dd0 <UART_SetConfig+0x184>
 8004dba:	e013      	b.n	8004de4 <UART_SetConfig+0x198>
 8004dbc:	231a      	movs	r3, #26
 8004dbe:	18fb      	adds	r3, r7, r3
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	701a      	strb	r2, [r3, #0]
 8004dc4:	e035      	b.n	8004e32 <UART_SetConfig+0x1e6>
 8004dc6:	231a      	movs	r3, #26
 8004dc8:	18fb      	adds	r3, r7, r3
 8004dca:	2202      	movs	r2, #2
 8004dcc:	701a      	strb	r2, [r3, #0]
 8004dce:	e030      	b.n	8004e32 <UART_SetConfig+0x1e6>
 8004dd0:	231a      	movs	r3, #26
 8004dd2:	18fb      	adds	r3, r7, r3
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	701a      	strb	r2, [r3, #0]
 8004dd8:	e02b      	b.n	8004e32 <UART_SetConfig+0x1e6>
 8004dda:	231a      	movs	r3, #26
 8004ddc:	18fb      	adds	r3, r7, r3
 8004dde:	2208      	movs	r2, #8
 8004de0:	701a      	strb	r2, [r3, #0]
 8004de2:	e026      	b.n	8004e32 <UART_SetConfig+0x1e6>
 8004de4:	231a      	movs	r3, #26
 8004de6:	18fb      	adds	r3, r7, r3
 8004de8:	2210      	movs	r2, #16
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	e021      	b.n	8004e32 <UART_SetConfig+0x1e6>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a5d      	ldr	r2, [pc, #372]	; (8004f68 <UART_SetConfig+0x31c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d104      	bne.n	8004e02 <UART_SetConfig+0x1b6>
 8004df8:	231a      	movs	r3, #26
 8004dfa:	18fb      	adds	r3, r7, r3
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	701a      	strb	r2, [r3, #0]
 8004e00:	e017      	b.n	8004e32 <UART_SetConfig+0x1e6>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a59      	ldr	r2, [pc, #356]	; (8004f6c <UART_SetConfig+0x320>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d104      	bne.n	8004e16 <UART_SetConfig+0x1ca>
 8004e0c:	231a      	movs	r3, #26
 8004e0e:	18fb      	adds	r3, r7, r3
 8004e10:	2200      	movs	r2, #0
 8004e12:	701a      	strb	r2, [r3, #0]
 8004e14:	e00d      	b.n	8004e32 <UART_SetConfig+0x1e6>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a55      	ldr	r2, [pc, #340]	; (8004f70 <UART_SetConfig+0x324>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d104      	bne.n	8004e2a <UART_SetConfig+0x1de>
 8004e20:	231a      	movs	r3, #26
 8004e22:	18fb      	adds	r3, r7, r3
 8004e24:	2200      	movs	r2, #0
 8004e26:	701a      	strb	r2, [r3, #0]
 8004e28:	e003      	b.n	8004e32 <UART_SetConfig+0x1e6>
 8004e2a:	231a      	movs	r3, #26
 8004e2c:	18fb      	adds	r3, r7, r3
 8004e2e:	2210      	movs	r2, #16
 8004e30:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69da      	ldr	r2, [r3, #28]
 8004e36:	2380      	movs	r3, #128	; 0x80
 8004e38:	021b      	lsls	r3, r3, #8
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d000      	beq.n	8004e40 <UART_SetConfig+0x1f4>
 8004e3e:	e065      	b.n	8004f0c <UART_SetConfig+0x2c0>
  {
    switch (clocksource)
 8004e40:	231a      	movs	r3, #26
 8004e42:	18fb      	adds	r3, r7, r3
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b08      	cmp	r3, #8
 8004e48:	d015      	beq.n	8004e76 <UART_SetConfig+0x22a>
 8004e4a:	dc18      	bgt.n	8004e7e <UART_SetConfig+0x232>
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d00d      	beq.n	8004e6c <UART_SetConfig+0x220>
 8004e50:	dc15      	bgt.n	8004e7e <UART_SetConfig+0x232>
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d002      	beq.n	8004e5c <UART_SetConfig+0x210>
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d005      	beq.n	8004e66 <UART_SetConfig+0x21a>
 8004e5a:	e010      	b.n	8004e7e <UART_SetConfig+0x232>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e5c:	f7fe fb98 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 8004e60:	0003      	movs	r3, r0
 8004e62:	617b      	str	r3, [r7, #20]
        break;
 8004e64:	e012      	b.n	8004e8c <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e66:	4b43      	ldr	r3, [pc, #268]	; (8004f74 <UART_SetConfig+0x328>)
 8004e68:	617b      	str	r3, [r7, #20]
        break;
 8004e6a:	e00f      	b.n	8004e8c <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e6c:	f7fe fb04 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8004e70:	0003      	movs	r3, r0
 8004e72:	617b      	str	r3, [r7, #20]
        break;
 8004e74:	e00a      	b.n	8004e8c <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e76:	2380      	movs	r3, #128	; 0x80
 8004e78:	021b      	lsls	r3, r3, #8
 8004e7a:	617b      	str	r3, [r7, #20]
        break;
 8004e7c:	e006      	b.n	8004e8c <UART_SetConfig+0x240>
      default:
        pclk = 0U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e82:	231b      	movs	r3, #27
 8004e84:	18fb      	adds	r3, r7, r3
 8004e86:	2201      	movs	r2, #1
 8004e88:	701a      	strb	r2, [r3, #0]
        break;
 8004e8a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d100      	bne.n	8004e94 <UART_SetConfig+0x248>
 8004e92:	e0a6      	b.n	8004fe2 <UART_SetConfig+0x396>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e98:	4b37      	ldr	r3, [pc, #220]	; (8004f78 <UART_SetConfig+0x32c>)
 8004e9a:	0052      	lsls	r2, r2, #1
 8004e9c:	5ad3      	ldrh	r3, [r2, r3]
 8004e9e:	0019      	movs	r1, r3
 8004ea0:	6978      	ldr	r0, [r7, #20]
 8004ea2:	f7fb f93f 	bl	8000124 <__udivsi3>
 8004ea6:	0003      	movs	r3, r0
 8004ea8:	005a      	lsls	r2, r3, #1
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	085b      	lsrs	r3, r3, #1
 8004eb0:	18d2      	adds	r2, r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	0019      	movs	r1, r3
 8004eb8:	0010      	movs	r0, r2
 8004eba:	f7fb f933 	bl	8000124 <__udivsi3>
 8004ebe:	0003      	movs	r3, r0
 8004ec0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	2b0f      	cmp	r3, #15
 8004ec6:	d91c      	bls.n	8004f02 <UART_SetConfig+0x2b6>
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	2380      	movs	r3, #128	; 0x80
 8004ecc:	025b      	lsls	r3, r3, #9
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d217      	bcs.n	8004f02 <UART_SetConfig+0x2b6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	200e      	movs	r0, #14
 8004ed8:	183b      	adds	r3, r7, r0
 8004eda:	210f      	movs	r1, #15
 8004edc:	438a      	bics	r2, r1
 8004ede:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	085b      	lsrs	r3, r3, #1
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2207      	movs	r2, #7
 8004ee8:	4013      	ands	r3, r2
 8004eea:	b299      	uxth	r1, r3
 8004eec:	183b      	adds	r3, r7, r0
 8004eee:	183a      	adds	r2, r7, r0
 8004ef0:	8812      	ldrh	r2, [r2, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	183a      	adds	r2, r7, r0
 8004efc:	8812      	ldrh	r2, [r2, #0]
 8004efe:	60da      	str	r2, [r3, #12]
 8004f00:	e06f      	b.n	8004fe2 <UART_SetConfig+0x396>
      }
      else
      {
        ret = HAL_ERROR;
 8004f02:	231b      	movs	r3, #27
 8004f04:	18fb      	adds	r3, r7, r3
 8004f06:	2201      	movs	r2, #1
 8004f08:	701a      	strb	r2, [r3, #0]
 8004f0a:	e06a      	b.n	8004fe2 <UART_SetConfig+0x396>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f0c:	231a      	movs	r3, #26
 8004f0e:	18fb      	adds	r3, r7, r3
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	2b08      	cmp	r3, #8
 8004f14:	d015      	beq.n	8004f42 <UART_SetConfig+0x2f6>
 8004f16:	dc31      	bgt.n	8004f7c <UART_SetConfig+0x330>
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d00d      	beq.n	8004f38 <UART_SetConfig+0x2ec>
 8004f1c:	dc2e      	bgt.n	8004f7c <UART_SetConfig+0x330>
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d002      	beq.n	8004f28 <UART_SetConfig+0x2dc>
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d005      	beq.n	8004f32 <UART_SetConfig+0x2e6>
 8004f26:	e029      	b.n	8004f7c <UART_SetConfig+0x330>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f28:	f7fe fb32 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 8004f2c:	0003      	movs	r3, r0
 8004f2e:	617b      	str	r3, [r7, #20]
        break;
 8004f30:	e02b      	b.n	8004f8a <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f32:	4b10      	ldr	r3, [pc, #64]	; (8004f74 <UART_SetConfig+0x328>)
 8004f34:	617b      	str	r3, [r7, #20]
        break;
 8004f36:	e028      	b.n	8004f8a <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f38:	f7fe fa9e 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	617b      	str	r3, [r7, #20]
        break;
 8004f40:	e023      	b.n	8004f8a <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f42:	2380      	movs	r3, #128	; 0x80
 8004f44:	021b      	lsls	r3, r3, #8
 8004f46:	617b      	str	r3, [r7, #20]
        break;
 8004f48:	e01f      	b.n	8004f8a <UART_SetConfig+0x33e>
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	cfff69f3 	.word	0xcfff69f3
 8004f50:	ffffcfff 	.word	0xffffcfff
 8004f54:	11fff4ff 	.word	0x11fff4ff
 8004f58:	40013800 	.word	0x40013800
 8004f5c:	40021000 	.word	0x40021000
 8004f60:	40004400 	.word	0x40004400
 8004f64:	40004800 	.word	0x40004800
 8004f68:	40004c00 	.word	0x40004c00
 8004f6c:	40005000 	.word	0x40005000
 8004f70:	40013c00 	.word	0x40013c00
 8004f74:	00f42400 	.word	0x00f42400
 8004f78:	080080c4 	.word	0x080080c4
      default:
        pclk = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f80:	231b      	movs	r3, #27
 8004f82:	18fb      	adds	r3, r7, r3
 8004f84:	2201      	movs	r2, #1
 8004f86:	701a      	strb	r2, [r3, #0]
        break;
 8004f88:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d028      	beq.n	8004fe2 <UART_SetConfig+0x396>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f94:	4b1d      	ldr	r3, [pc, #116]	; (800500c <UART_SetConfig+0x3c0>)
 8004f96:	0052      	lsls	r2, r2, #1
 8004f98:	5ad3      	ldrh	r3, [r2, r3]
 8004f9a:	0019      	movs	r1, r3
 8004f9c:	6978      	ldr	r0, [r7, #20]
 8004f9e:	f7fb f8c1 	bl	8000124 <__udivsi3>
 8004fa2:	0003      	movs	r3, r0
 8004fa4:	001a      	movs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	085b      	lsrs	r3, r3, #1
 8004fac:	18d2      	adds	r2, r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	0019      	movs	r1, r3
 8004fb4:	0010      	movs	r0, r2
 8004fb6:	f7fb f8b5 	bl	8000124 <__udivsi3>
 8004fba:	0003      	movs	r3, r0
 8004fbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	2b0f      	cmp	r3, #15
 8004fc2:	d90a      	bls.n	8004fda <UART_SetConfig+0x38e>
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	2380      	movs	r3, #128	; 0x80
 8004fc8:	025b      	lsls	r3, r3, #9
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d205      	bcs.n	8004fda <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	60da      	str	r2, [r3, #12]
 8004fd8:	e003      	b.n	8004fe2 <UART_SetConfig+0x396>
      }
      else
      {
        ret = HAL_ERROR;
 8004fda:	231b      	movs	r3, #27
 8004fdc:	18fb      	adds	r3, r7, r3
 8004fde:	2201      	movs	r2, #1
 8004fe0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	226a      	movs	r2, #106	; 0x6a
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2268      	movs	r2, #104	; 0x68
 8004fee:	2101      	movs	r1, #1
 8004ff0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004ffe:	231b      	movs	r3, #27
 8005000:	18fb      	adds	r3, r7, r3
 8005002:	781b      	ldrb	r3, [r3, #0]
}
 8005004:	0018      	movs	r0, r3
 8005006:	46bd      	mov	sp, r7
 8005008:	b008      	add	sp, #32
 800500a:	bd80      	pop	{r7, pc}
 800500c:	080080c4 	.word	0x080080c4

08005010 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501c:	2201      	movs	r2, #1
 800501e:	4013      	ands	r3, r2
 8005020:	d00b      	beq.n	800503a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	4a4a      	ldr	r2, [pc, #296]	; (8005154 <UART_AdvFeatureConfig+0x144>)
 800502a:	4013      	ands	r3, r2
 800502c:	0019      	movs	r1, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	2202      	movs	r2, #2
 8005040:	4013      	ands	r3, r2
 8005042:	d00b      	beq.n	800505c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	4a43      	ldr	r2, [pc, #268]	; (8005158 <UART_AdvFeatureConfig+0x148>)
 800504c:	4013      	ands	r3, r2
 800504e:	0019      	movs	r1, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005060:	2204      	movs	r2, #4
 8005062:	4013      	ands	r3, r2
 8005064:	d00b      	beq.n	800507e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	4a3b      	ldr	r2, [pc, #236]	; (800515c <UART_AdvFeatureConfig+0x14c>)
 800506e:	4013      	ands	r3, r2
 8005070:	0019      	movs	r1, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005082:	2208      	movs	r2, #8
 8005084:	4013      	ands	r3, r2
 8005086:	d00b      	beq.n	80050a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	4a34      	ldr	r2, [pc, #208]	; (8005160 <UART_AdvFeatureConfig+0x150>)
 8005090:	4013      	ands	r3, r2
 8005092:	0019      	movs	r1, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a4:	2210      	movs	r2, #16
 80050a6:	4013      	ands	r3, r2
 80050a8:	d00b      	beq.n	80050c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	4a2c      	ldr	r2, [pc, #176]	; (8005164 <UART_AdvFeatureConfig+0x154>)
 80050b2:	4013      	ands	r3, r2
 80050b4:	0019      	movs	r1, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c6:	2220      	movs	r2, #32
 80050c8:	4013      	ands	r3, r2
 80050ca:	d00b      	beq.n	80050e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	4a25      	ldr	r2, [pc, #148]	; (8005168 <UART_AdvFeatureConfig+0x158>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	0019      	movs	r1, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e8:	2240      	movs	r2, #64	; 0x40
 80050ea:	4013      	ands	r3, r2
 80050ec:	d01d      	beq.n	800512a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	4a1d      	ldr	r2, [pc, #116]	; (800516c <UART_AdvFeatureConfig+0x15c>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	0019      	movs	r1, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800510a:	2380      	movs	r3, #128	; 0x80
 800510c:	035b      	lsls	r3, r3, #13
 800510e:	429a      	cmp	r2, r3
 8005110:	d10b      	bne.n	800512a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	4a15      	ldr	r2, [pc, #84]	; (8005170 <UART_AdvFeatureConfig+0x160>)
 800511a:	4013      	ands	r3, r2
 800511c:	0019      	movs	r1, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512e:	2280      	movs	r2, #128	; 0x80
 8005130:	4013      	ands	r3, r2
 8005132:	d00b      	beq.n	800514c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	4a0e      	ldr	r2, [pc, #56]	; (8005174 <UART_AdvFeatureConfig+0x164>)
 800513c:	4013      	ands	r3, r2
 800513e:	0019      	movs	r1, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	605a      	str	r2, [r3, #4]
  }
}
 800514c:	46c0      	nop			; (mov r8, r8)
 800514e:	46bd      	mov	sp, r7
 8005150:	b002      	add	sp, #8
 8005152:	bd80      	pop	{r7, pc}
 8005154:	fffdffff 	.word	0xfffdffff
 8005158:	fffeffff 	.word	0xfffeffff
 800515c:	fffbffff 	.word	0xfffbffff
 8005160:	ffff7fff 	.word	0xffff7fff
 8005164:	ffffefff 	.word	0xffffefff
 8005168:	ffffdfff 	.word	0xffffdfff
 800516c:	ffefffff 	.word	0xffefffff
 8005170:	ff9fffff 	.word	0xff9fffff
 8005174:	fff7ffff 	.word	0xfff7ffff

08005178 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af02      	add	r7, sp, #8
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2290      	movs	r2, #144	; 0x90
 8005184:	2100      	movs	r1, #0
 8005186:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005188:	f7fc ffcc 	bl	8002124 <HAL_GetTick>
 800518c:	0003      	movs	r3, r0
 800518e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2208      	movs	r2, #8
 8005198:	4013      	ands	r3, r2
 800519a:	2b08      	cmp	r3, #8
 800519c:	d10c      	bne.n	80051b8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2280      	movs	r2, #128	; 0x80
 80051a2:	0391      	lsls	r1, r2, #14
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	4a1a      	ldr	r2, [pc, #104]	; (8005210 <UART_CheckIdleState+0x98>)
 80051a8:	9200      	str	r2, [sp, #0]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f000 f832 	bl	8005214 <UART_WaitOnFlagUntilTimeout>
 80051b0:	1e03      	subs	r3, r0, #0
 80051b2:	d001      	beq.n	80051b8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e026      	b.n	8005206 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2204      	movs	r2, #4
 80051c0:	4013      	ands	r3, r2
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d10c      	bne.n	80051e0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2280      	movs	r2, #128	; 0x80
 80051ca:	03d1      	lsls	r1, r2, #15
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	4a10      	ldr	r2, [pc, #64]	; (8005210 <UART_CheckIdleState+0x98>)
 80051d0:	9200      	str	r2, [sp, #0]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f000 f81e 	bl	8005214 <UART_WaitOnFlagUntilTimeout>
 80051d8:	1e03      	subs	r3, r0, #0
 80051da:	d001      	beq.n	80051e0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e012      	b.n	8005206 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2288      	movs	r2, #136	; 0x88
 80051e4:	2120      	movs	r1, #32
 80051e6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	228c      	movs	r2, #140	; 0x8c
 80051ec:	2120      	movs	r1, #32
 80051ee:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2284      	movs	r2, #132	; 0x84
 8005200:	2100      	movs	r1, #0
 8005202:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	0018      	movs	r0, r3
 8005208:	46bd      	mov	sp, r7
 800520a:	b004      	add	sp, #16
 800520c:	bd80      	pop	{r7, pc}
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	01ffffff 	.word	0x01ffffff

08005214 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b094      	sub	sp, #80	; 0x50
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	603b      	str	r3, [r7, #0]
 8005220:	1dfb      	adds	r3, r7, #7
 8005222:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005224:	e0a7      	b.n	8005376 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005226:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005228:	3301      	adds	r3, #1
 800522a:	d100      	bne.n	800522e <UART_WaitOnFlagUntilTimeout+0x1a>
 800522c:	e0a3      	b.n	8005376 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800522e:	f7fc ff79 	bl	8002124 <HAL_GetTick>
 8005232:	0002      	movs	r2, r0
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800523a:	429a      	cmp	r2, r3
 800523c:	d302      	bcc.n	8005244 <UART_WaitOnFlagUntilTimeout+0x30>
 800523e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005240:	2b00      	cmp	r3, #0
 8005242:	d13f      	bne.n	80052c4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005244:	f3ef 8310 	mrs	r3, PRIMASK
 8005248:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800524a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800524c:	647b      	str	r3, [r7, #68]	; 0x44
 800524e:	2301      	movs	r3, #1
 8005250:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005254:	f383 8810 	msr	PRIMASK, r3
}
 8005258:	46c0      	nop			; (mov r8, r8)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	494e      	ldr	r1, [pc, #312]	; (80053a0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005266:	400a      	ands	r2, r1
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800526c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005270:	f383 8810 	msr	PRIMASK, r3
}
 8005274:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005276:	f3ef 8310 	mrs	r3, PRIMASK
 800527a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800527c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527e:	643b      	str	r3, [r7, #64]	; 0x40
 8005280:	2301      	movs	r3, #1
 8005282:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005286:	f383 8810 	msr	PRIMASK, r3
}
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2101      	movs	r1, #1
 8005298:	438a      	bics	r2, r1
 800529a:	609a      	str	r2, [r3, #8]
 800529c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800529e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a2:	f383 8810 	msr	PRIMASK, r3
}
 80052a6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2288      	movs	r2, #136	; 0x88
 80052ac:	2120      	movs	r1, #32
 80052ae:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	228c      	movs	r2, #140	; 0x8c
 80052b4:	2120      	movs	r1, #32
 80052b6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2284      	movs	r2, #132	; 0x84
 80052bc:	2100      	movs	r1, #0
 80052be:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e069      	b.n	8005398 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2204      	movs	r2, #4
 80052cc:	4013      	ands	r3, r2
 80052ce:	d052      	beq.n	8005376 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	69da      	ldr	r2, [r3, #28]
 80052d6:	2380      	movs	r3, #128	; 0x80
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	401a      	ands	r2, r3
 80052dc:	2380      	movs	r3, #128	; 0x80
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d148      	bne.n	8005376 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2280      	movs	r2, #128	; 0x80
 80052ea:	0112      	lsls	r2, r2, #4
 80052ec:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ee:	f3ef 8310 	mrs	r3, PRIMASK
 80052f2:	613b      	str	r3, [r7, #16]
  return(result);
 80052f4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80052f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052f8:	2301      	movs	r3, #1
 80052fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f383 8810 	msr	PRIMASK, r3
}
 8005302:	46c0      	nop			; (mov r8, r8)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4924      	ldr	r1, [pc, #144]	; (80053a0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005310:	400a      	ands	r2, r1
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005316:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	f383 8810 	msr	PRIMASK, r3
}
 800531e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005320:	f3ef 8310 	mrs	r3, PRIMASK
 8005324:	61fb      	str	r3, [r7, #28]
  return(result);
 8005326:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005328:	64bb      	str	r3, [r7, #72]	; 0x48
 800532a:	2301      	movs	r3, #1
 800532c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	f383 8810 	msr	PRIMASK, r3
}
 8005334:	46c0      	nop			; (mov r8, r8)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2101      	movs	r1, #1
 8005342:	438a      	bics	r2, r1
 8005344:	609a      	str	r2, [r3, #8]
 8005346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005348:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	f383 8810 	msr	PRIMASK, r3
}
 8005350:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2288      	movs	r2, #136	; 0x88
 8005356:	2120      	movs	r1, #32
 8005358:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	228c      	movs	r2, #140	; 0x8c
 800535e:	2120      	movs	r1, #32
 8005360:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2290      	movs	r2, #144	; 0x90
 8005366:	2120      	movs	r1, #32
 8005368:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2284      	movs	r2, #132	; 0x84
 800536e:	2100      	movs	r1, #0
 8005370:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e010      	b.n	8005398 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	4013      	ands	r3, r2
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	425a      	negs	r2, r3
 8005386:	4153      	adcs	r3, r2
 8005388:	b2db      	uxtb	r3, r3
 800538a:	001a      	movs	r2, r3
 800538c:	1dfb      	adds	r3, r7, #7
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	429a      	cmp	r2, r3
 8005392:	d100      	bne.n	8005396 <UART_WaitOnFlagUntilTimeout+0x182>
 8005394:	e747      	b.n	8005226 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	0018      	movs	r0, r3
 800539a:	46bd      	mov	sp, r7
 800539c:	b014      	add	sp, #80	; 0x50
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	fffffe5f 	.word	0xfffffe5f

080053a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b098      	sub	sp, #96	; 0x60
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	1dbb      	adds	r3, r7, #6
 80053b0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	1dba      	adds	r2, r7, #6
 80053bc:	215c      	movs	r1, #92	; 0x5c
 80053be:	8812      	ldrh	r2, [r2, #0]
 80053c0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	1dba      	adds	r2, r7, #6
 80053c6:	215e      	movs	r1, #94	; 0x5e
 80053c8:	8812      	ldrh	r2, [r2, #0]
 80053ca:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	2380      	movs	r3, #128	; 0x80
 80053d8:	015b      	lsls	r3, r3, #5
 80053da:	429a      	cmp	r2, r3
 80053dc:	d10d      	bne.n	80053fa <UART_Start_Receive_IT+0x56>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d104      	bne.n	80053f0 <UART_Start_Receive_IT+0x4c>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2260      	movs	r2, #96	; 0x60
 80053ea:	497b      	ldr	r1, [pc, #492]	; (80055d8 <UART_Start_Receive_IT+0x234>)
 80053ec:	5299      	strh	r1, [r3, r2]
 80053ee:	e02e      	b.n	800544e <UART_Start_Receive_IT+0xaa>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2260      	movs	r2, #96	; 0x60
 80053f4:	21ff      	movs	r1, #255	; 0xff
 80053f6:	5299      	strh	r1, [r3, r2]
 80053f8:	e029      	b.n	800544e <UART_Start_Receive_IT+0xaa>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10d      	bne.n	800541e <UART_Start_Receive_IT+0x7a>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d104      	bne.n	8005414 <UART_Start_Receive_IT+0x70>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2260      	movs	r2, #96	; 0x60
 800540e:	21ff      	movs	r1, #255	; 0xff
 8005410:	5299      	strh	r1, [r3, r2]
 8005412:	e01c      	b.n	800544e <UART_Start_Receive_IT+0xaa>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2260      	movs	r2, #96	; 0x60
 8005418:	217f      	movs	r1, #127	; 0x7f
 800541a:	5299      	strh	r1, [r3, r2]
 800541c:	e017      	b.n	800544e <UART_Start_Receive_IT+0xaa>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	2380      	movs	r3, #128	; 0x80
 8005424:	055b      	lsls	r3, r3, #21
 8005426:	429a      	cmp	r2, r3
 8005428:	d10d      	bne.n	8005446 <UART_Start_Receive_IT+0xa2>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d104      	bne.n	800543c <UART_Start_Receive_IT+0x98>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2260      	movs	r2, #96	; 0x60
 8005436:	217f      	movs	r1, #127	; 0x7f
 8005438:	5299      	strh	r1, [r3, r2]
 800543a:	e008      	b.n	800544e <UART_Start_Receive_IT+0xaa>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2260      	movs	r2, #96	; 0x60
 8005440:	213f      	movs	r1, #63	; 0x3f
 8005442:	5299      	strh	r1, [r3, r2]
 8005444:	e003      	b.n	800544e <UART_Start_Receive_IT+0xaa>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2260      	movs	r2, #96	; 0x60
 800544a:	2100      	movs	r1, #0
 800544c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2290      	movs	r2, #144	; 0x90
 8005452:	2100      	movs	r1, #0
 8005454:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	228c      	movs	r2, #140	; 0x8c
 800545a:	2122      	movs	r1, #34	; 0x22
 800545c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800545e:	f3ef 8310 	mrs	r3, PRIMASK
 8005462:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8005464:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005466:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005468:	2301      	movs	r3, #1
 800546a:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800546c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800546e:	f383 8810 	msr	PRIMASK, r3
}
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2101      	movs	r1, #1
 8005480:	430a      	orrs	r2, r1
 8005482:	609a      	str	r2, [r3, #8]
 8005484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005486:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800548a:	f383 8810 	msr	PRIMASK, r3
}
 800548e:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005494:	2380      	movs	r3, #128	; 0x80
 8005496:	059b      	lsls	r3, r3, #22
 8005498:	429a      	cmp	r2, r3
 800549a:	d150      	bne.n	800553e <UART_Start_Receive_IT+0x19a>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2268      	movs	r2, #104	; 0x68
 80054a0:	5a9b      	ldrh	r3, [r3, r2]
 80054a2:	1dba      	adds	r2, r7, #6
 80054a4:	8812      	ldrh	r2, [r2, #0]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d349      	bcc.n	800553e <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	689a      	ldr	r2, [r3, #8]
 80054ae:	2380      	movs	r3, #128	; 0x80
 80054b0:	015b      	lsls	r3, r3, #5
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d107      	bne.n	80054c6 <UART_Start_Receive_IT+0x122>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d103      	bne.n	80054c6 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4a46      	ldr	r2, [pc, #280]	; (80055dc <UART_Start_Receive_IT+0x238>)
 80054c2:	675a      	str	r2, [r3, #116]	; 0x74
 80054c4:	e002      	b.n	80054cc <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4a45      	ldr	r2, [pc, #276]	; (80055e0 <UART_Start_Receive_IT+0x23c>)
 80054ca:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d019      	beq.n	8005508 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054d4:	f3ef 8310 	mrs	r3, PRIMASK
 80054d8:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80054da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80054de:	2301      	movs	r3, #1
 80054e0:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e4:	f383 8810 	msr	PRIMASK, r3
}
 80054e8:	46c0      	nop			; (mov r8, r8)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2180      	movs	r1, #128	; 0x80
 80054f6:	0049      	lsls	r1, r1, #1
 80054f8:	430a      	orrs	r2, r1
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005502:	f383 8810 	msr	PRIMASK, r3
}
 8005506:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005508:	f3ef 8310 	mrs	r3, PRIMASK
 800550c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800550e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005510:	657b      	str	r3, [r7, #84]	; 0x54
 8005512:	2301      	movs	r3, #1
 8005514:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005518:	f383 8810 	msr	PRIMASK, r3
}
 800551c:	46c0      	nop			; (mov r8, r8)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2180      	movs	r1, #128	; 0x80
 800552a:	0549      	lsls	r1, r1, #21
 800552c:	430a      	orrs	r2, r1
 800552e:	609a      	str	r2, [r3, #8]
 8005530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005532:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	f383 8810 	msr	PRIMASK, r3
}
 800553a:	46c0      	nop			; (mov r8, r8)
 800553c:	e047      	b.n	80055ce <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	689a      	ldr	r2, [r3, #8]
 8005542:	2380      	movs	r3, #128	; 0x80
 8005544:	015b      	lsls	r3, r3, #5
 8005546:	429a      	cmp	r2, r3
 8005548:	d107      	bne.n	800555a <UART_Start_Receive_IT+0x1b6>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d103      	bne.n	800555a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4a23      	ldr	r2, [pc, #140]	; (80055e4 <UART_Start_Receive_IT+0x240>)
 8005556:	675a      	str	r2, [r3, #116]	; 0x74
 8005558:	e002      	b.n	8005560 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	4a22      	ldr	r2, [pc, #136]	; (80055e8 <UART_Start_Receive_IT+0x244>)
 800555e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d019      	beq.n	800559c <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005568:	f3ef 8310 	mrs	r3, PRIMASK
 800556c:	61fb      	str	r3, [r7, #28]
  return(result);
 800556e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005570:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005572:	2301      	movs	r3, #1
 8005574:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	f383 8810 	msr	PRIMASK, r3
}
 800557c:	46c0      	nop			; (mov r8, r8)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2190      	movs	r1, #144	; 0x90
 800558a:	0049      	lsls	r1, r1, #1
 800558c:	430a      	orrs	r2, r1
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005592:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	f383 8810 	msr	PRIMASK, r3
}
 800559a:	e018      	b.n	80055ce <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800559c:	f3ef 8310 	mrs	r3, PRIMASK
 80055a0:	613b      	str	r3, [r7, #16]
  return(result);
 80055a2:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80055a4:	653b      	str	r3, [r7, #80]	; 0x50
 80055a6:	2301      	movs	r3, #1
 80055a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f383 8810 	msr	PRIMASK, r3
}
 80055b0:	46c0      	nop			; (mov r8, r8)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2120      	movs	r1, #32
 80055be:	430a      	orrs	r2, r1
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	f383 8810 	msr	PRIMASK, r3
}
 80055cc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	0018      	movs	r0, r3
 80055d2:	46bd      	mov	sp, r7
 80055d4:	b018      	add	sp, #96	; 0x60
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	000001ff 	.word	0x000001ff
 80055dc:	08005d15 	.word	0x08005d15
 80055e0:	08005a29 	.word	0x08005a29
 80055e4:	080058b5 	.word	0x080058b5
 80055e8:	08005741 	.word	0x08005741

080055ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08e      	sub	sp, #56	; 0x38
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055f4:	f3ef 8310 	mrs	r3, PRIMASK
 80055f8:	617b      	str	r3, [r7, #20]
  return(result);
 80055fa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055fc:	637b      	str	r3, [r7, #52]	; 0x34
 80055fe:	2301      	movs	r3, #1
 8005600:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	f383 8810 	msr	PRIMASK, r3
}
 8005608:	46c0      	nop			; (mov r8, r8)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4926      	ldr	r1, [pc, #152]	; (80056b0 <UART_EndRxTransfer+0xc4>)
 8005616:	400a      	ands	r2, r1
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	f383 8810 	msr	PRIMASK, r3
}
 8005624:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005626:	f3ef 8310 	mrs	r3, PRIMASK
 800562a:	623b      	str	r3, [r7, #32]
  return(result);
 800562c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800562e:	633b      	str	r3, [r7, #48]	; 0x30
 8005630:	2301      	movs	r3, #1
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	f383 8810 	msr	PRIMASK, r3
}
 800563a:	46c0      	nop			; (mov r8, r8)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689a      	ldr	r2, [r3, #8]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	491b      	ldr	r1, [pc, #108]	; (80056b4 <UART_EndRxTransfer+0xc8>)
 8005648:	400a      	ands	r2, r1
 800564a:	609a      	str	r2, [r3, #8]
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005652:	f383 8810 	msr	PRIMASK, r3
}
 8005656:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800565c:	2b01      	cmp	r3, #1
 800565e:	d118      	bne.n	8005692 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005660:	f3ef 8310 	mrs	r3, PRIMASK
 8005664:	60bb      	str	r3, [r7, #8]
  return(result);
 8005666:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800566a:	2301      	movs	r3, #1
 800566c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f383 8810 	msr	PRIMASK, r3
}
 8005674:	46c0      	nop			; (mov r8, r8)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2110      	movs	r1, #16
 8005682:	438a      	bics	r2, r1
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005688:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f383 8810 	msr	PRIMASK, r3
}
 8005690:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	228c      	movs	r2, #140	; 0x8c
 8005696:	2120      	movs	r1, #32
 8005698:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80056a6:	46c0      	nop			; (mov r8, r8)
 80056a8:	46bd      	mov	sp, r7
 80056aa:	b00e      	add	sp, #56	; 0x38
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	46c0      	nop			; (mov r8, r8)
 80056b0:	fffffedf 	.word	0xfffffedf
 80056b4:	effffffe 	.word	0xeffffffe

080056b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	225e      	movs	r2, #94	; 0x5e
 80056ca:	2100      	movs	r1, #0
 80056cc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2256      	movs	r2, #86	; 0x56
 80056d2:	2100      	movs	r1, #0
 80056d4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	0018      	movs	r0, r3
 80056da:	f7ff faaf 	bl	8004c3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056de:	46c0      	nop			; (mov r8, r8)
 80056e0:	46bd      	mov	sp, r7
 80056e2:	b004      	add	sp, #16
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b086      	sub	sp, #24
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ee:	f3ef 8310 	mrs	r3, PRIMASK
 80056f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80056f4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	2301      	movs	r3, #1
 80056fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f383 8810 	msr	PRIMASK, r3
}
 8005702:	46c0      	nop			; (mov r8, r8)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2140      	movs	r1, #64	; 0x40
 8005710:	438a      	bics	r2, r1
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	f383 8810 	msr	PRIMASK, r3
}
 800571e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2288      	movs	r2, #136	; 0x88
 8005724:	2120      	movs	r1, #32
 8005726:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	0018      	movs	r0, r3
 8005732:	f7ff fa73 	bl	8004c1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005736:	46c0      	nop			; (mov r8, r8)
 8005738:	46bd      	mov	sp, r7
 800573a:	b006      	add	sp, #24
 800573c:	bd80      	pop	{r7, pc}
	...

08005740 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b090      	sub	sp, #64	; 0x40
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005748:	203e      	movs	r0, #62	; 0x3e
 800574a:	183b      	adds	r3, r7, r0
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	2160      	movs	r1, #96	; 0x60
 8005750:	5a52      	ldrh	r2, [r2, r1]
 8005752:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	228c      	movs	r2, #140	; 0x8c
 8005758:	589b      	ldr	r3, [r3, r2]
 800575a:	2b22      	cmp	r3, #34	; 0x22
 800575c:	d000      	beq.n	8005760 <UART_RxISR_8BIT+0x20>
 800575e:	e09a      	b.n	8005896 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005766:	213c      	movs	r1, #60	; 0x3c
 8005768:	187b      	adds	r3, r7, r1
 800576a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800576c:	187b      	adds	r3, r7, r1
 800576e:	881b      	ldrh	r3, [r3, #0]
 8005770:	b2da      	uxtb	r2, r3
 8005772:	183b      	adds	r3, r7, r0
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	b2d9      	uxtb	r1, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800577c:	400a      	ands	r2, r1
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	225e      	movs	r2, #94	; 0x5e
 8005790:	5a9b      	ldrh	r3, [r3, r2]
 8005792:	b29b      	uxth	r3, r3
 8005794:	3b01      	subs	r3, #1
 8005796:	b299      	uxth	r1, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	225e      	movs	r2, #94	; 0x5e
 800579c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	225e      	movs	r2, #94	; 0x5e
 80057a2:	5a9b      	ldrh	r3, [r3, r2]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d000      	beq.n	80057ac <UART_RxISR_8BIT+0x6c>
 80057aa:	e07c      	b.n	80058a6 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057ac:	f3ef 8310 	mrs	r3, PRIMASK
 80057b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80057b2:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80057b6:	2301      	movs	r3, #1
 80057b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	f383 8810 	msr	PRIMASK, r3
}
 80057c0:	46c0      	nop			; (mov r8, r8)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4938      	ldr	r1, [pc, #224]	; (80058b0 <UART_RxISR_8BIT+0x170>)
 80057ce:	400a      	ands	r2, r1
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	f383 8810 	msr	PRIMASK, r3
}
 80057dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057de:	f3ef 8310 	mrs	r3, PRIMASK
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e6:	637b      	str	r3, [r7, #52]	; 0x34
 80057e8:	2301      	movs	r3, #1
 80057ea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ee:	f383 8810 	msr	PRIMASK, r3
}
 80057f2:	46c0      	nop			; (mov r8, r8)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2101      	movs	r1, #1
 8005800:	438a      	bics	r2, r1
 8005802:	609a      	str	r2, [r3, #8]
 8005804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005806:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580a:	f383 8810 	msr	PRIMASK, r3
}
 800580e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	228c      	movs	r2, #140	; 0x8c
 8005814:	2120      	movs	r1, #32
 8005816:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005828:	2b01      	cmp	r3, #1
 800582a:	d12f      	bne.n	800588c <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005832:	f3ef 8310 	mrs	r3, PRIMASK
 8005836:	60fb      	str	r3, [r7, #12]
  return(result);
 8005838:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800583a:	633b      	str	r3, [r7, #48]	; 0x30
 800583c:	2301      	movs	r3, #1
 800583e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f383 8810 	msr	PRIMASK, r3
}
 8005846:	46c0      	nop			; (mov r8, r8)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2110      	movs	r1, #16
 8005854:	438a      	bics	r2, r1
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f383 8810 	msr	PRIMASK, r3
}
 8005862:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	2210      	movs	r2, #16
 800586c:	4013      	ands	r3, r2
 800586e:	2b10      	cmp	r3, #16
 8005870:	d103      	bne.n	800587a <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2210      	movs	r2, #16
 8005878:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	225c      	movs	r2, #92	; 0x5c
 800587e:	5a9a      	ldrh	r2, [r3, r2]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	0011      	movs	r1, r2
 8005884:	0018      	movs	r0, r3
 8005886:	f7fa feaf 	bl	80005e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800588a:	e00c      	b.n	80058a6 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	0018      	movs	r0, r3
 8005890:	f7ff f9cc 	bl	8004c2c <HAL_UART_RxCpltCallback>
}
 8005894:	e007      	b.n	80058a6 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	699a      	ldr	r2, [r3, #24]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2108      	movs	r1, #8
 80058a2:	430a      	orrs	r2, r1
 80058a4:	619a      	str	r2, [r3, #24]
}
 80058a6:	46c0      	nop			; (mov r8, r8)
 80058a8:	46bd      	mov	sp, r7
 80058aa:	b010      	add	sp, #64	; 0x40
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	46c0      	nop			; (mov r8, r8)
 80058b0:	fffffedf 	.word	0xfffffedf

080058b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b090      	sub	sp, #64	; 0x40
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80058bc:	203e      	movs	r0, #62	; 0x3e
 80058be:	183b      	adds	r3, r7, r0
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	2160      	movs	r1, #96	; 0x60
 80058c4:	5a52      	ldrh	r2, [r2, r1]
 80058c6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	228c      	movs	r2, #140	; 0x8c
 80058cc:	589b      	ldr	r3, [r3, r2]
 80058ce:	2b22      	cmp	r3, #34	; 0x22
 80058d0:	d000      	beq.n	80058d4 <UART_RxISR_16BIT+0x20>
 80058d2:	e09a      	b.n	8005a0a <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058da:	213c      	movs	r1, #60	; 0x3c
 80058dc:	187b      	adds	r3, r7, r1
 80058de:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e4:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80058e6:	187b      	adds	r3, r7, r1
 80058e8:	183a      	adds	r2, r7, r0
 80058ea:	881b      	ldrh	r3, [r3, #0]
 80058ec:	8812      	ldrh	r2, [r2, #0]
 80058ee:	4013      	ands	r3, r2
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fa:	1c9a      	adds	r2, r3, #2
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	225e      	movs	r2, #94	; 0x5e
 8005904:	5a9b      	ldrh	r3, [r3, r2]
 8005906:	b29b      	uxth	r3, r3
 8005908:	3b01      	subs	r3, #1
 800590a:	b299      	uxth	r1, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	225e      	movs	r2, #94	; 0x5e
 8005910:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	225e      	movs	r2, #94	; 0x5e
 8005916:	5a9b      	ldrh	r3, [r3, r2]
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d000      	beq.n	8005920 <UART_RxISR_16BIT+0x6c>
 800591e:	e07c      	b.n	8005a1a <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005920:	f3ef 8310 	mrs	r3, PRIMASK
 8005924:	617b      	str	r3, [r7, #20]
  return(result);
 8005926:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005928:	637b      	str	r3, [r7, #52]	; 0x34
 800592a:	2301      	movs	r3, #1
 800592c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	f383 8810 	msr	PRIMASK, r3
}
 8005934:	46c0      	nop			; (mov r8, r8)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4938      	ldr	r1, [pc, #224]	; (8005a24 <UART_RxISR_16BIT+0x170>)
 8005942:	400a      	ands	r2, r1
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005948:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	f383 8810 	msr	PRIMASK, r3
}
 8005950:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005952:	f3ef 8310 	mrs	r3, PRIMASK
 8005956:	623b      	str	r3, [r7, #32]
  return(result);
 8005958:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800595a:	633b      	str	r3, [r7, #48]	; 0x30
 800595c:	2301      	movs	r3, #1
 800595e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	f383 8810 	msr	PRIMASK, r3
}
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2101      	movs	r1, #1
 8005974:	438a      	bics	r2, r1
 8005976:	609a      	str	r2, [r3, #8]
 8005978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800597c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597e:	f383 8810 	msr	PRIMASK, r3
}
 8005982:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	228c      	movs	r2, #140	; 0x8c
 8005988:	2120      	movs	r1, #32
 800598a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800599c:	2b01      	cmp	r3, #1
 800599e:	d12f      	bne.n	8005a00 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059a6:	f3ef 8310 	mrs	r3, PRIMASK
 80059aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80059ac:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059b0:	2301      	movs	r3, #1
 80059b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f383 8810 	msr	PRIMASK, r3
}
 80059ba:	46c0      	nop			; (mov r8, r8)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2110      	movs	r1, #16
 80059c8:	438a      	bics	r2, r1
 80059ca:	601a      	str	r2, [r3, #0]
 80059cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f383 8810 	msr	PRIMASK, r3
}
 80059d6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	2210      	movs	r2, #16
 80059e0:	4013      	ands	r3, r2
 80059e2:	2b10      	cmp	r3, #16
 80059e4:	d103      	bne.n	80059ee <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2210      	movs	r2, #16
 80059ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	225c      	movs	r2, #92	; 0x5c
 80059f2:	5a9a      	ldrh	r2, [r3, r2]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	0011      	movs	r1, r2
 80059f8:	0018      	movs	r0, r3
 80059fa:	f7fa fdf5 	bl	80005e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059fe:	e00c      	b.n	8005a1a <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	0018      	movs	r0, r3
 8005a04:	f7ff f912 	bl	8004c2c <HAL_UART_RxCpltCallback>
}
 8005a08:	e007      	b.n	8005a1a <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	699a      	ldr	r2, [r3, #24]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2108      	movs	r1, #8
 8005a16:	430a      	orrs	r2, r1
 8005a18:	619a      	str	r2, [r3, #24]
}
 8005a1a:	46c0      	nop			; (mov r8, r8)
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	b010      	add	sp, #64	; 0x40
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	46c0      	nop			; (mov r8, r8)
 8005a24:	fffffedf 	.word	0xfffffedf

08005a28 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b09c      	sub	sp, #112	; 0x70
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005a30:	236a      	movs	r3, #106	; 0x6a
 8005a32:	18fb      	adds	r3, r7, r3
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	2160      	movs	r1, #96	; 0x60
 8005a38:	5a52      	ldrh	r2, [r2, r1]
 8005a3a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	228c      	movs	r2, #140	; 0x8c
 8005a58:	589b      	ldr	r3, [r3, r2]
 8005a5a:	2b22      	cmp	r3, #34	; 0x22
 8005a5c:	d000      	beq.n	8005a60 <UART_RxISR_8BIT_FIFOEN+0x38>
 8005a5e:	e144      	b.n	8005cea <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005a60:	235e      	movs	r3, #94	; 0x5e
 8005a62:	18fb      	adds	r3, r7, r3
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	2168      	movs	r1, #104	; 0x68
 8005a68:	5a52      	ldrh	r2, [r2, r1]
 8005a6a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005a6c:	e0eb      	b.n	8005c46 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a74:	215c      	movs	r1, #92	; 0x5c
 8005a76:	187b      	adds	r3, r7, r1
 8005a78:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a7a:	187b      	adds	r3, r7, r1
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	236a      	movs	r3, #106	; 0x6a
 8005a82:	18fb      	adds	r3, r7, r3
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	b2d9      	uxtb	r1, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a8c:	400a      	ands	r2, r1
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	225e      	movs	r2, #94	; 0x5e
 8005aa0:	5a9b      	ldrh	r3, [r3, r2]
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b299      	uxth	r1, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	225e      	movs	r2, #94	; 0x5e
 8005aac:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab8:	2207      	movs	r2, #7
 8005aba:	4013      	ands	r3, r2
 8005abc:	d049      	beq.n	8005b52 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	d010      	beq.n	8005ae8 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005ac6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005ac8:	2380      	movs	r3, #128	; 0x80
 8005aca:	005b      	lsls	r3, r3, #1
 8005acc:	4013      	ands	r3, r2
 8005ace:	d00b      	beq.n	8005ae8 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2290      	movs	r2, #144	; 0x90
 8005adc:	589b      	ldr	r3, [r3, r2]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2190      	movs	r1, #144	; 0x90
 8005ae6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aea:	2202      	movs	r2, #2
 8005aec:	4013      	ands	r3, r2
 8005aee:	d00f      	beq.n	8005b10 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005af0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005af2:	2201      	movs	r2, #1
 8005af4:	4013      	ands	r3, r2
 8005af6:	d00b      	beq.n	8005b10 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2202      	movs	r2, #2
 8005afe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2290      	movs	r2, #144	; 0x90
 8005b04:	589b      	ldr	r3, [r3, r2]
 8005b06:	2204      	movs	r2, #4
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2190      	movs	r1, #144	; 0x90
 8005b0e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b12:	2204      	movs	r2, #4
 8005b14:	4013      	ands	r3, r2
 8005b16:	d00f      	beq.n	8005b38 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005b18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	d00b      	beq.n	8005b38 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2204      	movs	r2, #4
 8005b26:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2290      	movs	r2, #144	; 0x90
 8005b2c:	589b      	ldr	r3, [r3, r2]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	431a      	orrs	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2190      	movs	r1, #144	; 0x90
 8005b36:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2290      	movs	r2, #144	; 0x90
 8005b3c:	589b      	ldr	r3, [r3, r2]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d007      	beq.n	8005b52 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	0018      	movs	r0, r3
 8005b46:	f7ff f879 	bl	8004c3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2290      	movs	r2, #144	; 0x90
 8005b4e:	2100      	movs	r1, #0
 8005b50:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	225e      	movs	r2, #94	; 0x5e
 8005b56:	5a9b      	ldrh	r3, [r3, r2]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d173      	bne.n	8005c46 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b5e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b66:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b68:	2301      	movs	r3, #1
 8005b6a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6e:	f383 8810 	msr	PRIMASK, r3
}
 8005b72:	46c0      	nop			; (mov r8, r8)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4961      	ldr	r1, [pc, #388]	; (8005d04 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8005b80:	400a      	ands	r2, r1
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b86:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b8a:	f383 8810 	msr	PRIMASK, r3
}
 8005b8e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b90:	f3ef 8310 	mrs	r3, PRIMASK
 8005b94:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8005b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b98:	657b      	str	r3, [r7, #84]	; 0x54
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ba0:	f383 8810 	msr	PRIMASK, r3
}
 8005ba4:	46c0      	nop			; (mov r8, r8)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4955      	ldr	r1, [pc, #340]	; (8005d08 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8005bb2:	400a      	ands	r2, r1
 8005bb4:	609a      	str	r2, [r3, #8]
 8005bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bb8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bbc:	f383 8810 	msr	PRIMASK, r3
}
 8005bc0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	228c      	movs	r2, #140	; 0x8c
 8005bc6:	2120      	movs	r1, #32
 8005bc8:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d12f      	bne.n	8005c3e <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005be4:	f3ef 8310 	mrs	r3, PRIMASK
 8005be8:	623b      	str	r3, [r7, #32]
  return(result);
 8005bea:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bec:	653b      	str	r3, [r7, #80]	; 0x50
 8005bee:	2301      	movs	r3, #1
 8005bf0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	f383 8810 	msr	PRIMASK, r3
}
 8005bf8:	46c0      	nop			; (mov r8, r8)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2110      	movs	r1, #16
 8005c06:	438a      	bics	r2, r1
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c10:	f383 8810 	msr	PRIMASK, r3
}
 8005c14:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69db      	ldr	r3, [r3, #28]
 8005c1c:	2210      	movs	r2, #16
 8005c1e:	4013      	ands	r3, r2
 8005c20:	2b10      	cmp	r3, #16
 8005c22:	d103      	bne.n	8005c2c <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2210      	movs	r2, #16
 8005c2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	225c      	movs	r2, #92	; 0x5c
 8005c30:	5a9a      	ldrh	r2, [r3, r2]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	0011      	movs	r1, r2
 8005c36:	0018      	movs	r0, r3
 8005c38:	f7fa fcd6 	bl	80005e8 <HAL_UARTEx_RxEventCallback>
 8005c3c:	e003      	b.n	8005c46 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	0018      	movs	r0, r3
 8005c42:	f7fe fff3 	bl	8004c2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005c46:	235e      	movs	r3, #94	; 0x5e
 8005c48:	18fb      	adds	r3, r7, r3
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d004      	beq.n	8005c5a <UART_RxISR_8BIT_FIFOEN+0x232>
 8005c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c52:	2220      	movs	r2, #32
 8005c54:	4013      	ands	r3, r2
 8005c56:	d000      	beq.n	8005c5a <UART_RxISR_8BIT_FIFOEN+0x232>
 8005c58:	e709      	b.n	8005a6e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005c5a:	204e      	movs	r0, #78	; 0x4e
 8005c5c:	183b      	adds	r3, r7, r0
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	215e      	movs	r1, #94	; 0x5e
 8005c62:	5a52      	ldrh	r2, [r2, r1]
 8005c64:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005c66:	0001      	movs	r1, r0
 8005c68:	187b      	adds	r3, r7, r1
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d044      	beq.n	8005cfa <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2268      	movs	r2, #104	; 0x68
 8005c74:	5a9b      	ldrh	r3, [r3, r2]
 8005c76:	187a      	adds	r2, r7, r1
 8005c78:	8812      	ldrh	r2, [r2, #0]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d23d      	bcs.n	8005cfa <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c82:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c84:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005c86:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c88:	2301      	movs	r3, #1
 8005c8a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f383 8810 	msr	PRIMASK, r3
}
 8005c92:	46c0      	nop			; (mov r8, r8)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	491b      	ldr	r1, [pc, #108]	; (8005d0c <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8005ca0:	400a      	ands	r2, r1
 8005ca2:	609a      	str	r2, [r3, #8]
 8005ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ca6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	f383 8810 	msr	PRIMASK, r3
}
 8005cae:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a17      	ldr	r2, [pc, #92]	; (8005d10 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8005cb4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8005cba:	617b      	str	r3, [r7, #20]
  return(result);
 8005cbc:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	f383 8810 	msr	PRIMASK, r3
}
 8005cca:	46c0      	nop			; (mov r8, r8)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2120      	movs	r1, #32
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f383 8810 	msr	PRIMASK, r3
}
 8005ce6:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ce8:	e007      	b.n	8005cfa <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	699a      	ldr	r2, [r3, #24]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2108      	movs	r1, #8
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	619a      	str	r2, [r3, #24]
}
 8005cfa:	46c0      	nop			; (mov r8, r8)
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	b01c      	add	sp, #112	; 0x70
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	46c0      	nop			; (mov r8, r8)
 8005d04:	fffffeff 	.word	0xfffffeff
 8005d08:	effffffe 	.word	0xeffffffe
 8005d0c:	efffffff 	.word	0xefffffff
 8005d10:	08005741 	.word	0x08005741

08005d14 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b09e      	sub	sp, #120	; 0x78
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005d1c:	2372      	movs	r3, #114	; 0x72
 8005d1e:	18fb      	adds	r3, r7, r3
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	2160      	movs	r1, #96	; 0x60
 8005d24:	5a52      	ldrh	r2, [r2, r1]
 8005d26:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	228c      	movs	r2, #140	; 0x8c
 8005d44:	589b      	ldr	r3, [r3, r2]
 8005d46:	2b22      	cmp	r3, #34	; 0x22
 8005d48:	d000      	beq.n	8005d4c <UART_RxISR_16BIT_FIFOEN+0x38>
 8005d4a:	e144      	b.n	8005fd6 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005d4c:	2366      	movs	r3, #102	; 0x66
 8005d4e:	18fb      	adds	r3, r7, r3
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	2168      	movs	r1, #104	; 0x68
 8005d54:	5a52      	ldrh	r2, [r2, r1]
 8005d56:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d58:	e0eb      	b.n	8005f32 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d60:	2164      	movs	r1, #100	; 0x64
 8005d62:	187b      	adds	r3, r7, r1
 8005d64:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d6a:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8005d6c:	187b      	adds	r3, r7, r1
 8005d6e:	2272      	movs	r2, #114	; 0x72
 8005d70:	18ba      	adds	r2, r7, r2
 8005d72:	881b      	ldrh	r3, [r3, #0]
 8005d74:	8812      	ldrh	r2, [r2, #0]
 8005d76:	4013      	ands	r3, r2
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d82:	1c9a      	adds	r2, r3, #2
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	225e      	movs	r2, #94	; 0x5e
 8005d8c:	5a9b      	ldrh	r3, [r3, r2]
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b299      	uxth	r1, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	225e      	movs	r2, #94	; 0x5e
 8005d98:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005da2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005da4:	2207      	movs	r2, #7
 8005da6:	4013      	ands	r3, r2
 8005da8:	d049      	beq.n	8005e3e <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dac:	2201      	movs	r2, #1
 8005dae:	4013      	ands	r3, r2
 8005db0:	d010      	beq.n	8005dd4 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8005db2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005db4:	2380      	movs	r3, #128	; 0x80
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	4013      	ands	r3, r2
 8005dba:	d00b      	beq.n	8005dd4 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2290      	movs	r2, #144	; 0x90
 8005dc8:	589b      	ldr	r3, [r3, r2]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2190      	movs	r1, #144	; 0x90
 8005dd2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	4013      	ands	r3, r2
 8005dda:	d00f      	beq.n	8005dfc <UART_RxISR_16BIT_FIFOEN+0xe8>
 8005ddc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dde:	2201      	movs	r2, #1
 8005de0:	4013      	ands	r3, r2
 8005de2:	d00b      	beq.n	8005dfc <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2202      	movs	r2, #2
 8005dea:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2290      	movs	r2, #144	; 0x90
 8005df0:	589b      	ldr	r3, [r3, r2]
 8005df2:	2204      	movs	r2, #4
 8005df4:	431a      	orrs	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2190      	movs	r1, #144	; 0x90
 8005dfa:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dfe:	2204      	movs	r2, #4
 8005e00:	4013      	ands	r3, r2
 8005e02:	d00f      	beq.n	8005e24 <UART_RxISR_16BIT_FIFOEN+0x110>
 8005e04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e06:	2201      	movs	r2, #1
 8005e08:	4013      	ands	r3, r2
 8005e0a:	d00b      	beq.n	8005e24 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2204      	movs	r2, #4
 8005e12:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2290      	movs	r2, #144	; 0x90
 8005e18:	589b      	ldr	r3, [r3, r2]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2190      	movs	r1, #144	; 0x90
 8005e22:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2290      	movs	r2, #144	; 0x90
 8005e28:	589b      	ldr	r3, [r3, r2]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d007      	beq.n	8005e3e <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	0018      	movs	r0, r3
 8005e32:	f7fe ff03 	bl	8004c3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2290      	movs	r2, #144	; 0x90
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	225e      	movs	r2, #94	; 0x5e
 8005e42:	5a9b      	ldrh	r3, [r3, r2]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d173      	bne.n	8005f32 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e4a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e4e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e54:	2301      	movs	r3, #1
 8005e56:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e5a:	f383 8810 	msr	PRIMASK, r3
}
 8005e5e:	46c0      	nop			; (mov r8, r8)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4961      	ldr	r1, [pc, #388]	; (8005ff0 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8005e6c:	400a      	ands	r2, r1
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e72:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e76:	f383 8810 	msr	PRIMASK, r3
}
 8005e7a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e7c:	f3ef 8310 	mrs	r3, PRIMASK
 8005e80:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e84:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e86:	2301      	movs	r3, #1
 8005e88:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e8c:	f383 8810 	msr	PRIMASK, r3
}
 8005e90:	46c0      	nop			; (mov r8, r8)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4955      	ldr	r1, [pc, #340]	; (8005ff4 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8005e9e:	400a      	ands	r2, r1
 8005ea0:	609a      	str	r2, [r3, #8]
 8005ea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ea4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ea8:	f383 8810 	msr	PRIMASK, r3
}
 8005eac:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	228c      	movs	r2, #140	; 0x8c
 8005eb2:	2120      	movs	r1, #32
 8005eb4:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d12f      	bne.n	8005f2a <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ed0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ed4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ed8:	657b      	str	r3, [r7, #84]	; 0x54
 8005eda:	2301      	movs	r3, #1
 8005edc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee0:	f383 8810 	msr	PRIMASK, r3
}
 8005ee4:	46c0      	nop			; (mov r8, r8)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2110      	movs	r1, #16
 8005ef2:	438a      	bics	r2, r1
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efc:	f383 8810 	msr	PRIMASK, r3
}
 8005f00:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	2210      	movs	r2, #16
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	2b10      	cmp	r3, #16
 8005f0e:	d103      	bne.n	8005f18 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2210      	movs	r2, #16
 8005f16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	225c      	movs	r2, #92	; 0x5c
 8005f1c:	5a9a      	ldrh	r2, [r3, r2]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	0011      	movs	r1, r2
 8005f22:	0018      	movs	r0, r3
 8005f24:	f7fa fb60 	bl	80005e8 <HAL_UARTEx_RxEventCallback>
 8005f28:	e003      	b.n	8005f32 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	f7fe fe7d 	bl	8004c2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f32:	2366      	movs	r3, #102	; 0x66
 8005f34:	18fb      	adds	r3, r7, r3
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d004      	beq.n	8005f46 <UART_RxISR_16BIT_FIFOEN+0x232>
 8005f3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f3e:	2220      	movs	r2, #32
 8005f40:	4013      	ands	r3, r2
 8005f42:	d000      	beq.n	8005f46 <UART_RxISR_16BIT_FIFOEN+0x232>
 8005f44:	e709      	b.n	8005d5a <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005f46:	2052      	movs	r0, #82	; 0x52
 8005f48:	183b      	adds	r3, r7, r0
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	215e      	movs	r1, #94	; 0x5e
 8005f4e:	5a52      	ldrh	r2, [r2, r1]
 8005f50:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005f52:	0001      	movs	r1, r0
 8005f54:	187b      	adds	r3, r7, r1
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d044      	beq.n	8005fe6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2268      	movs	r2, #104	; 0x68
 8005f60:	5a9b      	ldrh	r3, [r3, r2]
 8005f62:	187a      	adds	r2, r7, r1
 8005f64:	8812      	ldrh	r2, [r2, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d23d      	bcs.n	8005fe6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f70:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f74:	2301      	movs	r3, #1
 8005f76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f383 8810 	msr	PRIMASK, r3
}
 8005f7e:	46c0      	nop			; (mov r8, r8)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689a      	ldr	r2, [r3, #8]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	491b      	ldr	r1, [pc, #108]	; (8005ff8 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8005f8c:	400a      	ands	r2, r1
 8005f8e:	609a      	str	r2, [r3, #8]
 8005f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f383 8810 	msr	PRIMASK, r3
}
 8005f9a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a17      	ldr	r2, [pc, #92]	; (8005ffc <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8005fa0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8005fa6:	61bb      	str	r3, [r7, #24]
  return(result);
 8005fa8:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005faa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fac:	2301      	movs	r3, #1
 8005fae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	f383 8810 	msr	PRIMASK, r3
}
 8005fb6:	46c0      	nop			; (mov r8, r8)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2120      	movs	r1, #32
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	f383 8810 	msr	PRIMASK, r3
}
 8005fd2:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005fd4:	e007      	b.n	8005fe6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	699a      	ldr	r2, [r3, #24]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2108      	movs	r1, #8
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	619a      	str	r2, [r3, #24]
}
 8005fe6:	46c0      	nop			; (mov r8, r8)
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	b01e      	add	sp, #120	; 0x78
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	46c0      	nop			; (mov r8, r8)
 8005ff0:	fffffeff 	.word	0xfffffeff
 8005ff4:	effffffe 	.word	0xeffffffe
 8005ff8:	efffffff 	.word	0xefffffff
 8005ffc:	080058b5 	.word	0x080058b5

08006000 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006008:	46c0      	nop			; (mov r8, r8)
 800600a:	46bd      	mov	sp, r7
 800600c:	b002      	add	sp, #8
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006018:	46c0      	nop			; (mov r8, r8)
 800601a:	46bd      	mov	sp, r7
 800601c:	b002      	add	sp, #8
 800601e:	bd80      	pop	{r7, pc}

08006020 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006028:	46c0      	nop			; (mov r8, r8)
 800602a:	46bd      	mov	sp, r7
 800602c:	b002      	add	sp, #8
 800602e:	bd80      	pop	{r7, pc}

08006030 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2284      	movs	r2, #132	; 0x84
 800603c:	5c9b      	ldrb	r3, [r3, r2]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d101      	bne.n	8006046 <HAL_UARTEx_DisableFifoMode+0x16>
 8006042:	2302      	movs	r3, #2
 8006044:	e027      	b.n	8006096 <HAL_UARTEx_DisableFifoMode+0x66>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2284      	movs	r2, #132	; 0x84
 800604a:	2101      	movs	r1, #1
 800604c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2288      	movs	r2, #136	; 0x88
 8006052:	2124      	movs	r1, #36	; 0x24
 8006054:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2101      	movs	r1, #1
 800606a:	438a      	bics	r2, r1
 800606c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	4a0b      	ldr	r2, [pc, #44]	; (80060a0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006072:	4013      	ands	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2288      	movs	r2, #136	; 0x88
 8006088:	2120      	movs	r1, #32
 800608a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2284      	movs	r2, #132	; 0x84
 8006090:	2100      	movs	r1, #0
 8006092:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	0018      	movs	r0, r3
 8006098:	46bd      	mov	sp, r7
 800609a:	b004      	add	sp, #16
 800609c:	bd80      	pop	{r7, pc}
 800609e:	46c0      	nop			; (mov r8, r8)
 80060a0:	dfffffff 	.word	0xdfffffff

080060a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2284      	movs	r2, #132	; 0x84
 80060b2:	5c9b      	ldrb	r3, [r3, r2]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d101      	bne.n	80060bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060b8:	2302      	movs	r3, #2
 80060ba:	e02e      	b.n	800611a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2284      	movs	r2, #132	; 0x84
 80060c0:	2101      	movs	r1, #1
 80060c2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2288      	movs	r2, #136	; 0x88
 80060c8:	2124      	movs	r1, #36	; 0x24
 80060ca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2101      	movs	r1, #1
 80060e0:	438a      	bics	r2, r1
 80060e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	08d9      	lsrs	r1, r3, #3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	0018      	movs	r0, r3
 80060fc:	f000 f8bc 	bl	8006278 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2288      	movs	r2, #136	; 0x88
 800610c:	2120      	movs	r1, #32
 800610e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2284      	movs	r2, #132	; 0x84
 8006114:	2100      	movs	r1, #0
 8006116:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	0018      	movs	r0, r3
 800611c:	46bd      	mov	sp, r7
 800611e:	b004      	add	sp, #16
 8006120:	bd80      	pop	{r7, pc}
	...

08006124 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2284      	movs	r2, #132	; 0x84
 8006132:	5c9b      	ldrb	r3, [r3, r2]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d101      	bne.n	800613c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006138:	2302      	movs	r3, #2
 800613a:	e02f      	b.n	800619c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2284      	movs	r2, #132	; 0x84
 8006140:	2101      	movs	r1, #1
 8006142:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2288      	movs	r2, #136	; 0x88
 8006148:	2124      	movs	r1, #36	; 0x24
 800614a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2101      	movs	r1, #1
 8006160:	438a      	bics	r2, r1
 8006162:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	4a0e      	ldr	r2, [pc, #56]	; (80061a4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800616c:	4013      	ands	r3, r2
 800616e:	0019      	movs	r1, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	0018      	movs	r0, r3
 800617e:	f000 f87b 	bl	8006278 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2288      	movs	r2, #136	; 0x88
 800618e:	2120      	movs	r1, #32
 8006190:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2284      	movs	r2, #132	; 0x84
 8006196:	2100      	movs	r1, #0
 8006198:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	0018      	movs	r0, r3
 800619e:	46bd      	mov	sp, r7
 80061a0:	b004      	add	sp, #16
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	f1ffffff 	.word	0xf1ffffff

080061a8 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061a8:	b5b0      	push	{r4, r5, r7, lr}
 80061aa:	b08a      	sub	sp, #40	; 0x28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	1dbb      	adds	r3, r7, #6
 80061b4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	228c      	movs	r2, #140	; 0x8c
 80061ba:	589b      	ldr	r3, [r3, r2]
 80061bc:	2b20      	cmp	r3, #32
 80061be:	d156      	bne.n	800626e <HAL_UARTEx_ReceiveToIdle_IT+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80061c6:	1dbb      	adds	r3, r7, #6
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e04e      	b.n	8006270 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	689a      	ldr	r2, [r3, #8]
 80061d6:	2380      	movs	r3, #128	; 0x80
 80061d8:	015b      	lsls	r3, r3, #5
 80061da:	429a      	cmp	r2, r3
 80061dc:	d109      	bne.n	80061f2 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d105      	bne.n	80061f2 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2201      	movs	r2, #1
 80061ea:	4013      	ands	r3, r2
 80061ec:	d001      	beq.n	80061f2 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
      {
        return  HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e03e      	b.n	8006270 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2201      	movs	r2, #1
 80061f6:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80061fe:	2527      	movs	r5, #39	; 0x27
 8006200:	197c      	adds	r4, r7, r5
 8006202:	1dbb      	adds	r3, r7, #6
 8006204:	881a      	ldrh	r2, [r3, #0]
 8006206:	68b9      	ldr	r1, [r7, #8]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	0018      	movs	r0, r3
 800620c:	f7ff f8ca 	bl	80053a4 <UART_Start_Receive_IT>
 8006210:	0003      	movs	r3, r0
 8006212:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006214:	197b      	adds	r3, r7, r5
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d124      	bne.n	8006266 <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006220:	2b01      	cmp	r3, #1
 8006222:	d11c      	bne.n	800625e <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2210      	movs	r2, #16
 800622a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800622c:	f3ef 8310 	mrs	r3, PRIMASK
 8006230:	617b      	str	r3, [r7, #20]
  return(result);
 8006232:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006234:	623b      	str	r3, [r7, #32]
 8006236:	2301      	movs	r3, #1
 8006238:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	f383 8810 	msr	PRIMASK, r3
}
 8006240:	46c0      	nop			; (mov r8, r8)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2110      	movs	r1, #16
 800624e:	430a      	orrs	r2, r1
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	f383 8810 	msr	PRIMASK, r3
}
 800625c:	e003      	b.n	8006266 <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800625e:	2327      	movs	r3, #39	; 0x27
 8006260:	18fb      	adds	r3, r7, r3
 8006262:	2201      	movs	r2, #1
 8006264:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8006266:	2327      	movs	r3, #39	; 0x27
 8006268:	18fb      	adds	r3, r7, r3
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	e000      	b.n	8006270 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800626e:	2302      	movs	r3, #2
  }
}
 8006270:	0018      	movs	r0, r3
 8006272:	46bd      	mov	sp, r7
 8006274:	b00a      	add	sp, #40	; 0x28
 8006276:	bdb0      	pop	{r4, r5, r7, pc}

08006278 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006284:	2b00      	cmp	r3, #0
 8006286:	d108      	bne.n	800629a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	226a      	movs	r2, #106	; 0x6a
 800628c:	2101      	movs	r1, #1
 800628e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2268      	movs	r2, #104	; 0x68
 8006294:	2101      	movs	r1, #1
 8006296:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006298:	e043      	b.n	8006322 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800629a:	260f      	movs	r6, #15
 800629c:	19bb      	adds	r3, r7, r6
 800629e:	2208      	movs	r2, #8
 80062a0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062a2:	200e      	movs	r0, #14
 80062a4:	183b      	adds	r3, r7, r0
 80062a6:	2208      	movs	r2, #8
 80062a8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	0e5b      	lsrs	r3, r3, #25
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	240d      	movs	r4, #13
 80062b6:	193b      	adds	r3, r7, r4
 80062b8:	2107      	movs	r1, #7
 80062ba:	400a      	ands	r2, r1
 80062bc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	0f5b      	lsrs	r3, r3, #29
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	250c      	movs	r5, #12
 80062ca:	197b      	adds	r3, r7, r5
 80062cc:	2107      	movs	r1, #7
 80062ce:	400a      	ands	r2, r1
 80062d0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062d2:	183b      	adds	r3, r7, r0
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	197a      	adds	r2, r7, r5
 80062d8:	7812      	ldrb	r2, [r2, #0]
 80062da:	4914      	ldr	r1, [pc, #80]	; (800632c <UARTEx_SetNbDataToProcess+0xb4>)
 80062dc:	5c8a      	ldrb	r2, [r1, r2]
 80062de:	435a      	muls	r2, r3
 80062e0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80062e2:	197b      	adds	r3, r7, r5
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	4a12      	ldr	r2, [pc, #72]	; (8006330 <UARTEx_SetNbDataToProcess+0xb8>)
 80062e8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062ea:	0019      	movs	r1, r3
 80062ec:	f7f9 ffa4 	bl	8000238 <__divsi3>
 80062f0:	0003      	movs	r3, r0
 80062f2:	b299      	uxth	r1, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	226a      	movs	r2, #106	; 0x6a
 80062f8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062fa:	19bb      	adds	r3, r7, r6
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	193a      	adds	r2, r7, r4
 8006300:	7812      	ldrb	r2, [r2, #0]
 8006302:	490a      	ldr	r1, [pc, #40]	; (800632c <UARTEx_SetNbDataToProcess+0xb4>)
 8006304:	5c8a      	ldrb	r2, [r1, r2]
 8006306:	435a      	muls	r2, r3
 8006308:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800630a:	193b      	adds	r3, r7, r4
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	4a08      	ldr	r2, [pc, #32]	; (8006330 <UARTEx_SetNbDataToProcess+0xb8>)
 8006310:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006312:	0019      	movs	r1, r3
 8006314:	f7f9 ff90 	bl	8000238 <__divsi3>
 8006318:	0003      	movs	r3, r0
 800631a:	b299      	uxth	r1, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2268      	movs	r2, #104	; 0x68
 8006320:	5299      	strh	r1, [r3, r2]
}
 8006322:	46c0      	nop			; (mov r8, r8)
 8006324:	46bd      	mov	sp, r7
 8006326:	b005      	add	sp, #20
 8006328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800632a:	46c0      	nop			; (mov r8, r8)
 800632c:	080080dc 	.word	0x080080dc
 8006330:	080080e4 	.word	0x080080e4

08006334 <__errno>:
 8006334:	4b01      	ldr	r3, [pc, #4]	; (800633c <__errno+0x8>)
 8006336:	6818      	ldr	r0, [r3, #0]
 8006338:	4770      	bx	lr
 800633a:	46c0      	nop			; (mov r8, r8)
 800633c:	2000040c 	.word	0x2000040c

08006340 <__libc_init_array>:
 8006340:	b570      	push	{r4, r5, r6, lr}
 8006342:	2600      	movs	r6, #0
 8006344:	4d0c      	ldr	r5, [pc, #48]	; (8006378 <__libc_init_array+0x38>)
 8006346:	4c0d      	ldr	r4, [pc, #52]	; (800637c <__libc_init_array+0x3c>)
 8006348:	1b64      	subs	r4, r4, r5
 800634a:	10a4      	asrs	r4, r4, #2
 800634c:	42a6      	cmp	r6, r4
 800634e:	d109      	bne.n	8006364 <__libc_init_array+0x24>
 8006350:	2600      	movs	r6, #0
 8006352:	f001 fb31 	bl	80079b8 <_init>
 8006356:	4d0a      	ldr	r5, [pc, #40]	; (8006380 <__libc_init_array+0x40>)
 8006358:	4c0a      	ldr	r4, [pc, #40]	; (8006384 <__libc_init_array+0x44>)
 800635a:	1b64      	subs	r4, r4, r5
 800635c:	10a4      	asrs	r4, r4, #2
 800635e:	42a6      	cmp	r6, r4
 8006360:	d105      	bne.n	800636e <__libc_init_array+0x2e>
 8006362:	bd70      	pop	{r4, r5, r6, pc}
 8006364:	00b3      	lsls	r3, r6, #2
 8006366:	58eb      	ldr	r3, [r5, r3]
 8006368:	4798      	blx	r3
 800636a:	3601      	adds	r6, #1
 800636c:	e7ee      	b.n	800634c <__libc_init_array+0xc>
 800636e:	00b3      	lsls	r3, r6, #2
 8006370:	58eb      	ldr	r3, [r5, r3]
 8006372:	4798      	blx	r3
 8006374:	3601      	adds	r6, #1
 8006376:	e7f2      	b.n	800635e <__libc_init_array+0x1e>
 8006378:	08008184 	.word	0x08008184
 800637c:	08008184 	.word	0x08008184
 8006380:	08008184 	.word	0x08008184
 8006384:	08008188 	.word	0x08008188

08006388 <memcpy>:
 8006388:	2300      	movs	r3, #0
 800638a:	b510      	push	{r4, lr}
 800638c:	429a      	cmp	r2, r3
 800638e:	d100      	bne.n	8006392 <memcpy+0xa>
 8006390:	bd10      	pop	{r4, pc}
 8006392:	5ccc      	ldrb	r4, [r1, r3]
 8006394:	54c4      	strb	r4, [r0, r3]
 8006396:	3301      	adds	r3, #1
 8006398:	e7f8      	b.n	800638c <memcpy+0x4>

0800639a <memset>:
 800639a:	0003      	movs	r3, r0
 800639c:	1882      	adds	r2, r0, r2
 800639e:	4293      	cmp	r3, r2
 80063a0:	d100      	bne.n	80063a4 <memset+0xa>
 80063a2:	4770      	bx	lr
 80063a4:	7019      	strb	r1, [r3, #0]
 80063a6:	3301      	adds	r3, #1
 80063a8:	e7f9      	b.n	800639e <memset+0x4>
	...

080063ac <iprintf>:
 80063ac:	b40f      	push	{r0, r1, r2, r3}
 80063ae:	4b0b      	ldr	r3, [pc, #44]	; (80063dc <iprintf+0x30>)
 80063b0:	b513      	push	{r0, r1, r4, lr}
 80063b2:	681c      	ldr	r4, [r3, #0]
 80063b4:	2c00      	cmp	r4, #0
 80063b6:	d005      	beq.n	80063c4 <iprintf+0x18>
 80063b8:	69a3      	ldr	r3, [r4, #24]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d102      	bne.n	80063c4 <iprintf+0x18>
 80063be:	0020      	movs	r0, r4
 80063c0:	f000 fb82 	bl	8006ac8 <__sinit>
 80063c4:	ab05      	add	r3, sp, #20
 80063c6:	0020      	movs	r0, r4
 80063c8:	9a04      	ldr	r2, [sp, #16]
 80063ca:	68a1      	ldr	r1, [r4, #8]
 80063cc:	9301      	str	r3, [sp, #4]
 80063ce:	f000 ff01 	bl	80071d4 <_vfiprintf_r>
 80063d2:	bc16      	pop	{r1, r2, r4}
 80063d4:	bc08      	pop	{r3}
 80063d6:	b004      	add	sp, #16
 80063d8:	4718      	bx	r3
 80063da:	46c0      	nop			; (mov r8, r8)
 80063dc:	2000040c 	.word	0x2000040c

080063e0 <_puts_r>:
 80063e0:	b570      	push	{r4, r5, r6, lr}
 80063e2:	0005      	movs	r5, r0
 80063e4:	000e      	movs	r6, r1
 80063e6:	2800      	cmp	r0, #0
 80063e8:	d004      	beq.n	80063f4 <_puts_r+0x14>
 80063ea:	6983      	ldr	r3, [r0, #24]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <_puts_r+0x14>
 80063f0:	f000 fb6a 	bl	8006ac8 <__sinit>
 80063f4:	69ab      	ldr	r3, [r5, #24]
 80063f6:	68ac      	ldr	r4, [r5, #8]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d102      	bne.n	8006402 <_puts_r+0x22>
 80063fc:	0028      	movs	r0, r5
 80063fe:	f000 fb63 	bl	8006ac8 <__sinit>
 8006402:	4b2d      	ldr	r3, [pc, #180]	; (80064b8 <_puts_r+0xd8>)
 8006404:	429c      	cmp	r4, r3
 8006406:	d122      	bne.n	800644e <_puts_r+0x6e>
 8006408:	686c      	ldr	r4, [r5, #4]
 800640a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800640c:	07db      	lsls	r3, r3, #31
 800640e:	d405      	bmi.n	800641c <_puts_r+0x3c>
 8006410:	89a3      	ldrh	r3, [r4, #12]
 8006412:	059b      	lsls	r3, r3, #22
 8006414:	d402      	bmi.n	800641c <_puts_r+0x3c>
 8006416:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006418:	f000 fbf7 	bl	8006c0a <__retarget_lock_acquire_recursive>
 800641c:	89a3      	ldrh	r3, [r4, #12]
 800641e:	071b      	lsls	r3, r3, #28
 8006420:	d502      	bpl.n	8006428 <_puts_r+0x48>
 8006422:	6923      	ldr	r3, [r4, #16]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d129      	bne.n	800647c <_puts_r+0x9c>
 8006428:	0021      	movs	r1, r4
 800642a:	0028      	movs	r0, r5
 800642c:	f000 f9a6 	bl	800677c <__swsetup_r>
 8006430:	2800      	cmp	r0, #0
 8006432:	d023      	beq.n	800647c <_puts_r+0x9c>
 8006434:	2501      	movs	r5, #1
 8006436:	426d      	negs	r5, r5
 8006438:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800643a:	07db      	lsls	r3, r3, #31
 800643c:	d405      	bmi.n	800644a <_puts_r+0x6a>
 800643e:	89a3      	ldrh	r3, [r4, #12]
 8006440:	059b      	lsls	r3, r3, #22
 8006442:	d402      	bmi.n	800644a <_puts_r+0x6a>
 8006444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006446:	f000 fbe1 	bl	8006c0c <__retarget_lock_release_recursive>
 800644a:	0028      	movs	r0, r5
 800644c:	bd70      	pop	{r4, r5, r6, pc}
 800644e:	4b1b      	ldr	r3, [pc, #108]	; (80064bc <_puts_r+0xdc>)
 8006450:	429c      	cmp	r4, r3
 8006452:	d101      	bne.n	8006458 <_puts_r+0x78>
 8006454:	68ac      	ldr	r4, [r5, #8]
 8006456:	e7d8      	b.n	800640a <_puts_r+0x2a>
 8006458:	4b19      	ldr	r3, [pc, #100]	; (80064c0 <_puts_r+0xe0>)
 800645a:	429c      	cmp	r4, r3
 800645c:	d1d5      	bne.n	800640a <_puts_r+0x2a>
 800645e:	68ec      	ldr	r4, [r5, #12]
 8006460:	e7d3      	b.n	800640a <_puts_r+0x2a>
 8006462:	3601      	adds	r6, #1
 8006464:	60a3      	str	r3, [r4, #8]
 8006466:	2b00      	cmp	r3, #0
 8006468:	da04      	bge.n	8006474 <_puts_r+0x94>
 800646a:	69a2      	ldr	r2, [r4, #24]
 800646c:	429a      	cmp	r2, r3
 800646e:	dc16      	bgt.n	800649e <_puts_r+0xbe>
 8006470:	290a      	cmp	r1, #10
 8006472:	d014      	beq.n	800649e <_puts_r+0xbe>
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	1c5a      	adds	r2, r3, #1
 8006478:	6022      	str	r2, [r4, #0]
 800647a:	7019      	strb	r1, [r3, #0]
 800647c:	68a3      	ldr	r3, [r4, #8]
 800647e:	7831      	ldrb	r1, [r6, #0]
 8006480:	3b01      	subs	r3, #1
 8006482:	2900      	cmp	r1, #0
 8006484:	d1ed      	bne.n	8006462 <_puts_r+0x82>
 8006486:	60a3      	str	r3, [r4, #8]
 8006488:	2b00      	cmp	r3, #0
 800648a:	da0f      	bge.n	80064ac <_puts_r+0xcc>
 800648c:	0028      	movs	r0, r5
 800648e:	0022      	movs	r2, r4
 8006490:	310a      	adds	r1, #10
 8006492:	f000 f91d 	bl	80066d0 <__swbuf_r>
 8006496:	250a      	movs	r5, #10
 8006498:	1c43      	adds	r3, r0, #1
 800649a:	d1cd      	bne.n	8006438 <_puts_r+0x58>
 800649c:	e7ca      	b.n	8006434 <_puts_r+0x54>
 800649e:	0022      	movs	r2, r4
 80064a0:	0028      	movs	r0, r5
 80064a2:	f000 f915 	bl	80066d0 <__swbuf_r>
 80064a6:	1c43      	adds	r3, r0, #1
 80064a8:	d1e8      	bne.n	800647c <_puts_r+0x9c>
 80064aa:	e7c3      	b.n	8006434 <_puts_r+0x54>
 80064ac:	250a      	movs	r5, #10
 80064ae:	6823      	ldr	r3, [r4, #0]
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	6022      	str	r2, [r4, #0]
 80064b4:	701d      	strb	r5, [r3, #0]
 80064b6:	e7bf      	b.n	8006438 <_puts_r+0x58>
 80064b8:	08008110 	.word	0x08008110
 80064bc:	08008130 	.word	0x08008130
 80064c0:	080080f0 	.word	0x080080f0

080064c4 <puts>:
 80064c4:	b510      	push	{r4, lr}
 80064c6:	4b03      	ldr	r3, [pc, #12]	; (80064d4 <puts+0x10>)
 80064c8:	0001      	movs	r1, r0
 80064ca:	6818      	ldr	r0, [r3, #0]
 80064cc:	f7ff ff88 	bl	80063e0 <_puts_r>
 80064d0:	bd10      	pop	{r4, pc}
 80064d2:	46c0      	nop			; (mov r8, r8)
 80064d4:	2000040c 	.word	0x2000040c

080064d8 <setvbuf>:
 80064d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064da:	001d      	movs	r5, r3
 80064dc:	4b5d      	ldr	r3, [pc, #372]	; (8006654 <setvbuf+0x17c>)
 80064de:	b085      	sub	sp, #20
 80064e0:	681e      	ldr	r6, [r3, #0]
 80064e2:	0004      	movs	r4, r0
 80064e4:	000f      	movs	r7, r1
 80064e6:	9200      	str	r2, [sp, #0]
 80064e8:	2e00      	cmp	r6, #0
 80064ea:	d005      	beq.n	80064f8 <setvbuf+0x20>
 80064ec:	69b3      	ldr	r3, [r6, #24]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d102      	bne.n	80064f8 <setvbuf+0x20>
 80064f2:	0030      	movs	r0, r6
 80064f4:	f000 fae8 	bl	8006ac8 <__sinit>
 80064f8:	4b57      	ldr	r3, [pc, #348]	; (8006658 <setvbuf+0x180>)
 80064fa:	429c      	cmp	r4, r3
 80064fc:	d161      	bne.n	80065c2 <setvbuf+0xea>
 80064fe:	6874      	ldr	r4, [r6, #4]
 8006500:	9b00      	ldr	r3, [sp, #0]
 8006502:	2b02      	cmp	r3, #2
 8006504:	d005      	beq.n	8006512 <setvbuf+0x3a>
 8006506:	2b01      	cmp	r3, #1
 8006508:	d900      	bls.n	800650c <setvbuf+0x34>
 800650a:	e09d      	b.n	8006648 <setvbuf+0x170>
 800650c:	2d00      	cmp	r5, #0
 800650e:	da00      	bge.n	8006512 <setvbuf+0x3a>
 8006510:	e09a      	b.n	8006648 <setvbuf+0x170>
 8006512:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006514:	07db      	lsls	r3, r3, #31
 8006516:	d405      	bmi.n	8006524 <setvbuf+0x4c>
 8006518:	89a3      	ldrh	r3, [r4, #12]
 800651a:	059b      	lsls	r3, r3, #22
 800651c:	d402      	bmi.n	8006524 <setvbuf+0x4c>
 800651e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006520:	f000 fb73 	bl	8006c0a <__retarget_lock_acquire_recursive>
 8006524:	0021      	movs	r1, r4
 8006526:	0030      	movs	r0, r6
 8006528:	f000 fa2c 	bl	8006984 <_fflush_r>
 800652c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800652e:	2900      	cmp	r1, #0
 8006530:	d008      	beq.n	8006544 <setvbuf+0x6c>
 8006532:	0023      	movs	r3, r4
 8006534:	3344      	adds	r3, #68	; 0x44
 8006536:	4299      	cmp	r1, r3
 8006538:	d002      	beq.n	8006540 <setvbuf+0x68>
 800653a:	0030      	movs	r0, r6
 800653c:	f000 fbde 	bl	8006cfc <_free_r>
 8006540:	2300      	movs	r3, #0
 8006542:	6363      	str	r3, [r4, #52]	; 0x34
 8006544:	2300      	movs	r3, #0
 8006546:	61a3      	str	r3, [r4, #24]
 8006548:	6063      	str	r3, [r4, #4]
 800654a:	89a3      	ldrh	r3, [r4, #12]
 800654c:	061b      	lsls	r3, r3, #24
 800654e:	d503      	bpl.n	8006558 <setvbuf+0x80>
 8006550:	0030      	movs	r0, r6
 8006552:	6921      	ldr	r1, [r4, #16]
 8006554:	f000 fbd2 	bl	8006cfc <_free_r>
 8006558:	89a3      	ldrh	r3, [r4, #12]
 800655a:	4a40      	ldr	r2, [pc, #256]	; (800665c <setvbuf+0x184>)
 800655c:	4013      	ands	r3, r2
 800655e:	81a3      	strh	r3, [r4, #12]
 8006560:	9b00      	ldr	r3, [sp, #0]
 8006562:	2b02      	cmp	r3, #2
 8006564:	d100      	bne.n	8006568 <setvbuf+0x90>
 8006566:	e069      	b.n	800663c <setvbuf+0x164>
 8006568:	ab03      	add	r3, sp, #12
 800656a:	0021      	movs	r1, r4
 800656c:	0030      	movs	r0, r6
 800656e:	aa02      	add	r2, sp, #8
 8006570:	f000 fb4e 	bl	8006c10 <__swhatbuf_r>
 8006574:	89a3      	ldrh	r3, [r4, #12]
 8006576:	4303      	orrs	r3, r0
 8006578:	81a3      	strh	r3, [r4, #12]
 800657a:	2d00      	cmp	r5, #0
 800657c:	d12b      	bne.n	80065d6 <setvbuf+0xfe>
 800657e:	9d02      	ldr	r5, [sp, #8]
 8006580:	0028      	movs	r0, r5
 8006582:	f000 fbb1 	bl	8006ce8 <malloc>
 8006586:	1e07      	subs	r7, r0, #0
 8006588:	d153      	bne.n	8006632 <setvbuf+0x15a>
 800658a:	9b02      	ldr	r3, [sp, #8]
 800658c:	9301      	str	r3, [sp, #4]
 800658e:	42ab      	cmp	r3, r5
 8006590:	d149      	bne.n	8006626 <setvbuf+0x14e>
 8006592:	2501      	movs	r5, #1
 8006594:	426d      	negs	r5, r5
 8006596:	2302      	movs	r3, #2
 8006598:	89a2      	ldrh	r2, [r4, #12]
 800659a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800659c:	4313      	orrs	r3, r2
 800659e:	2200      	movs	r2, #0
 80065a0:	60a2      	str	r2, [r4, #8]
 80065a2:	0022      	movs	r2, r4
 80065a4:	3247      	adds	r2, #71	; 0x47
 80065a6:	6022      	str	r2, [r4, #0]
 80065a8:	6122      	str	r2, [r4, #16]
 80065aa:	2201      	movs	r2, #1
 80065ac:	b21b      	sxth	r3, r3
 80065ae:	81a3      	strh	r3, [r4, #12]
 80065b0:	6162      	str	r2, [r4, #20]
 80065b2:	4211      	tst	r1, r2
 80065b4:	d134      	bne.n	8006620 <setvbuf+0x148>
 80065b6:	059b      	lsls	r3, r3, #22
 80065b8:	d432      	bmi.n	8006620 <setvbuf+0x148>
 80065ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065bc:	f000 fb26 	bl	8006c0c <__retarget_lock_release_recursive>
 80065c0:	e02e      	b.n	8006620 <setvbuf+0x148>
 80065c2:	4b27      	ldr	r3, [pc, #156]	; (8006660 <setvbuf+0x188>)
 80065c4:	429c      	cmp	r4, r3
 80065c6:	d101      	bne.n	80065cc <setvbuf+0xf4>
 80065c8:	68b4      	ldr	r4, [r6, #8]
 80065ca:	e799      	b.n	8006500 <setvbuf+0x28>
 80065cc:	4b25      	ldr	r3, [pc, #148]	; (8006664 <setvbuf+0x18c>)
 80065ce:	429c      	cmp	r4, r3
 80065d0:	d196      	bne.n	8006500 <setvbuf+0x28>
 80065d2:	68f4      	ldr	r4, [r6, #12]
 80065d4:	e794      	b.n	8006500 <setvbuf+0x28>
 80065d6:	2f00      	cmp	r7, #0
 80065d8:	d0d2      	beq.n	8006580 <setvbuf+0xa8>
 80065da:	69b3      	ldr	r3, [r6, #24]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d102      	bne.n	80065e6 <setvbuf+0x10e>
 80065e0:	0030      	movs	r0, r6
 80065e2:	f000 fa71 	bl	8006ac8 <__sinit>
 80065e6:	9b00      	ldr	r3, [sp, #0]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d102      	bne.n	80065f2 <setvbuf+0x11a>
 80065ec:	89a2      	ldrh	r2, [r4, #12]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	81a3      	strh	r3, [r4, #12]
 80065f2:	89a2      	ldrh	r2, [r4, #12]
 80065f4:	2308      	movs	r3, #8
 80065f6:	0011      	movs	r1, r2
 80065f8:	6027      	str	r7, [r4, #0]
 80065fa:	6127      	str	r7, [r4, #16]
 80065fc:	6165      	str	r5, [r4, #20]
 80065fe:	4019      	ands	r1, r3
 8006600:	421a      	tst	r2, r3
 8006602:	d01f      	beq.n	8006644 <setvbuf+0x16c>
 8006604:	07d3      	lsls	r3, r2, #31
 8006606:	d51b      	bpl.n	8006640 <setvbuf+0x168>
 8006608:	2300      	movs	r3, #0
 800660a:	426d      	negs	r5, r5
 800660c:	60a3      	str	r3, [r4, #8]
 800660e:	61a5      	str	r5, [r4, #24]
 8006610:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006612:	2301      	movs	r3, #1
 8006614:	000d      	movs	r5, r1
 8006616:	401d      	ands	r5, r3
 8006618:	4219      	tst	r1, r3
 800661a:	d118      	bne.n	800664e <setvbuf+0x176>
 800661c:	0593      	lsls	r3, r2, #22
 800661e:	d5cc      	bpl.n	80065ba <setvbuf+0xe2>
 8006620:	0028      	movs	r0, r5
 8006622:	b005      	add	sp, #20
 8006624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006626:	9801      	ldr	r0, [sp, #4]
 8006628:	f000 fb5e 	bl	8006ce8 <malloc>
 800662c:	9d01      	ldr	r5, [sp, #4]
 800662e:	1e07      	subs	r7, r0, #0
 8006630:	d0af      	beq.n	8006592 <setvbuf+0xba>
 8006632:	2380      	movs	r3, #128	; 0x80
 8006634:	89a2      	ldrh	r2, [r4, #12]
 8006636:	4313      	orrs	r3, r2
 8006638:	81a3      	strh	r3, [r4, #12]
 800663a:	e7ce      	b.n	80065da <setvbuf+0x102>
 800663c:	2500      	movs	r5, #0
 800663e:	e7aa      	b.n	8006596 <setvbuf+0xbe>
 8006640:	60a5      	str	r5, [r4, #8]
 8006642:	e7e5      	b.n	8006610 <setvbuf+0x138>
 8006644:	60a1      	str	r1, [r4, #8]
 8006646:	e7e3      	b.n	8006610 <setvbuf+0x138>
 8006648:	2501      	movs	r5, #1
 800664a:	426d      	negs	r5, r5
 800664c:	e7e8      	b.n	8006620 <setvbuf+0x148>
 800664e:	2500      	movs	r5, #0
 8006650:	e7e6      	b.n	8006620 <setvbuf+0x148>
 8006652:	46c0      	nop			; (mov r8, r8)
 8006654:	2000040c 	.word	0x2000040c
 8006658:	08008110 	.word	0x08008110
 800665c:	fffff35c 	.word	0xfffff35c
 8006660:	08008130 	.word	0x08008130
 8006664:	080080f0 	.word	0x080080f0

08006668 <sniprintf>:
 8006668:	b40c      	push	{r2, r3}
 800666a:	b530      	push	{r4, r5, lr}
 800666c:	4b17      	ldr	r3, [pc, #92]	; (80066cc <sniprintf+0x64>)
 800666e:	000c      	movs	r4, r1
 8006670:	681d      	ldr	r5, [r3, #0]
 8006672:	b09d      	sub	sp, #116	; 0x74
 8006674:	2900      	cmp	r1, #0
 8006676:	da08      	bge.n	800668a <sniprintf+0x22>
 8006678:	238b      	movs	r3, #139	; 0x8b
 800667a:	2001      	movs	r0, #1
 800667c:	602b      	str	r3, [r5, #0]
 800667e:	4240      	negs	r0, r0
 8006680:	b01d      	add	sp, #116	; 0x74
 8006682:	bc30      	pop	{r4, r5}
 8006684:	bc08      	pop	{r3}
 8006686:	b002      	add	sp, #8
 8006688:	4718      	bx	r3
 800668a:	2382      	movs	r3, #130	; 0x82
 800668c:	466a      	mov	r2, sp
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	8293      	strh	r3, [r2, #20]
 8006692:	2300      	movs	r3, #0
 8006694:	9002      	str	r0, [sp, #8]
 8006696:	9006      	str	r0, [sp, #24]
 8006698:	4299      	cmp	r1, r3
 800669a:	d000      	beq.n	800669e <sniprintf+0x36>
 800669c:	1e4b      	subs	r3, r1, #1
 800669e:	9304      	str	r3, [sp, #16]
 80066a0:	9307      	str	r3, [sp, #28]
 80066a2:	2301      	movs	r3, #1
 80066a4:	466a      	mov	r2, sp
 80066a6:	425b      	negs	r3, r3
 80066a8:	82d3      	strh	r3, [r2, #22]
 80066aa:	0028      	movs	r0, r5
 80066ac:	ab21      	add	r3, sp, #132	; 0x84
 80066ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80066b0:	a902      	add	r1, sp, #8
 80066b2:	9301      	str	r3, [sp, #4]
 80066b4:	f000 fc66 	bl	8006f84 <_svfiprintf_r>
 80066b8:	1c43      	adds	r3, r0, #1
 80066ba:	da01      	bge.n	80066c0 <sniprintf+0x58>
 80066bc:	238b      	movs	r3, #139	; 0x8b
 80066be:	602b      	str	r3, [r5, #0]
 80066c0:	2c00      	cmp	r4, #0
 80066c2:	d0dd      	beq.n	8006680 <sniprintf+0x18>
 80066c4:	2300      	movs	r3, #0
 80066c6:	9a02      	ldr	r2, [sp, #8]
 80066c8:	7013      	strb	r3, [r2, #0]
 80066ca:	e7d9      	b.n	8006680 <sniprintf+0x18>
 80066cc:	2000040c 	.word	0x2000040c

080066d0 <__swbuf_r>:
 80066d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d2:	0005      	movs	r5, r0
 80066d4:	000e      	movs	r6, r1
 80066d6:	0014      	movs	r4, r2
 80066d8:	2800      	cmp	r0, #0
 80066da:	d004      	beq.n	80066e6 <__swbuf_r+0x16>
 80066dc:	6983      	ldr	r3, [r0, #24]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <__swbuf_r+0x16>
 80066e2:	f000 f9f1 	bl	8006ac8 <__sinit>
 80066e6:	4b22      	ldr	r3, [pc, #136]	; (8006770 <__swbuf_r+0xa0>)
 80066e8:	429c      	cmp	r4, r3
 80066ea:	d12e      	bne.n	800674a <__swbuf_r+0x7a>
 80066ec:	686c      	ldr	r4, [r5, #4]
 80066ee:	69a3      	ldr	r3, [r4, #24]
 80066f0:	60a3      	str	r3, [r4, #8]
 80066f2:	89a3      	ldrh	r3, [r4, #12]
 80066f4:	071b      	lsls	r3, r3, #28
 80066f6:	d532      	bpl.n	800675e <__swbuf_r+0x8e>
 80066f8:	6923      	ldr	r3, [r4, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d02f      	beq.n	800675e <__swbuf_r+0x8e>
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	6922      	ldr	r2, [r4, #16]
 8006702:	b2f7      	uxtb	r7, r6
 8006704:	1a98      	subs	r0, r3, r2
 8006706:	6963      	ldr	r3, [r4, #20]
 8006708:	b2f6      	uxtb	r6, r6
 800670a:	4283      	cmp	r3, r0
 800670c:	dc05      	bgt.n	800671a <__swbuf_r+0x4a>
 800670e:	0021      	movs	r1, r4
 8006710:	0028      	movs	r0, r5
 8006712:	f000 f937 	bl	8006984 <_fflush_r>
 8006716:	2800      	cmp	r0, #0
 8006718:	d127      	bne.n	800676a <__swbuf_r+0x9a>
 800671a:	68a3      	ldr	r3, [r4, #8]
 800671c:	3001      	adds	r0, #1
 800671e:	3b01      	subs	r3, #1
 8006720:	60a3      	str	r3, [r4, #8]
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	1c5a      	adds	r2, r3, #1
 8006726:	6022      	str	r2, [r4, #0]
 8006728:	701f      	strb	r7, [r3, #0]
 800672a:	6963      	ldr	r3, [r4, #20]
 800672c:	4283      	cmp	r3, r0
 800672e:	d004      	beq.n	800673a <__swbuf_r+0x6a>
 8006730:	89a3      	ldrh	r3, [r4, #12]
 8006732:	07db      	lsls	r3, r3, #31
 8006734:	d507      	bpl.n	8006746 <__swbuf_r+0x76>
 8006736:	2e0a      	cmp	r6, #10
 8006738:	d105      	bne.n	8006746 <__swbuf_r+0x76>
 800673a:	0021      	movs	r1, r4
 800673c:	0028      	movs	r0, r5
 800673e:	f000 f921 	bl	8006984 <_fflush_r>
 8006742:	2800      	cmp	r0, #0
 8006744:	d111      	bne.n	800676a <__swbuf_r+0x9a>
 8006746:	0030      	movs	r0, r6
 8006748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800674a:	4b0a      	ldr	r3, [pc, #40]	; (8006774 <__swbuf_r+0xa4>)
 800674c:	429c      	cmp	r4, r3
 800674e:	d101      	bne.n	8006754 <__swbuf_r+0x84>
 8006750:	68ac      	ldr	r4, [r5, #8]
 8006752:	e7cc      	b.n	80066ee <__swbuf_r+0x1e>
 8006754:	4b08      	ldr	r3, [pc, #32]	; (8006778 <__swbuf_r+0xa8>)
 8006756:	429c      	cmp	r4, r3
 8006758:	d1c9      	bne.n	80066ee <__swbuf_r+0x1e>
 800675a:	68ec      	ldr	r4, [r5, #12]
 800675c:	e7c7      	b.n	80066ee <__swbuf_r+0x1e>
 800675e:	0021      	movs	r1, r4
 8006760:	0028      	movs	r0, r5
 8006762:	f000 f80b 	bl	800677c <__swsetup_r>
 8006766:	2800      	cmp	r0, #0
 8006768:	d0c9      	beq.n	80066fe <__swbuf_r+0x2e>
 800676a:	2601      	movs	r6, #1
 800676c:	4276      	negs	r6, r6
 800676e:	e7ea      	b.n	8006746 <__swbuf_r+0x76>
 8006770:	08008110 	.word	0x08008110
 8006774:	08008130 	.word	0x08008130
 8006778:	080080f0 	.word	0x080080f0

0800677c <__swsetup_r>:
 800677c:	4b37      	ldr	r3, [pc, #220]	; (800685c <__swsetup_r+0xe0>)
 800677e:	b570      	push	{r4, r5, r6, lr}
 8006780:	681d      	ldr	r5, [r3, #0]
 8006782:	0006      	movs	r6, r0
 8006784:	000c      	movs	r4, r1
 8006786:	2d00      	cmp	r5, #0
 8006788:	d005      	beq.n	8006796 <__swsetup_r+0x1a>
 800678a:	69ab      	ldr	r3, [r5, #24]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d102      	bne.n	8006796 <__swsetup_r+0x1a>
 8006790:	0028      	movs	r0, r5
 8006792:	f000 f999 	bl	8006ac8 <__sinit>
 8006796:	4b32      	ldr	r3, [pc, #200]	; (8006860 <__swsetup_r+0xe4>)
 8006798:	429c      	cmp	r4, r3
 800679a:	d10f      	bne.n	80067bc <__swsetup_r+0x40>
 800679c:	686c      	ldr	r4, [r5, #4]
 800679e:	230c      	movs	r3, #12
 80067a0:	5ee2      	ldrsh	r2, [r4, r3]
 80067a2:	b293      	uxth	r3, r2
 80067a4:	0711      	lsls	r1, r2, #28
 80067a6:	d42d      	bmi.n	8006804 <__swsetup_r+0x88>
 80067a8:	06d9      	lsls	r1, r3, #27
 80067aa:	d411      	bmi.n	80067d0 <__swsetup_r+0x54>
 80067ac:	2309      	movs	r3, #9
 80067ae:	2001      	movs	r0, #1
 80067b0:	6033      	str	r3, [r6, #0]
 80067b2:	3337      	adds	r3, #55	; 0x37
 80067b4:	4313      	orrs	r3, r2
 80067b6:	81a3      	strh	r3, [r4, #12]
 80067b8:	4240      	negs	r0, r0
 80067ba:	bd70      	pop	{r4, r5, r6, pc}
 80067bc:	4b29      	ldr	r3, [pc, #164]	; (8006864 <__swsetup_r+0xe8>)
 80067be:	429c      	cmp	r4, r3
 80067c0:	d101      	bne.n	80067c6 <__swsetup_r+0x4a>
 80067c2:	68ac      	ldr	r4, [r5, #8]
 80067c4:	e7eb      	b.n	800679e <__swsetup_r+0x22>
 80067c6:	4b28      	ldr	r3, [pc, #160]	; (8006868 <__swsetup_r+0xec>)
 80067c8:	429c      	cmp	r4, r3
 80067ca:	d1e8      	bne.n	800679e <__swsetup_r+0x22>
 80067cc:	68ec      	ldr	r4, [r5, #12]
 80067ce:	e7e6      	b.n	800679e <__swsetup_r+0x22>
 80067d0:	075b      	lsls	r3, r3, #29
 80067d2:	d513      	bpl.n	80067fc <__swsetup_r+0x80>
 80067d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067d6:	2900      	cmp	r1, #0
 80067d8:	d008      	beq.n	80067ec <__swsetup_r+0x70>
 80067da:	0023      	movs	r3, r4
 80067dc:	3344      	adds	r3, #68	; 0x44
 80067de:	4299      	cmp	r1, r3
 80067e0:	d002      	beq.n	80067e8 <__swsetup_r+0x6c>
 80067e2:	0030      	movs	r0, r6
 80067e4:	f000 fa8a 	bl	8006cfc <_free_r>
 80067e8:	2300      	movs	r3, #0
 80067ea:	6363      	str	r3, [r4, #52]	; 0x34
 80067ec:	2224      	movs	r2, #36	; 0x24
 80067ee:	89a3      	ldrh	r3, [r4, #12]
 80067f0:	4393      	bics	r3, r2
 80067f2:	81a3      	strh	r3, [r4, #12]
 80067f4:	2300      	movs	r3, #0
 80067f6:	6063      	str	r3, [r4, #4]
 80067f8:	6923      	ldr	r3, [r4, #16]
 80067fa:	6023      	str	r3, [r4, #0]
 80067fc:	2308      	movs	r3, #8
 80067fe:	89a2      	ldrh	r2, [r4, #12]
 8006800:	4313      	orrs	r3, r2
 8006802:	81a3      	strh	r3, [r4, #12]
 8006804:	6923      	ldr	r3, [r4, #16]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10b      	bne.n	8006822 <__swsetup_r+0xa6>
 800680a:	21a0      	movs	r1, #160	; 0xa0
 800680c:	2280      	movs	r2, #128	; 0x80
 800680e:	89a3      	ldrh	r3, [r4, #12]
 8006810:	0089      	lsls	r1, r1, #2
 8006812:	0092      	lsls	r2, r2, #2
 8006814:	400b      	ands	r3, r1
 8006816:	4293      	cmp	r3, r2
 8006818:	d003      	beq.n	8006822 <__swsetup_r+0xa6>
 800681a:	0021      	movs	r1, r4
 800681c:	0030      	movs	r0, r6
 800681e:	f000 fa1f 	bl	8006c60 <__smakebuf_r>
 8006822:	220c      	movs	r2, #12
 8006824:	5ea3      	ldrsh	r3, [r4, r2]
 8006826:	2001      	movs	r0, #1
 8006828:	001a      	movs	r2, r3
 800682a:	b299      	uxth	r1, r3
 800682c:	4002      	ands	r2, r0
 800682e:	4203      	tst	r3, r0
 8006830:	d00f      	beq.n	8006852 <__swsetup_r+0xd6>
 8006832:	2200      	movs	r2, #0
 8006834:	60a2      	str	r2, [r4, #8]
 8006836:	6962      	ldr	r2, [r4, #20]
 8006838:	4252      	negs	r2, r2
 800683a:	61a2      	str	r2, [r4, #24]
 800683c:	2000      	movs	r0, #0
 800683e:	6922      	ldr	r2, [r4, #16]
 8006840:	4282      	cmp	r2, r0
 8006842:	d1ba      	bne.n	80067ba <__swsetup_r+0x3e>
 8006844:	060a      	lsls	r2, r1, #24
 8006846:	d5b8      	bpl.n	80067ba <__swsetup_r+0x3e>
 8006848:	2240      	movs	r2, #64	; 0x40
 800684a:	4313      	orrs	r3, r2
 800684c:	81a3      	strh	r3, [r4, #12]
 800684e:	3801      	subs	r0, #1
 8006850:	e7b3      	b.n	80067ba <__swsetup_r+0x3e>
 8006852:	0788      	lsls	r0, r1, #30
 8006854:	d400      	bmi.n	8006858 <__swsetup_r+0xdc>
 8006856:	6962      	ldr	r2, [r4, #20]
 8006858:	60a2      	str	r2, [r4, #8]
 800685a:	e7ef      	b.n	800683c <__swsetup_r+0xc0>
 800685c:	2000040c 	.word	0x2000040c
 8006860:	08008110 	.word	0x08008110
 8006864:	08008130 	.word	0x08008130
 8006868:	080080f0 	.word	0x080080f0

0800686c <__sflush_r>:
 800686c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800686e:	898b      	ldrh	r3, [r1, #12]
 8006870:	0005      	movs	r5, r0
 8006872:	000c      	movs	r4, r1
 8006874:	071a      	lsls	r2, r3, #28
 8006876:	d45f      	bmi.n	8006938 <__sflush_r+0xcc>
 8006878:	684a      	ldr	r2, [r1, #4]
 800687a:	2a00      	cmp	r2, #0
 800687c:	dc04      	bgt.n	8006888 <__sflush_r+0x1c>
 800687e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006880:	2a00      	cmp	r2, #0
 8006882:	dc01      	bgt.n	8006888 <__sflush_r+0x1c>
 8006884:	2000      	movs	r0, #0
 8006886:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006888:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800688a:	2f00      	cmp	r7, #0
 800688c:	d0fa      	beq.n	8006884 <__sflush_r+0x18>
 800688e:	2200      	movs	r2, #0
 8006890:	2180      	movs	r1, #128	; 0x80
 8006892:	682e      	ldr	r6, [r5, #0]
 8006894:	602a      	str	r2, [r5, #0]
 8006896:	001a      	movs	r2, r3
 8006898:	0149      	lsls	r1, r1, #5
 800689a:	400a      	ands	r2, r1
 800689c:	420b      	tst	r3, r1
 800689e:	d034      	beq.n	800690a <__sflush_r+0x9e>
 80068a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068a2:	89a3      	ldrh	r3, [r4, #12]
 80068a4:	075b      	lsls	r3, r3, #29
 80068a6:	d506      	bpl.n	80068b6 <__sflush_r+0x4a>
 80068a8:	6863      	ldr	r3, [r4, #4]
 80068aa:	1ac0      	subs	r0, r0, r3
 80068ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <__sflush_r+0x4a>
 80068b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068b4:	1ac0      	subs	r0, r0, r3
 80068b6:	0002      	movs	r2, r0
 80068b8:	6a21      	ldr	r1, [r4, #32]
 80068ba:	2300      	movs	r3, #0
 80068bc:	0028      	movs	r0, r5
 80068be:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80068c0:	47b8      	blx	r7
 80068c2:	89a1      	ldrh	r1, [r4, #12]
 80068c4:	1c43      	adds	r3, r0, #1
 80068c6:	d106      	bne.n	80068d6 <__sflush_r+0x6a>
 80068c8:	682b      	ldr	r3, [r5, #0]
 80068ca:	2b1d      	cmp	r3, #29
 80068cc:	d831      	bhi.n	8006932 <__sflush_r+0xc6>
 80068ce:	4a2c      	ldr	r2, [pc, #176]	; (8006980 <__sflush_r+0x114>)
 80068d0:	40da      	lsrs	r2, r3
 80068d2:	07d3      	lsls	r3, r2, #31
 80068d4:	d52d      	bpl.n	8006932 <__sflush_r+0xc6>
 80068d6:	2300      	movs	r3, #0
 80068d8:	6063      	str	r3, [r4, #4]
 80068da:	6923      	ldr	r3, [r4, #16]
 80068dc:	6023      	str	r3, [r4, #0]
 80068de:	04cb      	lsls	r3, r1, #19
 80068e0:	d505      	bpl.n	80068ee <__sflush_r+0x82>
 80068e2:	1c43      	adds	r3, r0, #1
 80068e4:	d102      	bne.n	80068ec <__sflush_r+0x80>
 80068e6:	682b      	ldr	r3, [r5, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d100      	bne.n	80068ee <__sflush_r+0x82>
 80068ec:	6560      	str	r0, [r4, #84]	; 0x54
 80068ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068f0:	602e      	str	r6, [r5, #0]
 80068f2:	2900      	cmp	r1, #0
 80068f4:	d0c6      	beq.n	8006884 <__sflush_r+0x18>
 80068f6:	0023      	movs	r3, r4
 80068f8:	3344      	adds	r3, #68	; 0x44
 80068fa:	4299      	cmp	r1, r3
 80068fc:	d002      	beq.n	8006904 <__sflush_r+0x98>
 80068fe:	0028      	movs	r0, r5
 8006900:	f000 f9fc 	bl	8006cfc <_free_r>
 8006904:	2000      	movs	r0, #0
 8006906:	6360      	str	r0, [r4, #52]	; 0x34
 8006908:	e7bd      	b.n	8006886 <__sflush_r+0x1a>
 800690a:	2301      	movs	r3, #1
 800690c:	0028      	movs	r0, r5
 800690e:	6a21      	ldr	r1, [r4, #32]
 8006910:	47b8      	blx	r7
 8006912:	1c43      	adds	r3, r0, #1
 8006914:	d1c5      	bne.n	80068a2 <__sflush_r+0x36>
 8006916:	682b      	ldr	r3, [r5, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d0c2      	beq.n	80068a2 <__sflush_r+0x36>
 800691c:	2b1d      	cmp	r3, #29
 800691e:	d001      	beq.n	8006924 <__sflush_r+0xb8>
 8006920:	2b16      	cmp	r3, #22
 8006922:	d101      	bne.n	8006928 <__sflush_r+0xbc>
 8006924:	602e      	str	r6, [r5, #0]
 8006926:	e7ad      	b.n	8006884 <__sflush_r+0x18>
 8006928:	2340      	movs	r3, #64	; 0x40
 800692a:	89a2      	ldrh	r2, [r4, #12]
 800692c:	4313      	orrs	r3, r2
 800692e:	81a3      	strh	r3, [r4, #12]
 8006930:	e7a9      	b.n	8006886 <__sflush_r+0x1a>
 8006932:	2340      	movs	r3, #64	; 0x40
 8006934:	430b      	orrs	r3, r1
 8006936:	e7fa      	b.n	800692e <__sflush_r+0xc2>
 8006938:	690f      	ldr	r7, [r1, #16]
 800693a:	2f00      	cmp	r7, #0
 800693c:	d0a2      	beq.n	8006884 <__sflush_r+0x18>
 800693e:	680a      	ldr	r2, [r1, #0]
 8006940:	600f      	str	r7, [r1, #0]
 8006942:	1bd2      	subs	r2, r2, r7
 8006944:	9201      	str	r2, [sp, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	079b      	lsls	r3, r3, #30
 800694a:	d100      	bne.n	800694e <__sflush_r+0xe2>
 800694c:	694a      	ldr	r2, [r1, #20]
 800694e:	60a2      	str	r2, [r4, #8]
 8006950:	9b01      	ldr	r3, [sp, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	dc00      	bgt.n	8006958 <__sflush_r+0xec>
 8006956:	e795      	b.n	8006884 <__sflush_r+0x18>
 8006958:	003a      	movs	r2, r7
 800695a:	0028      	movs	r0, r5
 800695c:	9b01      	ldr	r3, [sp, #4]
 800695e:	6a21      	ldr	r1, [r4, #32]
 8006960:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006962:	47b0      	blx	r6
 8006964:	2800      	cmp	r0, #0
 8006966:	dc06      	bgt.n	8006976 <__sflush_r+0x10a>
 8006968:	2340      	movs	r3, #64	; 0x40
 800696a:	2001      	movs	r0, #1
 800696c:	89a2      	ldrh	r2, [r4, #12]
 800696e:	4240      	negs	r0, r0
 8006970:	4313      	orrs	r3, r2
 8006972:	81a3      	strh	r3, [r4, #12]
 8006974:	e787      	b.n	8006886 <__sflush_r+0x1a>
 8006976:	9b01      	ldr	r3, [sp, #4]
 8006978:	183f      	adds	r7, r7, r0
 800697a:	1a1b      	subs	r3, r3, r0
 800697c:	9301      	str	r3, [sp, #4]
 800697e:	e7e7      	b.n	8006950 <__sflush_r+0xe4>
 8006980:	20400001 	.word	0x20400001

08006984 <_fflush_r>:
 8006984:	690b      	ldr	r3, [r1, #16]
 8006986:	b570      	push	{r4, r5, r6, lr}
 8006988:	0005      	movs	r5, r0
 800698a:	000c      	movs	r4, r1
 800698c:	2b00      	cmp	r3, #0
 800698e:	d102      	bne.n	8006996 <_fflush_r+0x12>
 8006990:	2500      	movs	r5, #0
 8006992:	0028      	movs	r0, r5
 8006994:	bd70      	pop	{r4, r5, r6, pc}
 8006996:	2800      	cmp	r0, #0
 8006998:	d004      	beq.n	80069a4 <_fflush_r+0x20>
 800699a:	6983      	ldr	r3, [r0, #24]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <_fflush_r+0x20>
 80069a0:	f000 f892 	bl	8006ac8 <__sinit>
 80069a4:	4b14      	ldr	r3, [pc, #80]	; (80069f8 <_fflush_r+0x74>)
 80069a6:	429c      	cmp	r4, r3
 80069a8:	d11b      	bne.n	80069e2 <_fflush_r+0x5e>
 80069aa:	686c      	ldr	r4, [r5, #4]
 80069ac:	220c      	movs	r2, #12
 80069ae:	5ea3      	ldrsh	r3, [r4, r2]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d0ed      	beq.n	8006990 <_fflush_r+0xc>
 80069b4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80069b6:	07d2      	lsls	r2, r2, #31
 80069b8:	d404      	bmi.n	80069c4 <_fflush_r+0x40>
 80069ba:	059b      	lsls	r3, r3, #22
 80069bc:	d402      	bmi.n	80069c4 <_fflush_r+0x40>
 80069be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069c0:	f000 f923 	bl	8006c0a <__retarget_lock_acquire_recursive>
 80069c4:	0028      	movs	r0, r5
 80069c6:	0021      	movs	r1, r4
 80069c8:	f7ff ff50 	bl	800686c <__sflush_r>
 80069cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069ce:	0005      	movs	r5, r0
 80069d0:	07db      	lsls	r3, r3, #31
 80069d2:	d4de      	bmi.n	8006992 <_fflush_r+0xe>
 80069d4:	89a3      	ldrh	r3, [r4, #12]
 80069d6:	059b      	lsls	r3, r3, #22
 80069d8:	d4db      	bmi.n	8006992 <_fflush_r+0xe>
 80069da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069dc:	f000 f916 	bl	8006c0c <__retarget_lock_release_recursive>
 80069e0:	e7d7      	b.n	8006992 <_fflush_r+0xe>
 80069e2:	4b06      	ldr	r3, [pc, #24]	; (80069fc <_fflush_r+0x78>)
 80069e4:	429c      	cmp	r4, r3
 80069e6:	d101      	bne.n	80069ec <_fflush_r+0x68>
 80069e8:	68ac      	ldr	r4, [r5, #8]
 80069ea:	e7df      	b.n	80069ac <_fflush_r+0x28>
 80069ec:	4b04      	ldr	r3, [pc, #16]	; (8006a00 <_fflush_r+0x7c>)
 80069ee:	429c      	cmp	r4, r3
 80069f0:	d1dc      	bne.n	80069ac <_fflush_r+0x28>
 80069f2:	68ec      	ldr	r4, [r5, #12]
 80069f4:	e7da      	b.n	80069ac <_fflush_r+0x28>
 80069f6:	46c0      	nop			; (mov r8, r8)
 80069f8:	08008110 	.word	0x08008110
 80069fc:	08008130 	.word	0x08008130
 8006a00:	080080f0 	.word	0x080080f0

08006a04 <std>:
 8006a04:	2300      	movs	r3, #0
 8006a06:	b510      	push	{r4, lr}
 8006a08:	0004      	movs	r4, r0
 8006a0a:	6003      	str	r3, [r0, #0]
 8006a0c:	6043      	str	r3, [r0, #4]
 8006a0e:	6083      	str	r3, [r0, #8]
 8006a10:	8181      	strh	r1, [r0, #12]
 8006a12:	6643      	str	r3, [r0, #100]	; 0x64
 8006a14:	0019      	movs	r1, r3
 8006a16:	81c2      	strh	r2, [r0, #14]
 8006a18:	6103      	str	r3, [r0, #16]
 8006a1a:	6143      	str	r3, [r0, #20]
 8006a1c:	6183      	str	r3, [r0, #24]
 8006a1e:	2208      	movs	r2, #8
 8006a20:	305c      	adds	r0, #92	; 0x5c
 8006a22:	f7ff fcba 	bl	800639a <memset>
 8006a26:	4b05      	ldr	r3, [pc, #20]	; (8006a3c <std+0x38>)
 8006a28:	6224      	str	r4, [r4, #32]
 8006a2a:	6263      	str	r3, [r4, #36]	; 0x24
 8006a2c:	4b04      	ldr	r3, [pc, #16]	; (8006a40 <std+0x3c>)
 8006a2e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a30:	4b04      	ldr	r3, [pc, #16]	; (8006a44 <std+0x40>)
 8006a32:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a34:	4b04      	ldr	r3, [pc, #16]	; (8006a48 <std+0x44>)
 8006a36:	6323      	str	r3, [r4, #48]	; 0x30
 8006a38:	bd10      	pop	{r4, pc}
 8006a3a:	46c0      	nop			; (mov r8, r8)
 8006a3c:	08007771 	.word	0x08007771
 8006a40:	08007799 	.word	0x08007799
 8006a44:	080077d1 	.word	0x080077d1
 8006a48:	080077fd 	.word	0x080077fd

08006a4c <_cleanup_r>:
 8006a4c:	b510      	push	{r4, lr}
 8006a4e:	4902      	ldr	r1, [pc, #8]	; (8006a58 <_cleanup_r+0xc>)
 8006a50:	f000 f8ba 	bl	8006bc8 <_fwalk_reent>
 8006a54:	bd10      	pop	{r4, pc}
 8006a56:	46c0      	nop			; (mov r8, r8)
 8006a58:	08006985 	.word	0x08006985

08006a5c <__sfmoreglue>:
 8006a5c:	b570      	push	{r4, r5, r6, lr}
 8006a5e:	2568      	movs	r5, #104	; 0x68
 8006a60:	1e4a      	subs	r2, r1, #1
 8006a62:	4355      	muls	r5, r2
 8006a64:	000e      	movs	r6, r1
 8006a66:	0029      	movs	r1, r5
 8006a68:	3174      	adds	r1, #116	; 0x74
 8006a6a:	f000 f9b3 	bl	8006dd4 <_malloc_r>
 8006a6e:	1e04      	subs	r4, r0, #0
 8006a70:	d008      	beq.n	8006a84 <__sfmoreglue+0x28>
 8006a72:	2100      	movs	r1, #0
 8006a74:	002a      	movs	r2, r5
 8006a76:	6001      	str	r1, [r0, #0]
 8006a78:	6046      	str	r6, [r0, #4]
 8006a7a:	300c      	adds	r0, #12
 8006a7c:	60a0      	str	r0, [r4, #8]
 8006a7e:	3268      	adds	r2, #104	; 0x68
 8006a80:	f7ff fc8b 	bl	800639a <memset>
 8006a84:	0020      	movs	r0, r4
 8006a86:	bd70      	pop	{r4, r5, r6, pc}

08006a88 <__sfp_lock_acquire>:
 8006a88:	b510      	push	{r4, lr}
 8006a8a:	4802      	ldr	r0, [pc, #8]	; (8006a94 <__sfp_lock_acquire+0xc>)
 8006a8c:	f000 f8bd 	bl	8006c0a <__retarget_lock_acquire_recursive>
 8006a90:	bd10      	pop	{r4, pc}
 8006a92:	46c0      	nop			; (mov r8, r8)
 8006a94:	20000dad 	.word	0x20000dad

08006a98 <__sfp_lock_release>:
 8006a98:	b510      	push	{r4, lr}
 8006a9a:	4802      	ldr	r0, [pc, #8]	; (8006aa4 <__sfp_lock_release+0xc>)
 8006a9c:	f000 f8b6 	bl	8006c0c <__retarget_lock_release_recursive>
 8006aa0:	bd10      	pop	{r4, pc}
 8006aa2:	46c0      	nop			; (mov r8, r8)
 8006aa4:	20000dad 	.word	0x20000dad

08006aa8 <__sinit_lock_acquire>:
 8006aa8:	b510      	push	{r4, lr}
 8006aaa:	4802      	ldr	r0, [pc, #8]	; (8006ab4 <__sinit_lock_acquire+0xc>)
 8006aac:	f000 f8ad 	bl	8006c0a <__retarget_lock_acquire_recursive>
 8006ab0:	bd10      	pop	{r4, pc}
 8006ab2:	46c0      	nop			; (mov r8, r8)
 8006ab4:	20000dae 	.word	0x20000dae

08006ab8 <__sinit_lock_release>:
 8006ab8:	b510      	push	{r4, lr}
 8006aba:	4802      	ldr	r0, [pc, #8]	; (8006ac4 <__sinit_lock_release+0xc>)
 8006abc:	f000 f8a6 	bl	8006c0c <__retarget_lock_release_recursive>
 8006ac0:	bd10      	pop	{r4, pc}
 8006ac2:	46c0      	nop			; (mov r8, r8)
 8006ac4:	20000dae 	.word	0x20000dae

08006ac8 <__sinit>:
 8006ac8:	b513      	push	{r0, r1, r4, lr}
 8006aca:	0004      	movs	r4, r0
 8006acc:	f7ff ffec 	bl	8006aa8 <__sinit_lock_acquire>
 8006ad0:	69a3      	ldr	r3, [r4, #24]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <__sinit+0x14>
 8006ad6:	f7ff ffef 	bl	8006ab8 <__sinit_lock_release>
 8006ada:	bd13      	pop	{r0, r1, r4, pc}
 8006adc:	64a3      	str	r3, [r4, #72]	; 0x48
 8006ade:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006ae0:	6523      	str	r3, [r4, #80]	; 0x50
 8006ae2:	4b13      	ldr	r3, [pc, #76]	; (8006b30 <__sinit+0x68>)
 8006ae4:	4a13      	ldr	r2, [pc, #76]	; (8006b34 <__sinit+0x6c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006aea:	9301      	str	r3, [sp, #4]
 8006aec:	42a3      	cmp	r3, r4
 8006aee:	d101      	bne.n	8006af4 <__sinit+0x2c>
 8006af0:	2301      	movs	r3, #1
 8006af2:	61a3      	str	r3, [r4, #24]
 8006af4:	0020      	movs	r0, r4
 8006af6:	f000 f81f 	bl	8006b38 <__sfp>
 8006afa:	6060      	str	r0, [r4, #4]
 8006afc:	0020      	movs	r0, r4
 8006afe:	f000 f81b 	bl	8006b38 <__sfp>
 8006b02:	60a0      	str	r0, [r4, #8]
 8006b04:	0020      	movs	r0, r4
 8006b06:	f000 f817 	bl	8006b38 <__sfp>
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	2104      	movs	r1, #4
 8006b0e:	60e0      	str	r0, [r4, #12]
 8006b10:	6860      	ldr	r0, [r4, #4]
 8006b12:	f7ff ff77 	bl	8006a04 <std>
 8006b16:	2201      	movs	r2, #1
 8006b18:	2109      	movs	r1, #9
 8006b1a:	68a0      	ldr	r0, [r4, #8]
 8006b1c:	f7ff ff72 	bl	8006a04 <std>
 8006b20:	2202      	movs	r2, #2
 8006b22:	2112      	movs	r1, #18
 8006b24:	68e0      	ldr	r0, [r4, #12]
 8006b26:	f7ff ff6d 	bl	8006a04 <std>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	61a3      	str	r3, [r4, #24]
 8006b2e:	e7d2      	b.n	8006ad6 <__sinit+0xe>
 8006b30:	080080ec 	.word	0x080080ec
 8006b34:	08006a4d 	.word	0x08006a4d

08006b38 <__sfp>:
 8006b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3a:	0007      	movs	r7, r0
 8006b3c:	f7ff ffa4 	bl	8006a88 <__sfp_lock_acquire>
 8006b40:	4b1f      	ldr	r3, [pc, #124]	; (8006bc0 <__sfp+0x88>)
 8006b42:	681e      	ldr	r6, [r3, #0]
 8006b44:	69b3      	ldr	r3, [r6, #24]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d102      	bne.n	8006b50 <__sfp+0x18>
 8006b4a:	0030      	movs	r0, r6
 8006b4c:	f7ff ffbc 	bl	8006ac8 <__sinit>
 8006b50:	3648      	adds	r6, #72	; 0x48
 8006b52:	68b4      	ldr	r4, [r6, #8]
 8006b54:	6873      	ldr	r3, [r6, #4]
 8006b56:	3b01      	subs	r3, #1
 8006b58:	d504      	bpl.n	8006b64 <__sfp+0x2c>
 8006b5a:	6833      	ldr	r3, [r6, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d022      	beq.n	8006ba6 <__sfp+0x6e>
 8006b60:	6836      	ldr	r6, [r6, #0]
 8006b62:	e7f6      	b.n	8006b52 <__sfp+0x1a>
 8006b64:	220c      	movs	r2, #12
 8006b66:	5ea5      	ldrsh	r5, [r4, r2]
 8006b68:	2d00      	cmp	r5, #0
 8006b6a:	d11a      	bne.n	8006ba2 <__sfp+0x6a>
 8006b6c:	0020      	movs	r0, r4
 8006b6e:	4b15      	ldr	r3, [pc, #84]	; (8006bc4 <__sfp+0x8c>)
 8006b70:	3058      	adds	r0, #88	; 0x58
 8006b72:	60e3      	str	r3, [r4, #12]
 8006b74:	6665      	str	r5, [r4, #100]	; 0x64
 8006b76:	f000 f847 	bl	8006c08 <__retarget_lock_init_recursive>
 8006b7a:	f7ff ff8d 	bl	8006a98 <__sfp_lock_release>
 8006b7e:	0020      	movs	r0, r4
 8006b80:	2208      	movs	r2, #8
 8006b82:	0029      	movs	r1, r5
 8006b84:	6025      	str	r5, [r4, #0]
 8006b86:	60a5      	str	r5, [r4, #8]
 8006b88:	6065      	str	r5, [r4, #4]
 8006b8a:	6125      	str	r5, [r4, #16]
 8006b8c:	6165      	str	r5, [r4, #20]
 8006b8e:	61a5      	str	r5, [r4, #24]
 8006b90:	305c      	adds	r0, #92	; 0x5c
 8006b92:	f7ff fc02 	bl	800639a <memset>
 8006b96:	6365      	str	r5, [r4, #52]	; 0x34
 8006b98:	63a5      	str	r5, [r4, #56]	; 0x38
 8006b9a:	64a5      	str	r5, [r4, #72]	; 0x48
 8006b9c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006b9e:	0020      	movs	r0, r4
 8006ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ba2:	3468      	adds	r4, #104	; 0x68
 8006ba4:	e7d7      	b.n	8006b56 <__sfp+0x1e>
 8006ba6:	2104      	movs	r1, #4
 8006ba8:	0038      	movs	r0, r7
 8006baa:	f7ff ff57 	bl	8006a5c <__sfmoreglue>
 8006bae:	1e04      	subs	r4, r0, #0
 8006bb0:	6030      	str	r0, [r6, #0]
 8006bb2:	d1d5      	bne.n	8006b60 <__sfp+0x28>
 8006bb4:	f7ff ff70 	bl	8006a98 <__sfp_lock_release>
 8006bb8:	230c      	movs	r3, #12
 8006bba:	603b      	str	r3, [r7, #0]
 8006bbc:	e7ef      	b.n	8006b9e <__sfp+0x66>
 8006bbe:	46c0      	nop			; (mov r8, r8)
 8006bc0:	080080ec 	.word	0x080080ec
 8006bc4:	ffff0001 	.word	0xffff0001

08006bc8 <_fwalk_reent>:
 8006bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bca:	0004      	movs	r4, r0
 8006bcc:	0006      	movs	r6, r0
 8006bce:	2700      	movs	r7, #0
 8006bd0:	9101      	str	r1, [sp, #4]
 8006bd2:	3448      	adds	r4, #72	; 0x48
 8006bd4:	6863      	ldr	r3, [r4, #4]
 8006bd6:	68a5      	ldr	r5, [r4, #8]
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	9b00      	ldr	r3, [sp, #0]
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	d504      	bpl.n	8006bec <_fwalk_reent+0x24>
 8006be2:	6824      	ldr	r4, [r4, #0]
 8006be4:	2c00      	cmp	r4, #0
 8006be6:	d1f5      	bne.n	8006bd4 <_fwalk_reent+0xc>
 8006be8:	0038      	movs	r0, r7
 8006bea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006bec:	89ab      	ldrh	r3, [r5, #12]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d908      	bls.n	8006c04 <_fwalk_reent+0x3c>
 8006bf2:	220e      	movs	r2, #14
 8006bf4:	5eab      	ldrsh	r3, [r5, r2]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	d004      	beq.n	8006c04 <_fwalk_reent+0x3c>
 8006bfa:	0029      	movs	r1, r5
 8006bfc:	0030      	movs	r0, r6
 8006bfe:	9b01      	ldr	r3, [sp, #4]
 8006c00:	4798      	blx	r3
 8006c02:	4307      	orrs	r7, r0
 8006c04:	3568      	adds	r5, #104	; 0x68
 8006c06:	e7e8      	b.n	8006bda <_fwalk_reent+0x12>

08006c08 <__retarget_lock_init_recursive>:
 8006c08:	4770      	bx	lr

08006c0a <__retarget_lock_acquire_recursive>:
 8006c0a:	4770      	bx	lr

08006c0c <__retarget_lock_release_recursive>:
 8006c0c:	4770      	bx	lr
	...

08006c10 <__swhatbuf_r>:
 8006c10:	b570      	push	{r4, r5, r6, lr}
 8006c12:	000e      	movs	r6, r1
 8006c14:	001d      	movs	r5, r3
 8006c16:	230e      	movs	r3, #14
 8006c18:	5ec9      	ldrsh	r1, [r1, r3]
 8006c1a:	0014      	movs	r4, r2
 8006c1c:	b096      	sub	sp, #88	; 0x58
 8006c1e:	2900      	cmp	r1, #0
 8006c20:	da08      	bge.n	8006c34 <__swhatbuf_r+0x24>
 8006c22:	220c      	movs	r2, #12
 8006c24:	5eb3      	ldrsh	r3, [r6, r2]
 8006c26:	2200      	movs	r2, #0
 8006c28:	602a      	str	r2, [r5, #0]
 8006c2a:	061b      	lsls	r3, r3, #24
 8006c2c:	d411      	bmi.n	8006c52 <__swhatbuf_r+0x42>
 8006c2e:	2380      	movs	r3, #128	; 0x80
 8006c30:	00db      	lsls	r3, r3, #3
 8006c32:	e00f      	b.n	8006c54 <__swhatbuf_r+0x44>
 8006c34:	466a      	mov	r2, sp
 8006c36:	f000 fe0d 	bl	8007854 <_fstat_r>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	dbf1      	blt.n	8006c22 <__swhatbuf_r+0x12>
 8006c3e:	23f0      	movs	r3, #240	; 0xf0
 8006c40:	9901      	ldr	r1, [sp, #4]
 8006c42:	021b      	lsls	r3, r3, #8
 8006c44:	4019      	ands	r1, r3
 8006c46:	4b05      	ldr	r3, [pc, #20]	; (8006c5c <__swhatbuf_r+0x4c>)
 8006c48:	18c9      	adds	r1, r1, r3
 8006c4a:	424b      	negs	r3, r1
 8006c4c:	4159      	adcs	r1, r3
 8006c4e:	6029      	str	r1, [r5, #0]
 8006c50:	e7ed      	b.n	8006c2e <__swhatbuf_r+0x1e>
 8006c52:	2340      	movs	r3, #64	; 0x40
 8006c54:	2000      	movs	r0, #0
 8006c56:	6023      	str	r3, [r4, #0]
 8006c58:	b016      	add	sp, #88	; 0x58
 8006c5a:	bd70      	pop	{r4, r5, r6, pc}
 8006c5c:	ffffe000 	.word	0xffffe000

08006c60 <__smakebuf_r>:
 8006c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c62:	2602      	movs	r6, #2
 8006c64:	898b      	ldrh	r3, [r1, #12]
 8006c66:	0005      	movs	r5, r0
 8006c68:	000c      	movs	r4, r1
 8006c6a:	4233      	tst	r3, r6
 8006c6c:	d006      	beq.n	8006c7c <__smakebuf_r+0x1c>
 8006c6e:	0023      	movs	r3, r4
 8006c70:	3347      	adds	r3, #71	; 0x47
 8006c72:	6023      	str	r3, [r4, #0]
 8006c74:	6123      	str	r3, [r4, #16]
 8006c76:	2301      	movs	r3, #1
 8006c78:	6163      	str	r3, [r4, #20]
 8006c7a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006c7c:	466a      	mov	r2, sp
 8006c7e:	ab01      	add	r3, sp, #4
 8006c80:	f7ff ffc6 	bl	8006c10 <__swhatbuf_r>
 8006c84:	9900      	ldr	r1, [sp, #0]
 8006c86:	0007      	movs	r7, r0
 8006c88:	0028      	movs	r0, r5
 8006c8a:	f000 f8a3 	bl	8006dd4 <_malloc_r>
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	d108      	bne.n	8006ca4 <__smakebuf_r+0x44>
 8006c92:	220c      	movs	r2, #12
 8006c94:	5ea3      	ldrsh	r3, [r4, r2]
 8006c96:	059a      	lsls	r2, r3, #22
 8006c98:	d4ef      	bmi.n	8006c7a <__smakebuf_r+0x1a>
 8006c9a:	2203      	movs	r2, #3
 8006c9c:	4393      	bics	r3, r2
 8006c9e:	431e      	orrs	r6, r3
 8006ca0:	81a6      	strh	r6, [r4, #12]
 8006ca2:	e7e4      	b.n	8006c6e <__smakebuf_r+0xe>
 8006ca4:	4b0f      	ldr	r3, [pc, #60]	; (8006ce4 <__smakebuf_r+0x84>)
 8006ca6:	62ab      	str	r3, [r5, #40]	; 0x28
 8006ca8:	2380      	movs	r3, #128	; 0x80
 8006caa:	89a2      	ldrh	r2, [r4, #12]
 8006cac:	6020      	str	r0, [r4, #0]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	81a3      	strh	r3, [r4, #12]
 8006cb2:	9b00      	ldr	r3, [sp, #0]
 8006cb4:	6120      	str	r0, [r4, #16]
 8006cb6:	6163      	str	r3, [r4, #20]
 8006cb8:	9b01      	ldr	r3, [sp, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00d      	beq.n	8006cda <__smakebuf_r+0x7a>
 8006cbe:	0028      	movs	r0, r5
 8006cc0:	230e      	movs	r3, #14
 8006cc2:	5ee1      	ldrsh	r1, [r4, r3]
 8006cc4:	f000 fdd8 	bl	8007878 <_isatty_r>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	d006      	beq.n	8006cda <__smakebuf_r+0x7a>
 8006ccc:	2203      	movs	r2, #3
 8006cce:	89a3      	ldrh	r3, [r4, #12]
 8006cd0:	4393      	bics	r3, r2
 8006cd2:	001a      	movs	r2, r3
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	81a3      	strh	r3, [r4, #12]
 8006cda:	89a0      	ldrh	r0, [r4, #12]
 8006cdc:	4307      	orrs	r7, r0
 8006cde:	81a7      	strh	r7, [r4, #12]
 8006ce0:	e7cb      	b.n	8006c7a <__smakebuf_r+0x1a>
 8006ce2:	46c0      	nop			; (mov r8, r8)
 8006ce4:	08006a4d 	.word	0x08006a4d

08006ce8 <malloc>:
 8006ce8:	b510      	push	{r4, lr}
 8006cea:	4b03      	ldr	r3, [pc, #12]	; (8006cf8 <malloc+0x10>)
 8006cec:	0001      	movs	r1, r0
 8006cee:	6818      	ldr	r0, [r3, #0]
 8006cf0:	f000 f870 	bl	8006dd4 <_malloc_r>
 8006cf4:	bd10      	pop	{r4, pc}
 8006cf6:	46c0      	nop			; (mov r8, r8)
 8006cf8:	2000040c 	.word	0x2000040c

08006cfc <_free_r>:
 8006cfc:	b570      	push	{r4, r5, r6, lr}
 8006cfe:	0005      	movs	r5, r0
 8006d00:	2900      	cmp	r1, #0
 8006d02:	d010      	beq.n	8006d26 <_free_r+0x2a>
 8006d04:	1f0c      	subs	r4, r1, #4
 8006d06:	6823      	ldr	r3, [r4, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	da00      	bge.n	8006d0e <_free_r+0x12>
 8006d0c:	18e4      	adds	r4, r4, r3
 8006d0e:	0028      	movs	r0, r5
 8006d10:	f000 fdf6 	bl	8007900 <__malloc_lock>
 8006d14:	4a1d      	ldr	r2, [pc, #116]	; (8006d8c <_free_r+0x90>)
 8006d16:	6813      	ldr	r3, [r2, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d105      	bne.n	8006d28 <_free_r+0x2c>
 8006d1c:	6063      	str	r3, [r4, #4]
 8006d1e:	6014      	str	r4, [r2, #0]
 8006d20:	0028      	movs	r0, r5
 8006d22:	f000 fdf5 	bl	8007910 <__malloc_unlock>
 8006d26:	bd70      	pop	{r4, r5, r6, pc}
 8006d28:	42a3      	cmp	r3, r4
 8006d2a:	d908      	bls.n	8006d3e <_free_r+0x42>
 8006d2c:	6821      	ldr	r1, [r4, #0]
 8006d2e:	1860      	adds	r0, r4, r1
 8006d30:	4283      	cmp	r3, r0
 8006d32:	d1f3      	bne.n	8006d1c <_free_r+0x20>
 8006d34:	6818      	ldr	r0, [r3, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	1841      	adds	r1, r0, r1
 8006d3a:	6021      	str	r1, [r4, #0]
 8006d3c:	e7ee      	b.n	8006d1c <_free_r+0x20>
 8006d3e:	001a      	movs	r2, r3
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d001      	beq.n	8006d4a <_free_r+0x4e>
 8006d46:	42a3      	cmp	r3, r4
 8006d48:	d9f9      	bls.n	8006d3e <_free_r+0x42>
 8006d4a:	6811      	ldr	r1, [r2, #0]
 8006d4c:	1850      	adds	r0, r2, r1
 8006d4e:	42a0      	cmp	r0, r4
 8006d50:	d10b      	bne.n	8006d6a <_free_r+0x6e>
 8006d52:	6820      	ldr	r0, [r4, #0]
 8006d54:	1809      	adds	r1, r1, r0
 8006d56:	1850      	adds	r0, r2, r1
 8006d58:	6011      	str	r1, [r2, #0]
 8006d5a:	4283      	cmp	r3, r0
 8006d5c:	d1e0      	bne.n	8006d20 <_free_r+0x24>
 8006d5e:	6818      	ldr	r0, [r3, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	1841      	adds	r1, r0, r1
 8006d64:	6011      	str	r1, [r2, #0]
 8006d66:	6053      	str	r3, [r2, #4]
 8006d68:	e7da      	b.n	8006d20 <_free_r+0x24>
 8006d6a:	42a0      	cmp	r0, r4
 8006d6c:	d902      	bls.n	8006d74 <_free_r+0x78>
 8006d6e:	230c      	movs	r3, #12
 8006d70:	602b      	str	r3, [r5, #0]
 8006d72:	e7d5      	b.n	8006d20 <_free_r+0x24>
 8006d74:	6821      	ldr	r1, [r4, #0]
 8006d76:	1860      	adds	r0, r4, r1
 8006d78:	4283      	cmp	r3, r0
 8006d7a:	d103      	bne.n	8006d84 <_free_r+0x88>
 8006d7c:	6818      	ldr	r0, [r3, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	1841      	adds	r1, r0, r1
 8006d82:	6021      	str	r1, [r4, #0]
 8006d84:	6063      	str	r3, [r4, #4]
 8006d86:	6054      	str	r4, [r2, #4]
 8006d88:	e7ca      	b.n	8006d20 <_free_r+0x24>
 8006d8a:	46c0      	nop			; (mov r8, r8)
 8006d8c:	20000db0 	.word	0x20000db0

08006d90 <sbrk_aligned>:
 8006d90:	b570      	push	{r4, r5, r6, lr}
 8006d92:	4e0f      	ldr	r6, [pc, #60]	; (8006dd0 <sbrk_aligned+0x40>)
 8006d94:	000d      	movs	r5, r1
 8006d96:	6831      	ldr	r1, [r6, #0]
 8006d98:	0004      	movs	r4, r0
 8006d9a:	2900      	cmp	r1, #0
 8006d9c:	d102      	bne.n	8006da4 <sbrk_aligned+0x14>
 8006d9e:	f000 fcd5 	bl	800774c <_sbrk_r>
 8006da2:	6030      	str	r0, [r6, #0]
 8006da4:	0029      	movs	r1, r5
 8006da6:	0020      	movs	r0, r4
 8006da8:	f000 fcd0 	bl	800774c <_sbrk_r>
 8006dac:	1c43      	adds	r3, r0, #1
 8006dae:	d00a      	beq.n	8006dc6 <sbrk_aligned+0x36>
 8006db0:	2303      	movs	r3, #3
 8006db2:	1cc5      	adds	r5, r0, #3
 8006db4:	439d      	bics	r5, r3
 8006db6:	42a8      	cmp	r0, r5
 8006db8:	d007      	beq.n	8006dca <sbrk_aligned+0x3a>
 8006dba:	1a29      	subs	r1, r5, r0
 8006dbc:	0020      	movs	r0, r4
 8006dbe:	f000 fcc5 	bl	800774c <_sbrk_r>
 8006dc2:	1c43      	adds	r3, r0, #1
 8006dc4:	d101      	bne.n	8006dca <sbrk_aligned+0x3a>
 8006dc6:	2501      	movs	r5, #1
 8006dc8:	426d      	negs	r5, r5
 8006dca:	0028      	movs	r0, r5
 8006dcc:	bd70      	pop	{r4, r5, r6, pc}
 8006dce:	46c0      	nop			; (mov r8, r8)
 8006dd0:	20000db4 	.word	0x20000db4

08006dd4 <_malloc_r>:
 8006dd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dd6:	2203      	movs	r2, #3
 8006dd8:	1ccb      	adds	r3, r1, #3
 8006dda:	4393      	bics	r3, r2
 8006ddc:	3308      	adds	r3, #8
 8006dde:	0006      	movs	r6, r0
 8006de0:	001f      	movs	r7, r3
 8006de2:	2b0c      	cmp	r3, #12
 8006de4:	d232      	bcs.n	8006e4c <_malloc_r+0x78>
 8006de6:	270c      	movs	r7, #12
 8006de8:	42b9      	cmp	r1, r7
 8006dea:	d831      	bhi.n	8006e50 <_malloc_r+0x7c>
 8006dec:	0030      	movs	r0, r6
 8006dee:	f000 fd87 	bl	8007900 <__malloc_lock>
 8006df2:	4d32      	ldr	r5, [pc, #200]	; (8006ebc <_malloc_r+0xe8>)
 8006df4:	682b      	ldr	r3, [r5, #0]
 8006df6:	001c      	movs	r4, r3
 8006df8:	2c00      	cmp	r4, #0
 8006dfa:	d12e      	bne.n	8006e5a <_malloc_r+0x86>
 8006dfc:	0039      	movs	r1, r7
 8006dfe:	0030      	movs	r0, r6
 8006e00:	f7ff ffc6 	bl	8006d90 <sbrk_aligned>
 8006e04:	0004      	movs	r4, r0
 8006e06:	1c43      	adds	r3, r0, #1
 8006e08:	d11e      	bne.n	8006e48 <_malloc_r+0x74>
 8006e0a:	682c      	ldr	r4, [r5, #0]
 8006e0c:	0025      	movs	r5, r4
 8006e0e:	2d00      	cmp	r5, #0
 8006e10:	d14a      	bne.n	8006ea8 <_malloc_r+0xd4>
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	0029      	movs	r1, r5
 8006e16:	18e3      	adds	r3, r4, r3
 8006e18:	0030      	movs	r0, r6
 8006e1a:	9301      	str	r3, [sp, #4]
 8006e1c:	f000 fc96 	bl	800774c <_sbrk_r>
 8006e20:	9b01      	ldr	r3, [sp, #4]
 8006e22:	4283      	cmp	r3, r0
 8006e24:	d143      	bne.n	8006eae <_malloc_r+0xda>
 8006e26:	6823      	ldr	r3, [r4, #0]
 8006e28:	3703      	adds	r7, #3
 8006e2a:	1aff      	subs	r7, r7, r3
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	439f      	bics	r7, r3
 8006e30:	3708      	adds	r7, #8
 8006e32:	2f0c      	cmp	r7, #12
 8006e34:	d200      	bcs.n	8006e38 <_malloc_r+0x64>
 8006e36:	270c      	movs	r7, #12
 8006e38:	0039      	movs	r1, r7
 8006e3a:	0030      	movs	r0, r6
 8006e3c:	f7ff ffa8 	bl	8006d90 <sbrk_aligned>
 8006e40:	1c43      	adds	r3, r0, #1
 8006e42:	d034      	beq.n	8006eae <_malloc_r+0xda>
 8006e44:	6823      	ldr	r3, [r4, #0]
 8006e46:	19df      	adds	r7, r3, r7
 8006e48:	6027      	str	r7, [r4, #0]
 8006e4a:	e013      	b.n	8006e74 <_malloc_r+0xa0>
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	dacb      	bge.n	8006de8 <_malloc_r+0x14>
 8006e50:	230c      	movs	r3, #12
 8006e52:	2500      	movs	r5, #0
 8006e54:	6033      	str	r3, [r6, #0]
 8006e56:	0028      	movs	r0, r5
 8006e58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e5a:	6822      	ldr	r2, [r4, #0]
 8006e5c:	1bd1      	subs	r1, r2, r7
 8006e5e:	d420      	bmi.n	8006ea2 <_malloc_r+0xce>
 8006e60:	290b      	cmp	r1, #11
 8006e62:	d917      	bls.n	8006e94 <_malloc_r+0xc0>
 8006e64:	19e2      	adds	r2, r4, r7
 8006e66:	6027      	str	r7, [r4, #0]
 8006e68:	42a3      	cmp	r3, r4
 8006e6a:	d111      	bne.n	8006e90 <_malloc_r+0xbc>
 8006e6c:	602a      	str	r2, [r5, #0]
 8006e6e:	6863      	ldr	r3, [r4, #4]
 8006e70:	6011      	str	r1, [r2, #0]
 8006e72:	6053      	str	r3, [r2, #4]
 8006e74:	0030      	movs	r0, r6
 8006e76:	0025      	movs	r5, r4
 8006e78:	f000 fd4a 	bl	8007910 <__malloc_unlock>
 8006e7c:	2207      	movs	r2, #7
 8006e7e:	350b      	adds	r5, #11
 8006e80:	1d23      	adds	r3, r4, #4
 8006e82:	4395      	bics	r5, r2
 8006e84:	1aea      	subs	r2, r5, r3
 8006e86:	429d      	cmp	r5, r3
 8006e88:	d0e5      	beq.n	8006e56 <_malloc_r+0x82>
 8006e8a:	1b5b      	subs	r3, r3, r5
 8006e8c:	50a3      	str	r3, [r4, r2]
 8006e8e:	e7e2      	b.n	8006e56 <_malloc_r+0x82>
 8006e90:	605a      	str	r2, [r3, #4]
 8006e92:	e7ec      	b.n	8006e6e <_malloc_r+0x9a>
 8006e94:	6862      	ldr	r2, [r4, #4]
 8006e96:	42a3      	cmp	r3, r4
 8006e98:	d101      	bne.n	8006e9e <_malloc_r+0xca>
 8006e9a:	602a      	str	r2, [r5, #0]
 8006e9c:	e7ea      	b.n	8006e74 <_malloc_r+0xa0>
 8006e9e:	605a      	str	r2, [r3, #4]
 8006ea0:	e7e8      	b.n	8006e74 <_malloc_r+0xa0>
 8006ea2:	0023      	movs	r3, r4
 8006ea4:	6864      	ldr	r4, [r4, #4]
 8006ea6:	e7a7      	b.n	8006df8 <_malloc_r+0x24>
 8006ea8:	002c      	movs	r4, r5
 8006eaa:	686d      	ldr	r5, [r5, #4]
 8006eac:	e7af      	b.n	8006e0e <_malloc_r+0x3a>
 8006eae:	230c      	movs	r3, #12
 8006eb0:	0030      	movs	r0, r6
 8006eb2:	6033      	str	r3, [r6, #0]
 8006eb4:	f000 fd2c 	bl	8007910 <__malloc_unlock>
 8006eb8:	e7cd      	b.n	8006e56 <_malloc_r+0x82>
 8006eba:	46c0      	nop			; (mov r8, r8)
 8006ebc:	20000db0 	.word	0x20000db0

08006ec0 <__ssputs_r>:
 8006ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ec2:	688e      	ldr	r6, [r1, #8]
 8006ec4:	b085      	sub	sp, #20
 8006ec6:	0007      	movs	r7, r0
 8006ec8:	000c      	movs	r4, r1
 8006eca:	9203      	str	r2, [sp, #12]
 8006ecc:	9301      	str	r3, [sp, #4]
 8006ece:	429e      	cmp	r6, r3
 8006ed0:	d83c      	bhi.n	8006f4c <__ssputs_r+0x8c>
 8006ed2:	2390      	movs	r3, #144	; 0x90
 8006ed4:	898a      	ldrh	r2, [r1, #12]
 8006ed6:	00db      	lsls	r3, r3, #3
 8006ed8:	421a      	tst	r2, r3
 8006eda:	d034      	beq.n	8006f46 <__ssputs_r+0x86>
 8006edc:	6909      	ldr	r1, [r1, #16]
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	6960      	ldr	r0, [r4, #20]
 8006ee2:	1a5b      	subs	r3, r3, r1
 8006ee4:	9302      	str	r3, [sp, #8]
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	4343      	muls	r3, r0
 8006eea:	0fdd      	lsrs	r5, r3, #31
 8006eec:	18ed      	adds	r5, r5, r3
 8006eee:	9b01      	ldr	r3, [sp, #4]
 8006ef0:	9802      	ldr	r0, [sp, #8]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	181b      	adds	r3, r3, r0
 8006ef6:	106d      	asrs	r5, r5, #1
 8006ef8:	42ab      	cmp	r3, r5
 8006efa:	d900      	bls.n	8006efe <__ssputs_r+0x3e>
 8006efc:	001d      	movs	r5, r3
 8006efe:	0553      	lsls	r3, r2, #21
 8006f00:	d532      	bpl.n	8006f68 <__ssputs_r+0xa8>
 8006f02:	0029      	movs	r1, r5
 8006f04:	0038      	movs	r0, r7
 8006f06:	f7ff ff65 	bl	8006dd4 <_malloc_r>
 8006f0a:	1e06      	subs	r6, r0, #0
 8006f0c:	d109      	bne.n	8006f22 <__ssputs_r+0x62>
 8006f0e:	230c      	movs	r3, #12
 8006f10:	603b      	str	r3, [r7, #0]
 8006f12:	2340      	movs	r3, #64	; 0x40
 8006f14:	2001      	movs	r0, #1
 8006f16:	89a2      	ldrh	r2, [r4, #12]
 8006f18:	4240      	negs	r0, r0
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	81a3      	strh	r3, [r4, #12]
 8006f1e:	b005      	add	sp, #20
 8006f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f22:	9a02      	ldr	r2, [sp, #8]
 8006f24:	6921      	ldr	r1, [r4, #16]
 8006f26:	f7ff fa2f 	bl	8006388 <memcpy>
 8006f2a:	89a3      	ldrh	r3, [r4, #12]
 8006f2c:	4a14      	ldr	r2, [pc, #80]	; (8006f80 <__ssputs_r+0xc0>)
 8006f2e:	401a      	ands	r2, r3
 8006f30:	2380      	movs	r3, #128	; 0x80
 8006f32:	4313      	orrs	r3, r2
 8006f34:	81a3      	strh	r3, [r4, #12]
 8006f36:	9b02      	ldr	r3, [sp, #8]
 8006f38:	6126      	str	r6, [r4, #16]
 8006f3a:	18f6      	adds	r6, r6, r3
 8006f3c:	6026      	str	r6, [r4, #0]
 8006f3e:	6165      	str	r5, [r4, #20]
 8006f40:	9e01      	ldr	r6, [sp, #4]
 8006f42:	1aed      	subs	r5, r5, r3
 8006f44:	60a5      	str	r5, [r4, #8]
 8006f46:	9b01      	ldr	r3, [sp, #4]
 8006f48:	429e      	cmp	r6, r3
 8006f4a:	d900      	bls.n	8006f4e <__ssputs_r+0x8e>
 8006f4c:	9e01      	ldr	r6, [sp, #4]
 8006f4e:	0032      	movs	r2, r6
 8006f50:	9903      	ldr	r1, [sp, #12]
 8006f52:	6820      	ldr	r0, [r4, #0]
 8006f54:	f000 fcc1 	bl	80078da <memmove>
 8006f58:	68a3      	ldr	r3, [r4, #8]
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	1b9b      	subs	r3, r3, r6
 8006f5e:	60a3      	str	r3, [r4, #8]
 8006f60:	6823      	ldr	r3, [r4, #0]
 8006f62:	199e      	adds	r6, r3, r6
 8006f64:	6026      	str	r6, [r4, #0]
 8006f66:	e7da      	b.n	8006f1e <__ssputs_r+0x5e>
 8006f68:	002a      	movs	r2, r5
 8006f6a:	0038      	movs	r0, r7
 8006f6c:	f000 fcd8 	bl	8007920 <_realloc_r>
 8006f70:	1e06      	subs	r6, r0, #0
 8006f72:	d1e0      	bne.n	8006f36 <__ssputs_r+0x76>
 8006f74:	0038      	movs	r0, r7
 8006f76:	6921      	ldr	r1, [r4, #16]
 8006f78:	f7ff fec0 	bl	8006cfc <_free_r>
 8006f7c:	e7c7      	b.n	8006f0e <__ssputs_r+0x4e>
 8006f7e:	46c0      	nop			; (mov r8, r8)
 8006f80:	fffffb7f 	.word	0xfffffb7f

08006f84 <_svfiprintf_r>:
 8006f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f86:	b0a1      	sub	sp, #132	; 0x84
 8006f88:	9003      	str	r0, [sp, #12]
 8006f8a:	001d      	movs	r5, r3
 8006f8c:	898b      	ldrh	r3, [r1, #12]
 8006f8e:	000f      	movs	r7, r1
 8006f90:	0016      	movs	r6, r2
 8006f92:	061b      	lsls	r3, r3, #24
 8006f94:	d511      	bpl.n	8006fba <_svfiprintf_r+0x36>
 8006f96:	690b      	ldr	r3, [r1, #16]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10e      	bne.n	8006fba <_svfiprintf_r+0x36>
 8006f9c:	2140      	movs	r1, #64	; 0x40
 8006f9e:	f7ff ff19 	bl	8006dd4 <_malloc_r>
 8006fa2:	6038      	str	r0, [r7, #0]
 8006fa4:	6138      	str	r0, [r7, #16]
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	d105      	bne.n	8006fb6 <_svfiprintf_r+0x32>
 8006faa:	230c      	movs	r3, #12
 8006fac:	9a03      	ldr	r2, [sp, #12]
 8006fae:	3801      	subs	r0, #1
 8006fb0:	6013      	str	r3, [r2, #0]
 8006fb2:	b021      	add	sp, #132	; 0x84
 8006fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fb6:	2340      	movs	r3, #64	; 0x40
 8006fb8:	617b      	str	r3, [r7, #20]
 8006fba:	2300      	movs	r3, #0
 8006fbc:	ac08      	add	r4, sp, #32
 8006fbe:	6163      	str	r3, [r4, #20]
 8006fc0:	3320      	adds	r3, #32
 8006fc2:	7663      	strb	r3, [r4, #25]
 8006fc4:	3310      	adds	r3, #16
 8006fc6:	76a3      	strb	r3, [r4, #26]
 8006fc8:	9507      	str	r5, [sp, #28]
 8006fca:	0035      	movs	r5, r6
 8006fcc:	782b      	ldrb	r3, [r5, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <_svfiprintf_r+0x52>
 8006fd2:	2b25      	cmp	r3, #37	; 0x25
 8006fd4:	d147      	bne.n	8007066 <_svfiprintf_r+0xe2>
 8006fd6:	1bab      	subs	r3, r5, r6
 8006fd8:	9305      	str	r3, [sp, #20]
 8006fda:	42b5      	cmp	r5, r6
 8006fdc:	d00c      	beq.n	8006ff8 <_svfiprintf_r+0x74>
 8006fde:	0032      	movs	r2, r6
 8006fe0:	0039      	movs	r1, r7
 8006fe2:	9803      	ldr	r0, [sp, #12]
 8006fe4:	f7ff ff6c 	bl	8006ec0 <__ssputs_r>
 8006fe8:	1c43      	adds	r3, r0, #1
 8006fea:	d100      	bne.n	8006fee <_svfiprintf_r+0x6a>
 8006fec:	e0ae      	b.n	800714c <_svfiprintf_r+0x1c8>
 8006fee:	6962      	ldr	r2, [r4, #20]
 8006ff0:	9b05      	ldr	r3, [sp, #20]
 8006ff2:	4694      	mov	ip, r2
 8006ff4:	4463      	add	r3, ip
 8006ff6:	6163      	str	r3, [r4, #20]
 8006ff8:	782b      	ldrb	r3, [r5, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d100      	bne.n	8007000 <_svfiprintf_r+0x7c>
 8006ffe:	e0a5      	b.n	800714c <_svfiprintf_r+0x1c8>
 8007000:	2201      	movs	r2, #1
 8007002:	2300      	movs	r3, #0
 8007004:	4252      	negs	r2, r2
 8007006:	6062      	str	r2, [r4, #4]
 8007008:	a904      	add	r1, sp, #16
 800700a:	3254      	adds	r2, #84	; 0x54
 800700c:	1852      	adds	r2, r2, r1
 800700e:	1c6e      	adds	r6, r5, #1
 8007010:	6023      	str	r3, [r4, #0]
 8007012:	60e3      	str	r3, [r4, #12]
 8007014:	60a3      	str	r3, [r4, #8]
 8007016:	7013      	strb	r3, [r2, #0]
 8007018:	65a3      	str	r3, [r4, #88]	; 0x58
 800701a:	2205      	movs	r2, #5
 800701c:	7831      	ldrb	r1, [r6, #0]
 800701e:	4854      	ldr	r0, [pc, #336]	; (8007170 <_svfiprintf_r+0x1ec>)
 8007020:	f000 fc50 	bl	80078c4 <memchr>
 8007024:	1c75      	adds	r5, r6, #1
 8007026:	2800      	cmp	r0, #0
 8007028:	d11f      	bne.n	800706a <_svfiprintf_r+0xe6>
 800702a:	6822      	ldr	r2, [r4, #0]
 800702c:	06d3      	lsls	r3, r2, #27
 800702e:	d504      	bpl.n	800703a <_svfiprintf_r+0xb6>
 8007030:	2353      	movs	r3, #83	; 0x53
 8007032:	a904      	add	r1, sp, #16
 8007034:	185b      	adds	r3, r3, r1
 8007036:	2120      	movs	r1, #32
 8007038:	7019      	strb	r1, [r3, #0]
 800703a:	0713      	lsls	r3, r2, #28
 800703c:	d504      	bpl.n	8007048 <_svfiprintf_r+0xc4>
 800703e:	2353      	movs	r3, #83	; 0x53
 8007040:	a904      	add	r1, sp, #16
 8007042:	185b      	adds	r3, r3, r1
 8007044:	212b      	movs	r1, #43	; 0x2b
 8007046:	7019      	strb	r1, [r3, #0]
 8007048:	7833      	ldrb	r3, [r6, #0]
 800704a:	2b2a      	cmp	r3, #42	; 0x2a
 800704c:	d016      	beq.n	800707c <_svfiprintf_r+0xf8>
 800704e:	0035      	movs	r5, r6
 8007050:	2100      	movs	r1, #0
 8007052:	200a      	movs	r0, #10
 8007054:	68e3      	ldr	r3, [r4, #12]
 8007056:	782a      	ldrb	r2, [r5, #0]
 8007058:	1c6e      	adds	r6, r5, #1
 800705a:	3a30      	subs	r2, #48	; 0x30
 800705c:	2a09      	cmp	r2, #9
 800705e:	d94e      	bls.n	80070fe <_svfiprintf_r+0x17a>
 8007060:	2900      	cmp	r1, #0
 8007062:	d111      	bne.n	8007088 <_svfiprintf_r+0x104>
 8007064:	e017      	b.n	8007096 <_svfiprintf_r+0x112>
 8007066:	3501      	adds	r5, #1
 8007068:	e7b0      	b.n	8006fcc <_svfiprintf_r+0x48>
 800706a:	4b41      	ldr	r3, [pc, #260]	; (8007170 <_svfiprintf_r+0x1ec>)
 800706c:	6822      	ldr	r2, [r4, #0]
 800706e:	1ac0      	subs	r0, r0, r3
 8007070:	2301      	movs	r3, #1
 8007072:	4083      	lsls	r3, r0
 8007074:	4313      	orrs	r3, r2
 8007076:	002e      	movs	r6, r5
 8007078:	6023      	str	r3, [r4, #0]
 800707a:	e7ce      	b.n	800701a <_svfiprintf_r+0x96>
 800707c:	9b07      	ldr	r3, [sp, #28]
 800707e:	1d19      	adds	r1, r3, #4
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	9107      	str	r1, [sp, #28]
 8007084:	2b00      	cmp	r3, #0
 8007086:	db01      	blt.n	800708c <_svfiprintf_r+0x108>
 8007088:	930b      	str	r3, [sp, #44]	; 0x2c
 800708a:	e004      	b.n	8007096 <_svfiprintf_r+0x112>
 800708c:	425b      	negs	r3, r3
 800708e:	60e3      	str	r3, [r4, #12]
 8007090:	2302      	movs	r3, #2
 8007092:	4313      	orrs	r3, r2
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	782b      	ldrb	r3, [r5, #0]
 8007098:	2b2e      	cmp	r3, #46	; 0x2e
 800709a:	d10a      	bne.n	80070b2 <_svfiprintf_r+0x12e>
 800709c:	786b      	ldrb	r3, [r5, #1]
 800709e:	2b2a      	cmp	r3, #42	; 0x2a
 80070a0:	d135      	bne.n	800710e <_svfiprintf_r+0x18a>
 80070a2:	9b07      	ldr	r3, [sp, #28]
 80070a4:	3502      	adds	r5, #2
 80070a6:	1d1a      	adds	r2, r3, #4
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	9207      	str	r2, [sp, #28]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	db2b      	blt.n	8007108 <_svfiprintf_r+0x184>
 80070b0:	9309      	str	r3, [sp, #36]	; 0x24
 80070b2:	4e30      	ldr	r6, [pc, #192]	; (8007174 <_svfiprintf_r+0x1f0>)
 80070b4:	2203      	movs	r2, #3
 80070b6:	0030      	movs	r0, r6
 80070b8:	7829      	ldrb	r1, [r5, #0]
 80070ba:	f000 fc03 	bl	80078c4 <memchr>
 80070be:	2800      	cmp	r0, #0
 80070c0:	d006      	beq.n	80070d0 <_svfiprintf_r+0x14c>
 80070c2:	2340      	movs	r3, #64	; 0x40
 80070c4:	1b80      	subs	r0, r0, r6
 80070c6:	4083      	lsls	r3, r0
 80070c8:	6822      	ldr	r2, [r4, #0]
 80070ca:	3501      	adds	r5, #1
 80070cc:	4313      	orrs	r3, r2
 80070ce:	6023      	str	r3, [r4, #0]
 80070d0:	7829      	ldrb	r1, [r5, #0]
 80070d2:	2206      	movs	r2, #6
 80070d4:	4828      	ldr	r0, [pc, #160]	; (8007178 <_svfiprintf_r+0x1f4>)
 80070d6:	1c6e      	adds	r6, r5, #1
 80070d8:	7621      	strb	r1, [r4, #24]
 80070da:	f000 fbf3 	bl	80078c4 <memchr>
 80070de:	2800      	cmp	r0, #0
 80070e0:	d03c      	beq.n	800715c <_svfiprintf_r+0x1d8>
 80070e2:	4b26      	ldr	r3, [pc, #152]	; (800717c <_svfiprintf_r+0x1f8>)
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d125      	bne.n	8007134 <_svfiprintf_r+0x1b0>
 80070e8:	2207      	movs	r2, #7
 80070ea:	9b07      	ldr	r3, [sp, #28]
 80070ec:	3307      	adds	r3, #7
 80070ee:	4393      	bics	r3, r2
 80070f0:	3308      	adds	r3, #8
 80070f2:	9307      	str	r3, [sp, #28]
 80070f4:	6963      	ldr	r3, [r4, #20]
 80070f6:	9a04      	ldr	r2, [sp, #16]
 80070f8:	189b      	adds	r3, r3, r2
 80070fa:	6163      	str	r3, [r4, #20]
 80070fc:	e765      	b.n	8006fca <_svfiprintf_r+0x46>
 80070fe:	4343      	muls	r3, r0
 8007100:	0035      	movs	r5, r6
 8007102:	2101      	movs	r1, #1
 8007104:	189b      	adds	r3, r3, r2
 8007106:	e7a6      	b.n	8007056 <_svfiprintf_r+0xd2>
 8007108:	2301      	movs	r3, #1
 800710a:	425b      	negs	r3, r3
 800710c:	e7d0      	b.n	80070b0 <_svfiprintf_r+0x12c>
 800710e:	2300      	movs	r3, #0
 8007110:	200a      	movs	r0, #10
 8007112:	001a      	movs	r2, r3
 8007114:	3501      	adds	r5, #1
 8007116:	6063      	str	r3, [r4, #4]
 8007118:	7829      	ldrb	r1, [r5, #0]
 800711a:	1c6e      	adds	r6, r5, #1
 800711c:	3930      	subs	r1, #48	; 0x30
 800711e:	2909      	cmp	r1, #9
 8007120:	d903      	bls.n	800712a <_svfiprintf_r+0x1a6>
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0c5      	beq.n	80070b2 <_svfiprintf_r+0x12e>
 8007126:	9209      	str	r2, [sp, #36]	; 0x24
 8007128:	e7c3      	b.n	80070b2 <_svfiprintf_r+0x12e>
 800712a:	4342      	muls	r2, r0
 800712c:	0035      	movs	r5, r6
 800712e:	2301      	movs	r3, #1
 8007130:	1852      	adds	r2, r2, r1
 8007132:	e7f1      	b.n	8007118 <_svfiprintf_r+0x194>
 8007134:	ab07      	add	r3, sp, #28
 8007136:	9300      	str	r3, [sp, #0]
 8007138:	003a      	movs	r2, r7
 800713a:	0021      	movs	r1, r4
 800713c:	4b10      	ldr	r3, [pc, #64]	; (8007180 <_svfiprintf_r+0x1fc>)
 800713e:	9803      	ldr	r0, [sp, #12]
 8007140:	e000      	b.n	8007144 <_svfiprintf_r+0x1c0>
 8007142:	bf00      	nop
 8007144:	9004      	str	r0, [sp, #16]
 8007146:	9b04      	ldr	r3, [sp, #16]
 8007148:	3301      	adds	r3, #1
 800714a:	d1d3      	bne.n	80070f4 <_svfiprintf_r+0x170>
 800714c:	89bb      	ldrh	r3, [r7, #12]
 800714e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007150:	065b      	lsls	r3, r3, #25
 8007152:	d400      	bmi.n	8007156 <_svfiprintf_r+0x1d2>
 8007154:	e72d      	b.n	8006fb2 <_svfiprintf_r+0x2e>
 8007156:	2001      	movs	r0, #1
 8007158:	4240      	negs	r0, r0
 800715a:	e72a      	b.n	8006fb2 <_svfiprintf_r+0x2e>
 800715c:	ab07      	add	r3, sp, #28
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	003a      	movs	r2, r7
 8007162:	0021      	movs	r1, r4
 8007164:	4b06      	ldr	r3, [pc, #24]	; (8007180 <_svfiprintf_r+0x1fc>)
 8007166:	9803      	ldr	r0, [sp, #12]
 8007168:	f000 f9de 	bl	8007528 <_printf_i>
 800716c:	e7ea      	b.n	8007144 <_svfiprintf_r+0x1c0>
 800716e:	46c0      	nop			; (mov r8, r8)
 8007170:	08008150 	.word	0x08008150
 8007174:	08008156 	.word	0x08008156
 8007178:	0800815a 	.word	0x0800815a
 800717c:	00000000 	.word	0x00000000
 8007180:	08006ec1 	.word	0x08006ec1

08007184 <__sfputc_r>:
 8007184:	6893      	ldr	r3, [r2, #8]
 8007186:	b510      	push	{r4, lr}
 8007188:	3b01      	subs	r3, #1
 800718a:	6093      	str	r3, [r2, #8]
 800718c:	2b00      	cmp	r3, #0
 800718e:	da04      	bge.n	800719a <__sfputc_r+0x16>
 8007190:	6994      	ldr	r4, [r2, #24]
 8007192:	42a3      	cmp	r3, r4
 8007194:	db07      	blt.n	80071a6 <__sfputc_r+0x22>
 8007196:	290a      	cmp	r1, #10
 8007198:	d005      	beq.n	80071a6 <__sfputc_r+0x22>
 800719a:	6813      	ldr	r3, [r2, #0]
 800719c:	1c58      	adds	r0, r3, #1
 800719e:	6010      	str	r0, [r2, #0]
 80071a0:	7019      	strb	r1, [r3, #0]
 80071a2:	0008      	movs	r0, r1
 80071a4:	bd10      	pop	{r4, pc}
 80071a6:	f7ff fa93 	bl	80066d0 <__swbuf_r>
 80071aa:	0001      	movs	r1, r0
 80071ac:	e7f9      	b.n	80071a2 <__sfputc_r+0x1e>

080071ae <__sfputs_r>:
 80071ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b0:	0006      	movs	r6, r0
 80071b2:	000f      	movs	r7, r1
 80071b4:	0014      	movs	r4, r2
 80071b6:	18d5      	adds	r5, r2, r3
 80071b8:	42ac      	cmp	r4, r5
 80071ba:	d101      	bne.n	80071c0 <__sfputs_r+0x12>
 80071bc:	2000      	movs	r0, #0
 80071be:	e007      	b.n	80071d0 <__sfputs_r+0x22>
 80071c0:	7821      	ldrb	r1, [r4, #0]
 80071c2:	003a      	movs	r2, r7
 80071c4:	0030      	movs	r0, r6
 80071c6:	f7ff ffdd 	bl	8007184 <__sfputc_r>
 80071ca:	3401      	adds	r4, #1
 80071cc:	1c43      	adds	r3, r0, #1
 80071ce:	d1f3      	bne.n	80071b8 <__sfputs_r+0xa>
 80071d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071d4 <_vfiprintf_r>:
 80071d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071d6:	b0a1      	sub	sp, #132	; 0x84
 80071d8:	0006      	movs	r6, r0
 80071da:	000c      	movs	r4, r1
 80071dc:	001f      	movs	r7, r3
 80071de:	9203      	str	r2, [sp, #12]
 80071e0:	2800      	cmp	r0, #0
 80071e2:	d004      	beq.n	80071ee <_vfiprintf_r+0x1a>
 80071e4:	6983      	ldr	r3, [r0, #24]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <_vfiprintf_r+0x1a>
 80071ea:	f7ff fc6d 	bl	8006ac8 <__sinit>
 80071ee:	4b8e      	ldr	r3, [pc, #568]	; (8007428 <_vfiprintf_r+0x254>)
 80071f0:	429c      	cmp	r4, r3
 80071f2:	d11c      	bne.n	800722e <_vfiprintf_r+0x5a>
 80071f4:	6874      	ldr	r4, [r6, #4]
 80071f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071f8:	07db      	lsls	r3, r3, #31
 80071fa:	d405      	bmi.n	8007208 <_vfiprintf_r+0x34>
 80071fc:	89a3      	ldrh	r3, [r4, #12]
 80071fe:	059b      	lsls	r3, r3, #22
 8007200:	d402      	bmi.n	8007208 <_vfiprintf_r+0x34>
 8007202:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007204:	f7ff fd01 	bl	8006c0a <__retarget_lock_acquire_recursive>
 8007208:	89a3      	ldrh	r3, [r4, #12]
 800720a:	071b      	lsls	r3, r3, #28
 800720c:	d502      	bpl.n	8007214 <_vfiprintf_r+0x40>
 800720e:	6923      	ldr	r3, [r4, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d11d      	bne.n	8007250 <_vfiprintf_r+0x7c>
 8007214:	0021      	movs	r1, r4
 8007216:	0030      	movs	r0, r6
 8007218:	f7ff fab0 	bl	800677c <__swsetup_r>
 800721c:	2800      	cmp	r0, #0
 800721e:	d017      	beq.n	8007250 <_vfiprintf_r+0x7c>
 8007220:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007222:	07db      	lsls	r3, r3, #31
 8007224:	d50d      	bpl.n	8007242 <_vfiprintf_r+0x6e>
 8007226:	2001      	movs	r0, #1
 8007228:	4240      	negs	r0, r0
 800722a:	b021      	add	sp, #132	; 0x84
 800722c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800722e:	4b7f      	ldr	r3, [pc, #508]	; (800742c <_vfiprintf_r+0x258>)
 8007230:	429c      	cmp	r4, r3
 8007232:	d101      	bne.n	8007238 <_vfiprintf_r+0x64>
 8007234:	68b4      	ldr	r4, [r6, #8]
 8007236:	e7de      	b.n	80071f6 <_vfiprintf_r+0x22>
 8007238:	4b7d      	ldr	r3, [pc, #500]	; (8007430 <_vfiprintf_r+0x25c>)
 800723a:	429c      	cmp	r4, r3
 800723c:	d1db      	bne.n	80071f6 <_vfiprintf_r+0x22>
 800723e:	68f4      	ldr	r4, [r6, #12]
 8007240:	e7d9      	b.n	80071f6 <_vfiprintf_r+0x22>
 8007242:	89a3      	ldrh	r3, [r4, #12]
 8007244:	059b      	lsls	r3, r3, #22
 8007246:	d4ee      	bmi.n	8007226 <_vfiprintf_r+0x52>
 8007248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800724a:	f7ff fcdf 	bl	8006c0c <__retarget_lock_release_recursive>
 800724e:	e7ea      	b.n	8007226 <_vfiprintf_r+0x52>
 8007250:	2300      	movs	r3, #0
 8007252:	ad08      	add	r5, sp, #32
 8007254:	616b      	str	r3, [r5, #20]
 8007256:	3320      	adds	r3, #32
 8007258:	766b      	strb	r3, [r5, #25]
 800725a:	3310      	adds	r3, #16
 800725c:	76ab      	strb	r3, [r5, #26]
 800725e:	9707      	str	r7, [sp, #28]
 8007260:	9f03      	ldr	r7, [sp, #12]
 8007262:	783b      	ldrb	r3, [r7, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <_vfiprintf_r+0x98>
 8007268:	2b25      	cmp	r3, #37	; 0x25
 800726a:	d14e      	bne.n	800730a <_vfiprintf_r+0x136>
 800726c:	9b03      	ldr	r3, [sp, #12]
 800726e:	1afb      	subs	r3, r7, r3
 8007270:	9305      	str	r3, [sp, #20]
 8007272:	9b03      	ldr	r3, [sp, #12]
 8007274:	429f      	cmp	r7, r3
 8007276:	d00d      	beq.n	8007294 <_vfiprintf_r+0xc0>
 8007278:	9b05      	ldr	r3, [sp, #20]
 800727a:	0021      	movs	r1, r4
 800727c:	0030      	movs	r0, r6
 800727e:	9a03      	ldr	r2, [sp, #12]
 8007280:	f7ff ff95 	bl	80071ae <__sfputs_r>
 8007284:	1c43      	adds	r3, r0, #1
 8007286:	d100      	bne.n	800728a <_vfiprintf_r+0xb6>
 8007288:	e0b5      	b.n	80073f6 <_vfiprintf_r+0x222>
 800728a:	696a      	ldr	r2, [r5, #20]
 800728c:	9b05      	ldr	r3, [sp, #20]
 800728e:	4694      	mov	ip, r2
 8007290:	4463      	add	r3, ip
 8007292:	616b      	str	r3, [r5, #20]
 8007294:	783b      	ldrb	r3, [r7, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d100      	bne.n	800729c <_vfiprintf_r+0xc8>
 800729a:	e0ac      	b.n	80073f6 <_vfiprintf_r+0x222>
 800729c:	2201      	movs	r2, #1
 800729e:	1c7b      	adds	r3, r7, #1
 80072a0:	9303      	str	r3, [sp, #12]
 80072a2:	2300      	movs	r3, #0
 80072a4:	4252      	negs	r2, r2
 80072a6:	606a      	str	r2, [r5, #4]
 80072a8:	a904      	add	r1, sp, #16
 80072aa:	3254      	adds	r2, #84	; 0x54
 80072ac:	1852      	adds	r2, r2, r1
 80072ae:	602b      	str	r3, [r5, #0]
 80072b0:	60eb      	str	r3, [r5, #12]
 80072b2:	60ab      	str	r3, [r5, #8]
 80072b4:	7013      	strb	r3, [r2, #0]
 80072b6:	65ab      	str	r3, [r5, #88]	; 0x58
 80072b8:	9b03      	ldr	r3, [sp, #12]
 80072ba:	2205      	movs	r2, #5
 80072bc:	7819      	ldrb	r1, [r3, #0]
 80072be:	485d      	ldr	r0, [pc, #372]	; (8007434 <_vfiprintf_r+0x260>)
 80072c0:	f000 fb00 	bl	80078c4 <memchr>
 80072c4:	9b03      	ldr	r3, [sp, #12]
 80072c6:	1c5f      	adds	r7, r3, #1
 80072c8:	2800      	cmp	r0, #0
 80072ca:	d120      	bne.n	800730e <_vfiprintf_r+0x13a>
 80072cc:	682a      	ldr	r2, [r5, #0]
 80072ce:	06d3      	lsls	r3, r2, #27
 80072d0:	d504      	bpl.n	80072dc <_vfiprintf_r+0x108>
 80072d2:	2353      	movs	r3, #83	; 0x53
 80072d4:	a904      	add	r1, sp, #16
 80072d6:	185b      	adds	r3, r3, r1
 80072d8:	2120      	movs	r1, #32
 80072da:	7019      	strb	r1, [r3, #0]
 80072dc:	0713      	lsls	r3, r2, #28
 80072de:	d504      	bpl.n	80072ea <_vfiprintf_r+0x116>
 80072e0:	2353      	movs	r3, #83	; 0x53
 80072e2:	a904      	add	r1, sp, #16
 80072e4:	185b      	adds	r3, r3, r1
 80072e6:	212b      	movs	r1, #43	; 0x2b
 80072e8:	7019      	strb	r1, [r3, #0]
 80072ea:	9b03      	ldr	r3, [sp, #12]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	2b2a      	cmp	r3, #42	; 0x2a
 80072f0:	d016      	beq.n	8007320 <_vfiprintf_r+0x14c>
 80072f2:	2100      	movs	r1, #0
 80072f4:	68eb      	ldr	r3, [r5, #12]
 80072f6:	9f03      	ldr	r7, [sp, #12]
 80072f8:	783a      	ldrb	r2, [r7, #0]
 80072fa:	1c78      	adds	r0, r7, #1
 80072fc:	3a30      	subs	r2, #48	; 0x30
 80072fe:	4684      	mov	ip, r0
 8007300:	2a09      	cmp	r2, #9
 8007302:	d94f      	bls.n	80073a4 <_vfiprintf_r+0x1d0>
 8007304:	2900      	cmp	r1, #0
 8007306:	d111      	bne.n	800732c <_vfiprintf_r+0x158>
 8007308:	e017      	b.n	800733a <_vfiprintf_r+0x166>
 800730a:	3701      	adds	r7, #1
 800730c:	e7a9      	b.n	8007262 <_vfiprintf_r+0x8e>
 800730e:	4b49      	ldr	r3, [pc, #292]	; (8007434 <_vfiprintf_r+0x260>)
 8007310:	682a      	ldr	r2, [r5, #0]
 8007312:	1ac0      	subs	r0, r0, r3
 8007314:	2301      	movs	r3, #1
 8007316:	4083      	lsls	r3, r0
 8007318:	4313      	orrs	r3, r2
 800731a:	602b      	str	r3, [r5, #0]
 800731c:	9703      	str	r7, [sp, #12]
 800731e:	e7cb      	b.n	80072b8 <_vfiprintf_r+0xe4>
 8007320:	9b07      	ldr	r3, [sp, #28]
 8007322:	1d19      	adds	r1, r3, #4
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	9107      	str	r1, [sp, #28]
 8007328:	2b00      	cmp	r3, #0
 800732a:	db01      	blt.n	8007330 <_vfiprintf_r+0x15c>
 800732c:	930b      	str	r3, [sp, #44]	; 0x2c
 800732e:	e004      	b.n	800733a <_vfiprintf_r+0x166>
 8007330:	425b      	negs	r3, r3
 8007332:	60eb      	str	r3, [r5, #12]
 8007334:	2302      	movs	r3, #2
 8007336:	4313      	orrs	r3, r2
 8007338:	602b      	str	r3, [r5, #0]
 800733a:	783b      	ldrb	r3, [r7, #0]
 800733c:	2b2e      	cmp	r3, #46	; 0x2e
 800733e:	d10a      	bne.n	8007356 <_vfiprintf_r+0x182>
 8007340:	787b      	ldrb	r3, [r7, #1]
 8007342:	2b2a      	cmp	r3, #42	; 0x2a
 8007344:	d137      	bne.n	80073b6 <_vfiprintf_r+0x1e2>
 8007346:	9b07      	ldr	r3, [sp, #28]
 8007348:	3702      	adds	r7, #2
 800734a:	1d1a      	adds	r2, r3, #4
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	9207      	str	r2, [sp, #28]
 8007350:	2b00      	cmp	r3, #0
 8007352:	db2d      	blt.n	80073b0 <_vfiprintf_r+0x1dc>
 8007354:	9309      	str	r3, [sp, #36]	; 0x24
 8007356:	2203      	movs	r2, #3
 8007358:	7839      	ldrb	r1, [r7, #0]
 800735a:	4837      	ldr	r0, [pc, #220]	; (8007438 <_vfiprintf_r+0x264>)
 800735c:	f000 fab2 	bl	80078c4 <memchr>
 8007360:	2800      	cmp	r0, #0
 8007362:	d007      	beq.n	8007374 <_vfiprintf_r+0x1a0>
 8007364:	4b34      	ldr	r3, [pc, #208]	; (8007438 <_vfiprintf_r+0x264>)
 8007366:	682a      	ldr	r2, [r5, #0]
 8007368:	1ac0      	subs	r0, r0, r3
 800736a:	2340      	movs	r3, #64	; 0x40
 800736c:	4083      	lsls	r3, r0
 800736e:	4313      	orrs	r3, r2
 8007370:	3701      	adds	r7, #1
 8007372:	602b      	str	r3, [r5, #0]
 8007374:	7839      	ldrb	r1, [r7, #0]
 8007376:	1c7b      	adds	r3, r7, #1
 8007378:	2206      	movs	r2, #6
 800737a:	4830      	ldr	r0, [pc, #192]	; (800743c <_vfiprintf_r+0x268>)
 800737c:	9303      	str	r3, [sp, #12]
 800737e:	7629      	strb	r1, [r5, #24]
 8007380:	f000 faa0 	bl	80078c4 <memchr>
 8007384:	2800      	cmp	r0, #0
 8007386:	d045      	beq.n	8007414 <_vfiprintf_r+0x240>
 8007388:	4b2d      	ldr	r3, [pc, #180]	; (8007440 <_vfiprintf_r+0x26c>)
 800738a:	2b00      	cmp	r3, #0
 800738c:	d127      	bne.n	80073de <_vfiprintf_r+0x20a>
 800738e:	2207      	movs	r2, #7
 8007390:	9b07      	ldr	r3, [sp, #28]
 8007392:	3307      	adds	r3, #7
 8007394:	4393      	bics	r3, r2
 8007396:	3308      	adds	r3, #8
 8007398:	9307      	str	r3, [sp, #28]
 800739a:	696b      	ldr	r3, [r5, #20]
 800739c:	9a04      	ldr	r2, [sp, #16]
 800739e:	189b      	adds	r3, r3, r2
 80073a0:	616b      	str	r3, [r5, #20]
 80073a2:	e75d      	b.n	8007260 <_vfiprintf_r+0x8c>
 80073a4:	210a      	movs	r1, #10
 80073a6:	434b      	muls	r3, r1
 80073a8:	4667      	mov	r7, ip
 80073aa:	189b      	adds	r3, r3, r2
 80073ac:	3909      	subs	r1, #9
 80073ae:	e7a3      	b.n	80072f8 <_vfiprintf_r+0x124>
 80073b0:	2301      	movs	r3, #1
 80073b2:	425b      	negs	r3, r3
 80073b4:	e7ce      	b.n	8007354 <_vfiprintf_r+0x180>
 80073b6:	2300      	movs	r3, #0
 80073b8:	001a      	movs	r2, r3
 80073ba:	3701      	adds	r7, #1
 80073bc:	606b      	str	r3, [r5, #4]
 80073be:	7839      	ldrb	r1, [r7, #0]
 80073c0:	1c78      	adds	r0, r7, #1
 80073c2:	3930      	subs	r1, #48	; 0x30
 80073c4:	4684      	mov	ip, r0
 80073c6:	2909      	cmp	r1, #9
 80073c8:	d903      	bls.n	80073d2 <_vfiprintf_r+0x1fe>
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0c3      	beq.n	8007356 <_vfiprintf_r+0x182>
 80073ce:	9209      	str	r2, [sp, #36]	; 0x24
 80073d0:	e7c1      	b.n	8007356 <_vfiprintf_r+0x182>
 80073d2:	230a      	movs	r3, #10
 80073d4:	435a      	muls	r2, r3
 80073d6:	4667      	mov	r7, ip
 80073d8:	1852      	adds	r2, r2, r1
 80073da:	3b09      	subs	r3, #9
 80073dc:	e7ef      	b.n	80073be <_vfiprintf_r+0x1ea>
 80073de:	ab07      	add	r3, sp, #28
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	0022      	movs	r2, r4
 80073e4:	0029      	movs	r1, r5
 80073e6:	0030      	movs	r0, r6
 80073e8:	4b16      	ldr	r3, [pc, #88]	; (8007444 <_vfiprintf_r+0x270>)
 80073ea:	e000      	b.n	80073ee <_vfiprintf_r+0x21a>
 80073ec:	bf00      	nop
 80073ee:	9004      	str	r0, [sp, #16]
 80073f0:	9b04      	ldr	r3, [sp, #16]
 80073f2:	3301      	adds	r3, #1
 80073f4:	d1d1      	bne.n	800739a <_vfiprintf_r+0x1c6>
 80073f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073f8:	07db      	lsls	r3, r3, #31
 80073fa:	d405      	bmi.n	8007408 <_vfiprintf_r+0x234>
 80073fc:	89a3      	ldrh	r3, [r4, #12]
 80073fe:	059b      	lsls	r3, r3, #22
 8007400:	d402      	bmi.n	8007408 <_vfiprintf_r+0x234>
 8007402:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007404:	f7ff fc02 	bl	8006c0c <__retarget_lock_release_recursive>
 8007408:	89a3      	ldrh	r3, [r4, #12]
 800740a:	065b      	lsls	r3, r3, #25
 800740c:	d500      	bpl.n	8007410 <_vfiprintf_r+0x23c>
 800740e:	e70a      	b.n	8007226 <_vfiprintf_r+0x52>
 8007410:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007412:	e70a      	b.n	800722a <_vfiprintf_r+0x56>
 8007414:	ab07      	add	r3, sp, #28
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	0022      	movs	r2, r4
 800741a:	0029      	movs	r1, r5
 800741c:	0030      	movs	r0, r6
 800741e:	4b09      	ldr	r3, [pc, #36]	; (8007444 <_vfiprintf_r+0x270>)
 8007420:	f000 f882 	bl	8007528 <_printf_i>
 8007424:	e7e3      	b.n	80073ee <_vfiprintf_r+0x21a>
 8007426:	46c0      	nop			; (mov r8, r8)
 8007428:	08008110 	.word	0x08008110
 800742c:	08008130 	.word	0x08008130
 8007430:	080080f0 	.word	0x080080f0
 8007434:	08008150 	.word	0x08008150
 8007438:	08008156 	.word	0x08008156
 800743c:	0800815a 	.word	0x0800815a
 8007440:	00000000 	.word	0x00000000
 8007444:	080071af 	.word	0x080071af

08007448 <_printf_common>:
 8007448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800744a:	0015      	movs	r5, r2
 800744c:	9301      	str	r3, [sp, #4]
 800744e:	688a      	ldr	r2, [r1, #8]
 8007450:	690b      	ldr	r3, [r1, #16]
 8007452:	000c      	movs	r4, r1
 8007454:	9000      	str	r0, [sp, #0]
 8007456:	4293      	cmp	r3, r2
 8007458:	da00      	bge.n	800745c <_printf_common+0x14>
 800745a:	0013      	movs	r3, r2
 800745c:	0022      	movs	r2, r4
 800745e:	602b      	str	r3, [r5, #0]
 8007460:	3243      	adds	r2, #67	; 0x43
 8007462:	7812      	ldrb	r2, [r2, #0]
 8007464:	2a00      	cmp	r2, #0
 8007466:	d001      	beq.n	800746c <_printf_common+0x24>
 8007468:	3301      	adds	r3, #1
 800746a:	602b      	str	r3, [r5, #0]
 800746c:	6823      	ldr	r3, [r4, #0]
 800746e:	069b      	lsls	r3, r3, #26
 8007470:	d502      	bpl.n	8007478 <_printf_common+0x30>
 8007472:	682b      	ldr	r3, [r5, #0]
 8007474:	3302      	adds	r3, #2
 8007476:	602b      	str	r3, [r5, #0]
 8007478:	6822      	ldr	r2, [r4, #0]
 800747a:	2306      	movs	r3, #6
 800747c:	0017      	movs	r7, r2
 800747e:	401f      	ands	r7, r3
 8007480:	421a      	tst	r2, r3
 8007482:	d027      	beq.n	80074d4 <_printf_common+0x8c>
 8007484:	0023      	movs	r3, r4
 8007486:	3343      	adds	r3, #67	; 0x43
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	1e5a      	subs	r2, r3, #1
 800748c:	4193      	sbcs	r3, r2
 800748e:	6822      	ldr	r2, [r4, #0]
 8007490:	0692      	lsls	r2, r2, #26
 8007492:	d430      	bmi.n	80074f6 <_printf_common+0xae>
 8007494:	0022      	movs	r2, r4
 8007496:	9901      	ldr	r1, [sp, #4]
 8007498:	9800      	ldr	r0, [sp, #0]
 800749a:	9e08      	ldr	r6, [sp, #32]
 800749c:	3243      	adds	r2, #67	; 0x43
 800749e:	47b0      	blx	r6
 80074a0:	1c43      	adds	r3, r0, #1
 80074a2:	d025      	beq.n	80074f0 <_printf_common+0xa8>
 80074a4:	2306      	movs	r3, #6
 80074a6:	6820      	ldr	r0, [r4, #0]
 80074a8:	682a      	ldr	r2, [r5, #0]
 80074aa:	68e1      	ldr	r1, [r4, #12]
 80074ac:	2500      	movs	r5, #0
 80074ae:	4003      	ands	r3, r0
 80074b0:	2b04      	cmp	r3, #4
 80074b2:	d103      	bne.n	80074bc <_printf_common+0x74>
 80074b4:	1a8d      	subs	r5, r1, r2
 80074b6:	43eb      	mvns	r3, r5
 80074b8:	17db      	asrs	r3, r3, #31
 80074ba:	401d      	ands	r5, r3
 80074bc:	68a3      	ldr	r3, [r4, #8]
 80074be:	6922      	ldr	r2, [r4, #16]
 80074c0:	4293      	cmp	r3, r2
 80074c2:	dd01      	ble.n	80074c8 <_printf_common+0x80>
 80074c4:	1a9b      	subs	r3, r3, r2
 80074c6:	18ed      	adds	r5, r5, r3
 80074c8:	2700      	movs	r7, #0
 80074ca:	42bd      	cmp	r5, r7
 80074cc:	d120      	bne.n	8007510 <_printf_common+0xc8>
 80074ce:	2000      	movs	r0, #0
 80074d0:	e010      	b.n	80074f4 <_printf_common+0xac>
 80074d2:	3701      	adds	r7, #1
 80074d4:	68e3      	ldr	r3, [r4, #12]
 80074d6:	682a      	ldr	r2, [r5, #0]
 80074d8:	1a9b      	subs	r3, r3, r2
 80074da:	42bb      	cmp	r3, r7
 80074dc:	ddd2      	ble.n	8007484 <_printf_common+0x3c>
 80074de:	0022      	movs	r2, r4
 80074e0:	2301      	movs	r3, #1
 80074e2:	9901      	ldr	r1, [sp, #4]
 80074e4:	9800      	ldr	r0, [sp, #0]
 80074e6:	9e08      	ldr	r6, [sp, #32]
 80074e8:	3219      	adds	r2, #25
 80074ea:	47b0      	blx	r6
 80074ec:	1c43      	adds	r3, r0, #1
 80074ee:	d1f0      	bne.n	80074d2 <_printf_common+0x8a>
 80074f0:	2001      	movs	r0, #1
 80074f2:	4240      	negs	r0, r0
 80074f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80074f6:	2030      	movs	r0, #48	; 0x30
 80074f8:	18e1      	adds	r1, r4, r3
 80074fa:	3143      	adds	r1, #67	; 0x43
 80074fc:	7008      	strb	r0, [r1, #0]
 80074fe:	0021      	movs	r1, r4
 8007500:	1c5a      	adds	r2, r3, #1
 8007502:	3145      	adds	r1, #69	; 0x45
 8007504:	7809      	ldrb	r1, [r1, #0]
 8007506:	18a2      	adds	r2, r4, r2
 8007508:	3243      	adds	r2, #67	; 0x43
 800750a:	3302      	adds	r3, #2
 800750c:	7011      	strb	r1, [r2, #0]
 800750e:	e7c1      	b.n	8007494 <_printf_common+0x4c>
 8007510:	0022      	movs	r2, r4
 8007512:	2301      	movs	r3, #1
 8007514:	9901      	ldr	r1, [sp, #4]
 8007516:	9800      	ldr	r0, [sp, #0]
 8007518:	9e08      	ldr	r6, [sp, #32]
 800751a:	321a      	adds	r2, #26
 800751c:	47b0      	blx	r6
 800751e:	1c43      	adds	r3, r0, #1
 8007520:	d0e6      	beq.n	80074f0 <_printf_common+0xa8>
 8007522:	3701      	adds	r7, #1
 8007524:	e7d1      	b.n	80074ca <_printf_common+0x82>
	...

08007528 <_printf_i>:
 8007528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800752a:	b08b      	sub	sp, #44	; 0x2c
 800752c:	9206      	str	r2, [sp, #24]
 800752e:	000a      	movs	r2, r1
 8007530:	3243      	adds	r2, #67	; 0x43
 8007532:	9307      	str	r3, [sp, #28]
 8007534:	9005      	str	r0, [sp, #20]
 8007536:	9204      	str	r2, [sp, #16]
 8007538:	7e0a      	ldrb	r2, [r1, #24]
 800753a:	000c      	movs	r4, r1
 800753c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800753e:	2a78      	cmp	r2, #120	; 0x78
 8007540:	d807      	bhi.n	8007552 <_printf_i+0x2a>
 8007542:	2a62      	cmp	r2, #98	; 0x62
 8007544:	d809      	bhi.n	800755a <_printf_i+0x32>
 8007546:	2a00      	cmp	r2, #0
 8007548:	d100      	bne.n	800754c <_printf_i+0x24>
 800754a:	e0c1      	b.n	80076d0 <_printf_i+0x1a8>
 800754c:	2a58      	cmp	r2, #88	; 0x58
 800754e:	d100      	bne.n	8007552 <_printf_i+0x2a>
 8007550:	e08c      	b.n	800766c <_printf_i+0x144>
 8007552:	0026      	movs	r6, r4
 8007554:	3642      	adds	r6, #66	; 0x42
 8007556:	7032      	strb	r2, [r6, #0]
 8007558:	e022      	b.n	80075a0 <_printf_i+0x78>
 800755a:	0010      	movs	r0, r2
 800755c:	3863      	subs	r0, #99	; 0x63
 800755e:	2815      	cmp	r0, #21
 8007560:	d8f7      	bhi.n	8007552 <_printf_i+0x2a>
 8007562:	f7f8 fdd5 	bl	8000110 <__gnu_thumb1_case_shi>
 8007566:	0016      	.short	0x0016
 8007568:	fff6001f 	.word	0xfff6001f
 800756c:	fff6fff6 	.word	0xfff6fff6
 8007570:	001ffff6 	.word	0x001ffff6
 8007574:	fff6fff6 	.word	0xfff6fff6
 8007578:	fff6fff6 	.word	0xfff6fff6
 800757c:	003600a8 	.word	0x003600a8
 8007580:	fff6009a 	.word	0xfff6009a
 8007584:	00b9fff6 	.word	0x00b9fff6
 8007588:	0036fff6 	.word	0x0036fff6
 800758c:	fff6fff6 	.word	0xfff6fff6
 8007590:	009e      	.short	0x009e
 8007592:	0026      	movs	r6, r4
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	3642      	adds	r6, #66	; 0x42
 8007598:	1d11      	adds	r1, r2, #4
 800759a:	6019      	str	r1, [r3, #0]
 800759c:	6813      	ldr	r3, [r2, #0]
 800759e:	7033      	strb	r3, [r6, #0]
 80075a0:	2301      	movs	r3, #1
 80075a2:	e0a7      	b.n	80076f4 <_printf_i+0x1cc>
 80075a4:	6808      	ldr	r0, [r1, #0]
 80075a6:	6819      	ldr	r1, [r3, #0]
 80075a8:	1d0a      	adds	r2, r1, #4
 80075aa:	0605      	lsls	r5, r0, #24
 80075ac:	d50b      	bpl.n	80075c6 <_printf_i+0x9e>
 80075ae:	680d      	ldr	r5, [r1, #0]
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	2d00      	cmp	r5, #0
 80075b4:	da03      	bge.n	80075be <_printf_i+0x96>
 80075b6:	232d      	movs	r3, #45	; 0x2d
 80075b8:	9a04      	ldr	r2, [sp, #16]
 80075ba:	426d      	negs	r5, r5
 80075bc:	7013      	strb	r3, [r2, #0]
 80075be:	4b61      	ldr	r3, [pc, #388]	; (8007744 <_printf_i+0x21c>)
 80075c0:	270a      	movs	r7, #10
 80075c2:	9303      	str	r3, [sp, #12]
 80075c4:	e01b      	b.n	80075fe <_printf_i+0xd6>
 80075c6:	680d      	ldr	r5, [r1, #0]
 80075c8:	601a      	str	r2, [r3, #0]
 80075ca:	0641      	lsls	r1, r0, #25
 80075cc:	d5f1      	bpl.n	80075b2 <_printf_i+0x8a>
 80075ce:	b22d      	sxth	r5, r5
 80075d0:	e7ef      	b.n	80075b2 <_printf_i+0x8a>
 80075d2:	680d      	ldr	r5, [r1, #0]
 80075d4:	6819      	ldr	r1, [r3, #0]
 80075d6:	1d08      	adds	r0, r1, #4
 80075d8:	6018      	str	r0, [r3, #0]
 80075da:	062e      	lsls	r6, r5, #24
 80075dc:	d501      	bpl.n	80075e2 <_printf_i+0xba>
 80075de:	680d      	ldr	r5, [r1, #0]
 80075e0:	e003      	b.n	80075ea <_printf_i+0xc2>
 80075e2:	066d      	lsls	r5, r5, #25
 80075e4:	d5fb      	bpl.n	80075de <_printf_i+0xb6>
 80075e6:	680d      	ldr	r5, [r1, #0]
 80075e8:	b2ad      	uxth	r5, r5
 80075ea:	4b56      	ldr	r3, [pc, #344]	; (8007744 <_printf_i+0x21c>)
 80075ec:	2708      	movs	r7, #8
 80075ee:	9303      	str	r3, [sp, #12]
 80075f0:	2a6f      	cmp	r2, #111	; 0x6f
 80075f2:	d000      	beq.n	80075f6 <_printf_i+0xce>
 80075f4:	3702      	adds	r7, #2
 80075f6:	0023      	movs	r3, r4
 80075f8:	2200      	movs	r2, #0
 80075fa:	3343      	adds	r3, #67	; 0x43
 80075fc:	701a      	strb	r2, [r3, #0]
 80075fe:	6863      	ldr	r3, [r4, #4]
 8007600:	60a3      	str	r3, [r4, #8]
 8007602:	2b00      	cmp	r3, #0
 8007604:	db03      	blt.n	800760e <_printf_i+0xe6>
 8007606:	2204      	movs	r2, #4
 8007608:	6821      	ldr	r1, [r4, #0]
 800760a:	4391      	bics	r1, r2
 800760c:	6021      	str	r1, [r4, #0]
 800760e:	2d00      	cmp	r5, #0
 8007610:	d102      	bne.n	8007618 <_printf_i+0xf0>
 8007612:	9e04      	ldr	r6, [sp, #16]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00c      	beq.n	8007632 <_printf_i+0x10a>
 8007618:	9e04      	ldr	r6, [sp, #16]
 800761a:	0028      	movs	r0, r5
 800761c:	0039      	movs	r1, r7
 800761e:	f7f8 fe07 	bl	8000230 <__aeabi_uidivmod>
 8007622:	9b03      	ldr	r3, [sp, #12]
 8007624:	3e01      	subs	r6, #1
 8007626:	5c5b      	ldrb	r3, [r3, r1]
 8007628:	7033      	strb	r3, [r6, #0]
 800762a:	002b      	movs	r3, r5
 800762c:	0005      	movs	r5, r0
 800762e:	429f      	cmp	r7, r3
 8007630:	d9f3      	bls.n	800761a <_printf_i+0xf2>
 8007632:	2f08      	cmp	r7, #8
 8007634:	d109      	bne.n	800764a <_printf_i+0x122>
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	07db      	lsls	r3, r3, #31
 800763a:	d506      	bpl.n	800764a <_printf_i+0x122>
 800763c:	6863      	ldr	r3, [r4, #4]
 800763e:	6922      	ldr	r2, [r4, #16]
 8007640:	4293      	cmp	r3, r2
 8007642:	dc02      	bgt.n	800764a <_printf_i+0x122>
 8007644:	2330      	movs	r3, #48	; 0x30
 8007646:	3e01      	subs	r6, #1
 8007648:	7033      	strb	r3, [r6, #0]
 800764a:	9b04      	ldr	r3, [sp, #16]
 800764c:	1b9b      	subs	r3, r3, r6
 800764e:	6123      	str	r3, [r4, #16]
 8007650:	9b07      	ldr	r3, [sp, #28]
 8007652:	0021      	movs	r1, r4
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	9805      	ldr	r0, [sp, #20]
 8007658:	9b06      	ldr	r3, [sp, #24]
 800765a:	aa09      	add	r2, sp, #36	; 0x24
 800765c:	f7ff fef4 	bl	8007448 <_printf_common>
 8007660:	1c43      	adds	r3, r0, #1
 8007662:	d14c      	bne.n	80076fe <_printf_i+0x1d6>
 8007664:	2001      	movs	r0, #1
 8007666:	4240      	negs	r0, r0
 8007668:	b00b      	add	sp, #44	; 0x2c
 800766a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800766c:	3145      	adds	r1, #69	; 0x45
 800766e:	700a      	strb	r2, [r1, #0]
 8007670:	4a34      	ldr	r2, [pc, #208]	; (8007744 <_printf_i+0x21c>)
 8007672:	9203      	str	r2, [sp, #12]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	6821      	ldr	r1, [r4, #0]
 8007678:	ca20      	ldmia	r2!, {r5}
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	0608      	lsls	r0, r1, #24
 800767e:	d516      	bpl.n	80076ae <_printf_i+0x186>
 8007680:	07cb      	lsls	r3, r1, #31
 8007682:	d502      	bpl.n	800768a <_printf_i+0x162>
 8007684:	2320      	movs	r3, #32
 8007686:	4319      	orrs	r1, r3
 8007688:	6021      	str	r1, [r4, #0]
 800768a:	2710      	movs	r7, #16
 800768c:	2d00      	cmp	r5, #0
 800768e:	d1b2      	bne.n	80075f6 <_printf_i+0xce>
 8007690:	2320      	movs	r3, #32
 8007692:	6822      	ldr	r2, [r4, #0]
 8007694:	439a      	bics	r2, r3
 8007696:	6022      	str	r2, [r4, #0]
 8007698:	e7ad      	b.n	80075f6 <_printf_i+0xce>
 800769a:	2220      	movs	r2, #32
 800769c:	6809      	ldr	r1, [r1, #0]
 800769e:	430a      	orrs	r2, r1
 80076a0:	6022      	str	r2, [r4, #0]
 80076a2:	0022      	movs	r2, r4
 80076a4:	2178      	movs	r1, #120	; 0x78
 80076a6:	3245      	adds	r2, #69	; 0x45
 80076a8:	7011      	strb	r1, [r2, #0]
 80076aa:	4a27      	ldr	r2, [pc, #156]	; (8007748 <_printf_i+0x220>)
 80076ac:	e7e1      	b.n	8007672 <_printf_i+0x14a>
 80076ae:	0648      	lsls	r0, r1, #25
 80076b0:	d5e6      	bpl.n	8007680 <_printf_i+0x158>
 80076b2:	b2ad      	uxth	r5, r5
 80076b4:	e7e4      	b.n	8007680 <_printf_i+0x158>
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	680d      	ldr	r5, [r1, #0]
 80076ba:	1d10      	adds	r0, r2, #4
 80076bc:	6949      	ldr	r1, [r1, #20]
 80076be:	6018      	str	r0, [r3, #0]
 80076c0:	6813      	ldr	r3, [r2, #0]
 80076c2:	062e      	lsls	r6, r5, #24
 80076c4:	d501      	bpl.n	80076ca <_printf_i+0x1a2>
 80076c6:	6019      	str	r1, [r3, #0]
 80076c8:	e002      	b.n	80076d0 <_printf_i+0x1a8>
 80076ca:	066d      	lsls	r5, r5, #25
 80076cc:	d5fb      	bpl.n	80076c6 <_printf_i+0x19e>
 80076ce:	8019      	strh	r1, [r3, #0]
 80076d0:	2300      	movs	r3, #0
 80076d2:	9e04      	ldr	r6, [sp, #16]
 80076d4:	6123      	str	r3, [r4, #16]
 80076d6:	e7bb      	b.n	8007650 <_printf_i+0x128>
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	1d11      	adds	r1, r2, #4
 80076dc:	6019      	str	r1, [r3, #0]
 80076de:	6816      	ldr	r6, [r2, #0]
 80076e0:	2100      	movs	r1, #0
 80076e2:	0030      	movs	r0, r6
 80076e4:	6862      	ldr	r2, [r4, #4]
 80076e6:	f000 f8ed 	bl	80078c4 <memchr>
 80076ea:	2800      	cmp	r0, #0
 80076ec:	d001      	beq.n	80076f2 <_printf_i+0x1ca>
 80076ee:	1b80      	subs	r0, r0, r6
 80076f0:	6060      	str	r0, [r4, #4]
 80076f2:	6863      	ldr	r3, [r4, #4]
 80076f4:	6123      	str	r3, [r4, #16]
 80076f6:	2300      	movs	r3, #0
 80076f8:	9a04      	ldr	r2, [sp, #16]
 80076fa:	7013      	strb	r3, [r2, #0]
 80076fc:	e7a8      	b.n	8007650 <_printf_i+0x128>
 80076fe:	6923      	ldr	r3, [r4, #16]
 8007700:	0032      	movs	r2, r6
 8007702:	9906      	ldr	r1, [sp, #24]
 8007704:	9805      	ldr	r0, [sp, #20]
 8007706:	9d07      	ldr	r5, [sp, #28]
 8007708:	47a8      	blx	r5
 800770a:	1c43      	adds	r3, r0, #1
 800770c:	d0aa      	beq.n	8007664 <_printf_i+0x13c>
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	079b      	lsls	r3, r3, #30
 8007712:	d415      	bmi.n	8007740 <_printf_i+0x218>
 8007714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007716:	68e0      	ldr	r0, [r4, #12]
 8007718:	4298      	cmp	r0, r3
 800771a:	daa5      	bge.n	8007668 <_printf_i+0x140>
 800771c:	0018      	movs	r0, r3
 800771e:	e7a3      	b.n	8007668 <_printf_i+0x140>
 8007720:	0022      	movs	r2, r4
 8007722:	2301      	movs	r3, #1
 8007724:	9906      	ldr	r1, [sp, #24]
 8007726:	9805      	ldr	r0, [sp, #20]
 8007728:	9e07      	ldr	r6, [sp, #28]
 800772a:	3219      	adds	r2, #25
 800772c:	47b0      	blx	r6
 800772e:	1c43      	adds	r3, r0, #1
 8007730:	d098      	beq.n	8007664 <_printf_i+0x13c>
 8007732:	3501      	adds	r5, #1
 8007734:	68e3      	ldr	r3, [r4, #12]
 8007736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007738:	1a9b      	subs	r3, r3, r2
 800773a:	42ab      	cmp	r3, r5
 800773c:	dcf0      	bgt.n	8007720 <_printf_i+0x1f8>
 800773e:	e7e9      	b.n	8007714 <_printf_i+0x1ec>
 8007740:	2500      	movs	r5, #0
 8007742:	e7f7      	b.n	8007734 <_printf_i+0x20c>
 8007744:	08008161 	.word	0x08008161
 8007748:	08008172 	.word	0x08008172

0800774c <_sbrk_r>:
 800774c:	2300      	movs	r3, #0
 800774e:	b570      	push	{r4, r5, r6, lr}
 8007750:	4d06      	ldr	r5, [pc, #24]	; (800776c <_sbrk_r+0x20>)
 8007752:	0004      	movs	r4, r0
 8007754:	0008      	movs	r0, r1
 8007756:	602b      	str	r3, [r5, #0]
 8007758:	f7fa fc02 	bl	8001f60 <_sbrk>
 800775c:	1c43      	adds	r3, r0, #1
 800775e:	d103      	bne.n	8007768 <_sbrk_r+0x1c>
 8007760:	682b      	ldr	r3, [r5, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d000      	beq.n	8007768 <_sbrk_r+0x1c>
 8007766:	6023      	str	r3, [r4, #0]
 8007768:	bd70      	pop	{r4, r5, r6, pc}
 800776a:	46c0      	nop			; (mov r8, r8)
 800776c:	20000db8 	.word	0x20000db8

08007770 <__sread>:
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	000c      	movs	r4, r1
 8007774:	250e      	movs	r5, #14
 8007776:	5f49      	ldrsh	r1, [r1, r5]
 8007778:	f000 f902 	bl	8007980 <_read_r>
 800777c:	2800      	cmp	r0, #0
 800777e:	db03      	blt.n	8007788 <__sread+0x18>
 8007780:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007782:	181b      	adds	r3, r3, r0
 8007784:	6563      	str	r3, [r4, #84]	; 0x54
 8007786:	bd70      	pop	{r4, r5, r6, pc}
 8007788:	89a3      	ldrh	r3, [r4, #12]
 800778a:	4a02      	ldr	r2, [pc, #8]	; (8007794 <__sread+0x24>)
 800778c:	4013      	ands	r3, r2
 800778e:	81a3      	strh	r3, [r4, #12]
 8007790:	e7f9      	b.n	8007786 <__sread+0x16>
 8007792:	46c0      	nop			; (mov r8, r8)
 8007794:	ffffefff 	.word	0xffffefff

08007798 <__swrite>:
 8007798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800779a:	001f      	movs	r7, r3
 800779c:	898b      	ldrh	r3, [r1, #12]
 800779e:	0005      	movs	r5, r0
 80077a0:	000c      	movs	r4, r1
 80077a2:	0016      	movs	r6, r2
 80077a4:	05db      	lsls	r3, r3, #23
 80077a6:	d505      	bpl.n	80077b4 <__swrite+0x1c>
 80077a8:	230e      	movs	r3, #14
 80077aa:	5ec9      	ldrsh	r1, [r1, r3]
 80077ac:	2200      	movs	r2, #0
 80077ae:	2302      	movs	r3, #2
 80077b0:	f000 f874 	bl	800789c <_lseek_r>
 80077b4:	89a3      	ldrh	r3, [r4, #12]
 80077b6:	4a05      	ldr	r2, [pc, #20]	; (80077cc <__swrite+0x34>)
 80077b8:	0028      	movs	r0, r5
 80077ba:	4013      	ands	r3, r2
 80077bc:	81a3      	strh	r3, [r4, #12]
 80077be:	0032      	movs	r2, r6
 80077c0:	230e      	movs	r3, #14
 80077c2:	5ee1      	ldrsh	r1, [r4, r3]
 80077c4:	003b      	movs	r3, r7
 80077c6:	f000 f81f 	bl	8007808 <_write_r>
 80077ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077cc:	ffffefff 	.word	0xffffefff

080077d0 <__sseek>:
 80077d0:	b570      	push	{r4, r5, r6, lr}
 80077d2:	000c      	movs	r4, r1
 80077d4:	250e      	movs	r5, #14
 80077d6:	5f49      	ldrsh	r1, [r1, r5]
 80077d8:	f000 f860 	bl	800789c <_lseek_r>
 80077dc:	89a3      	ldrh	r3, [r4, #12]
 80077de:	1c42      	adds	r2, r0, #1
 80077e0:	d103      	bne.n	80077ea <__sseek+0x1a>
 80077e2:	4a05      	ldr	r2, [pc, #20]	; (80077f8 <__sseek+0x28>)
 80077e4:	4013      	ands	r3, r2
 80077e6:	81a3      	strh	r3, [r4, #12]
 80077e8:	bd70      	pop	{r4, r5, r6, pc}
 80077ea:	2280      	movs	r2, #128	; 0x80
 80077ec:	0152      	lsls	r2, r2, #5
 80077ee:	4313      	orrs	r3, r2
 80077f0:	81a3      	strh	r3, [r4, #12]
 80077f2:	6560      	str	r0, [r4, #84]	; 0x54
 80077f4:	e7f8      	b.n	80077e8 <__sseek+0x18>
 80077f6:	46c0      	nop			; (mov r8, r8)
 80077f8:	ffffefff 	.word	0xffffefff

080077fc <__sclose>:
 80077fc:	b510      	push	{r4, lr}
 80077fe:	230e      	movs	r3, #14
 8007800:	5ec9      	ldrsh	r1, [r1, r3]
 8007802:	f000 f815 	bl	8007830 <_close_r>
 8007806:	bd10      	pop	{r4, pc}

08007808 <_write_r>:
 8007808:	b570      	push	{r4, r5, r6, lr}
 800780a:	0004      	movs	r4, r0
 800780c:	0008      	movs	r0, r1
 800780e:	0011      	movs	r1, r2
 8007810:	001a      	movs	r2, r3
 8007812:	2300      	movs	r3, #0
 8007814:	4d05      	ldr	r5, [pc, #20]	; (800782c <_write_r+0x24>)
 8007816:	602b      	str	r3, [r5, #0]
 8007818:	f7fa f982 	bl	8001b20 <_write>
 800781c:	1c43      	adds	r3, r0, #1
 800781e:	d103      	bne.n	8007828 <_write_r+0x20>
 8007820:	682b      	ldr	r3, [r5, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d000      	beq.n	8007828 <_write_r+0x20>
 8007826:	6023      	str	r3, [r4, #0]
 8007828:	bd70      	pop	{r4, r5, r6, pc}
 800782a:	46c0      	nop			; (mov r8, r8)
 800782c:	20000db8 	.word	0x20000db8

08007830 <_close_r>:
 8007830:	2300      	movs	r3, #0
 8007832:	b570      	push	{r4, r5, r6, lr}
 8007834:	4d06      	ldr	r5, [pc, #24]	; (8007850 <_close_r+0x20>)
 8007836:	0004      	movs	r4, r0
 8007838:	0008      	movs	r0, r1
 800783a:	602b      	str	r3, [r5, #0]
 800783c:	f7fa f99e 	bl	8001b7c <_close>
 8007840:	1c43      	adds	r3, r0, #1
 8007842:	d103      	bne.n	800784c <_close_r+0x1c>
 8007844:	682b      	ldr	r3, [r5, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d000      	beq.n	800784c <_close_r+0x1c>
 800784a:	6023      	str	r3, [r4, #0]
 800784c:	bd70      	pop	{r4, r5, r6, pc}
 800784e:	46c0      	nop			; (mov r8, r8)
 8007850:	20000db8 	.word	0x20000db8

08007854 <_fstat_r>:
 8007854:	2300      	movs	r3, #0
 8007856:	b570      	push	{r4, r5, r6, lr}
 8007858:	4d06      	ldr	r5, [pc, #24]	; (8007874 <_fstat_r+0x20>)
 800785a:	0004      	movs	r4, r0
 800785c:	0008      	movs	r0, r1
 800785e:	0011      	movs	r1, r2
 8007860:	602b      	str	r3, [r5, #0]
 8007862:	f7fa f9dd 	bl	8001c20 <_fstat>
 8007866:	1c43      	adds	r3, r0, #1
 8007868:	d103      	bne.n	8007872 <_fstat_r+0x1e>
 800786a:	682b      	ldr	r3, [r5, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d000      	beq.n	8007872 <_fstat_r+0x1e>
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	bd70      	pop	{r4, r5, r6, pc}
 8007874:	20000db8 	.word	0x20000db8

08007878 <_isatty_r>:
 8007878:	2300      	movs	r3, #0
 800787a:	b570      	push	{r4, r5, r6, lr}
 800787c:	4d06      	ldr	r5, [pc, #24]	; (8007898 <_isatty_r+0x20>)
 800787e:	0004      	movs	r4, r0
 8007880:	0008      	movs	r0, r1
 8007882:	602b      	str	r3, [r5, #0]
 8007884:	f7fa f936 	bl	8001af4 <_isatty>
 8007888:	1c43      	adds	r3, r0, #1
 800788a:	d103      	bne.n	8007894 <_isatty_r+0x1c>
 800788c:	682b      	ldr	r3, [r5, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d000      	beq.n	8007894 <_isatty_r+0x1c>
 8007892:	6023      	str	r3, [r4, #0]
 8007894:	bd70      	pop	{r4, r5, r6, pc}
 8007896:	46c0      	nop			; (mov r8, r8)
 8007898:	20000db8 	.word	0x20000db8

0800789c <_lseek_r>:
 800789c:	b570      	push	{r4, r5, r6, lr}
 800789e:	0004      	movs	r4, r0
 80078a0:	0008      	movs	r0, r1
 80078a2:	0011      	movs	r1, r2
 80078a4:	001a      	movs	r2, r3
 80078a6:	2300      	movs	r3, #0
 80078a8:	4d05      	ldr	r5, [pc, #20]	; (80078c0 <_lseek_r+0x24>)
 80078aa:	602b      	str	r3, [r5, #0]
 80078ac:	f7fa f97d 	bl	8001baa <_lseek>
 80078b0:	1c43      	adds	r3, r0, #1
 80078b2:	d103      	bne.n	80078bc <_lseek_r+0x20>
 80078b4:	682b      	ldr	r3, [r5, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d000      	beq.n	80078bc <_lseek_r+0x20>
 80078ba:	6023      	str	r3, [r4, #0]
 80078bc:	bd70      	pop	{r4, r5, r6, pc}
 80078be:	46c0      	nop			; (mov r8, r8)
 80078c0:	20000db8 	.word	0x20000db8

080078c4 <memchr>:
 80078c4:	b2c9      	uxtb	r1, r1
 80078c6:	1882      	adds	r2, r0, r2
 80078c8:	4290      	cmp	r0, r2
 80078ca:	d101      	bne.n	80078d0 <memchr+0xc>
 80078cc:	2000      	movs	r0, #0
 80078ce:	4770      	bx	lr
 80078d0:	7803      	ldrb	r3, [r0, #0]
 80078d2:	428b      	cmp	r3, r1
 80078d4:	d0fb      	beq.n	80078ce <memchr+0xa>
 80078d6:	3001      	adds	r0, #1
 80078d8:	e7f6      	b.n	80078c8 <memchr+0x4>

080078da <memmove>:
 80078da:	b510      	push	{r4, lr}
 80078dc:	4288      	cmp	r0, r1
 80078de:	d902      	bls.n	80078e6 <memmove+0xc>
 80078e0:	188b      	adds	r3, r1, r2
 80078e2:	4298      	cmp	r0, r3
 80078e4:	d303      	bcc.n	80078ee <memmove+0x14>
 80078e6:	2300      	movs	r3, #0
 80078e8:	e007      	b.n	80078fa <memmove+0x20>
 80078ea:	5c8b      	ldrb	r3, [r1, r2]
 80078ec:	5483      	strb	r3, [r0, r2]
 80078ee:	3a01      	subs	r2, #1
 80078f0:	d2fb      	bcs.n	80078ea <memmove+0x10>
 80078f2:	bd10      	pop	{r4, pc}
 80078f4:	5ccc      	ldrb	r4, [r1, r3]
 80078f6:	54c4      	strb	r4, [r0, r3]
 80078f8:	3301      	adds	r3, #1
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d1fa      	bne.n	80078f4 <memmove+0x1a>
 80078fe:	e7f8      	b.n	80078f2 <memmove+0x18>

08007900 <__malloc_lock>:
 8007900:	b510      	push	{r4, lr}
 8007902:	4802      	ldr	r0, [pc, #8]	; (800790c <__malloc_lock+0xc>)
 8007904:	f7ff f981 	bl	8006c0a <__retarget_lock_acquire_recursive>
 8007908:	bd10      	pop	{r4, pc}
 800790a:	46c0      	nop			; (mov r8, r8)
 800790c:	20000dac 	.word	0x20000dac

08007910 <__malloc_unlock>:
 8007910:	b510      	push	{r4, lr}
 8007912:	4802      	ldr	r0, [pc, #8]	; (800791c <__malloc_unlock+0xc>)
 8007914:	f7ff f97a 	bl	8006c0c <__retarget_lock_release_recursive>
 8007918:	bd10      	pop	{r4, pc}
 800791a:	46c0      	nop			; (mov r8, r8)
 800791c:	20000dac 	.word	0x20000dac

08007920 <_realloc_r>:
 8007920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007922:	0007      	movs	r7, r0
 8007924:	000e      	movs	r6, r1
 8007926:	0014      	movs	r4, r2
 8007928:	2900      	cmp	r1, #0
 800792a:	d105      	bne.n	8007938 <_realloc_r+0x18>
 800792c:	0011      	movs	r1, r2
 800792e:	f7ff fa51 	bl	8006dd4 <_malloc_r>
 8007932:	0005      	movs	r5, r0
 8007934:	0028      	movs	r0, r5
 8007936:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007938:	2a00      	cmp	r2, #0
 800793a:	d103      	bne.n	8007944 <_realloc_r+0x24>
 800793c:	f7ff f9de 	bl	8006cfc <_free_r>
 8007940:	0025      	movs	r5, r4
 8007942:	e7f7      	b.n	8007934 <_realloc_r+0x14>
 8007944:	f000 f830 	bl	80079a8 <_malloc_usable_size_r>
 8007948:	9001      	str	r0, [sp, #4]
 800794a:	4284      	cmp	r4, r0
 800794c:	d803      	bhi.n	8007956 <_realloc_r+0x36>
 800794e:	0035      	movs	r5, r6
 8007950:	0843      	lsrs	r3, r0, #1
 8007952:	42a3      	cmp	r3, r4
 8007954:	d3ee      	bcc.n	8007934 <_realloc_r+0x14>
 8007956:	0021      	movs	r1, r4
 8007958:	0038      	movs	r0, r7
 800795a:	f7ff fa3b 	bl	8006dd4 <_malloc_r>
 800795e:	1e05      	subs	r5, r0, #0
 8007960:	d0e8      	beq.n	8007934 <_realloc_r+0x14>
 8007962:	9b01      	ldr	r3, [sp, #4]
 8007964:	0022      	movs	r2, r4
 8007966:	429c      	cmp	r4, r3
 8007968:	d900      	bls.n	800796c <_realloc_r+0x4c>
 800796a:	001a      	movs	r2, r3
 800796c:	0031      	movs	r1, r6
 800796e:	0028      	movs	r0, r5
 8007970:	f7fe fd0a 	bl	8006388 <memcpy>
 8007974:	0031      	movs	r1, r6
 8007976:	0038      	movs	r0, r7
 8007978:	f7ff f9c0 	bl	8006cfc <_free_r>
 800797c:	e7da      	b.n	8007934 <_realloc_r+0x14>
	...

08007980 <_read_r>:
 8007980:	b570      	push	{r4, r5, r6, lr}
 8007982:	0004      	movs	r4, r0
 8007984:	0008      	movs	r0, r1
 8007986:	0011      	movs	r1, r2
 8007988:	001a      	movs	r2, r3
 800798a:	2300      	movs	r3, #0
 800798c:	4d05      	ldr	r5, [pc, #20]	; (80079a4 <_read_r+0x24>)
 800798e:	602b      	str	r3, [r5, #0]
 8007990:	f7fa f91c 	bl	8001bcc <_read>
 8007994:	1c43      	adds	r3, r0, #1
 8007996:	d103      	bne.n	80079a0 <_read_r+0x20>
 8007998:	682b      	ldr	r3, [r5, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d000      	beq.n	80079a0 <_read_r+0x20>
 800799e:	6023      	str	r3, [r4, #0]
 80079a0:	bd70      	pop	{r4, r5, r6, pc}
 80079a2:	46c0      	nop			; (mov r8, r8)
 80079a4:	20000db8 	.word	0x20000db8

080079a8 <_malloc_usable_size_r>:
 80079a8:	1f0b      	subs	r3, r1, #4
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	1f18      	subs	r0, r3, #4
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	da01      	bge.n	80079b6 <_malloc_usable_size_r+0xe>
 80079b2:	580b      	ldr	r3, [r1, r0]
 80079b4:	18c0      	adds	r0, r0, r3
 80079b6:	4770      	bx	lr

080079b8 <_init>:
 80079b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ba:	46c0      	nop			; (mov r8, r8)
 80079bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079be:	bc08      	pop	{r3}
 80079c0:	469e      	mov	lr, r3
 80079c2:	4770      	bx	lr

080079c4 <_fini>:
 80079c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c6:	46c0      	nop			; (mov r8, r8)
 80079c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ca:	bc08      	pop	{r3}
 80079cc:	469e      	mov	lr, r3
 80079ce:	4770      	bx	lr

080079d0 <__FLASH_Program_Fast_veneer>:
 80079d0:	b401      	push	{r0}
 80079d2:	4802      	ldr	r0, [pc, #8]	; (80079dc <__FLASH_Program_Fast_veneer+0xc>)
 80079d4:	4684      	mov	ip, r0
 80079d6:	bc01      	pop	{r0}
 80079d8:	4760      	bx	ip
 80079da:	bf00      	nop
 80079dc:	20000471 	.word	0x20000471

Disassembly of section .data:

20000400 <SystemCoreClock>:
20000400:	00f42400                                .$..

20000404 <uwTickPrio>:
20000404:	00000004                                ....

20000408 <uwTickFreq>:
20000408:	00000001                                ....

2000040c <_impure_ptr>:
2000040c:	20000410                                ... 

20000410 <impure_data>:
20000410:	00000000 08008110 08008130 080080f0     ........0.......
	...

20000470 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000470:	b580      	push	{r7, lr}
20000472:	b088      	sub	sp, #32
20000474:	af00      	add	r7, sp, #0
20000476:	6078      	str	r0, [r7, #4]
20000478:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000047a:	231f      	movs	r3, #31
2000047c:	18fb      	adds	r3, r7, r3
2000047e:	2200      	movs	r2, #0
20000480:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000482:	687b      	ldr	r3, [r7, #4]
20000484:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000486:	683b      	ldr	r3, [r7, #0]
20000488:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000048a:	4b1a      	ldr	r3, [pc, #104]	; (200004f4 <FLASH_Program_Fast+0x84>)
2000048c:	695a      	ldr	r2, [r3, #20]
2000048e:	4b19      	ldr	r3, [pc, #100]	; (200004f4 <FLASH_Program_Fast+0x84>)
20000490:	2180      	movs	r1, #128	; 0x80
20000492:	02c9      	lsls	r1, r1, #11
20000494:	430a      	orrs	r2, r1
20000496:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000498:	f3ef 8310 	mrs	r3, PRIMASK
2000049c:	60fb      	str	r3, [r7, #12]
  return(result);
2000049e:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200004a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200004a2:	b672      	cpsid	i
}
200004a4:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200004a6:	e00f      	b.n	200004c8 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200004a8:	697a      	ldr	r2, [r7, #20]
200004aa:	69bb      	ldr	r3, [r7, #24]
200004ac:	6812      	ldr	r2, [r2, #0]
200004ae:	601a      	str	r2, [r3, #0]
    src += 4U;
200004b0:	697b      	ldr	r3, [r7, #20]
200004b2:	3304      	adds	r3, #4
200004b4:	617b      	str	r3, [r7, #20]
    dest += 4U;
200004b6:	69bb      	ldr	r3, [r7, #24]
200004b8:	3304      	adds	r3, #4
200004ba:	61bb      	str	r3, [r7, #24]
    index++;
200004bc:	211f      	movs	r1, #31
200004be:	187b      	adds	r3, r7, r1
200004c0:	781a      	ldrb	r2, [r3, #0]
200004c2:	187b      	adds	r3, r7, r1
200004c4:	3201      	adds	r2, #1
200004c6:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200004c8:	231f      	movs	r3, #31
200004ca:	18fb      	adds	r3, r7, r3
200004cc:	781b      	ldrb	r3, [r3, #0]
200004ce:	2b3f      	cmp	r3, #63	; 0x3f
200004d0:	d9ea      	bls.n	200004a8 <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
200004d2:	46c0      	nop			; (mov r8, r8)
200004d4:	4b07      	ldr	r3, [pc, #28]	; (200004f4 <FLASH_Program_Fast+0x84>)
200004d6:	691a      	ldr	r2, [r3, #16]
200004d8:	23c0      	movs	r3, #192	; 0xc0
200004da:	029b      	lsls	r3, r3, #10
200004dc:	4013      	ands	r3, r2
200004de:	d1f9      	bne.n	200004d4 <FLASH_Program_Fast+0x64>
200004e0:	693b      	ldr	r3, [r7, #16]
200004e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200004e4:	68bb      	ldr	r3, [r7, #8]
200004e6:	f383 8810 	msr	PRIMASK, r3
}
200004ea:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200004ec:	46c0      	nop			; (mov r8, r8)
200004ee:	46bd      	mov	sp, r7
200004f0:	b008      	add	sp, #32
200004f2:	bd80      	pop	{r7, pc}
200004f4:	40022000 	.word	0x40022000
