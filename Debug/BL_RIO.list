
BL_RIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078f8  080000b8  080000b8  000100b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000078c  080079b0  080079b0  000179b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800813c  0800813c  0002050a  2**0
                  CONTENTS
  4 .ARM          00000000  0800813c  0800813c  0002050a  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800813c  0800813c  0002050a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800813c  0800813c  0001813c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008140  08008140  00018140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000400  08008144  00020400  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .shared_mem   00000012  200004f8  0800823c  000204f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000858  20000510  0800824e  00020510  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000d68  0800824e  00020d68  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  0002050a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014ae0  00000000  00000000  00020532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fc2  00000000  00000000  00035012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e8  00000000  00000000  00037fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ff0  00000000  00000000  000390c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b319  00000000  00000000  0003a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014fe0  00000000  00000000  000553c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6590  00000000  00000000  0006a3a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00110939  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045dc  00000000  00000000  0011098c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000510 	.word	0x20000510
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08007984 	.word	0x08007984

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000514 	.word	0x20000514
 80000fc:	08007984 	.word	0x08007984

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	; 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	; 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	; 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <crc32_for_byte>:
 * Invalid file names and files that cause errors are silently skipped.
 * The program reads from stdin if it is called with no arguments.
 *
 * From http://home.thep.lu.se/~bjorn/crc/ */

uint32_t crc32_for_byte(uint32_t r) {
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  for(int j = 0; j < 8; ++j)
 8000418:	2300      	movs	r3, #0
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	e00d      	b.n	800043a <crc32_for_byte+0x2a>
    r = (r & 1? 0: (uint32_t)0xEDB88320L) ^ r >> 1;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2201      	movs	r2, #1
 8000422:	4013      	ands	r3, r2
 8000424:	d001      	beq.n	800042a <crc32_for_byte+0x1a>
 8000426:	2300      	movs	r3, #0
 8000428:	e000      	b.n	800042c <crc32_for_byte+0x1c>
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <crc32_for_byte+0x40>)
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	0852      	lsrs	r2, r2, #1
 8000430:	4053      	eors	r3, r2
 8000432:	607b      	str	r3, [r7, #4]
  for(int j = 0; j < 8; ++j)
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	3301      	adds	r3, #1
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	2b07      	cmp	r3, #7
 800043e:	ddee      	ble.n	800041e <crc32_for_byte+0xe>
  return r ^ (uint32_t)0xFF000000L;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	22ff      	movs	r2, #255	; 0xff
 8000444:	0612      	lsls	r2, r2, #24
 8000446:	4053      	eors	r3, r2
}
 8000448:	0018      	movs	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	b004      	add	sp, #16
 800044e:	bd80      	pop	{r7, pc}
 8000450:	edb88320 	.word	0xedb88320

08000454 <crc32>:

uint32_t crc32(const void *data, uint32_t n_bytes) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0;
 800045e:	2300      	movs	r3, #0
 8000460:	617b      	str	r3, [r7, #20]
  static uint32_t table[0x100];
  if(!*table)
 8000462:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <crc32+0x78>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d111      	bne.n	800048e <crc32+0x3a>
    for(size_t i = 0; i < 0x100; ++i)
 800046a:	2300      	movs	r3, #0
 800046c:	613b      	str	r3, [r7, #16]
 800046e:	e00b      	b.n	8000488 <crc32+0x34>
      table[i] = crc32_for_byte(i);
 8000470:	693b      	ldr	r3, [r7, #16]
 8000472:	0018      	movs	r0, r3
 8000474:	f7ff ffcc 	bl	8000410 <crc32_for_byte>
 8000478:	0001      	movs	r1, r0
 800047a:	4b14      	ldr	r3, [pc, #80]	; (80004cc <crc32+0x78>)
 800047c:	693a      	ldr	r2, [r7, #16]
 800047e:	0092      	lsls	r2, r2, #2
 8000480:	50d1      	str	r1, [r2, r3]
    for(size_t i = 0; i < 0x100; ++i)
 8000482:	693b      	ldr	r3, [r7, #16]
 8000484:	3301      	adds	r3, #1
 8000486:	613b      	str	r3, [r7, #16]
 8000488:	693b      	ldr	r3, [r7, #16]
 800048a:	2bff      	cmp	r3, #255	; 0xff
 800048c:	d9f0      	bls.n	8000470 <crc32+0x1c>
  for(size_t i = 0; i < n_bytes; ++i)
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	e012      	b.n	80004ba <crc32+0x66>
    crc = table[(uint8_t)crc ^ ((uint8_t*)data)[i]] ^ crc >> 8;
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	b2da      	uxtb	r2, r3
 8000498:	6879      	ldr	r1, [r7, #4]
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	18cb      	adds	r3, r1, r3
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	4053      	eors	r3, r2
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	001a      	movs	r2, r3
 80004a6:	4b09      	ldr	r3, [pc, #36]	; (80004cc <crc32+0x78>)
 80004a8:	0092      	lsls	r2, r2, #2
 80004aa:	58d2      	ldr	r2, [r2, r3]
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	0a1b      	lsrs	r3, r3, #8
 80004b0:	4053      	eors	r3, r2
 80004b2:	617b      	str	r3, [r7, #20]
  for(size_t i = 0; i < n_bytes; ++i)
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	3301      	adds	r3, #1
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	68fa      	ldr	r2, [r7, #12]
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	429a      	cmp	r2, r3
 80004c0:	d3e8      	bcc.n	8000494 <crc32+0x40>

  return crc;
 80004c2:	697b      	ldr	r3, [r7, #20]
}
 80004c4:	0018      	movs	r0, r3
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b006      	add	sp, #24
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	2000052c 	.word	0x2000052c

080004d0 <image_get_header>:
#include "image.h"
#include "memoryMap.h"
#include "crc32.h"

const image_hdr_t *image_get_header(image_slot_t slot)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	0002      	movs	r2, r0
 80004d8:	1dfb      	adds	r3, r7, #7
 80004da:	701a      	strb	r2, [r3, #0]
    const image_hdr_t *hdr = NULL;
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]

    switch (slot)
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d002      	beq.n	80004ee <image_get_header+0x1e>
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	d003      	beq.n	80004f4 <image_get_header+0x24>
        break;
    case IMAGE_SLOT_2:
        hdr = (const image_hdr_t *) &__loader_rom_start__;
        break;
    default:
        break;
 80004ec:	e005      	b.n	80004fa <image_get_header+0x2a>
        hdr = (const image_hdr_t *) &__app_rom_start__;
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <image_get_header+0x54>)
 80004f0:	60fb      	str	r3, [r7, #12]
        break;
 80004f2:	e002      	b.n	80004fa <image_get_header+0x2a>
        hdr = (const image_hdr_t *) &__loader_rom_start__;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <image_get_header+0x58>)
 80004f6:	60fb      	str	r3, [r7, #12]
        break;
 80004f8:	46c0      	nop			; (mov r8, r8)
    }

    if (hdr && hdr->image_magic == IMAGE_MAGIC)
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d00b      	beq.n	8000518 <image_get_header+0x48>
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	781a      	ldrb	r2, [r3, #0]
 8000504:	785b      	ldrb	r3, [r3, #1]
 8000506:	021b      	lsls	r3, r3, #8
 8000508:	4313      	orrs	r3, r2
 800050a:	b29a      	uxth	r2, r3
 800050c:	23e7      	movs	r3, #231	; 0xe7
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	429a      	cmp	r2, r3
 8000512:	d101      	bne.n	8000518 <image_get_header+0x48>
    {
        return hdr;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	e000      	b.n	800051a <image_get_header+0x4a>
    }
    else
    {
        return NULL;
 8000518:	2300      	movs	r3, #0
    }
}
 800051a:	0018      	movs	r0, r3
 800051c:	46bd      	mov	sp, r7
 800051e:	b004      	add	sp, #16
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	0800c800 	.word	0x0800c800
 8000528:	08046800 	.word	0x08046800

0800052c <image_validate>:

int image_validate(image_slot_t slot, const image_hdr_t *hdr)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
 8000532:	0002      	movs	r2, r0
 8000534:	6039      	str	r1, [r7, #0]
 8000536:	1dfb      	adds	r3, r7, #7
 8000538:	701a      	strb	r2, [r3, #0]
    // void *addr = (slot == IMAGE_SLOT_1 ? &__apparom_start__ : &__appbrom_start__);
    void *addr = NULL;
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]

    switch (slot)
 800053e:	1dfb      	adds	r3, r7, #7
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d002      	beq.n	800054c <image_validate+0x20>
 8000546:	2b02      	cmp	r3, #2
 8000548:	d003      	beq.n	8000552 <image_validate+0x26>
 800054a:	e005      	b.n	8000558 <image_validate+0x2c>
    {
    case IMAGE_SLOT_1:
        addr = &__app_rom_start__;
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <image_validate+0xac>)
 800054e:	617b      	str	r3, [r7, #20]
        break;
 8000550:	e007      	b.n	8000562 <image_validate+0x36>
    case IMAGE_SLOT_2:
        addr = &__loader_rom_start__;
 8000552:	4b22      	ldr	r3, [pc, #136]	; (80005dc <image_validate+0xb0>)
 8000554:	617b      	str	r3, [r7, #20]
        break;
 8000556:	e004      	b.n	8000562 <image_validate+0x36>
    default:
        addr = NULL;
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
        return -1;
 800055c:	2301      	movs	r3, #1
 800055e:	425b      	negs	r3, r3
 8000560:	e036      	b.n	80005d0 <image_validate+0xa4>
    }

    addr += sizeof(image_hdr_t);
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	3320      	adds	r3, #32
 8000566:	617b      	str	r3, [r7, #20]
    uint32_t len = hdr->data_size;
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	7a1a      	ldrb	r2, [r3, #8]
 800056c:	7a59      	ldrb	r1, [r3, #9]
 800056e:	0209      	lsls	r1, r1, #8
 8000570:	430a      	orrs	r2, r1
 8000572:	7a99      	ldrb	r1, [r3, #10]
 8000574:	0409      	lsls	r1, r1, #16
 8000576:	430a      	orrs	r2, r1
 8000578:	7adb      	ldrb	r3, [r3, #11]
 800057a:	061b      	lsls	r3, r3, #24
 800057c:	4313      	orrs	r3, r2
 800057e:	613b      	str	r3, [r7, #16]
    uint32_t crc_calc = crc32(addr, len);
 8000580:	693a      	ldr	r2, [r7, #16]
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	0011      	movs	r1, r2
 8000586:	0018      	movs	r0, r3
 8000588:	f7ff ff64 	bl	8000454 <crc32>
 800058c:	0003      	movs	r3, r0
 800058e:	60fb      	str	r3, [r7, #12]
    uint32_t crc_image = hdr->crc;
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	791a      	ldrb	r2, [r3, #4]
 8000594:	7959      	ldrb	r1, [r3, #5]
 8000596:	0209      	lsls	r1, r1, #8
 8000598:	430a      	orrs	r2, r1
 800059a:	7999      	ldrb	r1, [r3, #6]
 800059c:	0409      	lsls	r1, r1, #16
 800059e:	430a      	orrs	r2, r1
 80005a0:	79db      	ldrb	r3, [r3, #7]
 80005a2:	061b      	lsls	r3, r3, #24
 80005a4:	4313      	orrs	r3, r2
 80005a6:	60bb      	str	r3, [r7, #8]

    if (crc_calc == crc_image) {
 80005a8:	68fa      	ldr	r2, [r7, #12]
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d107      	bne.n	80005c0 <image_validate+0x94>
        printf("CRC OK: %lx vs %lx\r\n", crc_image, crc_calc);
 80005b0:	68fa      	ldr	r2, [r7, #12]
 80005b2:	68b9      	ldr	r1, [r7, #8]
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <image_validate+0xb4>)
 80005b6:	0018      	movs	r0, r3
 80005b8:	f005 fede 	bl	8006378 <iprintf>
        return 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	e007      	b.n	80005d0 <image_validate+0xa4>
    }
    else {
        printf("CRC mismatch: %lx vs %lx\r\n", crc_image, crc_calc);
 80005c0:	68fa      	ldr	r2, [r7, #12]
 80005c2:	68b9      	ldr	r1, [r7, #8]
 80005c4:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <image_validate+0xb8>)
 80005c6:	0018      	movs	r0, r3
 80005c8:	f005 fed6 	bl	8006378 <iprintf>
        return -1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	425b      	negs	r3, r3
    }

}
 80005d0:	0018      	movs	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	b006      	add	sp, #24
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	0800c800 	.word	0x0800c800
 80005dc:	08046800 	.word	0x08046800
 80005e0:	080079b0 	.word	0x080079b0
 80005e4:	080079c8 	.word	0x080079c8

080005e8 <HAL_UARTEx_RxEventCallback>:
#define STRINGIFY(x) #x
#define ADD_QUOTES(y) STRINGIFY(y)


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	000a      	movs	r2, r1
 80005f2:	1cbb      	adds	r3, r7, #2
 80005f4:	801a      	strh	r2, [r3, #0]
	  HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx_buff, sizeof rx_buff);
 80005f6:	2382      	movs	r3, #130	; 0x82
 80005f8:	009a      	lsls	r2, r3, #2
 80005fa:	4906      	ldr	r1, [pc, #24]	; (8000614 <HAL_UARTEx_RxEventCallback+0x2c>)
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <HAL_UARTEx_RxEventCallback+0x30>)
 80005fe:	0018      	movs	r0, r3
 8000600:	f005 fdb8 	bl	8006174 <HAL_UARTEx_ReceiveToIdle_IT>
	  //memcpy(message,rx_buff,4);
	  dato_recivido = true;
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <HAL_UARTEx_RxEventCallback+0x34>)
 8000606:	2201      	movs	r2, #1
 8000608:	701a      	strb	r2, [r3, #0]
	  //counter++;
}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b002      	add	sp, #8
 8000610:	bd80      	pop	{r7, pc}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	20000b08 	.word	0x20000b08
 8000618:	200009c4 	.word	0x200009c4
 800061c:	20000af8 	.word	0x20000af8

08000620 <CRC16_X25>:
  0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,
  0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78
};

uint16_t CRC16_X25(const void * data, uint16_t sizeOfData, uint16_t startCrc)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	0008      	movs	r0, r1
 800062a:	0011      	movs	r1, r2
 800062c:	1cbb      	adds	r3, r7, #2
 800062e:	1c02      	adds	r2, r0, #0
 8000630:	801a      	strh	r2, [r3, #0]
 8000632:	003b      	movs	r3, r7
 8000634:	1c0a      	adds	r2, r1, #0
 8000636:	801a      	strh	r2, [r3, #0]
	  const uint8_t * dataPtr = (const uint8_t *) data;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	60fb      	str	r3, [r7, #12]

	  startCrc = startCrc ^ 0xffff;
 800063c:	003b      	movs	r3, r7
 800063e:	003a      	movs	r2, r7
 8000640:	8812      	ldrh	r2, [r2, #0]
 8000642:	43d2      	mvns	r2, r2
 8000644:	801a      	strh	r2, [r3, #0]

	  while (sizeOfData--) {
 8000646:	e012      	b.n	800066e <CRC16_X25+0x4e>
	    startCrc = crc16Table[(startCrc ^ *dataPtr++) & 0xFF] ^ (startCrc >> 8);
 8000648:	003b      	movs	r3, r7
 800064a:	881a      	ldrh	r2, [r3, #0]
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	1c59      	adds	r1, r3, #1
 8000650:	60f9      	str	r1, [r7, #12]
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	4053      	eors	r3, r2
 8000656:	22ff      	movs	r2, #255	; 0xff
 8000658:	401a      	ands	r2, r3
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <CRC16_X25+0x6c>)
 800065c:	0052      	lsls	r2, r2, #1
 800065e:	5ad1      	ldrh	r1, [r2, r3]
 8000660:	003b      	movs	r3, r7
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	0a1b      	lsrs	r3, r3, #8
 8000666:	b29a      	uxth	r2, r3
 8000668:	003b      	movs	r3, r7
 800066a:	404a      	eors	r2, r1
 800066c:	801a      	strh	r2, [r3, #0]
	  while (sizeOfData--) {
 800066e:	1cbb      	adds	r3, r7, #2
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	1cba      	adds	r2, r7, #2
 8000674:	1e59      	subs	r1, r3, #1
 8000676:	8011      	strh	r1, [r2, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1e5      	bne.n	8000648 <CRC16_X25+0x28>
	  }

	  return (startCrc ^ 0xffff);
 800067c:	003b      	movs	r3, r7
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	43db      	mvns	r3, r3
 8000682:	b29b      	uxth	r3, r3
}
 8000684:	0018      	movs	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	b004      	add	sp, #16
 800068a:	bd80      	pop	{r7, pc}
 800068c:	08007e1c 	.word	0x08007e1c

08000690 <write>:


uint32_t write(uint8_t *data,uint32_t begin)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b087      	sub	sp, #28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
	uint32_t end = begin+64;// return the address to next 512 bytes
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	3340      	adds	r3, #64	; 0x40
 800069e:	60fb      	str	r3, [r7, #12]
	uint32_t _index;
	uint16_t k = 0;
 80006a0:	2316      	movs	r3, #22
 80006a2:	18fb      	adds	r3, r7, r3
 80006a4:	2200      	movs	r2, #0
 80006a6:	801a      	strh	r2, [r3, #0]
	HAL_FLASH_Unlock();
 80006a8:	f001 ff3e 	bl	8002528 <HAL_FLASH_Unlock>
	for(uint32_t i = begin; i<end; i++)// 64*8 = 512 bytes
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	e023      	b.n	80006fa <write+0x6a>
	{
	  _index = 8*i;
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	00db      	lsls	r3, r3, #3
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	4915      	ldr	r1, [pc, #84]	; (8000710 <write+0x80>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	4252      	negs	r2, r2
 80006be:	17d3      	asrs	r3, r2, #31
 80006c0:	600a      	str	r2, [r1, #0]
 80006c2:	604b      	str	r3, [r1, #4]
	  memset(&double_word,0xFF,8);
	  memcpy(&double_word,&data[k],8);
 80006c4:	2416      	movs	r4, #22
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	18d1      	adds	r1, r2, r3
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <write+0x80>)
 80006d0:	2208      	movs	r2, #8
 80006d2:	0018      	movs	r0, r3
 80006d4:	f005 fe3e 	bl	8006354 <memcpy>
	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,loader_rom+_index,double_word);
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <write+0x84>)
 80006dc:	1899      	adds	r1, r3, r2
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <write+0x80>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	2001      	movs	r0, #1
 80006e6:	f001 fed1 	bl	800248c <HAL_FLASH_Program>
	  k+=8;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	193a      	adds	r2, r7, r4
 80006ee:	8812      	ldrh	r2, [r2, #0]
 80006f0:	3208      	adds	r2, #8
 80006f2:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = begin; i<end; i++)// 64*8 = 512 bytes
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	3301      	adds	r3, #1
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d3d7      	bcc.n	80006b2 <write+0x22>
	}
	HAL_FLASH_Lock();
 8000702:	f001 ff35 	bl	8002570 <HAL_FLASH_Lock>
	return end;
 8000706:	68fb      	ldr	r3, [r7, #12]
}
 8000708:	0018      	movs	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	b007      	add	sp, #28
 800070e:	bd90      	pop	{r4, r7, pc}
 8000710:	20000af0 	.word	0x20000af0
 8000714:	08046800 	.word	0x08046800

08000718 <clear_app_rom>:



void clear_app_rom(void)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b087      	sub	sp, #28
 800071c:	af00      	add	r7, sp, #0
	printf("\r Clean APP_Room \r\n");
 800071e:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <clear_app_rom+0x98>)
 8000720:	0018      	movs	r0, r3
 8000722:	f005 feb5 	bl	8006490 <puts>
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]

	HAL_FLASH_Unlock();
 800072a:	f001 fefd 	bl	8002528 <HAL_FLASH_Unlock>
	FLASH->OPTR |= FLASH_OPTR_DUAL_BANK_Msk;
 800072e:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <clear_app_rom+0x9c>)
 8000730:	6a1a      	ldr	r2, [r3, #32]
 8000732:	4b20      	ldr	r3, [pc, #128]	; (80007b4 <clear_app_rom+0x9c>)
 8000734:	2180      	movs	r1, #128	; 0x80
 8000736:	0389      	lsls	r1, r1, #14
 8000738:	430a      	orrs	r2, r1
 800073a:	621a      	str	r2, [r3, #32]
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800073c:	2408      	movs	r4, #8
 800073e:	193b      	adds	r3, r7, r4
 8000740:	2202      	movs	r2, #2
 8000742:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.Page = 25;
 8000744:	193b      	adds	r3, r7, r4
 8000746:	2219      	movs	r2, #25
 8000748:	609a      	str	r2, [r3, #8]
	  EraseInitStruct.Banks = FLASH_BANK_1;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2204      	movs	r2, #4
 800074e:	605a      	str	r2, [r3, #4]
	  EraseInitStruct.NbPages = 103;
 8000750:	193b      	adds	r3, r7, r4
 8000752:	2267      	movs	r2, #103	; 0x67
 8000754:	60da      	str	r2, [r3, #12]
	  HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8000756:	1d3a      	adds	r2, r7, #4
 8000758:	193b      	adds	r3, r7, r4
 800075a:	0011      	movs	r1, r2
 800075c:	0018      	movs	r0, r3
 800075e:	f001 ff91 	bl	8002684 <HAL_FLASHEx_Erase>
	  HAL_FLASH_Lock();
 8000762:	f001 ff05 	bl	8002570 <HAL_FLASH_Lock>

	  PageError = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
	  HAL_FLASH_Unlock();
 800076a:	f001 fedd 	bl	8002528 <HAL_FLASH_Unlock>
	  FLASH->OPTR |= FLASH_OPTR_DUAL_BANK_Msk;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <clear_app_rom+0x9c>)
 8000770:	6a1a      	ldr	r2, [r3, #32]
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <clear_app_rom+0x9c>)
 8000774:	2180      	movs	r1, #128	; 0x80
 8000776:	0389      	lsls	r1, r1, #14
 8000778:	430a      	orrs	r2, r1
 800077a:	621a      	str	r2, [r3, #32]
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800077c:	0021      	movs	r1, r4
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2202      	movs	r2, #2
 8000782:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.Page = 128;
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2280      	movs	r2, #128	; 0x80
 8000788:	609a      	str	r2, [r3, #8]
	  EraseInitStruct.Banks = FLASH_BANK_2;
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	0212      	lsls	r2, r2, #8
 8000790:	605a      	str	r2, [r3, #4]
	  EraseInitStruct.NbPages = 13;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	220d      	movs	r2, #13
 8000796:	60da      	str	r2, [r3, #12]
	  HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8000798:	1d3a      	adds	r2, r7, #4
 800079a:	187b      	adds	r3, r7, r1
 800079c:	0011      	movs	r1, r2
 800079e:	0018      	movs	r0, r3
 80007a0:	f001 ff70 	bl	8002684 <HAL_FLASHEx_Erase>
	  HAL_FLASH_Lock();
 80007a4:	f001 fee4 	bl	8002570 <HAL_FLASH_Lock>
}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b007      	add	sp, #28
 80007ae:	bd90      	pop	{r4, r7, pc}
 80007b0:	080079e4 	.word	0x080079e4
 80007b4:	40022000 	.word	0x40022000

080007b8 <clear_loader_rom>:

void clear_loader_rom(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
	printf("\r Clean Loader_Room \r\n");
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <clear_loader_rom+0x5c>)
 80007c0:	0018      	movs	r0, r3
 80007c2:	f005 fe65 	bl	8006490 <puts>
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
	  PageError = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
	  HAL_FLASH_Unlock();
 80007ce:	f001 feab 	bl	8002528 <HAL_FLASH_Unlock>
	  FLASH->OPTR |= FLASH_OPTR_DUAL_BANK_Msk;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <clear_loader_rom+0x60>)
 80007d4:	6a1a      	ldr	r2, [r3, #32]
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <clear_loader_rom+0x60>)
 80007d8:	2180      	movs	r1, #128	; 0x80
 80007da:	0389      	lsls	r1, r1, #14
 80007dc:	430a      	orrs	r2, r1
 80007de:	621a      	str	r2, [r3, #32]
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80007e0:	2108      	movs	r1, #8
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2202      	movs	r2, #2
 80007e6:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.Page = 141;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	228d      	movs	r2, #141	; 0x8d
 80007ec:	609a      	str	r2, [r3, #8]
	  EraseInitStruct.Banks = FLASH_BANK_2;
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2280      	movs	r2, #128	; 0x80
 80007f2:	0212      	lsls	r2, r2, #8
 80007f4:	605a      	str	r2, [r3, #4]
	  EraseInitStruct.NbPages = 115;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2273      	movs	r2, #115	; 0x73
 80007fa:	60da      	str	r2, [r3, #12]
	  HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80007fc:	1d3a      	adds	r2, r7, #4
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	0011      	movs	r1, r2
 8000802:	0018      	movs	r0, r3
 8000804:	f001 ff3e 	bl	8002684 <HAL_FLASHEx_Erase>
	  HAL_FLASH_Lock();
 8000808:	f001 feb2 	bl	8002570 <HAL_FLASH_Lock>
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	b006      	add	sp, #24
 8000812:	bd80      	pop	{r7, pc}
 8000814:	080079f8 	.word	0x080079f8
 8000818:	40022000 	.word	0x40022000

0800081c <print_double_word>:

void print_double_word(uint32_t Address,uint64_t *doubleword)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
	uint8_t *ptr = (uint8_t*)doubleword;
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	60fb      	str	r3, [r7, #12]
	  	  printf("\r Address: %08lX, Data:  ",Address);
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <print_double_word+0x60>)
 800082e:	0011      	movs	r1, r2
 8000830:	0018      	movs	r0, r3
 8000832:	f005 fda1 	bl	8006378 <iprintf>
	  	  for(uint8_t k = 0; k < 8; k++)
 8000836:	230b      	movs	r3, #11
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
 800083e:	e00f      	b.n	8000860 <print_double_word+0x44>
	  		  printf("%02X",*(ptr++));
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	1c5a      	adds	r2, r3, #1
 8000844:	60fa      	str	r2, [r7, #12]
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	001a      	movs	r2, r3
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <print_double_word+0x64>)
 800084c:	0011      	movs	r1, r2
 800084e:	0018      	movs	r0, r3
 8000850:	f005 fd92 	bl	8006378 <iprintf>
	  	  for(uint8_t k = 0; k < 8; k++)
 8000854:	210b      	movs	r1, #11
 8000856:	187b      	adds	r3, r7, r1
 8000858:	781a      	ldrb	r2, [r3, #0]
 800085a:	187b      	adds	r3, r7, r1
 800085c:	3201      	adds	r2, #1
 800085e:	701a      	strb	r2, [r3, #0]
 8000860:	230b      	movs	r3, #11
 8000862:	18fb      	adds	r3, r7, r3
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b07      	cmp	r3, #7
 8000868:	d9ea      	bls.n	8000840 <print_double_word+0x24>
	  	  printf("|\r\r\n");
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <print_double_word+0x68>)
 800086c:	0018      	movs	r0, r3
 800086e:	f005 fe0f 	bl	8006490 <puts>
}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	b004      	add	sp, #16
 8000878:	bd80      	pop	{r7, pc}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	08007a10 	.word	0x08007a10
 8000880:	08007a2c 	.word	0x08007a2c
 8000884:	08007a34 	.word	0x08007a34

08000888 <clone_rom>:

uint32_t clone_rom(uint32_t Firmware_zise)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	uint32_t rows = Firmware_zise/8;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	08db      	lsrs	r3, r3, #3
 8000894:	60fb      	str	r3, [r7, #12]
	uint32_t offset = Firmware_zise%8;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2207      	movs	r2, #7
 800089a:	4013      	ands	r3, r2
 800089c:	60bb      	str	r3, [r7, #8]
	uint32_t _index = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
	printf("\r Clear app rom \r\n");
 80008a2:	4b6c      	ldr	r3, [pc, #432]	; (8000a54 <clone_rom+0x1cc>)
 80008a4:	0018      	movs	r0, r3
 80008a6:	f005 fdf3 	bl	8006490 <puts>

	for(int k = 0; k <10; k++)
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
 80008ae:	e01b      	b.n	80008e8 <clone_rom+0x60>
	{
		printf("\033\143");
 80008b0:	4b69      	ldr	r3, [pc, #420]	; (8000a58 <clone_rom+0x1d0>)
 80008b2:	0018      	movs	r0, r3
 80008b4:	f005 fd60 	bl	8006378 <iprintf>
		for(int q = 0; q<=k; q++)
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	e009      	b.n	80008d2 <clone_rom+0x4a>
		{
			printf("�?�");
 80008be:	4b67      	ldr	r3, [pc, #412]	; (8000a5c <clone_rom+0x1d4>)
 80008c0:	0018      	movs	r0, r3
 80008c2:	f005 fd59 	bl	8006378 <iprintf>
			HAL_Delay(100);
 80008c6:	2064      	movs	r0, #100	; 0x64
 80008c8:	f001 fc00 	bl	80020cc <HAL_Delay>
		for(int q = 0; q<=k; q++)
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	3301      	adds	r3, #1
 80008d0:	617b      	str	r3, [r7, #20]
 80008d2:	697a      	ldr	r2, [r7, #20]
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	ddf1      	ble.n	80008be <clone_rom+0x36>
		}
		printf("\r\n");
 80008da:	4b61      	ldr	r3, [pc, #388]	; (8000a60 <clone_rom+0x1d8>)
 80008dc:	0018      	movs	r0, r3
 80008de:	f005 fdd7 	bl	8006490 <puts>
	for(int k = 0; k <10; k++)
 80008e2:	69bb      	ldr	r3, [r7, #24]
 80008e4:	3301      	adds	r3, #1
 80008e6:	61bb      	str	r3, [r7, #24]
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	2b09      	cmp	r3, #9
 80008ec:	dde0      	ble.n	80008b0 <clone_rom+0x28>
	}

	clear_app_rom();
 80008ee:	f7ff ff13 	bl	8000718 <clear_app_rom>

	printf("\r ------ Clone to slot 1 ---------- \r\n");
 80008f2:	4b5c      	ldr	r3, [pc, #368]	; (8000a64 <clone_rom+0x1dc>)
 80008f4:	0018      	movs	r0, r3
 80008f6:	f005 fdcb 	bl	8006490 <puts>
	printf("\r rows: %ld \r\n",rows);
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	4b5a      	ldr	r3, [pc, #360]	; (8000a68 <clone_rom+0x1e0>)
 80008fe:	0011      	movs	r1, r2
 8000900:	0018      	movs	r0, r3
 8000902:	f005 fd39 	bl	8006378 <iprintf>
	printf("\r offset: %ld \r\n",offset);
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	4b58      	ldr	r3, [pc, #352]	; (8000a6c <clone_rom+0x1e4>)
 800090a:	0011      	movs	r1, r2
 800090c:	0018      	movs	r0, r3
 800090e:	f005 fd33 	bl	8006378 <iprintf>
	HAL_FLASH_Unlock();
 8000912:	f001 fe09 	bl	8002528 <HAL_FLASH_Unlock>
    for(uint32_t i = 0; i<=rows-1; i++)// 12288 /8 -1 = =rows,   11532/8 =
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	e03f      	b.n	800099c <clone_rom+0x114>
    {
    	_index = 8*i;
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	00db      	lsls	r3, r3, #3
 8000920:	61fb      	str	r3, [r7, #28]
  	  RDAddr = (uint64_t *)(loader_rom + _index);
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	4a52      	ldr	r2, [pc, #328]	; (8000a70 <clone_rom+0x1e8>)
 8000926:	4694      	mov	ip, r2
 8000928:	4463      	add	r3, ip
 800092a:	001a      	movs	r2, r3
 800092c:	4b51      	ldr	r3, [pc, #324]	; (8000a74 <clone_rom+0x1ec>)
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	4951      	ldr	r1, [pc, #324]	; (8000a78 <clone_rom+0x1f0>)
 8000932:	2201      	movs	r2, #1
 8000934:	4252      	negs	r2, r2
 8000936:	17d3      	asrs	r3, r2, #31
 8000938:	600a      	str	r2, [r1, #0]
 800093a:	604b      	str	r3, [r1, #4]
  	  memset(&double_word,0xFF,8);
  	  memcpy(&double_word,RDAddr,8);
 800093c:	4b4d      	ldr	r3, [pc, #308]	; (8000a74 <clone_rom+0x1ec>)
 800093e:	6819      	ldr	r1, [r3, #0]
 8000940:	4b4d      	ldr	r3, [pc, #308]	; (8000a78 <clone_rom+0x1f0>)
 8000942:	2208      	movs	r2, #8
 8000944:	0018      	movs	r0, r3
 8000946:	f005 fd05 	bl	8006354 <memcpy>
  	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,app_rom+_index,double_word);
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	4a4b      	ldr	r2, [pc, #300]	; (8000a7c <clone_rom+0x1f4>)
 800094e:	1899      	adds	r1, r3, r2
 8000950:	4b49      	ldr	r3, [pc, #292]	; (8000a78 <clone_rom+0x1f0>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	2001      	movs	r0, #1
 8000958:	f001 fd98 	bl	800248c <HAL_FLASH_Program>
  	  crc_temp = CRC16_X25(RDAddr, 8, crc_temp);
 800095c:	4b45      	ldr	r3, [pc, #276]	; (8000a74 <clone_rom+0x1ec>)
 800095e:	6818      	ldr	r0, [r3, #0]
 8000960:	4b47      	ldr	r3, [pc, #284]	; (8000a80 <clone_rom+0x1f8>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	001a      	movs	r2, r3
 8000966:	2108      	movs	r1, #8
 8000968:	f7ff fe5a 	bl	8000620 <CRC16_X25>
 800096c:	0003      	movs	r3, r0
 800096e:	001a      	movs	r2, r3
 8000970:	4b43      	ldr	r3, [pc, #268]	; (8000a80 <clone_rom+0x1f8>)
 8000972:	801a      	strh	r2, [r3, #0]
	  printf(" \r crc parts_app_rom: %04X \n",crc_temp);
 8000974:	4b42      	ldr	r3, [pc, #264]	; (8000a80 <clone_rom+0x1f8>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	001a      	movs	r2, r3
 800097a:	4b42      	ldr	r3, [pc, #264]	; (8000a84 <clone_rom+0x1fc>)
 800097c:	0011      	movs	r1, r2
 800097e:	0018      	movs	r0, r3
 8000980:	f005 fcfa 	bl	8006378 <iprintf>
	  print_double_word(loader_rom+_index,&double_word);
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	4a3a      	ldr	r2, [pc, #232]	; (8000a70 <clone_rom+0x1e8>)
 8000988:	4694      	mov	ip, r2
 800098a:	4463      	add	r3, ip
 800098c:	4a3a      	ldr	r2, [pc, #232]	; (8000a78 <clone_rom+0x1f0>)
 800098e:	0011      	movs	r1, r2
 8000990:	0018      	movs	r0, r3
 8000992:	f7ff ff43 	bl	800081c <print_double_word>
    for(uint32_t i = 0; i<=rows-1; i++)// 12288 /8 -1 = =rows,   11532/8 =
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	3301      	adds	r3, #1
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	3b01      	subs	r3, #1
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d9ba      	bls.n	800091c <clone_rom+0x94>
    }
    if(offset!=0)
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d042      	beq.n	8000a32 <clone_rom+0x1aa>
 80009ac:	4932      	ldr	r1, [pc, #200]	; (8000a78 <clone_rom+0x1f0>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	4252      	negs	r2, r2
 80009b2:	17d3      	asrs	r3, r2, #31
 80009b4:	600a      	str	r2, [r1, #0]
 80009b6:	604b      	str	r3, [r1, #4]
    {
    	memset(&double_word,0xFF,8);
		_index+= 8;
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	3308      	adds	r3, #8
 80009bc:	61fb      	str	r3, [r7, #28]
		RDAddr = (uint64_t *)(loader_rom + _index);
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	4a2b      	ldr	r2, [pc, #172]	; (8000a70 <clone_rom+0x1e8>)
 80009c2:	4694      	mov	ip, r2
 80009c4:	4463      	add	r3, ip
 80009c6:	001a      	movs	r2, r3
 80009c8:	4b2a      	ldr	r3, [pc, #168]	; (8000a74 <clone_rom+0x1ec>)
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	492a      	ldr	r1, [pc, #168]	; (8000a78 <clone_rom+0x1f0>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	4252      	negs	r2, r2
 80009d2:	17d3      	asrs	r3, r2, #31
 80009d4:	600a      	str	r2, [r1, #0]
 80009d6:	604b      	str	r3, [r1, #4]
		memset(&double_word,0xFF,8);
		memcpy(&double_word,RDAddr,offset);
 80009d8:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <clone_rom+0x1ec>)
 80009da:	6819      	ldr	r1, [r3, #0]
 80009dc:	68ba      	ldr	r2, [r7, #8]
 80009de:	4b26      	ldr	r3, [pc, #152]	; (8000a78 <clone_rom+0x1f0>)
 80009e0:	0018      	movs	r0, r3
 80009e2:	f005 fcb7 	bl	8006354 <memcpy>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,app_rom+_index,double_word);
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	4a24      	ldr	r2, [pc, #144]	; (8000a7c <clone_rom+0x1f4>)
 80009ea:	1899      	adds	r1, r3, r2
 80009ec:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <clone_rom+0x1f0>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	2001      	movs	r0, #1
 80009f4:	f001 fd4a 	bl	800248c <HAL_FLASH_Program>
		crc_temp = CRC16_X25(&double_word,offset, crc_temp);
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	b299      	uxth	r1, r3
 80009fc:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <clone_rom+0x1f8>)
 80009fe:	881a      	ldrh	r2, [r3, #0]
 8000a00:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <clone_rom+0x1f0>)
 8000a02:	0018      	movs	r0, r3
 8000a04:	f7ff fe0c 	bl	8000620 <CRC16_X25>
 8000a08:	0003      	movs	r3, r0
 8000a0a:	001a      	movs	r2, r3
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <clone_rom+0x1f8>)
 8000a0e:	801a      	strh	r2, [r3, #0]
		printf(" \r crc parts_app_rom: %04X \n",crc_temp);
 8000a10:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <clone_rom+0x1f8>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	001a      	movs	r2, r3
 8000a16:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <clone_rom+0x1fc>)
 8000a18:	0011      	movs	r1, r2
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f005 fcac 	bl	8006378 <iprintf>
		print_double_word(loader_rom+_index,&double_word);
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	4a13      	ldr	r2, [pc, #76]	; (8000a70 <clone_rom+0x1e8>)
 8000a24:	4694      	mov	ip, r2
 8000a26:	4463      	add	r3, ip
 8000a28:	4a13      	ldr	r2, [pc, #76]	; (8000a78 <clone_rom+0x1f0>)
 8000a2a:	0011      	movs	r1, r2
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f7ff fef5 	bl	800081c <print_double_word>
    }
    HAL_FLASH_Lock();
 8000a32:	f001 fd9d 	bl	8002570 <HAL_FLASH_Lock>


    if(crc_temp == CRC_16)
 8000a36:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <clone_rom+0x1f8>)
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <clone_rom+0x200>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d101      	bne.n	8000a48 <clone_rom+0x1c0>
   		return 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	e000      	b.n	8000a4a <clone_rom+0x1c2>
    else
    	return 1;
 8000a48:	2301      	movs	r3, #1
}
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b008      	add	sp, #32
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	08007a38 	.word	0x08007a38
 8000a58:	08007a4c 	.word	0x08007a4c
 8000a5c:	08007a50 	.word	0x08007a50
 8000a60:	08007a58 	.word	0x08007a58
 8000a64:	08007a5c 	.word	0x08007a5c
 8000a68:	08007a84 	.word	0x08007a84
 8000a6c:	08007a94 	.word	0x08007a94
 8000a70:	08046800 	.word	0x08046800
 8000a74:	20000aec 	.word	0x20000aec
 8000a78:	20000af0 	.word	0x20000af0
 8000a7c:	0800c800 	.word	0x0800c800
 8000a80:	20000d1e 	.word	0x20000d1e
 8000a84:	08007aa8 	.word	0x08007aa8
 8000a88:	20000d14 	.word	0x20000d14

08000a8c <wait>:

void wait(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	 while(dato_recivido == false)
 8000a90:	e006      	b.n	8000aa0 <wait+0x14>
	 {
		 printf("\r waiting... \r\n");
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <wait+0x2c>)
 8000a94:	0018      	movs	r0, r3
 8000a96:	f005 fcfb 	bl	8006490 <puts>
		 HAL_Delay(100);
 8000a9a:	2064      	movs	r0, #100	; 0x64
 8000a9c:	f001 fb16 	bl	80020cc <HAL_Delay>
	 while(dato_recivido == false)
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <wait+0x30>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	4053      	eors	r3, r2
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d1f1      	bne.n	8000a92 <wait+0x6>
	 }
}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	08007ac8 	.word	0x08007ac8
 8000abc:	20000af8 	.word	0x20000af8

08000ac0 <update_firmware>:

uint32_t update_firmware (void)
{
 8000ac0:	b5b0      	push	{r4, r5, r7, lr}
 8000ac2:	b08e      	sub	sp, #56	; 0x38
 8000ac4:	af00      	add	r7, sp, #0
	 uint32_t err = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	637b      	str	r3, [r7, #52]	; 0x34
	 //uint8_t len=0;
	 uint8_t buffer[10];
	 uint8_t strnum[10];
	 uint8_t OK[3] = {0x4F,0x4B,0x20};
 8000aca:	2310      	movs	r3, #16
 8000acc:	18fb      	adds	r3, r7, r3
 8000ace:	4a87      	ldr	r2, [pc, #540]	; (8000cec <update_firmware+0x22c>)
 8000ad0:	8811      	ldrh	r1, [r2, #0]
 8000ad2:	8019      	strh	r1, [r3, #0]
 8000ad4:	7892      	ldrb	r2, [r2, #2]
 8000ad6:	709a      	strb	r2, [r3, #2]
	 uint8_t ERR[4] = {0x45,0x52,0x52,0x20};
 8000ad8:	230c      	movs	r3, #12
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	4a84      	ldr	r2, [pc, #528]	; (8000cf0 <update_firmware+0x230>)
 8000ade:	601a      	str	r2, [r3, #0]
	 uint32_t cmd7 [2] = {0x00,0x00};
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	605a      	str	r2, [r3, #4]
	 clear_loader_rom();
 8000aec:	f7ff fe64 	bl	80007b8 <clear_loader_rom>
	 HAL_UART_Transmit(&huart2,"FZ\n", (sizeof("FZ\n")-1),500);// begin
 8000af0:	23fa      	movs	r3, #250	; 0xfa
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	497f      	ldr	r1, [pc, #508]	; (8000cf4 <update_firmware+0x234>)
 8000af6:	4880      	ldr	r0, [pc, #512]	; (8000cf8 <update_firmware+0x238>)
 8000af8:	2203      	movs	r2, #3
 8000afa:	f003 fbd1 	bl	80042a0 <HAL_UART_Transmit>
	 printf("\r Send FZ ... \r\n");
 8000afe:	4b7f      	ldr	r3, [pc, #508]	; (8000cfc <update_firmware+0x23c>)
 8000b00:	0018      	movs	r0, r3
 8000b02:	f005 fcc5 	bl	8006490 <puts>
	 wait();
 8000b06:	f7ff ffc1 	bl	8000a8c <wait>
	 dato_recivido = false;
 8000b0a:	4b7d      	ldr	r3, [pc, #500]	; (8000d00 <update_firmware+0x240>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
 8000b10:	4b7c      	ldr	r3, [pc, #496]	; (8000d04 <update_firmware+0x244>)
 8000b12:	681a      	ldr	r2, [r3, #0]

	memcpy(&FW_SIZE,&rx_buff[0],4);
 8000b14:	4b7c      	ldr	r3, [pc, #496]	; (8000d08 <update_firmware+0x248>)
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	4b7a      	ldr	r3, [pc, #488]	; (8000d04 <update_firmware+0x244>)
 8000b1a:	685a      	ldr	r2, [r3, #4]
	memcpy(&CRC_16,&rx_buff[4],4);
 8000b1c:	4b7b      	ldr	r3, [pc, #492]	; (8000d0c <update_firmware+0x24c>)
 8000b1e:	601a      	str	r2, [r3, #0]
	pages = (uint32_t)(FW_SIZE/512);
 8000b20:	4b79      	ldr	r3, [pc, #484]	; (8000d08 <update_firmware+0x248>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	0a5a      	lsrs	r2, r3, #9
 8000b26:	4b7a      	ldr	r3, [pc, #488]	; (8000d10 <update_firmware+0x250>)
 8000b28:	601a      	str	r2, [r3, #0]
	n_bytes = 512*pages;
 8000b2a:	4b79      	ldr	r3, [pc, #484]	; (8000d10 <update_firmware+0x250>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	025a      	lsls	r2, r3, #9
 8000b30:	4b78      	ldr	r3, [pc, #480]	; (8000d14 <update_firmware+0x254>)
 8000b32:	601a      	str	r2, [r3, #0]
	offset = FW_SIZE - n_bytes;
 8000b34:	4b74      	ldr	r3, [pc, #464]	; (8000d08 <update_firmware+0x248>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b76      	ldr	r3, [pc, #472]	; (8000d14 <update_firmware+0x254>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	1ad2      	subs	r2, r2, r3
 8000b3e:	4b76      	ldr	r3, [pc, #472]	; (8000d18 <update_firmware+0x258>)
 8000b40:	601a      	str	r2, [r3, #0]
	printf(" \r fw_size: %lX \n",FW_SIZE);
 8000b42:	4b71      	ldr	r3, [pc, #452]	; (8000d08 <update_firmware+0x248>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	4b75      	ldr	r3, [pc, #468]	; (8000d1c <update_firmware+0x25c>)
 8000b48:	0011      	movs	r1, r2
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f005 fc14 	bl	8006378 <iprintf>
	printf(" \r crc_app: %lX \n",CRC_16);
 8000b50:	4b6e      	ldr	r3, [pc, #440]	; (8000d0c <update_firmware+0x24c>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b72      	ldr	r3, [pc, #456]	; (8000d20 <update_firmware+0x260>)
 8000b56:	0011      	movs	r1, r2
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f005 fc0d 	bl	8006378 <iprintf>
	printf(" \r pages: %ld \n",pages);
 8000b5e:	4b6c      	ldr	r3, [pc, #432]	; (8000d10 <update_firmware+0x250>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	4b70      	ldr	r3, [pc, #448]	; (8000d24 <update_firmware+0x264>)
 8000b64:	0011      	movs	r1, r2
 8000b66:	0018      	movs	r0, r3
 8000b68:	f005 fc06 	bl	8006378 <iprintf>
	printf(" \r n_bytes: %ld \n",n_bytes);
 8000b6c:	4b69      	ldr	r3, [pc, #420]	; (8000d14 <update_firmware+0x254>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b6d      	ldr	r3, [pc, #436]	; (8000d28 <update_firmware+0x268>)
 8000b72:	0011      	movs	r1, r2
 8000b74:	0018      	movs	r0, r3
 8000b76:	f005 fbff 	bl	8006378 <iprintf>
	printf(" \r offset: %ld \n",offset);
 8000b7a:	4b67      	ldr	r3, [pc, #412]	; (8000d18 <update_firmware+0x258>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b6b      	ldr	r3, [pc, #428]	; (8000d2c <update_firmware+0x26c>)
 8000b80:	0011      	movs	r1, r2
 8000b82:	0018      	movs	r0, r3
 8000b84:	f005 fbf8 	bl	8006378 <iprintf>
	HAL_UART_Transmit(&huart2,"OK\n", (sizeof("OK\n")-1),500);
 8000b88:	23fa      	movs	r3, #250	; 0xfa
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	4968      	ldr	r1, [pc, #416]	; (8000d30 <update_firmware+0x270>)
 8000b8e:	485a      	ldr	r0, [pc, #360]	; (8000cf8 <update_firmware+0x238>)
 8000b90:	2203      	movs	r2, #3
 8000b92:	f003 fb85 	bl	80042a0 <HAL_UART_Transmit>
	memset(rx_buff,'\0',sizeof(rx_buff));
 8000b96:	2382      	movs	r3, #130	; 0x82
 8000b98:	009a      	lsls	r2, r3, #2
 8000b9a:	4b5a      	ldr	r3, [pc, #360]	; (8000d04 <update_firmware+0x244>)
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f005 fbe1 	bl	8006366 <memset>
	wait();
 8000ba4:	f7ff ff72 	bl	8000a8c <wait>
	 dato_recivido = false;
 8000ba8:	4b55      	ldr	r3, [pc, #340]	; (8000d00 <update_firmware+0x240>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]

	 printf(" \r Starting loader.......... \r\n");
 8000bae:	4b61      	ldr	r3, [pc, #388]	; (8000d34 <update_firmware+0x274>)
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f005 fc6d 	bl	8006490 <puts>
	int i =0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	633b      	str	r3, [r7, #48]	; 0x30
	while( i<=pages-1)
 8000bba:	e10e      	b.n	8000dda <update_firmware+0x31a>
 8000bbc:	4b51      	ldr	r3, [pc, #324]	; (8000d04 <update_firmware+0x244>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
	{
		memcpy(&index_page,&rx_buff[0],4);
 8000bc0:	4b5d      	ldr	r3, [pc, #372]	; (8000d38 <update_firmware+0x278>)
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	4b4f      	ldr	r3, [pc, #316]	; (8000d04 <update_firmware+0x244>)
 8000bc6:	685a      	ldr	r2, [r3, #4]
		memcpy(&crc_part,&rx_buff[4],4);
 8000bc8:	4b5c      	ldr	r3, [pc, #368]	; (8000d3c <update_firmware+0x27c>)
 8000bca:	601a      	str	r2, [r3, #0]
		printf(" \r index: %lX \n",index_page);
 8000bcc:	4b5a      	ldr	r3, [pc, #360]	; (8000d38 <update_firmware+0x278>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b5b      	ldr	r3, [pc, #364]	; (8000d40 <update_firmware+0x280>)
 8000bd2:	0011      	movs	r1, r2
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f005 fbcf 	bl	8006378 <iprintf>
		printf(" \r crc_part: %lX \n",crc_part);
 8000bda:	4b58      	ldr	r3, [pc, #352]	; (8000d3c <update_firmware+0x27c>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	4b59      	ldr	r3, [pc, #356]	; (8000d44 <update_firmware+0x284>)
 8000be0:	0011      	movs	r1, r2
 8000be2:	0018      	movs	r0, r3
 8000be4:	f005 fbc8 	bl	8006378 <iprintf>
		crc = CRC16_X25(&rx_buff[8], 512, 0);
 8000be8:	2380      	movs	r3, #128	; 0x80
 8000bea:	0099      	lsls	r1, r3, #2
 8000bec:	4b56      	ldr	r3, [pc, #344]	; (8000d48 <update_firmware+0x288>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f7ff fd15 	bl	8000620 <CRC16_X25>
 8000bf6:	0003      	movs	r3, r0
 8000bf8:	001a      	movs	r2, r3
 8000bfa:	4b54      	ldr	r3, [pc, #336]	; (8000d4c <update_firmware+0x28c>)
 8000bfc:	801a      	strh	r2, [r3, #0]
		crc_rec = CRC16_X25(&rx_buff[8], 512, crc_rec);
 8000bfe:	4b54      	ldr	r3, [pc, #336]	; (8000d50 <update_firmware+0x290>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	0099      	lsls	r1, r3, #2
 8000c08:	4b4f      	ldr	r3, [pc, #316]	; (8000d48 <update_firmware+0x288>)
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f7ff fd08 	bl	8000620 <CRC16_X25>
 8000c10:	0003      	movs	r3, r0
 8000c12:	001a      	movs	r2, r3
 8000c14:	4b4e      	ldr	r3, [pc, #312]	; (8000d50 <update_firmware+0x290>)
 8000c16:	601a      	str	r2, [r3, #0]
		printf(" \r crc computed: %X \r\n",crc);
 8000c18:	4b4c      	ldr	r3, [pc, #304]	; (8000d4c <update_firmware+0x28c>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	4b4d      	ldr	r3, [pc, #308]	; (8000d54 <update_firmware+0x294>)
 8000c20:	0011      	movs	r1, r2
 8000c22:	0018      	movs	r0, r3
 8000c24:	f005 fba8 	bl	8006378 <iprintf>
		printf(" \r crc_rec: %X \r\n",crc_rec);
 8000c28:	4b49      	ldr	r3, [pc, #292]	; (8000d50 <update_firmware+0x290>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b4a      	ldr	r3, [pc, #296]	; (8000d58 <update_firmware+0x298>)
 8000c2e:	0011      	movs	r1, r2
 8000c30:	0018      	movs	r0, r3
 8000c32:	f005 fba1 	bl	8006378 <iprintf>

		if(crc == crc_part)
 8000c36:	4b45      	ldr	r3, [pc, #276]	; (8000d4c <update_firmware+0x28c>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	001a      	movs	r2, r3
 8000c3c:	4b3f      	ldr	r3, [pc, #252]	; (8000d3c <update_firmware+0x27c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d000      	beq.n	8000c46 <update_firmware+0x186>
 8000c44:	e090      	b.n	8000d68 <update_firmware+0x2a8>
		{
			a = write(&rx_buff[8],a);
 8000c46:	4b45      	ldr	r3, [pc, #276]	; (8000d5c <update_firmware+0x29c>)
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	001a      	movs	r2, r3
 8000c4c:	4b3e      	ldr	r3, [pc, #248]	; (8000d48 <update_firmware+0x288>)
 8000c4e:	0011      	movs	r1, r2
 8000c50:	0018      	movs	r0, r3
 8000c52:	f7ff fd1d 	bl	8000690 <write>
 8000c56:	0003      	movs	r3, r0
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	4b40      	ldr	r3, [pc, #256]	; (8000d5c <update_firmware+0x29c>)
 8000c5c:	801a      	strh	r2, [r3, #0]

		  memset(buffer,'\0',sizeof(buffer));
 8000c5e:	2420      	movs	r4, #32
 8000c60:	193b      	adds	r3, r7, r4
 8000c62:	220a      	movs	r2, #10
 8000c64:	2100      	movs	r1, #0
 8000c66:	0018      	movs	r0, r3
 8000c68:	f005 fb7d 	bl	8006366 <memset>
		  memset(strnum,'\0',sizeof(strnum));
 8000c6c:	2514      	movs	r5, #20
 8000c6e:	197b      	adds	r3, r7, r5
 8000c70:	220a      	movs	r2, #10
 8000c72:	2100      	movs	r1, #0
 8000c74:	0018      	movs	r0, r3
 8000c76:	f005 fb76 	bl	8006366 <memset>
		  snprintf(strnum,sizeof(strnum), "%d",index_page);
 8000c7a:	4b2f      	ldr	r3, [pc, #188]	; (8000d38 <update_firmware+0x278>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a38      	ldr	r2, [pc, #224]	; (8000d60 <update_firmware+0x2a0>)
 8000c80:	1978      	adds	r0, r7, r5
 8000c82:	210a      	movs	r1, #10
 8000c84:	f005 fcd6 	bl	8006634 <sniprintf>
		  //printf("strnum: %s, len: %d \n",strnum,strlen(strnum));
		  memcpy(&buffer[0], OK, sizeof(OK));
 8000c88:	193a      	adds	r2, r7, r4
 8000c8a:	2310      	movs	r3, #16
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	0010      	movs	r0, r2
 8000c90:	0019      	movs	r1, r3
 8000c92:	2303      	movs	r3, #3
 8000c94:	001a      	movs	r2, r3
 8000c96:	f005 fb5d 	bl	8006354 <memcpy>
		  memcpy(&buffer[sizeof(OK)], strnum,strlen(strnum));
 8000c9a:	197b      	adds	r3, r7, r5
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f7ff fa2f 	bl	8000100 <strlen>
 8000ca2:	0002      	movs	r2, r0
 8000ca4:	1979      	adds	r1, r7, r5
 8000ca6:	193b      	adds	r3, r7, r4
 8000ca8:	3303      	adds	r3, #3
 8000caa:	0018      	movs	r0, r3
 8000cac:	f005 fb52 	bl	8006354 <memcpy>
		  printf(" \r %s\r\n",buffer);
 8000cb0:	193a      	adds	r2, r7, r4
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	; (8000d64 <update_firmware+0x2a4>)
 8000cb4:	0011      	movs	r1, r2
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f005 fb5e 	bl	8006378 <iprintf>
		  HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer),500);
 8000cbc:	193b      	adds	r3, r7, r4
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f7ff fa1e 	bl	8000100 <strlen>
 8000cc4:	0003      	movs	r3, r0
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	23fa      	movs	r3, #250	; 0xfa
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	1939      	adds	r1, r7, r4
 8000cce:	480a      	ldr	r0, [pc, #40]	; (8000cf8 <update_firmware+0x238>)
 8000cd0:	f003 fae6 	bl	80042a0 <HAL_UART_Transmit>
			wait();
 8000cd4:	f7ff feda 	bl	8000a8c <wait>
			dato_recivido = false;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <update_firmware+0x240>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
			err = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	637b      	str	r3, [r7, #52]	; 0x34
			i++;
 8000ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
 8000ce8:	e077      	b.n	8000dda <update_firmware+0x31a>
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	08007cbc 	.word	0x08007cbc
 8000cf0:	20525245 	.word	0x20525245
 8000cf4:	08007ad8 	.word	0x08007ad8
 8000cf8:	200009c4 	.word	0x200009c4
 8000cfc:	08007adc 	.word	0x08007adc
 8000d00:	20000af8 	.word	0x20000af8
 8000d04:	20000b08 	.word	0x20000b08
 8000d08:	20000d10 	.word	0x20000d10
 8000d0c:	20000d14 	.word	0x20000d14
 8000d10:	20000afc 	.word	0x20000afc
 8000d14:	20000b04 	.word	0x20000b04
 8000d18:	20000b00 	.word	0x20000b00
 8000d1c:	08007aec 	.word	0x08007aec
 8000d20:	08007b00 	.word	0x08007b00
 8000d24:	08007b14 	.word	0x08007b14
 8000d28:	08007b24 	.word	0x08007b24
 8000d2c:	08007b38 	.word	0x08007b38
 8000d30:	08007b4c 	.word	0x08007b4c
 8000d34:	08007b50 	.word	0x08007b50
 8000d38:	20000d18 	.word	0x20000d18
 8000d3c:	20000d28 	.word	0x20000d28
 8000d40:	08007b70 	.word	0x08007b70
 8000d44:	08007b80 	.word	0x08007b80
 8000d48:	20000b10 	.word	0x20000b10
 8000d4c:	20000d1c 	.word	0x20000d1c
 8000d50:	20000d2c 	.word	0x20000d2c
 8000d54:	08007b94 	.word	0x08007b94
 8000d58:	08007bac 	.word	0x08007bac
 8000d5c:	20000d20 	.word	0x20000d20
 8000d60:	08007bc0 	.word	0x08007bc0
 8000d64:	08007bc4 	.word	0x08007bc4
		}
		else
		{
			err = 1;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	637b      	str	r3, [r7, #52]	; 0x34
			i = i;
			memset(buffer,'\0',sizeof(buffer));
 8000d6c:	2420      	movs	r4, #32
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	220a      	movs	r2, #10
 8000d72:	2100      	movs	r1, #0
 8000d74:	0018      	movs	r0, r3
 8000d76:	f005 faf6 	bl	8006366 <memset>
		  memset(strnum,'\0',sizeof(strnum));
 8000d7a:	2514      	movs	r5, #20
 8000d7c:	197b      	adds	r3, r7, r5
 8000d7e:	220a      	movs	r2, #10
 8000d80:	2100      	movs	r1, #0
 8000d82:	0018      	movs	r0, r3
 8000d84:	f005 faef 	bl	8006366 <memset>
		  snprintf(strnum,sizeof(strnum), "%d",index_page);
 8000d88:	4bc7      	ldr	r3, [pc, #796]	; (80010a8 <update_firmware+0x5e8>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4ac7      	ldr	r2, [pc, #796]	; (80010ac <update_firmware+0x5ec>)
 8000d8e:	1978      	adds	r0, r7, r5
 8000d90:	210a      	movs	r1, #10
 8000d92:	f005 fc4f 	bl	8006634 <sniprintf>
		  memcpy(&buffer[0], ERR, sizeof(ERR));
 8000d96:	193b      	adds	r3, r7, r4
 8000d98:	220c      	movs	r2, #12
 8000d9a:	18ba      	adds	r2, r7, r2
 8000d9c:	6812      	ldr	r2, [r2, #0]
 8000d9e:	601a      	str	r2, [r3, #0]
		  memcpy(&buffer[sizeof(ERR)], strnum,strlen(strnum));
 8000da0:	197b      	adds	r3, r7, r5
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff f9ac 	bl	8000100 <strlen>
 8000da8:	0002      	movs	r2, r0
 8000daa:	1979      	adds	r1, r7, r5
 8000dac:	193b      	adds	r3, r7, r4
 8000dae:	3304      	adds	r3, #4
 8000db0:	0018      	movs	r0, r3
 8000db2:	f005 facf 	bl	8006354 <memcpy>
		  printf(" \r buffer: %s\r\n",buffer);
 8000db6:	193a      	adds	r2, r7, r4
 8000db8:	4bbd      	ldr	r3, [pc, #756]	; (80010b0 <update_firmware+0x5f0>)
 8000dba:	0011      	movs	r1, r2
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f005 fadb 	bl	8006378 <iprintf>
		  HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer),500);
 8000dc2:	193b      	adds	r3, r7, r4
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f7ff f99b 	bl	8000100 <strlen>
 8000dca:	0003      	movs	r3, r0
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	23fa      	movs	r3, #250	; 0xfa
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	1939      	adds	r1, r7, r4
 8000dd4:	48b7      	ldr	r0, [pc, #732]	; (80010b4 <update_firmware+0x5f4>)
 8000dd6:	f003 fa63 	bl	80042a0 <HAL_UART_Transmit>
	while( i<=pages-1)
 8000dda:	4bb7      	ldr	r3, [pc, #732]	; (80010b8 <update_firmware+0x5f8>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	1e5a      	subs	r2, r3, #1
 8000de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d300      	bcc.n	8000de8 <update_firmware+0x328>
 8000de6:	e6e9      	b.n	8000bbc <update_firmware+0xfc>
		  //return -1;
		}

	}// end while
	if(offset!=0)
 8000de8:	4bb4      	ldr	r3, [pc, #720]	; (80010bc <update_firmware+0x5fc>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d100      	bne.n	8000df2 <update_firmware+0x332>
 8000df0:	e106      	b.n	8001000 <update_firmware+0x540>
	{
		printf(" \r --------------Last Page ----------- \n");
 8000df2:	4bb3      	ldr	r3, [pc, #716]	; (80010c0 <update_firmware+0x600>)
 8000df4:	0018      	movs	r0, r3
 8000df6:	f005 fb4b 	bl	8006490 <puts>
 8000dfa:	4bb2      	ldr	r3, [pc, #712]	; (80010c4 <update_firmware+0x604>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
		memcpy(&index_page,&rx_buff[0],4);
 8000dfe:	4baa      	ldr	r3, [pc, #680]	; (80010a8 <update_firmware+0x5e8>)
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	4bb0      	ldr	r3, [pc, #704]	; (80010c4 <update_firmware+0x604>)
 8000e04:	685a      	ldr	r2, [r3, #4]
		memcpy(&crc_part,&rx_buff[4],4);
 8000e06:	4bb0      	ldr	r3, [pc, #704]	; (80010c8 <update_firmware+0x608>)
 8000e08:	601a      	str	r2, [r3, #0]
		printf(" \r index: %lX \n",index_page);
 8000e0a:	4ba7      	ldr	r3, [pc, #668]	; (80010a8 <update_firmware+0x5e8>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4baf      	ldr	r3, [pc, #700]	; (80010cc <update_firmware+0x60c>)
 8000e10:	0011      	movs	r1, r2
 8000e12:	0018      	movs	r0, r3
 8000e14:	f005 fab0 	bl	8006378 <iprintf>
		printf(" \r crc_part: %lX \n",crc_part);
 8000e18:	4bab      	ldr	r3, [pc, #684]	; (80010c8 <update_firmware+0x608>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4bac      	ldr	r3, [pc, #688]	; (80010d0 <update_firmware+0x610>)
 8000e1e:	0011      	movs	r1, r2
 8000e20:	0018      	movs	r0, r3
 8000e22:	f005 faa9 	bl	8006378 <iprintf>
		crc = CRC16_X25(&rx_buff[8], offset, 0);//offset
 8000e26:	4ba5      	ldr	r3, [pc, #660]	; (80010bc <update_firmware+0x5fc>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	b299      	uxth	r1, r3
 8000e2c:	4ba9      	ldr	r3, [pc, #676]	; (80010d4 <update_firmware+0x614>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	0018      	movs	r0, r3
 8000e32:	f7ff fbf5 	bl	8000620 <CRC16_X25>
 8000e36:	0003      	movs	r3, r0
 8000e38:	001a      	movs	r2, r3
 8000e3a:	4ba7      	ldr	r3, [pc, #668]	; (80010d8 <update_firmware+0x618>)
 8000e3c:	801a      	strh	r2, [r3, #0]
		crc_rec = CRC16_X25(&rx_buff[8], offset, crc_rec);
 8000e3e:	4b9f      	ldr	r3, [pc, #636]	; (80010bc <update_firmware+0x5fc>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	b299      	uxth	r1, r3
 8000e44:	4ba5      	ldr	r3, [pc, #660]	; (80010dc <update_firmware+0x61c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	4ba2      	ldr	r3, [pc, #648]	; (80010d4 <update_firmware+0x614>)
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff fbe7 	bl	8000620 <CRC16_X25>
 8000e52:	0003      	movs	r3, r0
 8000e54:	001a      	movs	r2, r3
 8000e56:	4ba1      	ldr	r3, [pc, #644]	; (80010dc <update_firmware+0x61c>)
 8000e58:	601a      	str	r2, [r3, #0]
		printf(" \r crc computed: %X \r\n",crc);
 8000e5a:	4b9f      	ldr	r3, [pc, #636]	; (80010d8 <update_firmware+0x618>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	001a      	movs	r2, r3
 8000e60:	4b9f      	ldr	r3, [pc, #636]	; (80010e0 <update_firmware+0x620>)
 8000e62:	0011      	movs	r1, r2
 8000e64:	0018      	movs	r0, r3
 8000e66:	f005 fa87 	bl	8006378 <iprintf>
		printf(" \r crc_rec: %X \r\n",crc_rec);
 8000e6a:	4b9c      	ldr	r3, [pc, #624]	; (80010dc <update_firmware+0x61c>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	4b9d      	ldr	r3, [pc, #628]	; (80010e4 <update_firmware+0x624>)
 8000e70:	0011      	movs	r1, r2
 8000e72:	0018      	movs	r0, r3
 8000e74:	f005 fa80 	bl	8006378 <iprintf>


		if(crc == crc_part)
 8000e78:	4b97      	ldr	r3, [pc, #604]	; (80010d8 <update_firmware+0x618>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	001a      	movs	r2, r3
 8000e7e:	4b92      	ldr	r3, [pc, #584]	; (80010c8 <update_firmware+0x608>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d000      	beq.n	8000e88 <update_firmware+0x3c8>
 8000e86:	e082      	b.n	8000f8e <update_firmware+0x4ce>
		{
			a = write(&rx_buff[8],a);
 8000e88:	4b97      	ldr	r3, [pc, #604]	; (80010e8 <update_firmware+0x628>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	001a      	movs	r2, r3
 8000e8e:	4b91      	ldr	r3, [pc, #580]	; (80010d4 <update_firmware+0x614>)
 8000e90:	0011      	movs	r1, r2
 8000e92:	0018      	movs	r0, r3
 8000e94:	f7ff fbfc 	bl	8000690 <write>
 8000e98:	0003      	movs	r3, r0
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	4b92      	ldr	r3, [pc, #584]	; (80010e8 <update_firmware+0x628>)
 8000e9e:	801a      	strh	r2, [r3, #0]

		  memset(buffer,'\0',sizeof(buffer));
 8000ea0:	2420      	movs	r4, #32
 8000ea2:	193b      	adds	r3, r7, r4
 8000ea4:	220a      	movs	r2, #10
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f005 fa5c 	bl	8006366 <memset>
		  memset(strnum,'\0',sizeof(strnum));
 8000eae:	2514      	movs	r5, #20
 8000eb0:	197b      	adds	r3, r7, r5
 8000eb2:	220a      	movs	r2, #10
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f005 fa55 	bl	8006366 <memset>
		  snprintf(strnum,sizeof(strnum), "%d",index_page);
 8000ebc:	4b7a      	ldr	r3, [pc, #488]	; (80010a8 <update_firmware+0x5e8>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a7a      	ldr	r2, [pc, #488]	; (80010ac <update_firmware+0x5ec>)
 8000ec2:	1978      	adds	r0, r7, r5
 8000ec4:	210a      	movs	r1, #10
 8000ec6:	f005 fbb5 	bl	8006634 <sniprintf>
		  //printf("strnum: %s, len: %d \n",strnum,strlen(strnum));
		  memcpy(&buffer[0], OK, sizeof(OK));
 8000eca:	193a      	adds	r2, r7, r4
 8000ecc:	2310      	movs	r3, #16
 8000ece:	18fb      	adds	r3, r7, r3
 8000ed0:	0010      	movs	r0, r2
 8000ed2:	0019      	movs	r1, r3
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	001a      	movs	r2, r3
 8000ed8:	f005 fa3c 	bl	8006354 <memcpy>
		  memcpy(&buffer[sizeof(OK)], strnum,strlen(strnum));
 8000edc:	197b      	adds	r3, r7, r5
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f7ff f90e 	bl	8000100 <strlen>
 8000ee4:	0002      	movs	r2, r0
 8000ee6:	1979      	adds	r1, r7, r5
 8000ee8:	193b      	adds	r3, r7, r4
 8000eea:	3303      	adds	r3, #3
 8000eec:	0018      	movs	r0, r3
 8000eee:	f005 fa31 	bl	8006354 <memcpy>
		  printf(" \r buffer: %s\r\n",buffer);
 8000ef2:	193a      	adds	r2, r7, r4
 8000ef4:	4b6e      	ldr	r3, [pc, #440]	; (80010b0 <update_firmware+0x5f0>)
 8000ef6:	0011      	movs	r1, r2
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f005 fa3d 	bl	8006378 <iprintf>
		  HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer),500);
 8000efe:	193b      	adds	r3, r7, r4
 8000f00:	0018      	movs	r0, r3
 8000f02:	f7ff f8fd 	bl	8000100 <strlen>
 8000f06:	0003      	movs	r3, r0
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	23fa      	movs	r3, #250	; 0xfa
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	1939      	adds	r1, r7, r4
 8000f10:	4868      	ldr	r0, [pc, #416]	; (80010b4 <update_firmware+0x5f4>)
 8000f12:	f003 f9c5 	bl	80042a0 <HAL_UART_Transmit>
		  cmd7[0] = crc_rec;
 8000f16:	4b71      	ldr	r3, [pc, #452]	; (80010dc <update_firmware+0x61c>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	601a      	str	r2, [r3, #0]
		  cmd7[1] = 0xFFFFFFFF;
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2201      	movs	r2, #1
 8000f22:	4252      	negs	r2, r2
 8000f24:	605a      	str	r2, [r3, #4]
		  printf("\r ************************************* \r\n");
 8000f26:	4b71      	ldr	r3, [pc, #452]	; (80010ec <update_firmware+0x62c>)
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f005 fab1 	bl	8006490 <puts>
		  printf(" \r crc rec: %lX \r\n",crc_rec);
 8000f2e:	4b6b      	ldr	r3, [pc, #428]	; (80010dc <update_firmware+0x61c>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	4b6f      	ldr	r3, [pc, #444]	; (80010f0 <update_firmware+0x630>)
 8000f34:	0011      	movs	r1, r2
 8000f36:	0018      	movs	r0, r3
 8000f38:	f005 fa1e 	bl	8006378 <iprintf>
		  printf(" \r crc_app: %lX \n",CRC_16);
 8000f3c:	4b6d      	ldr	r3, [pc, #436]	; (80010f4 <update_firmware+0x634>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b6d      	ldr	r3, [pc, #436]	; (80010f8 <update_firmware+0x638>)
 8000f42:	0011      	movs	r1, r2
 8000f44:	0018      	movs	r0, r3
 8000f46:	f005 fa17 	bl	8006378 <iprintf>
		  printf("\r ************************************* \r\n");
 8000f4a:	4b68      	ldr	r3, [pc, #416]	; (80010ec <update_firmware+0x62c>)
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f005 fa9f 	bl	8006490 <puts>
		  HAL_Delay(200);
 8000f52:	20c8      	movs	r0, #200	; 0xc8
 8000f54:	f001 f8ba 	bl	80020cc <HAL_Delay>
		  HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 8000f58:	23fa      	movs	r3, #250	; 0xfa
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	1d39      	adds	r1, r7, #4
 8000f5e:	4855      	ldr	r0, [pc, #340]	; (80010b4 <update_firmware+0x5f4>)
 8000f60:	2208      	movs	r2, #8
 8000f62:	f003 f99d 	bl	80042a0 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 8000f66:	23fa      	movs	r3, #250	; 0xfa
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	1d39      	adds	r1, r7, #4
 8000f6c:	4851      	ldr	r0, [pc, #324]	; (80010b4 <update_firmware+0x5f4>)
 8000f6e:	2208      	movs	r2, #8
 8000f70:	f003 f996 	bl	80042a0 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 8000f74:	23fa      	movs	r3, #250	; 0xfa
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	1d39      	adds	r1, r7, #4
 8000f7a:	484e      	ldr	r0, [pc, #312]	; (80010b4 <update_firmware+0x5f4>)
 8000f7c:	2208      	movs	r2, #8
 8000f7e:	f003 f98f 	bl	80042a0 <HAL_UART_Transmit>
		//wait();
		dato_recivido = false;
 8000f82:	4b5e      	ldr	r3, [pc, #376]	; (80010fc <update_firmware+0x63c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
		err = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8000f8c:	e038      	b.n	8001000 <update_firmware+0x540>
		}
		else{
			err = 1;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	637b      	str	r3, [r7, #52]	; 0x34
			memset(buffer,'\0',sizeof(buffer));
 8000f92:	2420      	movs	r4, #32
 8000f94:	193b      	adds	r3, r7, r4
 8000f96:	220a      	movs	r2, #10
 8000f98:	2100      	movs	r1, #0
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f005 f9e3 	bl	8006366 <memset>
			  memset(strnum,'\0',sizeof(strnum));
 8000fa0:	2514      	movs	r5, #20
 8000fa2:	197b      	adds	r3, r7, r5
 8000fa4:	220a      	movs	r2, #10
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f005 f9dc 	bl	8006366 <memset>
			  snprintf(strnum,sizeof(strnum), "%d",index_page);
 8000fae:	4b3e      	ldr	r3, [pc, #248]	; (80010a8 <update_firmware+0x5e8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a3e      	ldr	r2, [pc, #248]	; (80010ac <update_firmware+0x5ec>)
 8000fb4:	1978      	adds	r0, r7, r5
 8000fb6:	210a      	movs	r1, #10
 8000fb8:	f005 fb3c 	bl	8006634 <sniprintf>
			  memcpy(&buffer[0], ERR, sizeof(ERR));
 8000fbc:	193b      	adds	r3, r7, r4
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	18ba      	adds	r2, r7, r2
 8000fc2:	6812      	ldr	r2, [r2, #0]
 8000fc4:	601a      	str	r2, [r3, #0]
			  memcpy(&buffer[sizeof(ERR)], strnum,strlen(strnum));
 8000fc6:	197b      	adds	r3, r7, r5
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f7ff f899 	bl	8000100 <strlen>
 8000fce:	0002      	movs	r2, r0
 8000fd0:	1979      	adds	r1, r7, r5
 8000fd2:	193b      	adds	r3, r7, r4
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f005 f9bc 	bl	8006354 <memcpy>
			  printf(" \r buffer: %s\r\n",buffer);
 8000fdc:	193a      	adds	r2, r7, r4
 8000fde:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <update_firmware+0x5f0>)
 8000fe0:	0011      	movs	r1, r2
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f005 f9c8 	bl	8006378 <iprintf>
			  HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer),500);
 8000fe8:	193b      	adds	r3, r7, r4
 8000fea:	0018      	movs	r0, r3
 8000fec:	f7ff f888 	bl	8000100 <strlen>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	23fa      	movs	r3, #250	; 0xfa
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	1939      	adds	r1, r7, r4
 8000ffa:	482e      	ldr	r0, [pc, #184]	; (80010b4 <update_firmware+0x5f4>)
 8000ffc:	f003 f950 	bl	80042a0 <HAL_UART_Transmit>
			  //return -1;
		}
	}// offset

//---------------- Validate -------------------------
	const image_hdr_t *hdr = NULL;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
	hdr = image_get_header(IMAGE_SLOT_2);//magic
 8001004:	2002      	movs	r0, #2
 8001006:	f7ff fa63 	bl	80004d0 <image_get_header>
 800100a:	0003      	movs	r3, r0
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (hdr == NULL)
 800100e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001010:	2b00      	cmp	r3, #0
 8001012:	d106      	bne.n	8001022 <update_firmware+0x562>
	{
		printf("Magic incorrect \r\n");
 8001014:	4b3a      	ldr	r3, [pc, #232]	; (8001100 <update_firmware+0x640>)
 8001016:	0018      	movs	r0, r3
 8001018:	f005 fa3a 	bl	8006490 <puts>
		err =  -1;
 800101c:	2301      	movs	r3, #1
 800101e:	425b      	negs	r3, r3
 8001020:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (image_validate(IMAGE_SLOT_2, hdr) != 0)//crc
 8001022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001024:	0019      	movs	r1, r3
 8001026:	2002      	movs	r0, #2
 8001028:	f7ff fa80 	bl	800052c <image_validate>
 800102c:	1e03      	subs	r3, r0, #0
 800102e:	d006      	beq.n	800103e <update_firmware+0x57e>
	{
		printf("CRC incorrect \r\n");
 8001030:	4b34      	ldr	r3, [pc, #208]	; (8001104 <update_firmware+0x644>)
 8001032:	0018      	movs	r0, r3
 8001034:	f005 fa2c 	bl	8006490 <puts>
		err = -1;
 8001038:	2301      	movs	r3, #1
 800103a:	425b      	negs	r3, r3
 800103c:	637b      	str	r3, [r7, #52]	; 0x34
	}//*/
// -------------------------- Clone ----------------------------
	printf("Check Slot 2 \r\n");
 800103e:	4b32      	ldr	r3, [pc, #200]	; (8001108 <update_firmware+0x648>)
 8001040:	0018      	movs	r0, r3
 8001042:	f005 fa25 	bl	8006490 <puts>
	HAL_Delay(4000);
 8001046:	23fa      	movs	r3, #250	; 0xfa
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	0018      	movs	r0, r3
 800104c:	f001 f83e 	bl	80020cc <HAL_Delay>
	printf("Ready to write to  Slot 1 \r\n");
 8001050:	4b2e      	ldr	r3, [pc, #184]	; (800110c <update_firmware+0x64c>)
 8001052:	0018      	movs	r0, r3
 8001054:	f005 fa1c 	bl	8006490 <puts>
	HAL_Delay(4000);
 8001058:	23fa      	movs	r3, #250	; 0xfa
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	0018      	movs	r0, r3
 800105e:	f001 f835 	bl	80020cc <HAL_Delay>

	if((CRC_16 == crc_rec) && (err == 0))
 8001062:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <update_firmware+0x634>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <update_firmware+0x61c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	d109      	bne.n	8001082 <update_firmware+0x5c2>
 800106e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001070:	2b00      	cmp	r3, #0
 8001072:	d106      	bne.n	8001082 <update_firmware+0x5c2>
		err = clone_rom(FW_SIZE);
 8001074:	4b26      	ldr	r3, [pc, #152]	; (8001110 <update_firmware+0x650>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	0018      	movs	r0, r3
 800107a:	f7ff fc05 	bl	8000888 <clone_rom>
 800107e:	0003      	movs	r3, r0
 8001080:	637b      	str	r3, [r7, #52]	; 0x34
	if ( err == 0)
 8001082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001084:	2b00      	cmp	r3, #0
 8001086:	d105      	bne.n	8001094 <update_firmware+0x5d4>
	{
		printf("UPDATE SUCCESSFULLY\r\n");
 8001088:	4b22      	ldr	r3, [pc, #136]	; (8001114 <update_firmware+0x654>)
 800108a:	0018      	movs	r0, r3
 800108c:	f005 fa00 	bl	8006490 <puts>
		return 0;
 8001090:	2300      	movs	r3, #0
 8001092:	e005      	b.n	80010a0 <update_firmware+0x5e0>
	}
	else
	{
		printf("UPDATE FAIL\r\n");
 8001094:	4b20      	ldr	r3, [pc, #128]	; (8001118 <update_firmware+0x658>)
 8001096:	0018      	movs	r0, r3
 8001098:	f005 f9fa 	bl	8006490 <puts>
		return -1;
 800109c:	2301      	movs	r3, #1
 800109e:	425b      	negs	r3, r3
	}//*/

}// get_Firmware()
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b00e      	add	sp, #56	; 0x38
 80010a6:	bdb0      	pop	{r4, r5, r7, pc}
 80010a8:	20000d18 	.word	0x20000d18
 80010ac:	08007bc0 	.word	0x08007bc0
 80010b0:	08007bcc 	.word	0x08007bcc
 80010b4:	200009c4 	.word	0x200009c4
 80010b8:	20000afc 	.word	0x20000afc
 80010bc:	20000b00 	.word	0x20000b00
 80010c0:	08007bdc 	.word	0x08007bdc
 80010c4:	20000b08 	.word	0x20000b08
 80010c8:	20000d28 	.word	0x20000d28
 80010cc:	08007b70 	.word	0x08007b70
 80010d0:	08007b80 	.word	0x08007b80
 80010d4:	20000b10 	.word	0x20000b10
 80010d8:	20000d1c 	.word	0x20000d1c
 80010dc:	20000d2c 	.word	0x20000d2c
 80010e0:	08007b94 	.word	0x08007b94
 80010e4:	08007bac 	.word	0x08007bac
 80010e8:	20000d20 	.word	0x20000d20
 80010ec:	08007c04 	.word	0x08007c04
 80010f0:	08007c30 	.word	0x08007c30
 80010f4:	20000d14 	.word	0x20000d14
 80010f8:	08007b00 	.word	0x08007b00
 80010fc:	20000af8 	.word	0x20000af8
 8001100:	08007c44 	.word	0x08007c44
 8001104:	08007c58 	.word	0x08007c58
 8001108:	08007c68 	.word	0x08007c68
 800110c:	08007c78 	.word	0x08007c78
 8001110:	20000d10 	.word	0x20000d10
 8001114:	08007c94 	.word	0x08007c94
 8001118:	08007cac 	.word	0x08007cac

0800111c <BootJumpASM>:

__attribute__( (naked, noreturn) ) static void BootJumpASM(uint32_t PC, uint32_t SP) {
	__asm("           \n\
 800111c:	f381 8808 	msr	MSP, r1
 8001120:	4700      	bx	r0
			msr msp, r1 /* load r1 into MSP */\n\
			bx r0       /* branch to the address at r0 */\n\
	");
}
 8001122:	46c0      	nop			; (mov r8, r8)

08001124 <image_start>:

static void image_start(const image_hdr_t *hdr) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 800112c:	200f      	movs	r0, #15
 800112e:	183b      	adds	r3, r7, r0
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001134:	b672      	cpsid	i
}
 8001136:	46c0      	nop			; (mov r8, r8)
	/* Disable interrupts */
	//Disable IRQ
	__disable_irq();

	//Disable the system timer
	SysTick->CTRL = 0;
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <image_start+0xb8>)
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]

	//Clear the exception pending bit
	SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk ;
 800113e:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <image_start+0xbc>)
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	4b27      	ldr	r3, [pc, #156]	; (80011e0 <image_start+0xbc>)
 8001144:	2180      	movs	r1, #128	; 0x80
 8001146:	0489      	lsls	r1, r1, #18
 8001148:	430a      	orrs	r2, r1
 800114a:	605a      	str	r2, [r3, #4]

	//Disable IRQs
    for (i = 0; i < 8; i++) {
 800114c:	183b      	adds	r3, r7, r0
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
 8001152:	e015      	b.n	8001180 <image_start+0x5c>
        NVIC->ICER[i] = 0xFFFFFFFF; // disable IRQ
 8001154:	4923      	ldr	r1, [pc, #140]	; (80011e4 <image_start+0xc0>)
 8001156:	200f      	movs	r0, #15
 8001158:	183b      	adds	r3, r7, r0
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	3320      	adds	r3, #32
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	2201      	movs	r2, #1
 8001162:	4252      	negs	r2, r2
 8001164:	505a      	str	r2, [r3, r1]
        NVIC->ICPR[i] = 0xFFFFFFFF; // clear pending IRQ
 8001166:	491f      	ldr	r1, [pc, #124]	; (80011e4 <image_start+0xc0>)
 8001168:	183b      	adds	r3, r7, r0
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	3360      	adds	r3, #96	; 0x60
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	2201      	movs	r2, #1
 8001172:	4252      	negs	r2, r2
 8001174:	505a      	str	r2, [r3, r1]
    for (i = 0; i < 8; i++) {
 8001176:	183b      	adds	r3, r7, r0
 8001178:	781a      	ldrb	r2, [r3, #0]
 800117a:	183b      	adds	r3, r7, r0
 800117c:	3201      	adds	r2, #1
 800117e:	701a      	strb	r2, [r3, #0]
 8001180:	230f      	movs	r3, #15
 8001182:	18fb      	adds	r3, r7, r3
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b07      	cmp	r3, #7
 8001188:	d9e4      	bls.n	8001154 <image_start+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800118a:	f3bf 8f4f 	dsb	sy
}
 800118e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8001190:	f3bf 8f6f 	isb	sy
}
 8001194:	46c0      	nop			; (mov r8, r8)
	//Barriers
	__DSB();
	__ISB();

	//const DeviceVectors *vectors = (const DeviceVectors *) hdr->vector_addr;
	uint32_t *isr = (uint32_t *)hdr->vector_addr;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	7c1a      	ldrb	r2, [r3, #16]
 800119a:	7c59      	ldrb	r1, [r3, #17]
 800119c:	0209      	lsls	r1, r1, #8
 800119e:	430a      	orrs	r2, r1
 80011a0:	7c99      	ldrb	r1, [r3, #18]
 80011a2:	0409      	lsls	r1, r1, #16
 80011a4:	430a      	orrs	r2, r1
 80011a6:	7cdb      	ldrb	r3, [r3, #19]
 80011a8:	061b      	lsls	r3, r3, #24
 80011aa:	4313      	orrs	r3, r2
 80011ac:	60bb      	str	r3, [r7, #8]
    SCB->VTOR = (uint32_t)isr & SCB_VTOR_TBLOFF_Msk;
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <image_start+0xbc>)
 80011b2:	21ff      	movs	r1, #255	; 0xff
 80011b4:	438a      	bics	r2, r1
 80011b6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80011b8:	f3bf 8f4f 	dsb	sy
}
 80011bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80011be:	f3bf 8f6f 	isb	sy
}
 80011c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("cpsie i" : : : "memory");
 80011c4:	b662      	cpsie	i
}
 80011c6:	46c0      	nop			; (mov r8, r8)
	__ISB();

	/* Enable interrrupts */
	__enable_irq();

    BootJumpASM(isr[1], isr[0]);
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	3304      	adds	r3, #4
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	0019      	movs	r1, r3
 80011d4:	0010      	movs	r0, r2
 80011d6:	f7ff ffa1 	bl	800111c <BootJumpASM>
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	e000e010 	.word	0xe000e010
 80011e0:	e000ed00 	.word	0xe000ed00
 80011e4:	e000e100 	.word	0xe000e100

080011e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ee:	f000 fee7 	bl	8001fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f2:	f000 f969 	bl	80014c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f6:	f000 fae1 	bl	80017bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011fa:	f000 fa5d 	bl	80016b8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80011fe:	f000 faa9 	bl	8001754 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8001202:	f000 f9a9 	bl	8001558 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001206:	f000 fa01 	bl	800160c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
   RetargetInit(&huart6);
 800120a:	4b9b      	ldr	r3, [pc, #620]	; (8001478 <main+0x290>)
 800120c:	0018      	movs	r0, r3
 800120e:	f000 fc4d 	bl	8001aac <RetargetInit>
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8001212:	23a0      	movs	r3, #160	; 0xa0
 8001214:	05db      	lsls	r3, r3, #23
 8001216:	2201      	movs	r2, #1
 8001218:	2180      	movs	r1, #128	; 0x80
 800121a:	0018      	movs	r0, r3
 800121c:	f001 fc6b 	bl	8002af6 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8001220:	4b96      	ldr	r3, [pc, #600]	; (800147c <main+0x294>)
 8001222:	2200      	movs	r2, #0
 8001224:	2102      	movs	r1, #2
 8001226:	0018      	movs	r0, r3
 8001228:	f001 fc65 	bl	8002af6 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 800122c:	4b93      	ldr	r3, [pc, #588]	; (800147c <main+0x294>)
 800122e:	2200      	movs	r2, #0
 8001230:	2101      	movs	r1, #1
 8001232:	0018      	movs	r0, r3
 8001234:	f001 fc5f 	bl	8002af6 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);// BOOT
 8001238:	4b90      	ldr	r3, [pc, #576]	; (800147c <main+0x294>)
 800123a:	2201      	movs	r2, #1
 800123c:	2180      	movs	r1, #128	; 0x80
 800123e:	0018      	movs	r0, r3
 8001240:	f001 fc59 	bl	8002af6 <HAL_GPIO_WritePin>

   printf("\r ------ Start ----- \r\n");
 8001244:	4b8e      	ldr	r3, [pc, #568]	; (8001480 <main+0x298>)
 8001246:	0018      	movs	r0, r3
 8001248:	f005 f922 	bl	8006490 <puts>
   HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx_buff, sizeof rx_buff);
 800124c:	2382      	movs	r3, #130	; 0x82
 800124e:	009a      	lsls	r2, r3, #2
 8001250:	498c      	ldr	r1, [pc, #560]	; (8001484 <main+0x29c>)
 8001252:	4b8d      	ldr	r3, [pc, #564]	; (8001488 <main+0x2a0>)
 8001254:	0018      	movs	r0, r3
 8001256:	f004 ff8d 	bl	8006174 <HAL_UARTEx_ReceiveToIdle_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	shared_memory_init();
 800125a:	f000 fb9b 	bl	8001994 <shared_memory_init>
	timer_flag = 0;
 800125e:	4b8b      	ldr	r3, [pc, #556]	; (800148c <main+0x2a4>)
 8001260:	2200      	movs	r2, #0
 8001262:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim1);
 8001264:	4b8a      	ldr	r3, [pc, #552]	; (8001490 <main+0x2a8>)
 8001266:	0018      	movs	r0, r3
 8001268:	f002 fb6e 	bl	8003948 <HAL_TIM_Base_Start_IT>


	while (1)
	{
		HAL_Delay(5);
 800126c:	2005      	movs	r0, #5
 800126e:	f000 ff2d 	bl	80020cc <HAL_Delay>
		boot = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);// 1/0
 8001272:	2380      	movs	r3, #128	; 0x80
 8001274:	011b      	lsls	r3, r3, #4
 8001276:	4a81      	ldr	r2, [pc, #516]	; (800147c <main+0x294>)
 8001278:	0019      	movs	r1, r3
 800127a:	0010      	movs	r0, r2
 800127c:	f001 fc1e 	bl	8002abc <HAL_GPIO_ReadPin>
 8001280:	0003      	movs	r3, r0
 8001282:	b29a      	uxth	r2, r3
 8001284:	4b83      	ldr	r3, [pc, #524]	; (8001494 <main+0x2ac>)
 8001286:	801a      	strh	r2, [r3, #0]
		printf("\r boot: %d \r\n",boot);
 8001288:	4b82      	ldr	r3, [pc, #520]	; (8001494 <main+0x2ac>)
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	001a      	movs	r2, r3
 800128e:	4b82      	ldr	r3, [pc, #520]	; (8001498 <main+0x2b0>)
 8001290:	0011      	movs	r1, r2
 8001292:	0018      	movs	r0, r3
 8001294:	f005 f870 	bl	8006378 <iprintf>
		bootloader = timer_flag & boot;
 8001298:	4b7c      	ldr	r3, [pc, #496]	; (800148c <main+0x2a4>)
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	4a7d      	ldr	r2, [pc, #500]	; (8001494 <main+0x2ac>)
 800129e:	8812      	ldrh	r2, [r2, #0]
 80012a0:	4013      	ands	r3, r2
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	1e5a      	subs	r2, r3, #1
 80012a6:	4193      	sbcs	r3, r2
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b7c      	ldr	r3, [pc, #496]	; (800149c <main+0x2b4>)
 80012ac:	701a      	strb	r2, [r3, #0]
		if(bootloader)
 80012ae:	4b7b      	ldr	r3, [pc, #492]	; (800149c <main+0x2b4>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00b      	beq.n	80012ce <main+0xe6>
		{
			printf(" \r App \r\n");
 80012b6:	4b7a      	ldr	r3, [pc, #488]	; (80014a0 <main+0x2b8>)
 80012b8:	0018      	movs	r0, r3
 80012ba:	f005 f8e9 	bl	8006490 <puts>
			HAL_TIM_Base_Stop_IT(&htim1);
 80012be:	4b74      	ldr	r3, [pc, #464]	; (8001490 <main+0x2a8>)
 80012c0:	0018      	movs	r0, r3
 80012c2:	f002 fb9d 	bl	8003a00 <HAL_TIM_Base_Stop_IT>
			shared_mem_set_app_update_requested(false);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f000 fbcc 	bl	8001a64 <shared_mem_set_app_update_requested>
 80012cc:	e00a      	b.n	80012e4 <main+0xfc>
		}
		else
		{
			printf(" \r Bootloader \r\n");
 80012ce:	4b75      	ldr	r3, [pc, #468]	; (80014a4 <main+0x2bc>)
 80012d0:	0018      	movs	r0, r3
 80012d2:	f005 f8dd 	bl	8006490 <puts>
			HAL_TIM_Base_Stop_IT(&htim1);
 80012d6:	4b6e      	ldr	r3, [pc, #440]	; (8001490 <main+0x2a8>)
 80012d8:	0018      	movs	r0, r3
 80012da:	f002 fb91 	bl	8003a00 <HAL_TIM_Base_Stop_IT>
			shared_mem_set_app_update_requested(true);
 80012de:	2001      	movs	r0, #1
 80012e0:	f000 fbc0 	bl	8001a64 <shared_mem_set_app_update_requested>
		}


		const image_hdr_t *hdr = NULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]

		if (shared_mem_is_bl_upd_requested()) {//bootloader
 80012e8:	f000 fb7b 	bl	80019e2 <shared_mem_is_bl_upd_requested>
 80012ec:	1e03      	subs	r3, r0, #0
 80012ee:	d01b      	beq.n	8001328 <main+0x140>
			hdr = image_get_header(IMAGE_SLOT_2); // get address y magic
 80012f0:	2002      	movs	r0, #2
 80012f2:	f7ff f8ed 	bl	80004d0 <image_get_header>
 80012f6:	0003      	movs	r3, r0
 80012f8:	60bb      	str	r3, [r7, #8]

		// Load the updater (apparom)
		if (hdr == NULL)
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d104      	bne.n	800130a <main+0x122>
		{
			printf("No image found in slot 2\r\n");
 8001300:	4b69      	ldr	r3, [pc, #420]	; (80014a8 <main+0x2c0>)
 8001302:	0018      	movs	r0, r3
 8001304:	f005 f8c4 	bl	8006490 <puts>
 8001308:	e004      	b.n	8001314 <main+0x12c>
		}
		else
		{
			if (image_validate(IMAGE_SLOT_2, hdr) != 0) {// addr =  &__loader_rom_start__ + sizeof(image_hdr_t), len -> crc(add, len)
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	0019      	movs	r1, r3
 800130e:	2002      	movs	r0, #2
 8001310:	f7ff f90c 	bl	800052c <image_validate>
			}
		}
		//ioport_set_pin_level(RED_LED, false);
		//ioport_set_pin_level(GREEN_LED, false);
		//ioport_set_pin_level(BLUE_LED, false);
		printf("Jumping to updater\r\n");
 8001314:	4b65      	ldr	r3, [pc, #404]	; (80014ac <main+0x2c4>)
 8001316:	0018      	movs	r0, r3
 8001318:	f005 f8ba 	bl	8006490 <puts>
		shared_mem_increment_boot_counter();
 800131c:	f000 fb6a 	bl	80019f4 <shared_mem_increment_boot_counter>
		//printf("Boot count: %d \r\n",shared_mem_get_boot_counter());
		image_start(hdr);
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	0018      	movs	r0, r3
 8001324:	f7ff fefe 	bl	8001124 <image_start>

	}

	if (!shared_mem_is_app_upd_requested()) {//app //boot 1
 8001328:	f000 fb52 	bl	80019d0 <shared_mem_is_app_upd_requested>
 800132c:	0003      	movs	r3, r0
 800132e:	001a      	movs	r2, r3
 8001330:	2301      	movs	r3, #1
 8001332:	4053      	eors	r3, r2
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d033      	beq.n	80013a2 <main+0x1ba>
		// Boot count, maybe not neccessary or implement a better thing to handle this
		const uint8_t max_boot_attemps = 4;
 800133a:	1dfb      	adds	r3, r7, #7
 800133c:	2204      	movs	r2, #4
 800133e:	701a      	strb	r2, [r3, #0]
		if (shared_mem_get_boot_counter() >= max_boot_attemps)
 8001340:	f000 fb70 	bl	8001a24 <shared_mem_get_boot_counter>
 8001344:	0003      	movs	r3, r0
 8001346:	001a      	movs	r2, r3
 8001348:	1dfb      	adds	r3, r7, #7
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4293      	cmp	r3, r2
 800134e:	d809      	bhi.n	8001364 <main+0x17c>
		{
			shared_mem_clear_boot_counter();
 8001350:	f000 fb5e 	bl	8001a10 <shared_mem_clear_boot_counter>
			printf("App unstable, entering to DFU mode\r\n");
 8001354:	4b56      	ldr	r3, [pc, #344]	; (80014b0 <main+0x2c8>)
 8001356:	0018      	movs	r0, r3
 8001358:	f005 f89a 	bl	8006490 <puts>
			break;
 800135c:	46c0      	nop			; (mov r8, r8)

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }//end while
	HAL_NVIC_SystemReset(); //resetea el uC
 800135e:	f000 ffbc 	bl	80022da <HAL_NVIC_SystemReset>
 8001362:	e084      	b.n	800146e <main+0x286>
		hdr = image_get_header(IMAGE_SLOT_1);// get address y magic
 8001364:	2001      	movs	r0, #1
 8001366:	f7ff f8b3 	bl	80004d0 <image_get_header>
 800136a:	0003      	movs	r3, r0
 800136c:	60bb      	str	r3, [r7, #8]
		if (hdr == NULL)
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d104      	bne.n	800137e <main+0x196>
			printf("No image found in slot 1\r\n");
 8001374:	4b4f      	ldr	r3, [pc, #316]	; (80014b4 <main+0x2cc>)
 8001376:	0018      	movs	r0, r3
 8001378:	f005 f88a 	bl	8006490 <puts>
			goto invalid;
 800137c:	e077      	b.n	800146e <main+0x286>
		if (image_validate(IMAGE_SLOT_1, hdr) != 0) { // addr =  &__loader_rom_start__ + sizeof(image_hdr_t), len -> crc(add, len)
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	0019      	movs	r1, r3
 8001382:	2001      	movs	r0, #1
 8001384:	f7ff f8d2 	bl	800052c <image_validate>
 8001388:	1e03      	subs	r3, r0, #0
 800138a:	d16f      	bne.n	800146c <main+0x284>
		printf("Jumping to application\r\n\n");
 800138c:	4b4a      	ldr	r3, [pc, #296]	; (80014b8 <main+0x2d0>)
 800138e:	0018      	movs	r0, r3
 8001390:	f005 f87e 	bl	8006490 <puts>
		shared_mem_increment_boot_counter();
 8001394:	f000 fb2e 	bl	80019f4 <shared_mem_increment_boot_counter>
		image_start(hdr);
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	0018      	movs	r0, r3
 800139c:	f7ff fec2 	bl	8001124 <image_start>
 80013a0:	e764      	b.n	800126c <main+0x84>
	else if (shared_mem_is_app_upd_requested())
 80013a2:	f000 fb15 	bl	80019d0 <shared_mem_is_app_upd_requested>
 80013a6:	1e03      	subs	r3, r0, #0
 80013a8:	d100      	bne.n	80013ac <main+0x1c4>
 80013aa:	e75f      	b.n	800126c <main+0x84>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80013ac:	23a0      	movs	r3, #160	; 0xa0
 80013ae:	05db      	lsls	r3, r3, #23
 80013b0:	2201      	movs	r2, #1
 80013b2:	2180      	movs	r1, #128	; 0x80
 80013b4:	0018      	movs	r0, r3
 80013b6:	f001 fb9e 	bl	8002af6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 80013ba:	4b30      	ldr	r3, [pc, #192]	; (800147c <main+0x294>)
 80013bc:	2201      	movs	r2, #1
 80013be:	2102      	movs	r1, #2
 80013c0:	0018      	movs	r0, r3
 80013c2:	f001 fb98 	bl	8002af6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80013c6:	4b2d      	ldr	r3, [pc, #180]	; (800147c <main+0x294>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	2101      	movs	r1, #1
 80013cc:	0018      	movs	r0, r3
 80013ce:	f001 fb92 	bl	8002af6 <HAL_GPIO_WritePin>
		if (update_firmware() == 0)
 80013d2:	f7ff fb75 	bl	8000ac0 <update_firmware>
 80013d6:	1e03      	subs	r3, r0, #0
 80013d8:	d000      	beq.n	80013dc <main+0x1f4>
 80013da:	e747      	b.n	800126c <main+0x84>
			printf("Update completed, restarting\r\n");
 80013dc:	4b37      	ldr	r3, [pc, #220]	; (80014bc <main+0x2d4>)
 80013de:	0018      	movs	r0, r3
 80013e0:	f005 f856 	bl	8006490 <puts>
			shared_mem_set_update_completed();
 80013e4:	f000 fb28 	bl	8001a38 <shared_mem_set_update_completed>
			shared_mem_clear_boot_counter();
 80013e8:	f000 fb12 	bl	8001a10 <shared_mem_clear_boot_counter>
			shared_mem_clear_ota_info();
 80013ec:	f000 fb30 	bl	8001a50 <shared_mem_clear_ota_info>
			shared_mem_set_app_update_requested(false);
 80013f0:	2000      	movs	r0, #0
 80013f2:	f000 fb37 	bl	8001a64 <shared_mem_set_app_update_requested>
			shared_mem_set_update();
 80013f6:	f000 fb45 	bl	8001a84 <shared_mem_set_update>
			printf("\r shared_mem_get_update: %d \r\n",shared_mem_get_update());
 80013fa:	f000 fb4d 	bl	8001a98 <shared_mem_get_update>
 80013fe:	0002      	movs	r2, r0
 8001400:	4b2f      	ldr	r3, [pc, #188]	; (80014c0 <main+0x2d8>)
 8001402:	0011      	movs	r1, r2
 8001404:	0018      	movs	r0, r3
 8001406:	f004 ffb7 	bl	8006378 <iprintf>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 800140a:	23a0      	movs	r3, #160	; 0xa0
 800140c:	05db      	lsls	r3, r3, #23
 800140e:	2201      	movs	r2, #1
 8001410:	2180      	movs	r1, #128	; 0x80
 8001412:	0018      	movs	r0, r3
 8001414:	f001 fb6f 	bl	8002af6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <main+0x294>)
 800141a:	2200      	movs	r2, #0
 800141c:	2102      	movs	r1, #2
 800141e:	0018      	movs	r0, r3
 8001420:	f001 fb69 	bl	8002af6 <HAL_GPIO_WritePin>
			for(int n = 0; n <15; n++)
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	e00b      	b.n	8001442 <main+0x25a>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 800142a:	23a0      	movs	r3, #160	; 0xa0
 800142c:	05db      	lsls	r3, r3, #23
 800142e:	2180      	movs	r1, #128	; 0x80
 8001430:	0018      	movs	r0, r3
 8001432:	f001 fb7d 	bl	8002b30 <HAL_GPIO_TogglePin>
				HAL_Delay(200);
 8001436:	20c8      	movs	r0, #200	; 0xc8
 8001438:	f000 fe48 	bl	80020cc <HAL_Delay>
			for(int n = 0; n <15; n++)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3301      	adds	r3, #1
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2b0e      	cmp	r3, #14
 8001446:	ddf0      	ble.n	800142a <main+0x242>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);//resetea el uC
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <main+0x294>)
 800144a:	2200      	movs	r2, #0
 800144c:	2180      	movs	r1, #128	; 0x80
 800144e:	0018      	movs	r0, r3
 8001450:	f001 fb51 	bl	8002af6 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8001454:	2064      	movs	r0, #100	; 0x64
 8001456:	f000 fe39 	bl	80020cc <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <main+0x294>)
 800145c:	2201      	movs	r2, #1
 800145e:	2180      	movs	r1, #128	; 0x80
 8001460:	0018      	movs	r0, r3
 8001462:	f001 fb48 	bl	8002af6 <HAL_GPIO_WritePin>
			HAL_NVIC_SystemReset();
 8001466:	f000 ff38 	bl	80022da <HAL_NVIC_SystemReset>
	{
 800146a:	e6ff      	b.n	800126c <main+0x84>
			goto invalid;
 800146c:	46c0      	nop			; (mov r8, r8)

	invalid:
		printf("\r\nFlash a valid application\r\n");
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <main+0x2dc>)
 8001470:	0018      	movs	r0, r3
 8001472:	f005 f80d 	bl	8006490 <puts>
		while (true)
		{
			__asm__ __volatile__("");
 8001476:	e7fe      	b.n	8001476 <main+0x28e>
 8001478:	20000a58 	.word	0x20000a58
 800147c:	50000400 	.word	0x50000400
 8001480:	08007cc0 	.word	0x08007cc0
 8001484:	20000b08 	.word	0x20000b08
 8001488:	200009c4 	.word	0x200009c4
 800148c:	20000d24 	.word	0x20000d24
 8001490:	2000092c 	.word	0x2000092c
 8001494:	20000d22 	.word	0x20000d22
 8001498:	08007cd8 	.word	0x08007cd8
 800149c:	20000af9 	.word	0x20000af9
 80014a0:	08007ce8 	.word	0x08007ce8
 80014a4:	08007cf4 	.word	0x08007cf4
 80014a8:	08007d04 	.word	0x08007d04
 80014ac:	08007d20 	.word	0x08007d20
 80014b0:	08007d34 	.word	0x08007d34
 80014b4:	08007d58 	.word	0x08007d58
 80014b8:	08007d74 	.word	0x08007d74
 80014bc:	08007d90 	.word	0x08007d90
 80014c0:	08007db0 	.word	0x08007db0
 80014c4:	08007dd0 	.word	0x08007dd0

080014c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b093      	sub	sp, #76	; 0x4c
 80014cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ce:	2410      	movs	r4, #16
 80014d0:	193b      	adds	r3, r7, r4
 80014d2:	0018      	movs	r0, r3
 80014d4:	2338      	movs	r3, #56	; 0x38
 80014d6:	001a      	movs	r2, r3
 80014d8:	2100      	movs	r1, #0
 80014da:	f004 ff44 	bl	8006366 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014de:	003b      	movs	r3, r7
 80014e0:	0018      	movs	r0, r3
 80014e2:	2310      	movs	r3, #16
 80014e4:	001a      	movs	r2, r3
 80014e6:	2100      	movs	r1, #0
 80014e8:	f004 ff3d 	bl	8006366 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	0018      	movs	r0, r3
 80014f2:	f001 fb39 	bl	8002b68 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014f6:	193b      	adds	r3, r7, r4
 80014f8:	2202      	movs	r2, #2
 80014fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014fc:	193b      	adds	r3, r7, r4
 80014fe:	2280      	movs	r2, #128	; 0x80
 8001500:	0052      	lsls	r2, r2, #1
 8001502:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001504:	193b      	adds	r3, r7, r4
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800150a:	193b      	adds	r3, r7, r4
 800150c:	2240      	movs	r2, #64	; 0x40
 800150e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001510:	193b      	adds	r3, r7, r4
 8001512:	2200      	movs	r2, #0
 8001514:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001516:	193b      	adds	r3, r7, r4
 8001518:	0018      	movs	r0, r3
 800151a:	f001 fb71 	bl	8002c00 <HAL_RCC_OscConfig>
 800151e:	1e03      	subs	r3, r0, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001522:	f000 f9ff 	bl	8001924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001526:	003b      	movs	r3, r7
 8001528:	2207      	movs	r2, #7
 800152a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800152c:	003b      	movs	r3, r7
 800152e:	2200      	movs	r2, #0
 8001530:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001532:	003b      	movs	r3, r7
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001538:	003b      	movs	r3, r7
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800153e:	003b      	movs	r3, r7
 8001540:	2100      	movs	r1, #0
 8001542:	0018      	movs	r0, r3
 8001544:	f001 fe76 	bl	8003234 <HAL_RCC_ClockConfig>
 8001548:	1e03      	subs	r3, r0, #0
 800154a:	d001      	beq.n	8001550 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800154c:	f000 f9ea 	bl	8001924 <Error_Handler>
  }
}
 8001550:	46c0      	nop			; (mov r8, r8)
 8001552:	46bd      	mov	sp, r7
 8001554:	b013      	add	sp, #76	; 0x4c
 8001556:	bd90      	pop	{r4, r7, pc}

08001558 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800155e:	2310      	movs	r3, #16
 8001560:	18fb      	adds	r3, r7, r3
 8001562:	0018      	movs	r0, r3
 8001564:	2310      	movs	r3, #16
 8001566:	001a      	movs	r2, r3
 8001568:	2100      	movs	r1, #0
 800156a:	f004 fefc 	bl	8006366 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	0018      	movs	r0, r3
 8001572:	230c      	movs	r3, #12
 8001574:	001a      	movs	r2, r3
 8001576:	2100      	movs	r1, #0
 8001578:	f004 fef5 	bl	8006366 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800157c:	4b21      	ldr	r3, [pc, #132]	; (8001604 <MX_TIM1_Init+0xac>)
 800157e:	4a22      	ldr	r2, [pc, #136]	; (8001608 <MX_TIM1_Init+0xb0>)
 8001580:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8001582:	4b20      	ldr	r3, [pc, #128]	; (8001604 <MX_TIM1_Init+0xac>)
 8001584:	220f      	movs	r2, #15
 8001586:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001588:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <MX_TIM1_Init+0xac>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 800158e:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <MX_TIM1_Init+0xac>)
 8001590:	22fa      	movs	r2, #250	; 0xfa
 8001592:	0052      	lsls	r2, r2, #1
 8001594:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001596:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <MX_TIM1_Init+0xac>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <MX_TIM1_Init+0xac>)
 800159e:	2200      	movs	r2, #0
 80015a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <MX_TIM1_Init+0xac>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <MX_TIM1_Init+0xac>)
 80015aa:	0018      	movs	r0, r3
 80015ac:	f002 f974 	bl	8003898 <HAL_TIM_Base_Init>
 80015b0:	1e03      	subs	r3, r0, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 80015b4:	f000 f9b6 	bl	8001924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b8:	2110      	movs	r1, #16
 80015ba:	187b      	adds	r3, r7, r1
 80015bc:	2280      	movs	r2, #128	; 0x80
 80015be:	0152      	lsls	r2, r2, #5
 80015c0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015c2:	187a      	adds	r2, r7, r1
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <MX_TIM1_Init+0xac>)
 80015c6:	0011      	movs	r1, r2
 80015c8:	0018      	movs	r0, r3
 80015ca:	f002 fb79 	bl	8003cc0 <HAL_TIM_ConfigClockSource>
 80015ce:	1e03      	subs	r3, r0, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80015d2:	f000 f9a7 	bl	8001924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	2200      	movs	r2, #0
 80015e0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015e8:	1d3a      	adds	r2, r7, #4
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_TIM1_Init+0xac>)
 80015ec:	0011      	movs	r1, r2
 80015ee:	0018      	movs	r0, r3
 80015f0:	f002 fd78 	bl	80040e4 <HAL_TIMEx_MasterConfigSynchronization>
 80015f4:	1e03      	subs	r3, r0, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80015f8:	f000 f994 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015fc:	46c0      	nop			; (mov r8, r8)
 80015fe:	46bd      	mov	sp, r7
 8001600:	b008      	add	sp, #32
 8001602:	bd80      	pop	{r7, pc}
 8001604:	2000092c 	.word	0x2000092c
 8001608:	40012c00 	.word	0x40012c00

0800160c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001612:	2310      	movs	r3, #16
 8001614:	18fb      	adds	r3, r7, r3
 8001616:	0018      	movs	r0, r3
 8001618:	2310      	movs	r3, #16
 800161a:	001a      	movs	r2, r3
 800161c:	2100      	movs	r1, #0
 800161e:	f004 fea2 	bl	8006366 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	0018      	movs	r0, r3
 8001626:	230c      	movs	r3, #12
 8001628:	001a      	movs	r2, r3
 800162a:	2100      	movs	r1, #0
 800162c:	f004 fe9b 	bl	8006366 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001630:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <MX_TIM3_Init+0xa0>)
 8001632:	4a1f      	ldr	r2, [pc, #124]	; (80016b0 <MX_TIM3_Init+0xa4>)
 8001634:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000-1;
 8001636:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <MX_TIM3_Init+0xa0>)
 8001638:	4a1e      	ldr	r2, [pc, #120]	; (80016b4 <MX_TIM3_Init+0xa8>)
 800163a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <MX_TIM3_Init+0xa0>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8000;
 8001642:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <MX_TIM3_Init+0xa0>)
 8001644:	22fa      	movs	r2, #250	; 0xfa
 8001646:	0152      	lsls	r2, r2, #5
 8001648:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <MX_TIM3_Init+0xa0>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001650:	4b16      	ldr	r3, [pc, #88]	; (80016ac <MX_TIM3_Init+0xa0>)
 8001652:	2200      	movs	r2, #0
 8001654:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <MX_TIM3_Init+0xa0>)
 8001658:	0018      	movs	r0, r3
 800165a:	f002 f91d 	bl	8003898 <HAL_TIM_Base_Init>
 800165e:	1e03      	subs	r3, r0, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001662:	f000 f95f 	bl	8001924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001666:	2110      	movs	r1, #16
 8001668:	187b      	adds	r3, r7, r1
 800166a:	2280      	movs	r2, #128	; 0x80
 800166c:	0152      	lsls	r2, r2, #5
 800166e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001670:	187a      	adds	r2, r7, r1
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_TIM3_Init+0xa0>)
 8001674:	0011      	movs	r1, r2
 8001676:	0018      	movs	r0, r3
 8001678:	f002 fb22 	bl	8003cc0 <HAL_TIM_ConfigClockSource>
 800167c:	1e03      	subs	r3, r0, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001680:	f000 f950 	bl	8001924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001690:	1d3a      	adds	r2, r7, #4
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_TIM3_Init+0xa0>)
 8001694:	0011      	movs	r1, r2
 8001696:	0018      	movs	r0, r3
 8001698:	f002 fd24 	bl	80040e4 <HAL_TIMEx_MasterConfigSynchronization>
 800169c:	1e03      	subs	r3, r0, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80016a0:	f000 f940 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016a4:	46c0      	nop			; (mov r8, r8)
 80016a6:	46bd      	mov	sp, r7
 80016a8:	b008      	add	sp, #32
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000978 	.word	0x20000978
 80016b0:	40000400 	.word	0x40000400
 80016b4:	00003e7f 	.word	0x00003e7f

080016b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016bc:	4b23      	ldr	r3, [pc, #140]	; (800174c <MX_USART2_UART_Init+0x94>)
 80016be:	4a24      	ldr	r2, [pc, #144]	; (8001750 <MX_USART2_UART_Init+0x98>)
 80016c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80016c2:	4b22      	ldr	r3, [pc, #136]	; (800174c <MX_USART2_UART_Init+0x94>)
 80016c4:	2296      	movs	r2, #150	; 0x96
 80016c6:	0192      	lsls	r2, r2, #6
 80016c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ca:	4b20      	ldr	r3, [pc, #128]	; (800174c <MX_USART2_UART_Init+0x94>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <MX_USART2_UART_Init+0x94>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016d6:	4b1d      	ldr	r3, [pc, #116]	; (800174c <MX_USART2_UART_Init+0x94>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <MX_USART2_UART_Init+0x94>)
 80016de:	220c      	movs	r2, #12
 80016e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <MX_USART2_UART_Init+0x94>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e8:	4b18      	ldr	r3, [pc, #96]	; (800174c <MX_USART2_UART_Init+0x94>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <MX_USART2_UART_Init+0x94>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <MX_USART2_UART_Init+0x94>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <MX_USART2_UART_Init+0x94>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <MX_USART2_UART_Init+0x94>)
 8001702:	0018      	movs	r0, r3
 8001704:	f002 fd76 	bl	80041f4 <HAL_UART_Init>
 8001708:	1e03      	subs	r3, r0, #0
 800170a:	d001      	beq.n	8001710 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800170c:	f000 f90a 	bl	8001924 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <MX_USART2_UART_Init+0x94>)
 8001712:	2100      	movs	r1, #0
 8001714:	0018      	movs	r0, r3
 8001716:	f004 fcab 	bl	8006070 <HAL_UARTEx_SetTxFifoThreshold>
 800171a:	1e03      	subs	r3, r0, #0
 800171c:	d001      	beq.n	8001722 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800171e:	f000 f901 	bl	8001924 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <MX_USART2_UART_Init+0x94>)
 8001724:	2100      	movs	r1, #0
 8001726:	0018      	movs	r0, r3
 8001728:	f004 fce2 	bl	80060f0 <HAL_UARTEx_SetRxFifoThreshold>
 800172c:	1e03      	subs	r3, r0, #0
 800172e:	d001      	beq.n	8001734 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001730:	f000 f8f8 	bl	8001924 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <MX_USART2_UART_Init+0x94>)
 8001736:	0018      	movs	r0, r3
 8001738:	f004 fc60 	bl	8005ffc <HAL_UARTEx_DisableFifoMode>
 800173c:	1e03      	subs	r3, r0, #0
 800173e:	d001      	beq.n	8001744 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001740:	f000 f8f0 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001744:	46c0      	nop			; (mov r8, r8)
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	200009c4 	.word	0x200009c4
 8001750:	40004400 	.word	0x40004400

08001754 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <MX_USART6_UART_Init+0x60>)
 800175a:	4a17      	ldr	r2, [pc, #92]	; (80017b8 <MX_USART6_UART_Init+0x64>)
 800175c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <MX_USART6_UART_Init+0x60>)
 8001760:	22e1      	movs	r2, #225	; 0xe1
 8001762:	0252      	lsls	r2, r2, #9
 8001764:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <MX_USART6_UART_Init+0x60>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_USART6_UART_Init+0x60>)
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <MX_USART6_UART_Init+0x60>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001778:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_USART6_UART_Init+0x60>)
 800177a:	220c      	movs	r2, #12
 800177c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177e:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <MX_USART6_UART_Init+0x60>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001784:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_USART6_UART_Init+0x60>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <MX_USART6_UART_Init+0x60>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_USART6_UART_Init+0x60>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <MX_USART6_UART_Init+0x60>)
 8001798:	2200      	movs	r2, #0
 800179a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <MX_USART6_UART_Init+0x60>)
 800179e:	0018      	movs	r0, r3
 80017a0:	f002 fd28 	bl	80041f4 <HAL_UART_Init>
 80017a4:	1e03      	subs	r3, r0, #0
 80017a6:	d001      	beq.n	80017ac <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80017a8:	f000 f8bc 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80017ac:	46c0      	nop			; (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	20000a58 	.word	0x20000a58
 80017b8:	40013c00 	.word	0x40013c00

080017bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b089      	sub	sp, #36	; 0x24
 80017c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c2:	240c      	movs	r4, #12
 80017c4:	193b      	adds	r3, r7, r4
 80017c6:	0018      	movs	r0, r3
 80017c8:	2314      	movs	r3, #20
 80017ca:	001a      	movs	r2, r3
 80017cc:	2100      	movs	r1, #0
 80017ce:	f004 fdca 	bl	8006366 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d2:	4b42      	ldr	r3, [pc, #264]	; (80018dc <MX_GPIO_Init+0x120>)
 80017d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017d6:	4b41      	ldr	r3, [pc, #260]	; (80018dc <MX_GPIO_Init+0x120>)
 80017d8:	2104      	movs	r1, #4
 80017da:	430a      	orrs	r2, r1
 80017dc:	635a      	str	r2, [r3, #52]	; 0x34
 80017de:	4b3f      	ldr	r3, [pc, #252]	; (80018dc <MX_GPIO_Init+0x120>)
 80017e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e2:	2204      	movs	r2, #4
 80017e4:	4013      	ands	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	4b3c      	ldr	r3, [pc, #240]	; (80018dc <MX_GPIO_Init+0x120>)
 80017ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ee:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <MX_GPIO_Init+0x120>)
 80017f0:	2101      	movs	r1, #1
 80017f2:	430a      	orrs	r2, r1
 80017f4:	635a      	str	r2, [r3, #52]	; 0x34
 80017f6:	4b39      	ldr	r3, [pc, #228]	; (80018dc <MX_GPIO_Init+0x120>)
 80017f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fa:	2201      	movs	r2, #1
 80017fc:	4013      	ands	r3, r2
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	4b36      	ldr	r3, [pc, #216]	; (80018dc <MX_GPIO_Init+0x120>)
 8001804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001806:	4b35      	ldr	r3, [pc, #212]	; (80018dc <MX_GPIO_Init+0x120>)
 8001808:	2102      	movs	r1, #2
 800180a:	430a      	orrs	r2, r1
 800180c:	635a      	str	r2, [r3, #52]	; 0x34
 800180e:	4b33      	ldr	r3, [pc, #204]	; (80018dc <MX_GPIO_Init+0x120>)
 8001810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001812:	2202      	movs	r2, #2
 8001814:	4013      	ands	r3, r2
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800181a:	23a0      	movs	r3, #160	; 0xa0
 800181c:	05db      	lsls	r3, r3, #23
 800181e:	2200      	movs	r2, #0
 8001820:	2180      	movs	r1, #128	; 0x80
 8001822:	0018      	movs	r0, r3
 8001824:	f001 f967 	bl	8002af6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001828:	4b2d      	ldr	r3, [pc, #180]	; (80018e0 <MX_GPIO_Init+0x124>)
 800182a:	2200      	movs	r2, #0
 800182c:	2103      	movs	r1, #3
 800182e:	0018      	movs	r0, r3
 8001830:	f001 f961 	bl	8002af6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_COMM_GPIO_Port, RST_COMM_Pin, GPIO_PIN_SET);
 8001834:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <MX_GPIO_Init+0x124>)
 8001836:	2201      	movs	r2, #1
 8001838:	2180      	movs	r1, #128	; 0x80
 800183a:	0018      	movs	r0, r3
 800183c:	f001 f95b 	bl	8002af6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001840:	193b      	adds	r3, r7, r4
 8001842:	2280      	movs	r2, #128	; 0x80
 8001844:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001846:	193b      	adds	r3, r7, r4
 8001848:	2201      	movs	r2, #1
 800184a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	193b      	adds	r3, r7, r4
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	193b      	adds	r3, r7, r4
 8001854:	2200      	movs	r2, #0
 8001856:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	193a      	adds	r2, r7, r4
 800185a:	23a0      	movs	r3, #160	; 0xa0
 800185c:	05db      	lsls	r3, r3, #23
 800185e:	0011      	movs	r1, r2
 8001860:	0018      	movs	r0, r3
 8001862:	f000 ffbf 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001866:	193b      	adds	r3, r7, r4
 8001868:	2203      	movs	r2, #3
 800186a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186c:	193b      	adds	r3, r7, r4
 800186e:	2201      	movs	r2, #1
 8001870:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	193b      	adds	r3, r7, r4
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	193b      	adds	r3, r7, r4
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	193b      	adds	r3, r7, r4
 8001880:	4a17      	ldr	r2, [pc, #92]	; (80018e0 <MX_GPIO_Init+0x124>)
 8001882:	0019      	movs	r1, r3
 8001884:	0010      	movs	r0, r2
 8001886:	f000 ffad 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT_Pin */
  GPIO_InitStruct.Pin = BOOT_Pin;
 800188a:	0021      	movs	r1, r4
 800188c:	187b      	adds	r3, r7, r1
 800188e:	2280      	movs	r2, #128	; 0x80
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001894:	000c      	movs	r4, r1
 8001896:	193b      	adds	r3, r7, r4
 8001898:	2200      	movs	r2, #0
 800189a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800189c:	193b      	adds	r3, r7, r4
 800189e:	2202      	movs	r2, #2
 80018a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT_GPIO_Port, &GPIO_InitStruct);
 80018a2:	193b      	adds	r3, r7, r4
 80018a4:	4a0e      	ldr	r2, [pc, #56]	; (80018e0 <MX_GPIO_Init+0x124>)
 80018a6:	0019      	movs	r1, r3
 80018a8:	0010      	movs	r0, r2
 80018aa:	f000 ff9b 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_COMM_Pin */
  GPIO_InitStruct.Pin = RST_COMM_Pin;
 80018ae:	0021      	movs	r1, r4
 80018b0:	187b      	adds	r3, r7, r1
 80018b2:	2280      	movs	r2, #128	; 0x80
 80018b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b6:	187b      	adds	r3, r7, r1
 80018b8:	2201      	movs	r2, #1
 80018ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018bc:	187b      	adds	r3, r7, r1
 80018be:	2202      	movs	r2, #2
 80018c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	187b      	adds	r3, r7, r1
 80018c4:	2200      	movs	r2, #0
 80018c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RST_COMM_GPIO_Port, &GPIO_InitStruct);
 80018c8:	187b      	adds	r3, r7, r1
 80018ca:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <MX_GPIO_Init+0x124>)
 80018cc:	0019      	movs	r1, r3
 80018ce:	0010      	movs	r0, r2
 80018d0:	f000 ff88 	bl	80027e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018d4:	46c0      	nop			; (mov r8, r8)
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b009      	add	sp, #36	; 0x24
 80018da:	bd90      	pop	{r4, r7, pc}
 80018dc:	40021000 	.word	0x40021000
 80018e0:	50000400 	.word	0x50000400

080018e4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a08      	ldr	r2, [pc, #32]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d102      	bne.n	80018fc <HAL_TIM_PeriodElapsedCallback+0x18>
	  {
		timer_flag = 1 ;
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	801a      	strh	r2, [r3, #0]
	  }

   if(htim->Instance == TIM3)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a06      	ldr	r2, [pc, #24]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d102      	bne.n	800190c <HAL_TIM_PeriodElapsedCallback+0x28>
     {
	   dato_recivido = 1;// offset is 0 or page integers
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001908:	2201      	movs	r2, #1
 800190a:	701a      	strb	r2, [r3, #0]
     }
}
 800190c:	46c0      	nop			; (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	b002      	add	sp, #8
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40012c00 	.word	0x40012c00
 8001918:	20000d24 	.word	0x20000d24
 800191c:	40000400 	.word	0x40000400
 8001920:	20000af8 	.word	0x20000af8

08001924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001928:	b672      	cpsid	i
}
 800192a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800192c:	e7fe      	b.n	800192c <Error_Handler+0x8>
	...

08001930 <prv_set_flag>:
  BL_UPDATE_REQUEST = 1 << 1,

  FLAG_BG_FAULT = 1 << 2,
};

static void prv_set_flag(uint32_t flag, bool value) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	000a      	movs	r2, r1
 800193a:	1cfb      	adds	r3, r7, #3
 800193c:	701a      	strb	r2, [r3, #0]
    if (value) {
 800193e:	1cfb      	adds	r3, r7, #3
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d006      	beq.n	8001954 <prv_set_flag+0x24>
        shared_data.flags |= flag;
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <prv_set_flag+0x3c>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	431a      	orrs	r2, r3
 800194e:	4b07      	ldr	r3, [pc, #28]	; (800196c <prv_set_flag+0x3c>)
 8001950:	601a      	str	r2, [r3, #0]
    } else {
        shared_data.flags &= ~flag;
    }
}
 8001952:	e006      	b.n	8001962 <prv_set_flag+0x32>
        shared_data.flags &= ~flag;
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <prv_set_flag+0x3c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	43d2      	mvns	r2, r2
 800195c:	401a      	ands	r2, r3
 800195e:	4b03      	ldr	r3, [pc, #12]	; (800196c <prv_set_flag+0x3c>)
 8001960:	601a      	str	r2, [r3, #0]
}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	46bd      	mov	sp, r7
 8001966:	b002      	add	sp, #8
 8001968:	bd80      	pop	{r7, pc}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	200004f8 	.word	0x200004f8

08001970 <prv_get_flag>:

static bool prv_get_flag(uint32_t flag) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
    return shared_data.flags & flag;
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <prv_get_flag+0x20>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	4013      	ands	r3, r2
 8001980:	1e5a      	subs	r2, r3, #1
 8001982:	4193      	sbcs	r3, r2
 8001984:	b2db      	uxtb	r3, r3
}
 8001986:	0018      	movs	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	b002      	add	sp, #8
 800198c:	bd80      	pop	{r7, pc}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	200004f8 	.word	0x200004f8

08001994 <shared_memory_init>:

void shared_memory_init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  if (shared_data.magic != MAGIC)
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <shared_memory_init+0x34>)
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	23e7      	movs	r3, #231	; 0xe7
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d00d      	beq.n	80019c0 <shared_memory_init+0x2c>
  {
    printf("Shared memory uninitialized, setting MAGIC\r\n");
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <shared_memory_init+0x38>)
 80019a6:	0018      	movs	r0, r3
 80019a8:	f004 fd72 	bl	8006490 <puts>
    memset(&shared_data, 0, sizeof (shared_data_t));
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <shared_memory_init+0x34>)
 80019ae:	2212      	movs	r2, #18
 80019b0:	2100      	movs	r1, #0
 80019b2:	0018      	movs	r0, r3
 80019b4:	f004 fcd7 	bl	8006366 <memset>
    shared_data.magic = MAGIC;
 80019b8:	23e7      	movs	r3, #231	; 0xe7
 80019ba:	005a      	lsls	r2, r3, #1
 80019bc:	4b02      	ldr	r3, [pc, #8]	; (80019c8 <shared_memory_init+0x34>)
 80019be:	605a      	str	r2, [r3, #4]
  }
}
 80019c0:	46c0      	nop			; (mov r8, r8)
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	200004f8 	.word	0x200004f8
 80019cc:	08007df0 	.word	0x08007df0

080019d0 <shared_mem_is_app_upd_requested>:

bool shared_mem_is_app_upd_requested(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  return prv_get_flag(APP_UPDATE_REQUEST);
 80019d4:	2001      	movs	r0, #1
 80019d6:	f7ff ffcb 	bl	8001970 <prv_get_flag>
 80019da:	0003      	movs	r3, r0
}
 80019dc:	0018      	movs	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <shared_mem_is_bl_upd_requested>:

bool shared_mem_is_bl_upd_requested(void)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	af00      	add	r7, sp, #0
  return prv_get_flag(BL_UPDATE_REQUEST);
 80019e6:	2002      	movs	r0, #2
 80019e8:	f7ff ffc2 	bl	8001970 <prv_get_flag>
 80019ec:	0003      	movs	r3, r0
}
 80019ee:	0018      	movs	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <shared_mem_increment_boot_counter>:
{
  return prv_get_flag(FLAG_BG_FAULT);
}

void shared_mem_increment_boot_counter(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  shared_data.boot_count++;
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <shared_mem_increment_boot_counter+0x18>)
 80019fa:	7c1b      	ldrb	r3, [r3, #16]
 80019fc:	3301      	adds	r3, #1
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	4b02      	ldr	r3, [pc, #8]	; (8001a0c <shared_mem_increment_boot_counter+0x18>)
 8001a02:	741a      	strb	r2, [r3, #16]
}
 8001a04:	46c0      	nop			; (mov r8, r8)
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	200004f8 	.word	0x200004f8

08001a10 <shared_mem_clear_boot_counter>:

void shared_mem_clear_boot_counter(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  shared_data.boot_count = 0;
 8001a14:	4b02      	ldr	r3, [pc, #8]	; (8001a20 <shared_mem_clear_boot_counter+0x10>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	741a      	strb	r2, [r3, #16]
}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	200004f8 	.word	0x200004f8

08001a24 <shared_mem_get_boot_counter>:

uint8_t shared_mem_get_boot_counter(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  return shared_data.boot_count;
 8001a28:	4b02      	ldr	r3, [pc, #8]	; (8001a34 <shared_mem_get_boot_counter+0x10>)
 8001a2a:	7c1b      	ldrb	r3, [r3, #16]
}
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	200004f8 	.word	0x200004f8

08001a38 <shared_mem_set_update_completed>:
{
  return shared_data.update_size;
}

void shared_mem_set_update_completed(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  memcpy(shared_data.fota_status, "DONE", 4);
 8001a3c:	4b02      	ldr	r3, [pc, #8]	; (8001a48 <shared_mem_set_update_completed+0x10>)
 8001a3e:	4a03      	ldr	r2, [pc, #12]	; (8001a4c <shared_mem_set_update_completed+0x14>)
 8001a40:	60da      	str	r2, [r3, #12]
}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	200004f8 	.word	0x200004f8
 8001a4c:	454e4f44 	.word	0x454e4f44

08001a50 <shared_mem_clear_ota_info>:

void shared_mem_clear_ota_info(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  shared_data.update_size = 0;
 8001a54:	4b02      	ldr	r3, [pc, #8]	; (8001a60 <shared_mem_clear_ota_info+0x10>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]

}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	200004f8 	.word	0x200004f8

08001a64 <shared_mem_set_app_update_requested>:

void shared_mem_set_app_update_requested(bool value)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	1dfb      	adds	r3, r7, #7
 8001a6e:	701a      	strb	r2, [r3, #0]
  prv_set_flag(APP_UPDATE_REQUEST, value);
 8001a70:	1dfb      	adds	r3, r7, #7
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	0019      	movs	r1, r3
 8001a76:	2001      	movs	r0, #1
 8001a78:	f7ff ff5a 	bl	8001930 <prv_set_flag>
}
 8001a7c:	46c0      	nop			; (mov r8, r8)
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	b002      	add	sp, #8
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <shared_mem_set_update>:
  shared_data.update_size = size;
}


void shared_mem_set_update(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	shared_data.update = 1;
 8001a88:	4b02      	ldr	r3, [pc, #8]	; (8001a94 <shared_mem_set_update+0x10>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	745a      	strb	r2, [r3, #17]
}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	200004f8 	.word	0x200004f8

08001a98 <shared_mem_get_update>:
{
	shared_data.update = 0;
}

int shared_mem_get_update(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
	return shared_data.update;
 8001a9c:	4b02      	ldr	r3, [pc, #8]	; (8001aa8 <shared_mem_get_update+0x10>)
 8001a9e:	7c5b      	ldrb	r3, [r3, #17]
}
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	200004f8 	.word	0x200004f8

08001aac <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001ab4:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <RetargetInit+0x28>)
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	601a      	str	r2, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001aba:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <RetargetInit+0x2c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6898      	ldr	r0, [r3, #8]
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	f004 fced 	bl	80064a4 <setvbuf>
}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	46bd      	mov	sp, r7
 8001ace:	b002      	add	sp, #8
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	20000d30 	.word	0x20000d30
 8001ad8:	2000040c 	.word	0x2000040c

08001adc <_isatty>:

int _isatty(int fd) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	db04      	blt.n	8001af4 <_isatty+0x18>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	dc01      	bgt.n	8001af4 <_isatty+0x18>
    return 1;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e005      	b.n	8001b00 <_isatty+0x24>

  errno = EBADF;
 8001af4:	f004 fc04 	bl	8006300 <__errno>
 8001af8:	0003      	movs	r3, r0
 8001afa:	2209      	movs	r2, #9
 8001afc:	601a      	str	r2, [r3, #0]
  return 0;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	0018      	movs	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	b002      	add	sp, #8
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <_write>:

int _write(int fd, char* ptr, int len) {
 8001b08:	b5b0      	push	{r4, r5, r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d002      	beq.n	8001b20 <_write+0x18>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d114      	bne.n	8001b4a <_write+0x42>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <_write+0x58>)
 8001b22:	6818      	ldr	r0, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	2517      	movs	r5, #23
 8001b2a:	197c      	adds	r4, r7, r5
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	425b      	negs	r3, r3
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	f002 fbb5 	bl	80042a0 <HAL_UART_Transmit>
 8001b36:	0003      	movs	r3, r0
 8001b38:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 8001b3a:	197b      	adds	r3, r7, r5
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <_write+0x3e>
      return len;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	e008      	b.n	8001b58 <_write+0x50>
    else
      return EIO;
 8001b46:	2305      	movs	r3, #5
 8001b48:	e006      	b.n	8001b58 <_write+0x50>
  }
  errno = EBADF;
 8001b4a:	f004 fbd9 	bl	8006300 <__errno>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	2209      	movs	r2, #9
 8001b52:	601a      	str	r2, [r3, #0]
  return -1;
 8001b54:	2301      	movs	r3, #1
 8001b56:	425b      	negs	r3, r3
}
 8001b58:	0018      	movs	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	b006      	add	sp, #24
 8001b5e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b60:	20000d30 	.word	0x20000d30

08001b64 <_close>:

int _close(int fd) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	db04      	blt.n	8001b7c <_close+0x18>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	dc01      	bgt.n	8001b7c <_close+0x18>
    return 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e006      	b.n	8001b8a <_close+0x26>

  errno = EBADF;
 8001b7c:	f004 fbc0 	bl	8006300 <__errno>
 8001b80:	0003      	movs	r3, r0
 8001b82:	2209      	movs	r2, #9
 8001b84:	601a      	str	r2, [r3, #0]
  return -1;
 8001b86:	2301      	movs	r3, #1
 8001b88:	425b      	negs	r3, r3
}
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b002      	add	sp, #8
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001b9e:	f004 fbaf 	bl	8006300 <__errno>
 8001ba2:	0003      	movs	r3, r0
 8001ba4:	2209      	movs	r2, #9
 8001ba6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	425b      	negs	r3, r3
}
 8001bac:	0018      	movs	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b004      	add	sp, #16
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <_read>:

int _read(int fd, char* ptr, int len) {
 8001bb4:	b5b0      	push	{r4, r5, r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d113      	bne.n	8001bee <_read+0x3a>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <_read+0x50>)
 8001bc8:	6818      	ldr	r0, [r3, #0]
 8001bca:	2517      	movs	r5, #23
 8001bcc:	197c      	adds	r4, r7, r5
 8001bce:	2301      	movs	r3, #1
 8001bd0:	425b      	negs	r3, r3
 8001bd2:	68b9      	ldr	r1, [r7, #8]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f002 fbff 	bl	80043d8 <HAL_UART_Receive>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 8001bde:	197b      	adds	r3, r7, r5
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <_read+0x36>
      return 1;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e008      	b.n	8001bfc <_read+0x48>
    else
      return EIO;
 8001bea:	2305      	movs	r3, #5
 8001bec:	e006      	b.n	8001bfc <_read+0x48>
  }
  errno = EBADF;
 8001bee:	f004 fb87 	bl	8006300 <__errno>
 8001bf2:	0003      	movs	r3, r0
 8001bf4:	2209      	movs	r2, #9
 8001bf6:	601a      	str	r2, [r3, #0]
  return -1;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	425b      	negs	r3, r3
}
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b006      	add	sp, #24
 8001c02:	bdb0      	pop	{r4, r5, r7, pc}
 8001c04:	20000d30 	.word	0x20000d30

08001c08 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	db08      	blt.n	8001c2a <_fstat+0x22>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	dc05      	bgt.n	8001c2a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2280      	movs	r2, #128	; 0x80
 8001c22:	0192      	lsls	r2, r2, #6
 8001c24:	605a      	str	r2, [r3, #4]
    return 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	e005      	b.n	8001c36 <_fstat+0x2e>
  }

  errno = EBADF;
 8001c2a:	f004 fb69 	bl	8006300 <__errno>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	2209      	movs	r2, #9
 8001c32:	601a      	str	r2, [r3, #0]
  return 0;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	0018      	movs	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	b002      	add	sp, #8
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c46:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <HAL_MspInit+0x44>)
 8001c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <HAL_MspInit+0x44>)
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <HAL_MspInit+0x44>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	2201      	movs	r2, #1
 8001c58:	4013      	ands	r3, r2
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_MspInit+0x44>)
 8001c60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <HAL_MspInit+0x44>)
 8001c64:	2180      	movs	r1, #128	; 0x80
 8001c66:	0549      	lsls	r1, r1, #21
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_MspInit+0x44>)
 8001c6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	055b      	lsls	r3, r3, #21
 8001c74:	4013      	ands	r3, r2
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b002      	add	sp, #8
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	40021000 	.word	0x40021000

08001c88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1b      	ldr	r2, [pc, #108]	; (8001d04 <HAL_TIM_Base_MspInit+0x7c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d11e      	bne.n	8001cd8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c9a:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <HAL_TIM_Base_MspInit+0x80>)
 8001c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <HAL_TIM_Base_MspInit+0x80>)
 8001ca0:	2180      	movs	r1, #128	; 0x80
 8001ca2:	0109      	lsls	r1, r1, #4
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	641a      	str	r2, [r3, #64]	; 0x40
 8001ca8:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <HAL_TIM_Base_MspInit+0x80>)
 8001caa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	200d      	movs	r0, #13
 8001cbc:	f000 fae8 	bl	8002290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001cc0:	200d      	movs	r0, #13
 8001cc2:	f000 fafa 	bl	80022ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2100      	movs	r1, #0
 8001cca:	200e      	movs	r0, #14
 8001ccc:	f000 fae0 	bl	8002290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001cd0:	200e      	movs	r0, #14
 8001cd2:	f000 faf2 	bl	80022ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001cd6:	e010      	b.n	8001cfa <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <HAL_TIM_Base_MspInit+0x84>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d10b      	bne.n	8001cfa <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_TIM_Base_MspInit+0x80>)
 8001ce4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_TIM_Base_MspInit+0x80>)
 8001ce8:	2102      	movs	r1, #2
 8001cea:	430a      	orrs	r2, r1
 8001cec:	63da      	str	r2, [r3, #60]	; 0x3c
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_TIM_Base_MspInit+0x80>)
 8001cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b004      	add	sp, #16
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	40012c00 	.word	0x40012c00
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40000400 	.word	0x40000400

08001d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b097      	sub	sp, #92	; 0x5c
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	2344      	movs	r3, #68	; 0x44
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	2314      	movs	r3, #20
 8001d20:	001a      	movs	r2, r3
 8001d22:	2100      	movs	r1, #0
 8001d24:	f004 fb1f 	bl	8006366 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d28:	2418      	movs	r4, #24
 8001d2a:	193b      	adds	r3, r7, r4
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	232c      	movs	r3, #44	; 0x2c
 8001d30:	001a      	movs	r2, r3
 8001d32:	2100      	movs	r1, #0
 8001d34:	f004 fb17 	bl	8006366 <memset>
  if(huart->Instance==USART2)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a46      	ldr	r2, [pc, #280]	; (8001e58 <HAL_UART_MspInit+0x148>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d147      	bne.n	8001dd2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d42:	193b      	adds	r3, r7, r4
 8001d44:	2202      	movs	r2, #2
 8001d46:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d48:	193b      	adds	r3, r7, r4
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d4e:	193b      	adds	r3, r7, r4
 8001d50:	0018      	movs	r0, r3
 8001d52:	f001 fc19 	bl	8003588 <HAL_RCCEx_PeriphCLKConfig>
 8001d56:	1e03      	subs	r3, r0, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d5a:	f7ff fde3 	bl	8001924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d5e:	4b3f      	ldr	r3, [pc, #252]	; (8001e5c <HAL_UART_MspInit+0x14c>)
 8001d60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d62:	4b3e      	ldr	r3, [pc, #248]	; (8001e5c <HAL_UART_MspInit+0x14c>)
 8001d64:	2180      	movs	r1, #128	; 0x80
 8001d66:	0289      	lsls	r1, r1, #10
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d6c:	4b3b      	ldr	r3, [pc, #236]	; (8001e5c <HAL_UART_MspInit+0x14c>)
 8001d6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	029b      	lsls	r3, r3, #10
 8001d74:	4013      	ands	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7a:	4b38      	ldr	r3, [pc, #224]	; (8001e5c <HAL_UART_MspInit+0x14c>)
 8001d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d7e:	4b37      	ldr	r3, [pc, #220]	; (8001e5c <HAL_UART_MspInit+0x14c>)
 8001d80:	2101      	movs	r1, #1
 8001d82:	430a      	orrs	r2, r1
 8001d84:	635a      	str	r2, [r3, #52]	; 0x34
 8001d86:	4b35      	ldr	r3, [pc, #212]	; (8001e5c <HAL_UART_MspInit+0x14c>)
 8001d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d92:	2144      	movs	r1, #68	; 0x44
 8001d94:	187b      	adds	r3, r7, r1
 8001d96:	220c      	movs	r2, #12
 8001d98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	187b      	adds	r3, r7, r1
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	187b      	adds	r3, r7, r1
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	187b      	adds	r3, r7, r1
 8001da8:	2200      	movs	r2, #0
 8001daa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001dac:	187b      	adds	r3, r7, r1
 8001dae:	2201      	movs	r2, #1
 8001db0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db2:	187a      	adds	r2, r7, r1
 8001db4:	23a0      	movs	r3, #160	; 0xa0
 8001db6:	05db      	lsls	r3, r3, #23
 8001db8:	0011      	movs	r1, r2
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f000 fd12 	bl	80027e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	201c      	movs	r0, #28
 8001dc6:	f000 fa63 	bl	8002290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dca:	201c      	movs	r0, #28
 8001dcc:	f000 fa75 	bl	80022ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001dd0:	e03d      	b.n	8001e4e <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART6)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a22      	ldr	r2, [pc, #136]	; (8001e60 <HAL_UART_MspInit+0x150>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d138      	bne.n	8001e4e <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <HAL_UART_MspInit+0x14c>)
 8001dde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001de0:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <HAL_UART_MspInit+0x14c>)
 8001de2:	2180      	movs	r1, #128	; 0x80
 8001de4:	0089      	lsls	r1, r1, #2
 8001de6:	430a      	orrs	r2, r1
 8001de8:	63da      	str	r2, [r3, #60]	; 0x3c
 8001dea:	4b1c      	ldr	r3, [pc, #112]	; (8001e5c <HAL_UART_MspInit+0x14c>)
 8001dec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dee:	2380      	movs	r3, #128	; 0x80
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4013      	ands	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df8:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <HAL_UART_MspInit+0x14c>)
 8001dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dfc:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <HAL_UART_MspInit+0x14c>)
 8001dfe:	2101      	movs	r1, #1
 8001e00:	430a      	orrs	r2, r1
 8001e02:	635a      	str	r2, [r3, #52]	; 0x34
 8001e04:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HAL_UART_MspInit+0x14c>)
 8001e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e08:	2201      	movs	r2, #1
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e10:	2144      	movs	r1, #68	; 0x44
 8001e12:	187b      	adds	r3, r7, r1
 8001e14:	2230      	movs	r2, #48	; 0x30
 8001e16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	187b      	adds	r3, r7, r1
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	187b      	adds	r3, r7, r1
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	187b      	adds	r3, r7, r1
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART6;
 8001e2a:	187b      	adds	r3, r7, r1
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e30:	187a      	adds	r2, r7, r1
 8001e32:	23a0      	movs	r3, #160	; 0xa0
 8001e34:	05db      	lsls	r3, r3, #23
 8001e36:	0011      	movs	r1, r2
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f000 fcd3 	bl	80027e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_5_6_IRQn, 0, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	201d      	movs	r0, #29
 8001e44:	f000 fa24 	bl	8002290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_IRQn);
 8001e48:	201d      	movs	r0, #29
 8001e4a:	f000 fa36 	bl	80022ba <HAL_NVIC_EnableIRQ>
}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	46bd      	mov	sp, r7
 8001e52:	b017      	add	sp, #92	; 0x5c
 8001e54:	bd90      	pop	{r4, r7, pc}
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	40004400 	.word	0x40004400
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40013c00 	.word	0x40013c00

08001e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <NMI_Handler+0x4>

08001e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6e:	e7fe      	b.n	8001e6e <HardFault_Handler+0x4>

08001e70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e74:	46c0      	nop			; (mov r8, r8)
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e88:	f000 f904 	bl	8002094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e8c:	46c0      	nop			; (mov r8, r8)
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f001 fdde 	bl	8003a5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001ea0:	46c0      	nop			; (mov r8, r8)
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	2000092c 	.word	0x2000092c

08001eac <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <TIM1_CC_IRQHandler+0x14>)
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f001 fdd2 	bl	8003a5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001eb8:	46c0      	nop			; (mov r8, r8)
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	2000092c 	.word	0x2000092c

08001ec4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <USART2_IRQHandler+0x14>)
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f002 fb66 	bl	800459c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ed0:	46c0      	nop			; (mov r8, r8)
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	200009c4 	.word	0x200009c4

08001edc <USART3_4_5_6_IRQHandler>:

/**
  * @brief This function handles USART3, USART4, USART5, USART6 globlal Interrupts (combined with EXTI 28).
  */
void USART3_4_5_6_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_5_6_IRQn 0 */

  /* USER CODE END USART3_4_5_6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001ee0:	4b03      	ldr	r3, [pc, #12]	; (8001ef0 <USART3_4_5_6_IRQHandler+0x14>)
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f002 fb5a 	bl	800459c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_5_6_IRQn 1 */

  /* USER CODE END USART3_4_5_6_IRQn 1 */
}
 8001ee8:	46c0      	nop			; (mov r8, r8)
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	20000a58 	.word	0x20000a58

08001ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001efc:	4a14      	ldr	r2, [pc, #80]	; (8001f50 <_sbrk+0x5c>)
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <_sbrk+0x60>)
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f08:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <_sbrk+0x64>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d102      	bne.n	8001f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <_sbrk+0x64>)
 8001f12:	4a12      	ldr	r2, [pc, #72]	; (8001f5c <_sbrk+0x68>)
 8001f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <_sbrk+0x64>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	18d3      	adds	r3, r2, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d207      	bcs.n	8001f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f24:	f004 f9ec 	bl	8006300 <__errno>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	425b      	negs	r3, r3
 8001f32:	e009      	b.n	8001f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <_sbrk+0x64>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f3a:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <_sbrk+0x64>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	18d2      	adds	r2, r2, r3
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <_sbrk+0x64>)
 8001f44:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001f46:	68fb      	ldr	r3, [r7, #12]
}
 8001f48:	0018      	movs	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	b006      	add	sp, #24
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20024000 	.word	0x20024000
 8001f54:	00000400 	.word	0x00000400
 8001f58:	20000d34 	.word	0x20000d34
 8001f5c:	20000d68 	.word	0x20000d68

08001f60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f64:	46c0      	nop			; (mov r8, r8)
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f6c:	480d      	ldr	r0, [pc, #52]	; (8001fa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f6e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f70:	f7ff fff6 	bl	8001f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f74:	480c      	ldr	r0, [pc, #48]	; (8001fa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f76:	490d      	ldr	r1, [pc, #52]	; (8001fac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f78:	4a0d      	ldr	r2, [pc, #52]	; (8001fb0 <LoopForever+0xe>)
  movs r3, #0
 8001f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f7c:	e002      	b.n	8001f84 <LoopCopyDataInit>

08001f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f82:	3304      	adds	r3, #4

08001f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f88:	d3f9      	bcc.n	8001f7e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f8c:	4c0a      	ldr	r4, [pc, #40]	; (8001fb8 <LoopForever+0x16>)
  movs r3, #0
 8001f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f90:	e001      	b.n	8001f96 <LoopFillZerobss>

08001f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f94:	3204      	adds	r2, #4

08001f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f98:	d3fb      	bcc.n	8001f92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f9a:	f004 f9b7 	bl	800630c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001f9e:	f7ff f923 	bl	80011e8 <main>

08001fa2 <LoopForever>:

LoopForever:
  b LoopForever
 8001fa2:	e7fe      	b.n	8001fa2 <LoopForever>
  ldr   r0, =_estack
 8001fa4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001fa8:	20000400 	.word	0x20000400
  ldr r1, =_edata
 8001fac:	200004f8 	.word	0x200004f8
  ldr r2, =_sidata
 8001fb0:	08008144 	.word	0x08008144
  ldr r2, =_sbss
 8001fb4:	20000510 	.word	0x20000510
  ldr r4, =_ebss
 8001fb8:	20000d68 	.word	0x20000d68

08001fbc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fbc:	e7fe      	b.n	8001fbc <ADC1_IRQHandler>
	...

08001fc0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fc6:	1dfb      	adds	r3, r7, #7
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_Init+0x3c>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <HAL_Init+0x3c>)
 8001fd2:	2180      	movs	r1, #128	; 0x80
 8001fd4:	0049      	lsls	r1, r1, #1
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fda:	2003      	movs	r0, #3
 8001fdc:	f000 f810 	bl	8002000 <HAL_InitTick>
 8001fe0:	1e03      	subs	r3, r0, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001fe4:	1dfb      	adds	r3, r7, #7
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	701a      	strb	r2, [r3, #0]
 8001fea:	e001      	b.n	8001ff0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001fec:	f7ff fe28 	bl	8001c40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ff0:	1dfb      	adds	r3, r7, #7
 8001ff2:	781b      	ldrb	r3, [r3, #0]
}
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	b002      	add	sp, #8
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40022000 	.word	0x40022000

08002000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002008:	230f      	movs	r3, #15
 800200a:	18fb      	adds	r3, r7, r3
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002010:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <HAL_InitTick+0x88>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d02b      	beq.n	8002070 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002018:	4b1c      	ldr	r3, [pc, #112]	; (800208c <HAL_InitTick+0x8c>)
 800201a:	681c      	ldr	r4, [r3, #0]
 800201c:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <HAL_InitTick+0x88>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	0019      	movs	r1, r3
 8002022:	23fa      	movs	r3, #250	; 0xfa
 8002024:	0098      	lsls	r0, r3, #2
 8002026:	f7fe f87d 	bl	8000124 <__udivsi3>
 800202a:	0003      	movs	r3, r0
 800202c:	0019      	movs	r1, r3
 800202e:	0020      	movs	r0, r4
 8002030:	f7fe f878 	bl	8000124 <__udivsi3>
 8002034:	0003      	movs	r3, r0
 8002036:	0018      	movs	r0, r3
 8002038:	f000 f953 	bl	80022e2 <HAL_SYSTICK_Config>
 800203c:	1e03      	subs	r3, r0, #0
 800203e:	d112      	bne.n	8002066 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b03      	cmp	r3, #3
 8002044:	d80a      	bhi.n	800205c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	2301      	movs	r3, #1
 800204a:	425b      	negs	r3, r3
 800204c:	2200      	movs	r2, #0
 800204e:	0018      	movs	r0, r3
 8002050:	f000 f91e 	bl	8002290 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002054:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <HAL_InitTick+0x90>)
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	e00d      	b.n	8002078 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800205c:	230f      	movs	r3, #15
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	2201      	movs	r2, #1
 8002062:	701a      	strb	r2, [r3, #0]
 8002064:	e008      	b.n	8002078 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002066:	230f      	movs	r3, #15
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
 800206e:	e003      	b.n	8002078 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002070:	230f      	movs	r3, #15
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	2201      	movs	r2, #1
 8002076:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002078:	230f      	movs	r3, #15
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	781b      	ldrb	r3, [r3, #0]
}
 800207e:	0018      	movs	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	b005      	add	sp, #20
 8002084:	bd90      	pop	{r4, r7, pc}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	20000408 	.word	0x20000408
 800208c:	20000400 	.word	0x20000400
 8002090:	20000404 	.word	0x20000404

08002094 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_IncTick+0x1c>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	001a      	movs	r2, r3
 800209e:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <HAL_IncTick+0x20>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	18d2      	adds	r2, r2, r3
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <HAL_IncTick+0x20>)
 80020a6:	601a      	str	r2, [r3, #0]
}
 80020a8:	46c0      	nop			; (mov r8, r8)
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	20000408 	.word	0x20000408
 80020b4:	20000d38 	.word	0x20000d38

080020b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  return uwTick;
 80020bc:	4b02      	ldr	r3, [pc, #8]	; (80020c8 <HAL_GetTick+0x10>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	0018      	movs	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	20000d38 	.word	0x20000d38

080020cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d4:	f7ff fff0 	bl	80020b8 <HAL_GetTick>
 80020d8:	0003      	movs	r3, r0
 80020da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	3301      	adds	r3, #1
 80020e4:	d005      	beq.n	80020f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020e6:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <HAL_Delay+0x44>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	001a      	movs	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	189b      	adds	r3, r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	f7ff ffe0 	bl	80020b8 <HAL_GetTick>
 80020f8:	0002      	movs	r2, r0
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	429a      	cmp	r2, r3
 8002102:	d8f7      	bhi.n	80020f4 <HAL_Delay+0x28>
  {
  }
}
 8002104:	46c0      	nop			; (mov r8, r8)
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	46bd      	mov	sp, r7
 800210a:	b004      	add	sp, #16
 800210c:	bd80      	pop	{r7, pc}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	20000408 	.word	0x20000408

08002114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	0002      	movs	r2, r0
 800211c:	1dfb      	adds	r3, r7, #7
 800211e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002120:	1dfb      	adds	r3, r7, #7
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b7f      	cmp	r3, #127	; 0x7f
 8002126:	d809      	bhi.n	800213c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002128:	1dfb      	adds	r3, r7, #7
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	001a      	movs	r2, r3
 800212e:	231f      	movs	r3, #31
 8002130:	401a      	ands	r2, r3
 8002132:	4b04      	ldr	r3, [pc, #16]	; (8002144 <__NVIC_EnableIRQ+0x30>)
 8002134:	2101      	movs	r1, #1
 8002136:	4091      	lsls	r1, r2
 8002138:	000a      	movs	r2, r1
 800213a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800213c:	46c0      	nop			; (mov r8, r8)
 800213e:	46bd      	mov	sp, r7
 8002140:	b002      	add	sp, #8
 8002142:	bd80      	pop	{r7, pc}
 8002144:	e000e100 	.word	0xe000e100

08002148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002148:	b590      	push	{r4, r7, lr}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	0002      	movs	r2, r0
 8002150:	6039      	str	r1, [r7, #0]
 8002152:	1dfb      	adds	r3, r7, #7
 8002154:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002156:	1dfb      	adds	r3, r7, #7
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b7f      	cmp	r3, #127	; 0x7f
 800215c:	d828      	bhi.n	80021b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800215e:	4a2f      	ldr	r2, [pc, #188]	; (800221c <__NVIC_SetPriority+0xd4>)
 8002160:	1dfb      	adds	r3, r7, #7
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	b25b      	sxtb	r3, r3
 8002166:	089b      	lsrs	r3, r3, #2
 8002168:	33c0      	adds	r3, #192	; 0xc0
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	589b      	ldr	r3, [r3, r2]
 800216e:	1dfa      	adds	r2, r7, #7
 8002170:	7812      	ldrb	r2, [r2, #0]
 8002172:	0011      	movs	r1, r2
 8002174:	2203      	movs	r2, #3
 8002176:	400a      	ands	r2, r1
 8002178:	00d2      	lsls	r2, r2, #3
 800217a:	21ff      	movs	r1, #255	; 0xff
 800217c:	4091      	lsls	r1, r2
 800217e:	000a      	movs	r2, r1
 8002180:	43d2      	mvns	r2, r2
 8002182:	401a      	ands	r2, r3
 8002184:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	019b      	lsls	r3, r3, #6
 800218a:	22ff      	movs	r2, #255	; 0xff
 800218c:	401a      	ands	r2, r3
 800218e:	1dfb      	adds	r3, r7, #7
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	0018      	movs	r0, r3
 8002194:	2303      	movs	r3, #3
 8002196:	4003      	ands	r3, r0
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800219c:	481f      	ldr	r0, [pc, #124]	; (800221c <__NVIC_SetPriority+0xd4>)
 800219e:	1dfb      	adds	r3, r7, #7
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	b25b      	sxtb	r3, r3
 80021a4:	089b      	lsrs	r3, r3, #2
 80021a6:	430a      	orrs	r2, r1
 80021a8:	33c0      	adds	r3, #192	; 0xc0
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80021ae:	e031      	b.n	8002214 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021b0:	4a1b      	ldr	r2, [pc, #108]	; (8002220 <__NVIC_SetPriority+0xd8>)
 80021b2:	1dfb      	adds	r3, r7, #7
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	0019      	movs	r1, r3
 80021b8:	230f      	movs	r3, #15
 80021ba:	400b      	ands	r3, r1
 80021bc:	3b08      	subs	r3, #8
 80021be:	089b      	lsrs	r3, r3, #2
 80021c0:	3306      	adds	r3, #6
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	18d3      	adds	r3, r2, r3
 80021c6:	3304      	adds	r3, #4
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	1dfa      	adds	r2, r7, #7
 80021cc:	7812      	ldrb	r2, [r2, #0]
 80021ce:	0011      	movs	r1, r2
 80021d0:	2203      	movs	r2, #3
 80021d2:	400a      	ands	r2, r1
 80021d4:	00d2      	lsls	r2, r2, #3
 80021d6:	21ff      	movs	r1, #255	; 0xff
 80021d8:	4091      	lsls	r1, r2
 80021da:	000a      	movs	r2, r1
 80021dc:	43d2      	mvns	r2, r2
 80021de:	401a      	ands	r2, r3
 80021e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	019b      	lsls	r3, r3, #6
 80021e6:	22ff      	movs	r2, #255	; 0xff
 80021e8:	401a      	ands	r2, r3
 80021ea:	1dfb      	adds	r3, r7, #7
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	0018      	movs	r0, r3
 80021f0:	2303      	movs	r3, #3
 80021f2:	4003      	ands	r3, r0
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021f8:	4809      	ldr	r0, [pc, #36]	; (8002220 <__NVIC_SetPriority+0xd8>)
 80021fa:	1dfb      	adds	r3, r7, #7
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	001c      	movs	r4, r3
 8002200:	230f      	movs	r3, #15
 8002202:	4023      	ands	r3, r4
 8002204:	3b08      	subs	r3, #8
 8002206:	089b      	lsrs	r3, r3, #2
 8002208:	430a      	orrs	r2, r1
 800220a:	3306      	adds	r3, #6
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	18c3      	adds	r3, r0, r3
 8002210:	3304      	adds	r3, #4
 8002212:	601a      	str	r2, [r3, #0]
}
 8002214:	46c0      	nop			; (mov r8, r8)
 8002216:	46bd      	mov	sp, r7
 8002218:	b003      	add	sp, #12
 800221a:	bd90      	pop	{r4, r7, pc}
 800221c:	e000e100 	.word	0xe000e100
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002228:	f3bf 8f4f 	dsb	sy
}
 800222c:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800222e:	4b04      	ldr	r3, [pc, #16]	; (8002240 <__NVIC_SystemReset+0x1c>)
 8002230:	4a04      	ldr	r2, [pc, #16]	; (8002244 <__NVIC_SystemReset+0x20>)
 8002232:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002234:	f3bf 8f4f 	dsb	sy
}
 8002238:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	e7fd      	b.n	800223a <__NVIC_SystemReset+0x16>
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	e000ed00 	.word	0xe000ed00
 8002244:	05fa0004 	.word	0x05fa0004

08002248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	1e5a      	subs	r2, r3, #1
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	045b      	lsls	r3, r3, #17
 8002258:	429a      	cmp	r2, r3
 800225a:	d301      	bcc.n	8002260 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800225c:	2301      	movs	r3, #1
 800225e:	e010      	b.n	8002282 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002260:	4b0a      	ldr	r3, [pc, #40]	; (800228c <SysTick_Config+0x44>)
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	3a01      	subs	r2, #1
 8002266:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002268:	2301      	movs	r3, #1
 800226a:	425b      	negs	r3, r3
 800226c:	2103      	movs	r1, #3
 800226e:	0018      	movs	r0, r3
 8002270:	f7ff ff6a 	bl	8002148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <SysTick_Config+0x44>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800227a:	4b04      	ldr	r3, [pc, #16]	; (800228c <SysTick_Config+0x44>)
 800227c:	2207      	movs	r2, #7
 800227e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002280:	2300      	movs	r3, #0
}
 8002282:	0018      	movs	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	b002      	add	sp, #8
 8002288:	bd80      	pop	{r7, pc}
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	e000e010 	.word	0xe000e010

08002290 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
 800229a:	210f      	movs	r1, #15
 800229c:	187b      	adds	r3, r7, r1
 800229e:	1c02      	adds	r2, r0, #0
 80022a0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	187b      	adds	r3, r7, r1
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	b25b      	sxtb	r3, r3
 80022aa:	0011      	movs	r1, r2
 80022ac:	0018      	movs	r0, r3
 80022ae:	f7ff ff4b 	bl	8002148 <__NVIC_SetPriority>
}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	46bd      	mov	sp, r7
 80022b6:	b004      	add	sp, #16
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	0002      	movs	r2, r0
 80022c2:	1dfb      	adds	r3, r7, #7
 80022c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c6:	1dfb      	adds	r3, r7, #7
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	b25b      	sxtb	r3, r3
 80022cc:	0018      	movs	r0, r3
 80022ce:	f7ff ff21 	bl	8002114 <__NVIC_EnableIRQ>
}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b002      	add	sp, #8
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80022de:	f7ff ffa1 	bl	8002224 <__NVIC_SystemReset>

080022e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	0018      	movs	r0, r3
 80022ee:	f7ff ffab 	bl	8002248 <SysTick_Config>
 80022f2:	0003      	movs	r3, r0
}
 80022f4:	0018      	movs	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b002      	add	sp, #8
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e04f      	b.n	80023ae <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2225      	movs	r2, #37	; 0x25
 8002312:	5c9b      	ldrb	r3, [r3, r2]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d008      	beq.n	800232c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2204      	movs	r2, #4
 800231e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2224      	movs	r2, #36	; 0x24
 8002324:	2100      	movs	r1, #0
 8002326:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e040      	b.n	80023ae <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	210e      	movs	r1, #14
 8002338:	438a      	bics	r2, r1
 800233a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002346:	491c      	ldr	r1, [pc, #112]	; (80023b8 <HAL_DMA_Abort+0xbc>)
 8002348:	400a      	ands	r2, r1
 800234a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2101      	movs	r1, #1
 8002358:	438a      	bics	r2, r1
 800235a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002360:	221c      	movs	r2, #28
 8002362:	401a      	ands	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	2101      	movs	r1, #1
 800236a:	4091      	lsls	r1, r2
 800236c:	000a      	movs	r2, r1
 800236e:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002378:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00c      	beq.n	800239c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238c:	490a      	ldr	r1, [pc, #40]	; (80023b8 <HAL_DMA_Abort+0xbc>)
 800238e:	400a      	ands	r2, r1
 8002390:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800239a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2225      	movs	r2, #37	; 0x25
 80023a0:	2101      	movs	r1, #1
 80023a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2224      	movs	r2, #36	; 0x24
 80023a8:	2100      	movs	r1, #0
 80023aa:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	0018      	movs	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b002      	add	sp, #8
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	fffffeff 	.word	0xfffffeff

080023bc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c4:	210f      	movs	r1, #15
 80023c6:	187b      	adds	r3, r7, r1
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2225      	movs	r2, #37	; 0x25
 80023d0:	5c9b      	ldrb	r3, [r3, r2]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d006      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2204      	movs	r2, #4
 80023dc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80023de:	187b      	adds	r3, r7, r1
 80023e0:	2201      	movs	r2, #1
 80023e2:	701a      	strb	r2, [r3, #0]
 80023e4:	e048      	b.n	8002478 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	210e      	movs	r1, #14
 80023f2:	438a      	bics	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2101      	movs	r1, #1
 8002402:	438a      	bics	r2, r1
 8002404:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002410:	491d      	ldr	r1, [pc, #116]	; (8002488 <HAL_DMA_Abort_IT+0xcc>)
 8002412:	400a      	ands	r2, r1
 8002414:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	221c      	movs	r2, #28
 800241c:	401a      	ands	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	2101      	movs	r1, #1
 8002424:	4091      	lsls	r1, r2
 8002426:	000a      	movs	r2, r1
 8002428:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002432:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00c      	beq.n	8002456 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002446:	4910      	ldr	r1, [pc, #64]	; (8002488 <HAL_DMA_Abort_IT+0xcc>)
 8002448:	400a      	ands	r2, r1
 800244a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002454:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2225      	movs	r2, #37	; 0x25
 800245a:	2101      	movs	r1, #1
 800245c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2224      	movs	r2, #36	; 0x24
 8002462:	2100      	movs	r1, #0
 8002464:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246a:	2b00      	cmp	r3, #0
 800246c:	d004      	beq.n	8002478 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	0010      	movs	r0, r2
 8002476:	4798      	blx	r3
    }
  }
  return status;
 8002478:	230f      	movs	r3, #15
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	781b      	ldrb	r3, [r3, #0]
}
 800247e:	0018      	movs	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	b004      	add	sp, #16
 8002484:	bd80      	pop	{r7, pc}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	fffffeff 	.word	0xfffffeff

0800248c <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800248c:	b5b0      	push	{r4, r5, r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	603a      	str	r2, [r7, #0]
 8002498:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800249a:	4b21      	ldr	r3, [pc, #132]	; (8002520 <HAL_FLASH_Program+0x94>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_FLASH_Program+0x1a>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e038      	b.n	8002518 <HAL_FLASH_Program+0x8c>
 80024a6:	4b1e      	ldr	r3, [pc, #120]	; (8002520 <HAL_FLASH_Program+0x94>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80024ac:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <HAL_FLASH_Program+0x94>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80024b2:	2517      	movs	r5, #23
 80024b4:	197c      	adds	r4, r7, r5
 80024b6:	23fa      	movs	r3, #250	; 0xfa
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	0018      	movs	r0, r3
 80024bc:	f000 f874 	bl	80025a8 <FLASH_WaitForLastOperation>
 80024c0:	0003      	movs	r3, r0
 80024c2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80024c4:	197b      	adds	r3, r7, r5
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d11f      	bne.n	800250c <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d106      	bne.n	80024e0 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68b9      	ldr	r1, [r7, #8]
 80024d8:	0008      	movs	r0, r1
 80024da:	f000 f8b3 	bl	8002644 <FLASH_Program_DoubleWord>
 80024de:	e005      	b.n	80024ec <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	0011      	movs	r1, r2
 80024e6:	0018      	movs	r0, r3
 80024e8:	f005 fa5a 	bl	80079a0 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80024ec:	2317      	movs	r3, #23
 80024ee:	18fc      	adds	r4, r7, r3
 80024f0:	23fa      	movs	r3, #250	; 0xfa
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	0018      	movs	r0, r3
 80024f6:	f000 f857 	bl	80025a8 <FLASH_WaitForLastOperation>
 80024fa:	0003      	movs	r3, r0
 80024fc:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_FLASH_Program+0x98>)
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	43d9      	mvns	r1, r3
 8002506:	4b07      	ldr	r3, [pc, #28]	; (8002524 <HAL_FLASH_Program+0x98>)
 8002508:	400a      	ands	r2, r1
 800250a:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800250c:	4b04      	ldr	r3, [pc, #16]	; (8002520 <HAL_FLASH_Program+0x94>)
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8002512:	2317      	movs	r3, #23
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	781b      	ldrb	r3, [r3, #0]
}
 8002518:	0018      	movs	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	b006      	add	sp, #24
 800251e:	bdb0      	pop	{r4, r5, r7, pc}
 8002520:	20000d3c 	.word	0x20000d3c
 8002524:	40022000 	.word	0x40022000

08002528 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800252e:	1dfb      	adds	r3, r7, #7
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <HAL_FLASH_Unlock+0x3c>)
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	2b00      	cmp	r3, #0
 800253a:	da0c      	bge.n	8002556 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800253c:	4b09      	ldr	r3, [pc, #36]	; (8002564 <HAL_FLASH_Unlock+0x3c>)
 800253e:	4a0a      	ldr	r2, [pc, #40]	; (8002568 <HAL_FLASH_Unlock+0x40>)
 8002540:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002542:	4b08      	ldr	r3, [pc, #32]	; (8002564 <HAL_FLASH_Unlock+0x3c>)
 8002544:	4a09      	ldr	r2, [pc, #36]	; (800256c <HAL_FLASH_Unlock+0x44>)
 8002546:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <HAL_FLASH_Unlock+0x3c>)
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	2b00      	cmp	r3, #0
 800254e:	da02      	bge.n	8002556 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8002550:	1dfb      	adds	r3, r7, #7
 8002552:	2201      	movs	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002556:	1dfb      	adds	r3, r7, #7
 8002558:	781b      	ldrb	r3, [r3, #0]
}
 800255a:	0018      	movs	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	b002      	add	sp, #8
 8002560:	bd80      	pop	{r7, pc}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	40022000 	.word	0x40022000
 8002568:	45670123 	.word	0x45670123
 800256c:	cdef89ab 	.word	0xcdef89ab

08002570 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8002576:	1dfb      	adds	r3, r7, #7
 8002578:	2201      	movs	r2, #1
 800257a:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800257c:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_FLASH_Lock+0x34>)
 800257e:	695a      	ldr	r2, [r3, #20]
 8002580:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <HAL_FLASH_Lock+0x34>)
 8002582:	2180      	movs	r1, #128	; 0x80
 8002584:	0609      	lsls	r1, r1, #24
 8002586:	430a      	orrs	r2, r1
 8002588:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_FLASH_Lock+0x34>)
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	2b00      	cmp	r3, #0
 8002590:	da02      	bge.n	8002598 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 8002592:	1dfb      	adds	r3, r7, #7
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002598:	1dfb      	adds	r3, r7, #7
 800259a:	781b      	ldrb	r3, [r3, #0]
}
 800259c:	0018      	movs	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	b002      	add	sp, #8
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40022000 	.word	0x40022000

080025a8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 80025b0:	f7ff fd82 	bl	80020b8 <HAL_GetTick>
 80025b4:	0002      	movs	r2, r0
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	189b      	adds	r3, r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 80025bc:	23c0      	movs	r3, #192	; 0xc0
 80025be:	029b      	lsls	r3, r3, #10
 80025c0:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 80025c2:	e007      	b.n	80025d4 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 80025c4:	f7ff fd78 	bl	80020b8 <HAL_GetTick>
 80025c8:	0002      	movs	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d801      	bhi.n	80025d4 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e02a      	b.n	800262a <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 80025d4:	4b17      	ldr	r3, [pc, #92]	; (8002634 <FLASH_WaitForLastOperation+0x8c>)
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	4013      	ands	r3, r2
 80025dc:	d1f2      	bne.n	80025c4 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80025de:	4b15      	ldr	r3, [pc, #84]	; (8002634 <FLASH_WaitForLastOperation+0x8c>)
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	4a15      	ldr	r2, [pc, #84]	; (8002638 <FLASH_WaitForLastOperation+0x90>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 80025e8:	4b12      	ldr	r3, [pc, #72]	; (8002634 <FLASH_WaitForLastOperation+0x8c>)
 80025ea:	4a14      	ldr	r2, [pc, #80]	; (800263c <FLASH_WaitForLastOperation+0x94>)
 80025ec:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d004      	beq.n	80025fe <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80025f4:	4b12      	ldr	r3, [pc, #72]	; (8002640 <FLASH_WaitForLastOperation+0x98>)
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e015      	b.n	800262a <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 80025fe:	f7ff fd5b 	bl	80020b8 <HAL_GetTick>
 8002602:	0002      	movs	r2, r0
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	189b      	adds	r3, r3, r2
 8002608:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800260a:	e007      	b.n	800261c <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 800260c:	f7ff fd54 	bl	80020b8 <HAL_GetTick>
 8002610:	0002      	movs	r2, r0
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4293      	cmp	r3, r2
 8002616:	d801      	bhi.n	800261c <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e006      	b.n	800262a <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <FLASH_WaitForLastOperation+0x8c>)
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	02db      	lsls	r3, r3, #11
 8002624:	4013      	ands	r3, r2
 8002626:	d1f1      	bne.n	800260c <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	0018      	movs	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	b004      	add	sp, #16
 8002630:	bd80      	pop	{r7, pc}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	40022000 	.word	0x40022000
 8002638:	000083fa 	.word	0x000083fa
 800263c:	000883fb 	.word	0x000883fb
 8002640:	20000d3c 	.word	0x20000d3c

08002644 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002644:	b5b0      	push	{r4, r5, r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	603a      	str	r2, [r7, #0]
 800264e:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <FLASH_Program_DoubleWord+0x3c>)
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <FLASH_Program_DoubleWord+0x3c>)
 8002656:	2101      	movs	r1, #1
 8002658:	430a      	orrs	r2, r1
 800265a:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002662:	f3bf 8f6f 	isb	sy
}
 8002666:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	001c      	movs	r4, r3
 800266c:	2300      	movs	r3, #0
 800266e:	001d      	movs	r5, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	3304      	adds	r3, #4
 8002674:	0022      	movs	r2, r4
 8002676:	601a      	str	r2, [r3, #0]
}
 8002678:	46c0      	nop			; (mov r8, r8)
 800267a:	46bd      	mov	sp, r7
 800267c:	b004      	add	sp, #16
 800267e:	bdb0      	pop	{r4, r5, r7, pc}
 8002680:	40022000 	.word	0x40022000

08002684 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002684:	b5b0      	push	{r4, r5, r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800268e:	4b33      	ldr	r3, [pc, #204]	; (800275c <HAL_FLASHEx_Erase+0xd8>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_FLASHEx_Erase+0x16>
 8002696:	2302      	movs	r3, #2
 8002698:	e05c      	b.n	8002754 <HAL_FLASHEx_Erase+0xd0>
 800269a:	4b30      	ldr	r3, [pc, #192]	; (800275c <HAL_FLASHEx_Erase+0xd8>)
 800269c:	2201      	movs	r2, #1
 800269e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80026a0:	4b2e      	ldr	r3, [pc, #184]	; (800275c <HAL_FLASHEx_Erase+0xd8>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80026a6:	250f      	movs	r5, #15
 80026a8:	197c      	adds	r4, r7, r5
 80026aa:	23fa      	movs	r3, #250	; 0xfa
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	0018      	movs	r0, r3
 80026b0:	f7ff ff7a 	bl	80025a8 <FLASH_WaitForLastOperation>
 80026b4:	0003      	movs	r3, r0
 80026b6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80026b8:	002c      	movs	r4, r5
 80026ba:	193b      	adds	r3, r7, r4
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d142      	bne.n	8002748 <HAL_FLASHEx_Erase+0xc4>
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d10d      	bne.n	80026e6 <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	0018      	movs	r0, r3
 80026d0:	f000 f848 	bl	8002764 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80026d4:	193c      	adds	r4, r7, r4
 80026d6:	23fa      	movs	r3, #250	; 0xfa
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	0018      	movs	r0, r3
 80026dc:	f7ff ff64 	bl	80025a8 <FLASH_WaitForLastOperation>
 80026e0:	0003      	movs	r3, r0
 80026e2:	7023      	strb	r3, [r4, #0]
 80026e4:	e030      	b.n	8002748 <HAL_FLASHEx_Erase+0xc4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2201      	movs	r2, #1
 80026ea:	4252      	negs	r2, r2
 80026ec:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	e01a      	b.n	800272c <HAL_FLASHEx_Erase+0xa8>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	0011      	movs	r1, r2
 80026fe:	0018      	movs	r0, r3
 8002700:	f000 f844 	bl	800278c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002704:	250f      	movs	r5, #15
 8002706:	197c      	adds	r4, r7, r5
 8002708:	23fa      	movs	r3, #250	; 0xfa
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	0018      	movs	r0, r3
 800270e:	f7ff ff4b 	bl	80025a8 <FLASH_WaitForLastOperation>
 8002712:	0003      	movs	r3, r0
 8002714:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8002716:	197b      	adds	r3, r7, r5
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_FLASHEx_Erase+0xa2>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	601a      	str	r2, [r3, #0]
          break;
 8002724:	e00a      	b.n	800273c <HAL_FLASHEx_Erase+0xb8>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	3301      	adds	r3, #1
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	18d3      	adds	r3, r2, r3
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	429a      	cmp	r2, r3
 800273a:	d3dc      	bcc.n	80026f6 <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800273c:	4b08      	ldr	r3, [pc, #32]	; (8002760 <HAL_FLASHEx_Erase+0xdc>)
 800273e:	695a      	ldr	r2, [r3, #20]
 8002740:	4b07      	ldr	r3, [pc, #28]	; (8002760 <HAL_FLASHEx_Erase+0xdc>)
 8002742:	2102      	movs	r1, #2
 8002744:	438a      	bics	r2, r1
 8002746:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002748:	4b04      	ldr	r3, [pc, #16]	; (800275c <HAL_FLASHEx_Erase+0xd8>)
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800274e:	230f      	movs	r3, #15
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	781b      	ldrb	r3, [r3, #0]
}
 8002754:	0018      	movs	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	b004      	add	sp, #16
 800275a:	bdb0      	pop	{r4, r5, r7, pc}
 800275c:	20000d3c 	.word	0x20000d3c
 8002760:	40022000 	.word	0x40022000

08002764 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <FLASH_MassErase+0x24>)
 800276e:	695a      	ldr	r2, [r3, #20]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	431a      	orrs	r2, r3
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <FLASH_MassErase+0x24>)
 8002776:	2180      	movs	r1, #128	; 0x80
 8002778:	0249      	lsls	r1, r1, #9
 800277a:	430a      	orrs	r2, r1
 800277c:	615a      	str	r2, [r3, #20]
}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	46bd      	mov	sp, r7
 8002782:	b002      	add	sp, #8
 8002784:	bd80      	pop	{r7, pc}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	40022000 	.word	0x40022000

0800278c <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8002796:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <FLASH_PageErase+0x48>)
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	4a0f      	ldr	r2, [pc, #60]	; (80027d8 <FLASH_PageErase+0x4c>)
 800279c:	4013      	ands	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d005      	beq.n	80027b2 <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2280      	movs	r2, #128	; 0x80
 80027aa:	0192      	lsls	r2, r2, #6
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	e003      	b.n	80027ba <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4a09      	ldr	r2, [pc, #36]	; (80027dc <FLASH_PageErase+0x50>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
  }
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	00da      	lsls	r2, r3, #3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	431a      	orrs	r2, r3
 80027c2:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <FLASH_PageErase+0x48>)
 80027c4:	4906      	ldr	r1, [pc, #24]	; (80027e0 <FLASH_PageErase+0x54>)
 80027c6:	430a      	orrs	r2, r1
 80027c8:	615a      	str	r2, [r3, #20]
}
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b004      	add	sp, #16
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	40022000 	.word	0x40022000
 80027d8:	ffffe007 	.word	0xffffe007
 80027dc:	ffffdfff 	.word	0xffffdfff
 80027e0:	00010002 	.word	0x00010002

080027e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027f2:	e14d      	b.n	8002a90 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2101      	movs	r1, #1
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	4091      	lsls	r1, r2
 80027fe:	000a      	movs	r2, r1
 8002800:	4013      	ands	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d100      	bne.n	800280c <HAL_GPIO_Init+0x28>
 800280a:	e13e      	b.n	8002a8a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2203      	movs	r2, #3
 8002812:	4013      	ands	r3, r2
 8002814:	2b01      	cmp	r3, #1
 8002816:	d005      	beq.n	8002824 <HAL_GPIO_Init+0x40>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2203      	movs	r2, #3
 800281e:	4013      	ands	r3, r2
 8002820:	2b02      	cmp	r3, #2
 8002822:	d130      	bne.n	8002886 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	2203      	movs	r2, #3
 8002830:	409a      	lsls	r2, r3
 8002832:	0013      	movs	r3, r2
 8002834:	43da      	mvns	r2, r3
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4013      	ands	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	409a      	lsls	r2, r3
 8002846:	0013      	movs	r3, r2
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800285a:	2201      	movs	r2, #1
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	409a      	lsls	r2, r3
 8002860:	0013      	movs	r3, r2
 8002862:	43da      	mvns	r2, r3
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	091b      	lsrs	r3, r3, #4
 8002870:	2201      	movs	r2, #1
 8002872:	401a      	ands	r2, r3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	409a      	lsls	r2, r3
 8002878:	0013      	movs	r3, r2
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2203      	movs	r2, #3
 800288c:	4013      	ands	r3, r2
 800288e:	2b03      	cmp	r3, #3
 8002890:	d017      	beq.n	80028c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	2203      	movs	r2, #3
 800289e:	409a      	lsls	r2, r3
 80028a0:	0013      	movs	r3, r2
 80028a2:	43da      	mvns	r2, r3
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4013      	ands	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	409a      	lsls	r2, r3
 80028b4:	0013      	movs	r3, r2
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2203      	movs	r2, #3
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d123      	bne.n	8002916 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	08da      	lsrs	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3208      	adds	r2, #8
 80028d6:	0092      	lsls	r2, r2, #2
 80028d8:	58d3      	ldr	r3, [r2, r3]
 80028da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2207      	movs	r2, #7
 80028e0:	4013      	ands	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	220f      	movs	r2, #15
 80028e6:	409a      	lsls	r2, r3
 80028e8:	0013      	movs	r3, r2
 80028ea:	43da      	mvns	r2, r3
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	4013      	ands	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2107      	movs	r1, #7
 80028fa:	400b      	ands	r3, r1
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	409a      	lsls	r2, r3
 8002900:	0013      	movs	r3, r2
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	08da      	lsrs	r2, r3, #3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3208      	adds	r2, #8
 8002910:	0092      	lsls	r2, r2, #2
 8002912:	6939      	ldr	r1, [r7, #16]
 8002914:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	2203      	movs	r2, #3
 8002922:	409a      	lsls	r2, r3
 8002924:	0013      	movs	r3, r2
 8002926:	43da      	mvns	r2, r3
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4013      	ands	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2203      	movs	r2, #3
 8002934:	401a      	ands	r2, r3
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	409a      	lsls	r2, r3
 800293c:	0013      	movs	r3, r2
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	23c0      	movs	r3, #192	; 0xc0
 8002950:	029b      	lsls	r3, r3, #10
 8002952:	4013      	ands	r3, r2
 8002954:	d100      	bne.n	8002958 <HAL_GPIO_Init+0x174>
 8002956:	e098      	b.n	8002a8a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002958:	4a53      	ldr	r2, [pc, #332]	; (8002aa8 <HAL_GPIO_Init+0x2c4>)
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	089b      	lsrs	r3, r3, #2
 800295e:	3318      	adds	r3, #24
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	589b      	ldr	r3, [r3, r2]
 8002964:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2203      	movs	r2, #3
 800296a:	4013      	ands	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	220f      	movs	r2, #15
 8002970:	409a      	lsls	r2, r3
 8002972:	0013      	movs	r3, r2
 8002974:	43da      	mvns	r2, r3
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4013      	ands	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	23a0      	movs	r3, #160	; 0xa0
 8002980:	05db      	lsls	r3, r3, #23
 8002982:	429a      	cmp	r2, r3
 8002984:	d019      	beq.n	80029ba <HAL_GPIO_Init+0x1d6>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a48      	ldr	r2, [pc, #288]	; (8002aac <HAL_GPIO_Init+0x2c8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d013      	beq.n	80029b6 <HAL_GPIO_Init+0x1d2>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a47      	ldr	r2, [pc, #284]	; (8002ab0 <HAL_GPIO_Init+0x2cc>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00d      	beq.n	80029b2 <HAL_GPIO_Init+0x1ce>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a46      	ldr	r2, [pc, #280]	; (8002ab4 <HAL_GPIO_Init+0x2d0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d007      	beq.n	80029ae <HAL_GPIO_Init+0x1ca>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a45      	ldr	r2, [pc, #276]	; (8002ab8 <HAL_GPIO_Init+0x2d4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d101      	bne.n	80029aa <HAL_GPIO_Init+0x1c6>
 80029a6:	2304      	movs	r3, #4
 80029a8:	e008      	b.n	80029bc <HAL_GPIO_Init+0x1d8>
 80029aa:	2305      	movs	r3, #5
 80029ac:	e006      	b.n	80029bc <HAL_GPIO_Init+0x1d8>
 80029ae:	2303      	movs	r3, #3
 80029b0:	e004      	b.n	80029bc <HAL_GPIO_Init+0x1d8>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e002      	b.n	80029bc <HAL_GPIO_Init+0x1d8>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_GPIO_Init+0x1d8>
 80029ba:	2300      	movs	r3, #0
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	2103      	movs	r1, #3
 80029c0:	400a      	ands	r2, r1
 80029c2:	00d2      	lsls	r2, r2, #3
 80029c4:	4093      	lsls	r3, r2
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80029cc:	4936      	ldr	r1, [pc, #216]	; (8002aa8 <HAL_GPIO_Init+0x2c4>)
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	3318      	adds	r3, #24
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029da:	4b33      	ldr	r3, [pc, #204]	; (8002aa8 <HAL_GPIO_Init+0x2c4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	43da      	mvns	r2, r3
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4013      	ands	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	2380      	movs	r3, #128	; 0x80
 80029f0:	035b      	lsls	r3, r3, #13
 80029f2:	4013      	ands	r3, r2
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029fe:	4b2a      	ldr	r3, [pc, #168]	; (8002aa8 <HAL_GPIO_Init+0x2c4>)
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002a04:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <HAL_GPIO_Init+0x2c4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	43da      	mvns	r2, r3
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	039b      	lsls	r3, r3, #14
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a28:	4b1f      	ldr	r3, [pc, #124]	; (8002aa8 <HAL_GPIO_Init+0x2c4>)
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a2e:	4a1e      	ldr	r2, [pc, #120]	; (8002aa8 <HAL_GPIO_Init+0x2c4>)
 8002a30:	2384      	movs	r3, #132	; 0x84
 8002a32:	58d3      	ldr	r3, [r2, r3]
 8002a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	43da      	mvns	r2, r3
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	029b      	lsls	r3, r3, #10
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d003      	beq.n	8002a54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a54:	4914      	ldr	r1, [pc, #80]	; (8002aa8 <HAL_GPIO_Init+0x2c4>)
 8002a56:	2284      	movs	r2, #132	; 0x84
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002a5c:	4a12      	ldr	r2, [pc, #72]	; (8002aa8 <HAL_GPIO_Init+0x2c4>)
 8002a5e:	2380      	movs	r3, #128	; 0x80
 8002a60:	58d3      	ldr	r3, [r2, r3]
 8002a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	43da      	mvns	r2, r3
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	2380      	movs	r3, #128	; 0x80
 8002a74:	025b      	lsls	r3, r3, #9
 8002a76:	4013      	ands	r3, r2
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a82:	4909      	ldr	r1, [pc, #36]	; (8002aa8 <HAL_GPIO_Init+0x2c4>)
 8002a84:	2280      	movs	r2, #128	; 0x80
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	40da      	lsrs	r2, r3
 8002a98:	1e13      	subs	r3, r2, #0
 8002a9a:	d000      	beq.n	8002a9e <HAL_GPIO_Init+0x2ba>
 8002a9c:	e6aa      	b.n	80027f4 <HAL_GPIO_Init+0x10>
  }
}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	46c0      	nop			; (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b006      	add	sp, #24
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40021800 	.word	0x40021800
 8002aac:	50000400 	.word	0x50000400
 8002ab0:	50000800 	.word	0x50000800
 8002ab4:	50000c00 	.word	0x50000c00
 8002ab8:	50001000 	.word	0x50001000

08002abc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	000a      	movs	r2, r1
 8002ac6:	1cbb      	adds	r3, r7, #2
 8002ac8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	1cba      	adds	r2, r7, #2
 8002ad0:	8812      	ldrh	r2, [r2, #0]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d004      	beq.n	8002ae0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002ad6:	230f      	movs	r3, #15
 8002ad8:	18fb      	adds	r3, r7, r3
 8002ada:	2201      	movs	r2, #1
 8002adc:	701a      	strb	r2, [r3, #0]
 8002ade:	e003      	b.n	8002ae8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ae0:	230f      	movs	r3, #15
 8002ae2:	18fb      	adds	r3, r7, r3
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002ae8:	230f      	movs	r3, #15
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	781b      	ldrb	r3, [r3, #0]
}
 8002aee:	0018      	movs	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b004      	add	sp, #16
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	0008      	movs	r0, r1
 8002b00:	0011      	movs	r1, r2
 8002b02:	1cbb      	adds	r3, r7, #2
 8002b04:	1c02      	adds	r2, r0, #0
 8002b06:	801a      	strh	r2, [r3, #0]
 8002b08:	1c7b      	adds	r3, r7, #1
 8002b0a:	1c0a      	adds	r2, r1, #0
 8002b0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b0e:	1c7b      	adds	r3, r7, #1
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d004      	beq.n	8002b20 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b16:	1cbb      	adds	r3, r7, #2
 8002b18:	881a      	ldrh	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b1e:	e003      	b.n	8002b28 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b20:	1cbb      	adds	r3, r7, #2
 8002b22:	881a      	ldrh	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b28:	46c0      	nop			; (mov r8, r8)
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b002      	add	sp, #8
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	000a      	movs	r2, r1
 8002b3a:	1cbb      	adds	r3, r7, #2
 8002b3c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b44:	1cbb      	adds	r3, r7, #2
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	041a      	lsls	r2, r3, #16
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	1cb9      	adds	r1, r7, #2
 8002b54:	8809      	ldrh	r1, [r1, #0]
 8002b56:	400b      	ands	r3, r1
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	619a      	str	r2, [r3, #24]
}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b004      	add	sp, #16
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002b70:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a19      	ldr	r2, [pc, #100]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002b76:	4013      	ands	r3, r2
 8002b78:	0019      	movs	r1, r3
 8002b7a:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d11f      	bne.n	8002bcc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002b8c:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	0013      	movs	r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	189b      	adds	r3, r3, r2
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4912      	ldr	r1, [pc, #72]	; (8002be4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f7fd fac2 	bl	8000124 <__udivsi3>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ba6:	e008      	b.n	8002bba <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	e001      	b.n	8002bba <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e009      	b.n	8002bce <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bba:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	401a      	ands	r2, r3
 8002bc4:	2380      	movs	r3, #128	; 0x80
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d0ed      	beq.n	8002ba8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	0018      	movs	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b004      	add	sp, #16
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	40007000 	.word	0x40007000
 8002bdc:	fffff9ff 	.word	0xfffff9ff
 8002be0:	20000400 	.word	0x20000400
 8002be4:	000f4240 	.word	0x000f4240

08002be8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002bec:	4b03      	ldr	r3, [pc, #12]	; (8002bfc <LL_RCC_GetAPB1Prescaler+0x14>)
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	23e0      	movs	r3, #224	; 0xe0
 8002bf2:	01db      	lsls	r3, r3, #7
 8002bf4:	4013      	ands	r3, r2
}
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40021000 	.word	0x40021000

08002c00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e2fe      	b.n	8003210 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2201      	movs	r2, #1
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d100      	bne.n	8002c1e <HAL_RCC_OscConfig+0x1e>
 8002c1c:	e07c      	b.n	8002d18 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c1e:	4bc3      	ldr	r3, [pc, #780]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2238      	movs	r2, #56	; 0x38
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c28:	4bc0      	ldr	r3, [pc, #768]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	4013      	ands	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	2b10      	cmp	r3, #16
 8002c36:	d102      	bne.n	8002c3e <HAL_RCC_OscConfig+0x3e>
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d002      	beq.n	8002c44 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d10b      	bne.n	8002c5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c44:	4bb9      	ldr	r3, [pc, #740]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	2380      	movs	r3, #128	; 0x80
 8002c4a:	029b      	lsls	r3, r3, #10
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d062      	beq.n	8002d16 <HAL_RCC_OscConfig+0x116>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d15e      	bne.n	8002d16 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e2d9      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	2380      	movs	r3, #128	; 0x80
 8002c62:	025b      	lsls	r3, r3, #9
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d107      	bne.n	8002c78 <HAL_RCC_OscConfig+0x78>
 8002c68:	4bb0      	ldr	r3, [pc, #704]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4baf      	ldr	r3, [pc, #700]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002c6e:	2180      	movs	r1, #128	; 0x80
 8002c70:	0249      	lsls	r1, r1, #9
 8002c72:	430a      	orrs	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	e020      	b.n	8002cba <HAL_RCC_OscConfig+0xba>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	23a0      	movs	r3, #160	; 0xa0
 8002c7e:	02db      	lsls	r3, r3, #11
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d10e      	bne.n	8002ca2 <HAL_RCC_OscConfig+0xa2>
 8002c84:	4ba9      	ldr	r3, [pc, #676]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4ba8      	ldr	r3, [pc, #672]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002c8a:	2180      	movs	r1, #128	; 0x80
 8002c8c:	02c9      	lsls	r1, r1, #11
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	4ba6      	ldr	r3, [pc, #664]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	4ba5      	ldr	r3, [pc, #660]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002c98:	2180      	movs	r1, #128	; 0x80
 8002c9a:	0249      	lsls	r1, r1, #9
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	e00b      	b.n	8002cba <HAL_RCC_OscConfig+0xba>
 8002ca2:	4ba2      	ldr	r3, [pc, #648]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	4ba1      	ldr	r3, [pc, #644]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002ca8:	49a1      	ldr	r1, [pc, #644]	; (8002f30 <HAL_RCC_OscConfig+0x330>)
 8002caa:	400a      	ands	r2, r1
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	4b9f      	ldr	r3, [pc, #636]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	4b9e      	ldr	r3, [pc, #632]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002cb4:	499f      	ldr	r1, [pc, #636]	; (8002f34 <HAL_RCC_OscConfig+0x334>)
 8002cb6:	400a      	ands	r2, r1
 8002cb8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d014      	beq.n	8002cec <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc2:	f7ff f9f9 	bl	80020b8 <HAL_GetTick>
 8002cc6:	0003      	movs	r3, r0
 8002cc8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ccc:	f7ff f9f4 	bl	80020b8 <HAL_GetTick>
 8002cd0:	0002      	movs	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b64      	cmp	r3, #100	; 0x64
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e298      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cde:	4b93      	ldr	r3, [pc, #588]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	029b      	lsls	r3, r3, #10
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCC_OscConfig+0xcc>
 8002cea:	e015      	b.n	8002d18 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cec:	f7ff f9e4 	bl	80020b8 <HAL_GetTick>
 8002cf0:	0003      	movs	r3, r0
 8002cf2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf6:	f7ff f9df 	bl	80020b8 <HAL_GetTick>
 8002cfa:	0002      	movs	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b64      	cmp	r3, #100	; 0x64
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e283      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d08:	4b88      	ldr	r3, [pc, #544]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	029b      	lsls	r3, r3, #10
 8002d10:	4013      	ands	r3, r2
 8002d12:	d1f0      	bne.n	8002cf6 <HAL_RCC_OscConfig+0xf6>
 8002d14:	e000      	b.n	8002d18 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d16:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d100      	bne.n	8002d24 <HAL_RCC_OscConfig+0x124>
 8002d22:	e099      	b.n	8002e58 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d24:	4b81      	ldr	r3, [pc, #516]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2238      	movs	r2, #56	; 0x38
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d2e:	4b7f      	ldr	r3, [pc, #508]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	2203      	movs	r2, #3
 8002d34:	4013      	ands	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	2b10      	cmp	r3, #16
 8002d3c:	d102      	bne.n	8002d44 <HAL_RCC_OscConfig+0x144>
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d002      	beq.n	8002d4a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d135      	bne.n	8002db6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d4a:	4b78      	ldr	r3, [pc, #480]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	2380      	movs	r3, #128	; 0x80
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4013      	ands	r3, r2
 8002d54:	d005      	beq.n	8002d62 <HAL_RCC_OscConfig+0x162>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e256      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d62:	4b72      	ldr	r3, [pc, #456]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	4a74      	ldr	r2, [pc, #464]	; (8002f38 <HAL_RCC_OscConfig+0x338>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	0019      	movs	r1, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	021a      	lsls	r2, r3, #8
 8002d72:	4b6e      	ldr	r3, [pc, #440]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002d74:	430a      	orrs	r2, r1
 8002d76:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d112      	bne.n	8002da4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002d7e:	4b6b      	ldr	r3, [pc, #428]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a6e      	ldr	r2, [pc, #440]	; (8002f3c <HAL_RCC_OscConfig+0x33c>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	0019      	movs	r1, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	4b67      	ldr	r3, [pc, #412]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002d92:	4b66      	ldr	r3, [pc, #408]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	0adb      	lsrs	r3, r3, #11
 8002d98:	2207      	movs	r2, #7
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	4a68      	ldr	r2, [pc, #416]	; (8002f40 <HAL_RCC_OscConfig+0x340>)
 8002d9e:	40da      	lsrs	r2, r3
 8002da0:	4b68      	ldr	r3, [pc, #416]	; (8002f44 <HAL_RCC_OscConfig+0x344>)
 8002da2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002da4:	4b68      	ldr	r3, [pc, #416]	; (8002f48 <HAL_RCC_OscConfig+0x348>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	0018      	movs	r0, r3
 8002daa:	f7ff f929 	bl	8002000 <HAL_InitTick>
 8002dae:	1e03      	subs	r3, r0, #0
 8002db0:	d051      	beq.n	8002e56 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e22c      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d030      	beq.n	8002e20 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002dbe:	4b5b      	ldr	r3, [pc, #364]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a5e      	ldr	r2, [pc, #376]	; (8002f3c <HAL_RCC_OscConfig+0x33c>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	0019      	movs	r1, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	4b57      	ldr	r3, [pc, #348]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002dd2:	4b56      	ldr	r3, [pc, #344]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	4b55      	ldr	r3, [pc, #340]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002dd8:	2180      	movs	r1, #128	; 0x80
 8002dda:	0049      	lsls	r1, r1, #1
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de0:	f7ff f96a 	bl	80020b8 <HAL_GetTick>
 8002de4:	0003      	movs	r3, r0
 8002de6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dea:	f7ff f965 	bl	80020b8 <HAL_GetTick>
 8002dee:	0002      	movs	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e209      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dfc:	4b4b      	ldr	r3, [pc, #300]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	2380      	movs	r3, #128	; 0x80
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4013      	ands	r3, r2
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e08:	4b48      	ldr	r3, [pc, #288]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	4a4a      	ldr	r2, [pc, #296]	; (8002f38 <HAL_RCC_OscConfig+0x338>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	0019      	movs	r1, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	021a      	lsls	r2, r3, #8
 8002e18:	4b44      	ldr	r3, [pc, #272]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	e01b      	b.n	8002e58 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002e20:	4b42      	ldr	r3, [pc, #264]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4b41      	ldr	r3, [pc, #260]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002e26:	4949      	ldr	r1, [pc, #292]	; (8002f4c <HAL_RCC_OscConfig+0x34c>)
 8002e28:	400a      	ands	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7ff f944 	bl	80020b8 <HAL_GetTick>
 8002e30:	0003      	movs	r3, r0
 8002e32:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e36:	f7ff f93f 	bl	80020b8 <HAL_GetTick>
 8002e3a:	0002      	movs	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e1e3      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e48:	4b38      	ldr	r3, [pc, #224]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	2380      	movs	r3, #128	; 0x80
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4013      	ands	r3, r2
 8002e52:	d1f0      	bne.n	8002e36 <HAL_RCC_OscConfig+0x236>
 8002e54:	e000      	b.n	8002e58 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e56:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d047      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002e62:	4b32      	ldr	r3, [pc, #200]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2238      	movs	r2, #56	; 0x38
 8002e68:	4013      	ands	r3, r2
 8002e6a:	2b18      	cmp	r3, #24
 8002e6c:	d10a      	bne.n	8002e84 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002e6e:	4b2f      	ldr	r3, [pc, #188]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e72:	2202      	movs	r2, #2
 8002e74:	4013      	ands	r3, r2
 8002e76:	d03c      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x2f2>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d138      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e1c5      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d019      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002e8c:	4b27      	ldr	r3, [pc, #156]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002e8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e90:	4b26      	ldr	r3, [pc, #152]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002e92:	2101      	movs	r1, #1
 8002e94:	430a      	orrs	r2, r1
 8002e96:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7ff f90e 	bl	80020b8 <HAL_GetTick>
 8002e9c:	0003      	movs	r3, r0
 8002e9e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea2:	f7ff f909 	bl	80020b8 <HAL_GetTick>
 8002ea6:	0002      	movs	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e1ad      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002eb4:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb8:	2202      	movs	r2, #2
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d0f1      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x2a2>
 8002ebe:	e018      	b.n	8002ef2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002ec0:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002ec2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ec4:	4b19      	ldr	r3, [pc, #100]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	438a      	bics	r2, r1
 8002eca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7ff f8f4 	bl	80020b8 <HAL_GetTick>
 8002ed0:	0003      	movs	r3, r0
 8002ed2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed6:	f7ff f8ef 	bl	80020b8 <HAL_GetTick>
 8002eda:	0002      	movs	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e193      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ee8:	4b10      	ldr	r3, [pc, #64]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eec:	2202      	movs	r2, #2
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d1f1      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2204      	movs	r2, #4
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d100      	bne.n	8002efe <HAL_RCC_OscConfig+0x2fe>
 8002efc:	e0c6      	b.n	800308c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002efe:	231f      	movs	r3, #31
 8002f00:	18fb      	adds	r3, r7, r3
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f06:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2238      	movs	r2, #56	; 0x38
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b20      	cmp	r3, #32
 8002f10:	d11e      	bne.n	8002f50 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002f12:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <HAL_RCC_OscConfig+0x32c>)
 8002f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f16:	2202      	movs	r2, #2
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d100      	bne.n	8002f1e <HAL_RCC_OscConfig+0x31e>
 8002f1c:	e0b6      	b.n	800308c <HAL_RCC_OscConfig+0x48c>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d000      	beq.n	8002f28 <HAL_RCC_OscConfig+0x328>
 8002f26:	e0b1      	b.n	800308c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e171      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	fffeffff 	.word	0xfffeffff
 8002f34:	fffbffff 	.word	0xfffbffff
 8002f38:	ffff80ff 	.word	0xffff80ff
 8002f3c:	ffffc7ff 	.word	0xffffc7ff
 8002f40:	00f42400 	.word	0x00f42400
 8002f44:	20000400 	.word	0x20000400
 8002f48:	20000404 	.word	0x20000404
 8002f4c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f50:	4bb1      	ldr	r3, [pc, #708]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 8002f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	055b      	lsls	r3, r3, #21
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d101      	bne.n	8002f60 <HAL_RCC_OscConfig+0x360>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <HAL_RCC_OscConfig+0x362>
 8002f60:	2300      	movs	r3, #0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d011      	beq.n	8002f8a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002f66:	4bac      	ldr	r3, [pc, #688]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 8002f68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f6a:	4bab      	ldr	r3, [pc, #684]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 8002f6c:	2180      	movs	r1, #128	; 0x80
 8002f6e:	0549      	lsls	r1, r1, #21
 8002f70:	430a      	orrs	r2, r1
 8002f72:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f74:	4ba8      	ldr	r3, [pc, #672]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 8002f76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f78:	2380      	movs	r3, #128	; 0x80
 8002f7a:	055b      	lsls	r3, r3, #21
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002f82:	231f      	movs	r3, #31
 8002f84:	18fb      	adds	r3, r7, r3
 8002f86:	2201      	movs	r2, #1
 8002f88:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f8a:	4ba4      	ldr	r3, [pc, #656]	; (800321c <HAL_RCC_OscConfig+0x61c>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	2380      	movs	r3, #128	; 0x80
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	4013      	ands	r3, r2
 8002f94:	d11a      	bne.n	8002fcc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f96:	4ba1      	ldr	r3, [pc, #644]	; (800321c <HAL_RCC_OscConfig+0x61c>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	4ba0      	ldr	r3, [pc, #640]	; (800321c <HAL_RCC_OscConfig+0x61c>)
 8002f9c:	2180      	movs	r1, #128	; 0x80
 8002f9e:	0049      	lsls	r1, r1, #1
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002fa4:	f7ff f888 	bl	80020b8 <HAL_GetTick>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fae:	f7ff f883 	bl	80020b8 <HAL_GetTick>
 8002fb2:	0002      	movs	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e127      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fc0:	4b96      	ldr	r3, [pc, #600]	; (800321c <HAL_RCC_OscConfig+0x61c>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	2380      	movs	r3, #128	; 0x80
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d0f0      	beq.n	8002fae <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d106      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x3e2>
 8002fd4:	4b90      	ldr	r3, [pc, #576]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 8002fd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fd8:	4b8f      	ldr	r3, [pc, #572]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 8002fda:	2101      	movs	r1, #1
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	65da      	str	r2, [r3, #92]	; 0x5c
 8002fe0:	e01c      	b.n	800301c <HAL_RCC_OscConfig+0x41c>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	2b05      	cmp	r3, #5
 8002fe8:	d10c      	bne.n	8003004 <HAL_RCC_OscConfig+0x404>
 8002fea:	4b8b      	ldr	r3, [pc, #556]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 8002fec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fee:	4b8a      	ldr	r3, [pc, #552]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 8002ff0:	2104      	movs	r1, #4
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ff6:	4b88      	ldr	r3, [pc, #544]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 8002ff8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ffa:	4b87      	ldr	r3, [pc, #540]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	430a      	orrs	r2, r1
 8003000:	65da      	str	r2, [r3, #92]	; 0x5c
 8003002:	e00b      	b.n	800301c <HAL_RCC_OscConfig+0x41c>
 8003004:	4b84      	ldr	r3, [pc, #528]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 8003006:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003008:	4b83      	ldr	r3, [pc, #524]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 800300a:	2101      	movs	r1, #1
 800300c:	438a      	bics	r2, r1
 800300e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003010:	4b81      	ldr	r3, [pc, #516]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 8003012:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003014:	4b80      	ldr	r3, [pc, #512]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 8003016:	2104      	movs	r1, #4
 8003018:	438a      	bics	r2, r1
 800301a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d014      	beq.n	800304e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003024:	f7ff f848 	bl	80020b8 <HAL_GetTick>
 8003028:	0003      	movs	r3, r0
 800302a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800302c:	e009      	b.n	8003042 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302e:	f7ff f843 	bl	80020b8 <HAL_GetTick>
 8003032:	0002      	movs	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	4a79      	ldr	r2, [pc, #484]	; (8003220 <HAL_RCC_OscConfig+0x620>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e0e6      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003042:	4b75      	ldr	r3, [pc, #468]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 8003044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003046:	2202      	movs	r2, #2
 8003048:	4013      	ands	r3, r2
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x42e>
 800304c:	e013      	b.n	8003076 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304e:	f7ff f833 	bl	80020b8 <HAL_GetTick>
 8003052:	0003      	movs	r3, r0
 8003054:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003056:	e009      	b.n	800306c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003058:	f7ff f82e 	bl	80020b8 <HAL_GetTick>
 800305c:	0002      	movs	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	4a6f      	ldr	r2, [pc, #444]	; (8003220 <HAL_RCC_OscConfig+0x620>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e0d1      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800306c:	4b6a      	ldr	r3, [pc, #424]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 800306e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003070:	2202      	movs	r2, #2
 8003072:	4013      	ands	r3, r2
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003076:	231f      	movs	r3, #31
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d105      	bne.n	800308c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003080:	4b65      	ldr	r3, [pc, #404]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 8003082:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003084:	4b64      	ldr	r3, [pc, #400]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 8003086:	4967      	ldr	r1, [pc, #412]	; (8003224 <HAL_RCC_OscConfig+0x624>)
 8003088:	400a      	ands	r2, r1
 800308a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d100      	bne.n	8003096 <HAL_RCC_OscConfig+0x496>
 8003094:	e0bb      	b.n	800320e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003096:	4b60      	ldr	r3, [pc, #384]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2238      	movs	r2, #56	; 0x38
 800309c:	4013      	ands	r3, r2
 800309e:	2b10      	cmp	r3, #16
 80030a0:	d100      	bne.n	80030a4 <HAL_RCC_OscConfig+0x4a4>
 80030a2:	e07b      	b.n	800319c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d156      	bne.n	800315a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ac:	4b5a      	ldr	r3, [pc, #360]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	4b59      	ldr	r3, [pc, #356]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 80030b2:	495d      	ldr	r1, [pc, #372]	; (8003228 <HAL_RCC_OscConfig+0x628>)
 80030b4:	400a      	ands	r2, r1
 80030b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7fe fffe 	bl	80020b8 <HAL_GetTick>
 80030bc:	0003      	movs	r3, r0
 80030be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c2:	f7fe fff9 	bl	80020b8 <HAL_GetTick>
 80030c6:	0002      	movs	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e09d      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030d4:	4b50      	ldr	r3, [pc, #320]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	049b      	lsls	r3, r3, #18
 80030dc:	4013      	ands	r3, r2
 80030de:	d1f0      	bne.n	80030c2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030e0:	4b4d      	ldr	r3, [pc, #308]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4a51      	ldr	r2, [pc, #324]	; (800322c <HAL_RCC_OscConfig+0x62c>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	0019      	movs	r1, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1a      	ldr	r2, [r3, #32]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	021b      	lsls	r3, r3, #8
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310c:	431a      	orrs	r2, r3
 800310e:	4b42      	ldr	r3, [pc, #264]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 8003110:	430a      	orrs	r2, r1
 8003112:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003114:	4b40      	ldr	r3, [pc, #256]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4b3f      	ldr	r3, [pc, #252]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 800311a:	2180      	movs	r1, #128	; 0x80
 800311c:	0449      	lsls	r1, r1, #17
 800311e:	430a      	orrs	r2, r1
 8003120:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003122:	4b3d      	ldr	r3, [pc, #244]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	4b3c      	ldr	r3, [pc, #240]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 8003128:	2180      	movs	r1, #128	; 0x80
 800312a:	0549      	lsls	r1, r1, #21
 800312c:	430a      	orrs	r2, r1
 800312e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003130:	f7fe ffc2 	bl	80020b8 <HAL_GetTick>
 8003134:	0003      	movs	r3, r0
 8003136:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313a:	f7fe ffbd 	bl	80020b8 <HAL_GetTick>
 800313e:	0002      	movs	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e061      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314c:	4b32      	ldr	r3, [pc, #200]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	2380      	movs	r3, #128	; 0x80
 8003152:	049b      	lsls	r3, r3, #18
 8003154:	4013      	ands	r3, r2
 8003156:	d0f0      	beq.n	800313a <HAL_RCC_OscConfig+0x53a>
 8003158:	e059      	b.n	800320e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315a:	4b2f      	ldr	r3, [pc, #188]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	4b2e      	ldr	r3, [pc, #184]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 8003160:	4931      	ldr	r1, [pc, #196]	; (8003228 <HAL_RCC_OscConfig+0x628>)
 8003162:	400a      	ands	r2, r1
 8003164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003166:	f7fe ffa7 	bl	80020b8 <HAL_GetTick>
 800316a:	0003      	movs	r3, r0
 800316c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003170:	f7fe ffa2 	bl	80020b8 <HAL_GetTick>
 8003174:	0002      	movs	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e046      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003182:	4b25      	ldr	r3, [pc, #148]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	049b      	lsls	r3, r3, #18
 800318a:	4013      	ands	r3, r2
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800318e:	4b22      	ldr	r3, [pc, #136]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	4b21      	ldr	r3, [pc, #132]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 8003194:	4926      	ldr	r1, [pc, #152]	; (8003230 <HAL_RCC_OscConfig+0x630>)
 8003196:	400a      	ands	r2, r1
 8003198:	60da      	str	r2, [r3, #12]
 800319a:	e038      	b.n	800320e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e033      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80031a8:	4b1b      	ldr	r3, [pc, #108]	; (8003218 <HAL_RCC_OscConfig+0x618>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2203      	movs	r2, #3
 80031b2:	401a      	ands	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d126      	bne.n	800320a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	2270      	movs	r2, #112	; 0x70
 80031c0:	401a      	ands	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d11f      	bne.n	800320a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	23fe      	movs	r3, #254	; 0xfe
 80031ce:	01db      	lsls	r3, r3, #7
 80031d0:	401a      	ands	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031d8:	429a      	cmp	r2, r3
 80031da:	d116      	bne.n	800320a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	23f8      	movs	r3, #248	; 0xf8
 80031e0:	039b      	lsls	r3, r3, #14
 80031e2:	401a      	ands	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d10e      	bne.n	800320a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	23e0      	movs	r3, #224	; 0xe0
 80031f0:	051b      	lsls	r3, r3, #20
 80031f2:	401a      	ands	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d106      	bne.n	800320a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	0f5b      	lsrs	r3, r3, #29
 8003200:	075a      	lsls	r2, r3, #29
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003206:	429a      	cmp	r2, r3
 8003208:	d001      	beq.n	800320e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	0018      	movs	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	b008      	add	sp, #32
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40021000 	.word	0x40021000
 800321c:	40007000 	.word	0x40007000
 8003220:	00001388 	.word	0x00001388
 8003224:	efffffff 	.word	0xefffffff
 8003228:	feffffff 	.word	0xfeffffff
 800322c:	11c1808c 	.word	0x11c1808c
 8003230:	eefefffc 	.word	0xeefefffc

08003234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e0e9      	b.n	800341c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003248:	4b76      	ldr	r3, [pc, #472]	; (8003424 <HAL_RCC_ClockConfig+0x1f0>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2207      	movs	r2, #7
 800324e:	4013      	ands	r3, r2
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	429a      	cmp	r2, r3
 8003254:	d91e      	bls.n	8003294 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003256:	4b73      	ldr	r3, [pc, #460]	; (8003424 <HAL_RCC_ClockConfig+0x1f0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2207      	movs	r2, #7
 800325c:	4393      	bics	r3, r2
 800325e:	0019      	movs	r1, r3
 8003260:	4b70      	ldr	r3, [pc, #448]	; (8003424 <HAL_RCC_ClockConfig+0x1f0>)
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003268:	f7fe ff26 	bl	80020b8 <HAL_GetTick>
 800326c:	0003      	movs	r3, r0
 800326e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003270:	e009      	b.n	8003286 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003272:	f7fe ff21 	bl	80020b8 <HAL_GetTick>
 8003276:	0002      	movs	r2, r0
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	4a6a      	ldr	r2, [pc, #424]	; (8003428 <HAL_RCC_ClockConfig+0x1f4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e0ca      	b.n	800341c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003286:	4b67      	ldr	r3, [pc, #412]	; (8003424 <HAL_RCC_ClockConfig+0x1f0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2207      	movs	r2, #7
 800328c:	4013      	ands	r3, r2
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d1ee      	bne.n	8003272 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2202      	movs	r2, #2
 800329a:	4013      	ands	r3, r2
 800329c:	d015      	beq.n	80032ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2204      	movs	r2, #4
 80032a4:	4013      	ands	r3, r2
 80032a6:	d006      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80032a8:	4b60      	ldr	r3, [pc, #384]	; (800342c <HAL_RCC_ClockConfig+0x1f8>)
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	4b5f      	ldr	r3, [pc, #380]	; (800342c <HAL_RCC_ClockConfig+0x1f8>)
 80032ae:	21e0      	movs	r1, #224	; 0xe0
 80032b0:	01c9      	lsls	r1, r1, #7
 80032b2:	430a      	orrs	r2, r1
 80032b4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b6:	4b5d      	ldr	r3, [pc, #372]	; (800342c <HAL_RCC_ClockConfig+0x1f8>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	4a5d      	ldr	r2, [pc, #372]	; (8003430 <HAL_RCC_ClockConfig+0x1fc>)
 80032bc:	4013      	ands	r3, r2
 80032be:	0019      	movs	r1, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	4b59      	ldr	r3, [pc, #356]	; (800342c <HAL_RCC_ClockConfig+0x1f8>)
 80032c6:	430a      	orrs	r2, r1
 80032c8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2201      	movs	r2, #1
 80032d0:	4013      	ands	r3, r2
 80032d2:	d057      	beq.n	8003384 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d107      	bne.n	80032ec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032dc:	4b53      	ldr	r3, [pc, #332]	; (800342c <HAL_RCC_ClockConfig+0x1f8>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	029b      	lsls	r3, r3, #10
 80032e4:	4013      	ands	r3, r2
 80032e6:	d12b      	bne.n	8003340 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e097      	b.n	800341c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d107      	bne.n	8003304 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032f4:	4b4d      	ldr	r3, [pc, #308]	; (800342c <HAL_RCC_ClockConfig+0x1f8>)
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	2380      	movs	r3, #128	; 0x80
 80032fa:	049b      	lsls	r3, r3, #18
 80032fc:	4013      	ands	r3, r2
 80032fe:	d11f      	bne.n	8003340 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e08b      	b.n	800341c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d107      	bne.n	800331c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800330c:	4b47      	ldr	r3, [pc, #284]	; (800342c <HAL_RCC_ClockConfig+0x1f8>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	2380      	movs	r3, #128	; 0x80
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4013      	ands	r3, r2
 8003316:	d113      	bne.n	8003340 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e07f      	b.n	800341c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b03      	cmp	r3, #3
 8003322:	d106      	bne.n	8003332 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003324:	4b41      	ldr	r3, [pc, #260]	; (800342c <HAL_RCC_ClockConfig+0x1f8>)
 8003326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003328:	2202      	movs	r2, #2
 800332a:	4013      	ands	r3, r2
 800332c:	d108      	bne.n	8003340 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e074      	b.n	800341c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003332:	4b3e      	ldr	r3, [pc, #248]	; (800342c <HAL_RCC_ClockConfig+0x1f8>)
 8003334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003336:	2202      	movs	r2, #2
 8003338:	4013      	ands	r3, r2
 800333a:	d101      	bne.n	8003340 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e06d      	b.n	800341c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003340:	4b3a      	ldr	r3, [pc, #232]	; (800342c <HAL_RCC_ClockConfig+0x1f8>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	2207      	movs	r2, #7
 8003346:	4393      	bics	r3, r2
 8003348:	0019      	movs	r1, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	4b37      	ldr	r3, [pc, #220]	; (800342c <HAL_RCC_ClockConfig+0x1f8>)
 8003350:	430a      	orrs	r2, r1
 8003352:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003354:	f7fe feb0 	bl	80020b8 <HAL_GetTick>
 8003358:	0003      	movs	r3, r0
 800335a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335c:	e009      	b.n	8003372 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800335e:	f7fe feab 	bl	80020b8 <HAL_GetTick>
 8003362:	0002      	movs	r2, r0
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	4a2f      	ldr	r2, [pc, #188]	; (8003428 <HAL_RCC_ClockConfig+0x1f4>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e054      	b.n	800341c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003372:	4b2e      	ldr	r3, [pc, #184]	; (800342c <HAL_RCC_ClockConfig+0x1f8>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2238      	movs	r2, #56	; 0x38
 8003378:	401a      	ands	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	429a      	cmp	r2, r3
 8003382:	d1ec      	bne.n	800335e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003384:	4b27      	ldr	r3, [pc, #156]	; (8003424 <HAL_RCC_ClockConfig+0x1f0>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2207      	movs	r2, #7
 800338a:	4013      	ands	r3, r2
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d21e      	bcs.n	80033d0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003392:	4b24      	ldr	r3, [pc, #144]	; (8003424 <HAL_RCC_ClockConfig+0x1f0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2207      	movs	r2, #7
 8003398:	4393      	bics	r3, r2
 800339a:	0019      	movs	r1, r3
 800339c:	4b21      	ldr	r3, [pc, #132]	; (8003424 <HAL_RCC_ClockConfig+0x1f0>)
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033a4:	f7fe fe88 	bl	80020b8 <HAL_GetTick>
 80033a8:	0003      	movs	r3, r0
 80033aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033ac:	e009      	b.n	80033c2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ae:	f7fe fe83 	bl	80020b8 <HAL_GetTick>
 80033b2:	0002      	movs	r2, r0
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	4a1b      	ldr	r2, [pc, #108]	; (8003428 <HAL_RCC_ClockConfig+0x1f4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e02c      	b.n	800341c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033c2:	4b18      	ldr	r3, [pc, #96]	; (8003424 <HAL_RCC_ClockConfig+0x1f0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2207      	movs	r2, #7
 80033c8:	4013      	ands	r3, r2
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d1ee      	bne.n	80033ae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2204      	movs	r2, #4
 80033d6:	4013      	ands	r3, r2
 80033d8:	d009      	beq.n	80033ee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80033da:	4b14      	ldr	r3, [pc, #80]	; (800342c <HAL_RCC_ClockConfig+0x1f8>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	4a15      	ldr	r2, [pc, #84]	; (8003434 <HAL_RCC_ClockConfig+0x200>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	0019      	movs	r1, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	4b10      	ldr	r3, [pc, #64]	; (800342c <HAL_RCC_ClockConfig+0x1f8>)
 80033ea:	430a      	orrs	r2, r1
 80033ec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80033ee:	f000 f829 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 80033f2:	0001      	movs	r1, r0
 80033f4:	4b0d      	ldr	r3, [pc, #52]	; (800342c <HAL_RCC_ClockConfig+0x1f8>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	0a1b      	lsrs	r3, r3, #8
 80033fa:	220f      	movs	r2, #15
 80033fc:	401a      	ands	r2, r3
 80033fe:	4b0e      	ldr	r3, [pc, #56]	; (8003438 <HAL_RCC_ClockConfig+0x204>)
 8003400:	0092      	lsls	r2, r2, #2
 8003402:	58d3      	ldr	r3, [r2, r3]
 8003404:	221f      	movs	r2, #31
 8003406:	4013      	ands	r3, r2
 8003408:	000a      	movs	r2, r1
 800340a:	40da      	lsrs	r2, r3
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <HAL_RCC_ClockConfig+0x208>)
 800340e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003410:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <HAL_RCC_ClockConfig+0x20c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	0018      	movs	r0, r3
 8003416:	f7fe fdf3 	bl	8002000 <HAL_InitTick>
 800341a:	0003      	movs	r3, r0
}
 800341c:	0018      	movs	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	b004      	add	sp, #16
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40022000 	.word	0x40022000
 8003428:	00001388 	.word	0x00001388
 800342c:	40021000 	.word	0x40021000
 8003430:	fffff0ff 	.word	0xfffff0ff
 8003434:	ffff8fff 	.word	0xffff8fff
 8003438:	0800801c 	.word	0x0800801c
 800343c:	20000400 	.word	0x20000400
 8003440:	20000404 	.word	0x20000404

08003444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800344a:	4b3c      	ldr	r3, [pc, #240]	; (800353c <HAL_RCC_GetSysClockFreq+0xf8>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2238      	movs	r2, #56	; 0x38
 8003450:	4013      	ands	r3, r2
 8003452:	d10f      	bne.n	8003474 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003454:	4b39      	ldr	r3, [pc, #228]	; (800353c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	0adb      	lsrs	r3, r3, #11
 800345a:	2207      	movs	r2, #7
 800345c:	4013      	ands	r3, r2
 800345e:	2201      	movs	r2, #1
 8003460:	409a      	lsls	r2, r3
 8003462:	0013      	movs	r3, r2
 8003464:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003466:	6839      	ldr	r1, [r7, #0]
 8003468:	4835      	ldr	r0, [pc, #212]	; (8003540 <HAL_RCC_GetSysClockFreq+0xfc>)
 800346a:	f7fc fe5b 	bl	8000124 <__udivsi3>
 800346e:	0003      	movs	r3, r0
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	e05d      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003474:	4b31      	ldr	r3, [pc, #196]	; (800353c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2238      	movs	r2, #56	; 0x38
 800347a:	4013      	ands	r3, r2
 800347c:	2b08      	cmp	r3, #8
 800347e:	d102      	bne.n	8003486 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003480:	4b30      	ldr	r3, [pc, #192]	; (8003544 <HAL_RCC_GetSysClockFreq+0x100>)
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	e054      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003486:	4b2d      	ldr	r3, [pc, #180]	; (800353c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2238      	movs	r2, #56	; 0x38
 800348c:	4013      	ands	r3, r2
 800348e:	2b10      	cmp	r3, #16
 8003490:	d138      	bne.n	8003504 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003492:	4b2a      	ldr	r3, [pc, #168]	; (800353c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	2203      	movs	r2, #3
 8003498:	4013      	ands	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800349c:	4b27      	ldr	r3, [pc, #156]	; (800353c <HAL_RCC_GetSysClockFreq+0xf8>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	2207      	movs	r2, #7
 80034a4:	4013      	ands	r3, r2
 80034a6:	3301      	adds	r3, #1
 80034a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d10d      	bne.n	80034cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	4824      	ldr	r0, [pc, #144]	; (8003544 <HAL_RCC_GetSysClockFreq+0x100>)
 80034b4:	f7fc fe36 	bl	8000124 <__udivsi3>
 80034b8:	0003      	movs	r3, r0
 80034ba:	0019      	movs	r1, r3
 80034bc:	4b1f      	ldr	r3, [pc, #124]	; (800353c <HAL_RCC_GetSysClockFreq+0xf8>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	0a1b      	lsrs	r3, r3, #8
 80034c2:	227f      	movs	r2, #127	; 0x7f
 80034c4:	4013      	ands	r3, r2
 80034c6:	434b      	muls	r3, r1
 80034c8:	617b      	str	r3, [r7, #20]
        break;
 80034ca:	e00d      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	481c      	ldr	r0, [pc, #112]	; (8003540 <HAL_RCC_GetSysClockFreq+0xfc>)
 80034d0:	f7fc fe28 	bl	8000124 <__udivsi3>
 80034d4:	0003      	movs	r3, r0
 80034d6:	0019      	movs	r1, r3
 80034d8:	4b18      	ldr	r3, [pc, #96]	; (800353c <HAL_RCC_GetSysClockFreq+0xf8>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	0a1b      	lsrs	r3, r3, #8
 80034de:	227f      	movs	r2, #127	; 0x7f
 80034e0:	4013      	ands	r3, r2
 80034e2:	434b      	muls	r3, r1
 80034e4:	617b      	str	r3, [r7, #20]
        break;
 80034e6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80034e8:	4b14      	ldr	r3, [pc, #80]	; (800353c <HAL_RCC_GetSysClockFreq+0xf8>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	0f5b      	lsrs	r3, r3, #29
 80034ee:	2207      	movs	r2, #7
 80034f0:	4013      	ands	r3, r2
 80034f2:	3301      	adds	r3, #1
 80034f4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	6978      	ldr	r0, [r7, #20]
 80034fa:	f7fc fe13 	bl	8000124 <__udivsi3>
 80034fe:	0003      	movs	r3, r0
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	e015      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003504:	4b0d      	ldr	r3, [pc, #52]	; (800353c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2238      	movs	r2, #56	; 0x38
 800350a:	4013      	ands	r3, r2
 800350c:	2b20      	cmp	r3, #32
 800350e:	d103      	bne.n	8003518 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003510:	2380      	movs	r3, #128	; 0x80
 8003512:	021b      	lsls	r3, r3, #8
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	e00b      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003518:	4b08      	ldr	r3, [pc, #32]	; (800353c <HAL_RCC_GetSysClockFreq+0xf8>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2238      	movs	r2, #56	; 0x38
 800351e:	4013      	ands	r3, r2
 8003520:	2b18      	cmp	r3, #24
 8003522:	d103      	bne.n	800352c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003524:	23fa      	movs	r3, #250	; 0xfa
 8003526:	01db      	lsls	r3, r3, #7
 8003528:	613b      	str	r3, [r7, #16]
 800352a:	e001      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003530:	693b      	ldr	r3, [r7, #16]
}
 8003532:	0018      	movs	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	b006      	add	sp, #24
 8003538:	bd80      	pop	{r7, pc}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	40021000 	.word	0x40021000
 8003540:	00f42400 	.word	0x00f42400
 8003544:	007a1200 	.word	0x007a1200

08003548 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800354c:	4b02      	ldr	r3, [pc, #8]	; (8003558 <HAL_RCC_GetHCLKFreq+0x10>)
 800354e:	681b      	ldr	r3, [r3, #0]
}
 8003550:	0018      	movs	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	20000400 	.word	0x20000400

0800355c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800355c:	b5b0      	push	{r4, r5, r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003560:	f7ff fff2 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 8003564:	0004      	movs	r4, r0
 8003566:	f7ff fb3f 	bl	8002be8 <LL_RCC_GetAPB1Prescaler>
 800356a:	0003      	movs	r3, r0
 800356c:	0b1a      	lsrs	r2, r3, #12
 800356e:	4b05      	ldr	r3, [pc, #20]	; (8003584 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003570:	0092      	lsls	r2, r2, #2
 8003572:	58d3      	ldr	r3, [r2, r3]
 8003574:	221f      	movs	r2, #31
 8003576:	4013      	ands	r3, r2
 8003578:	40dc      	lsrs	r4, r3
 800357a:	0023      	movs	r3, r4
}
 800357c:	0018      	movs	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	bdb0      	pop	{r4, r5, r7, pc}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	0800805c 	.word	0x0800805c

08003588 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003590:	2313      	movs	r3, #19
 8003592:	18fb      	adds	r3, r7, r3
 8003594:	2200      	movs	r2, #0
 8003596:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003598:	2312      	movs	r3, #18
 800359a:	18fb      	adds	r3, r7, r3
 800359c:	2200      	movs	r2, #0
 800359e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	029b      	lsls	r3, r3, #10
 80035a8:	4013      	ands	r3, r2
 80035aa:	d100      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x26>
 80035ac:	e0a3      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ae:	2011      	movs	r0, #17
 80035b0:	183b      	adds	r3, r7, r0
 80035b2:	2200      	movs	r2, #0
 80035b4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b6:	4bb0      	ldr	r3, [pc, #704]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035ba:	2380      	movs	r3, #128	; 0x80
 80035bc:	055b      	lsls	r3, r3, #21
 80035be:	4013      	ands	r3, r2
 80035c0:	d110      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c2:	4bad      	ldr	r3, [pc, #692]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035c6:	4bac      	ldr	r3, [pc, #688]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035c8:	2180      	movs	r1, #128	; 0x80
 80035ca:	0549      	lsls	r1, r1, #21
 80035cc:	430a      	orrs	r2, r1
 80035ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80035d0:	4ba9      	ldr	r3, [pc, #676]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035d4:	2380      	movs	r3, #128	; 0x80
 80035d6:	055b      	lsls	r3, r3, #21
 80035d8:	4013      	ands	r3, r2
 80035da:	60bb      	str	r3, [r7, #8]
 80035dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035de:	183b      	adds	r3, r7, r0
 80035e0:	2201      	movs	r2, #1
 80035e2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035e4:	4ba5      	ldr	r3, [pc, #660]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	4ba4      	ldr	r3, [pc, #656]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035ea:	2180      	movs	r1, #128	; 0x80
 80035ec:	0049      	lsls	r1, r1, #1
 80035ee:	430a      	orrs	r2, r1
 80035f0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035f2:	f7fe fd61 	bl	80020b8 <HAL_GetTick>
 80035f6:	0003      	movs	r3, r0
 80035f8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035fa:	e00b      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fc:	f7fe fd5c 	bl	80020b8 <HAL_GetTick>
 8003600:	0002      	movs	r2, r0
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d904      	bls.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800360a:	2313      	movs	r3, #19
 800360c:	18fb      	adds	r3, r7, r3
 800360e:	2203      	movs	r2, #3
 8003610:	701a      	strb	r2, [r3, #0]
        break;
 8003612:	e005      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003614:	4b99      	ldr	r3, [pc, #612]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	2380      	movs	r3, #128	; 0x80
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	4013      	ands	r3, r2
 800361e:	d0ed      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003620:	2313      	movs	r3, #19
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d154      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800362a:	4b93      	ldr	r3, [pc, #588]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800362c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800362e:	23c0      	movs	r3, #192	; 0xc0
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4013      	ands	r3, r2
 8003634:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d019      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	429a      	cmp	r2, r3
 8003644:	d014      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003646:	4b8c      	ldr	r3, [pc, #560]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364a:	4a8d      	ldr	r2, [pc, #564]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800364c:	4013      	ands	r3, r2
 800364e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003650:	4b89      	ldr	r3, [pc, #548]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003652:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003654:	4b88      	ldr	r3, [pc, #544]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003656:	2180      	movs	r1, #128	; 0x80
 8003658:	0249      	lsls	r1, r1, #9
 800365a:	430a      	orrs	r2, r1
 800365c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800365e:	4b86      	ldr	r3, [pc, #536]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003660:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003662:	4b85      	ldr	r3, [pc, #532]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003664:	4987      	ldr	r1, [pc, #540]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003666:	400a      	ands	r2, r1
 8003668:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800366a:	4b83      	ldr	r3, [pc, #524]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2201      	movs	r2, #1
 8003674:	4013      	ands	r3, r2
 8003676:	d016      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003678:	f7fe fd1e 	bl	80020b8 <HAL_GetTick>
 800367c:	0003      	movs	r3, r0
 800367e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003680:	e00c      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003682:	f7fe fd19 	bl	80020b8 <HAL_GetTick>
 8003686:	0002      	movs	r2, r0
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	4a7e      	ldr	r2, [pc, #504]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d904      	bls.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003692:	2313      	movs	r3, #19
 8003694:	18fb      	adds	r3, r7, r3
 8003696:	2203      	movs	r2, #3
 8003698:	701a      	strb	r2, [r3, #0]
            break;
 800369a:	e004      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800369c:	4b76      	ldr	r3, [pc, #472]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800369e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a0:	2202      	movs	r2, #2
 80036a2:	4013      	ands	r3, r2
 80036a4:	d0ed      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80036a6:	2313      	movs	r3, #19
 80036a8:	18fb      	adds	r3, r7, r3
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10a      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036b0:	4b71      	ldr	r3, [pc, #452]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b4:	4a72      	ldr	r2, [pc, #456]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	0019      	movs	r1, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036be:	4b6e      	ldr	r3, [pc, #440]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036c0:	430a      	orrs	r2, r1
 80036c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80036c4:	e00c      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036c6:	2312      	movs	r3, #18
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	2213      	movs	r2, #19
 80036cc:	18ba      	adds	r2, r7, r2
 80036ce:	7812      	ldrb	r2, [r2, #0]
 80036d0:	701a      	strb	r2, [r3, #0]
 80036d2:	e005      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d4:	2312      	movs	r3, #18
 80036d6:	18fb      	adds	r3, r7, r3
 80036d8:	2213      	movs	r2, #19
 80036da:	18ba      	adds	r2, r7, r2
 80036dc:	7812      	ldrb	r2, [r2, #0]
 80036de:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036e0:	2311      	movs	r3, #17
 80036e2:	18fb      	adds	r3, r7, r3
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d105      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ea:	4b63      	ldr	r3, [pc, #396]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036ee:	4b62      	ldr	r3, [pc, #392]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036f0:	4966      	ldr	r1, [pc, #408]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036f2:	400a      	ands	r2, r1
 80036f4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2201      	movs	r2, #1
 80036fc:	4013      	ands	r3, r2
 80036fe:	d009      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003700:	4b5d      	ldr	r3, [pc, #372]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003704:	2203      	movs	r2, #3
 8003706:	4393      	bics	r3, r2
 8003708:	0019      	movs	r1, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	4b5a      	ldr	r3, [pc, #360]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003710:	430a      	orrs	r2, r1
 8003712:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2202      	movs	r2, #2
 800371a:	4013      	ands	r3, r2
 800371c:	d009      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800371e:	4b56      	ldr	r3, [pc, #344]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003722:	220c      	movs	r2, #12
 8003724:	4393      	bics	r3, r2
 8003726:	0019      	movs	r1, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	4b52      	ldr	r3, [pc, #328]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800372e:	430a      	orrs	r2, r1
 8003730:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2204      	movs	r2, #4
 8003738:	4013      	ands	r3, r2
 800373a:	d009      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800373c:	4b4e      	ldr	r3, [pc, #312]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800373e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003740:	2230      	movs	r2, #48	; 0x30
 8003742:	4393      	bics	r3, r2
 8003744:	0019      	movs	r1, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	4b4b      	ldr	r3, [pc, #300]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800374c:	430a      	orrs	r2, r1
 800374e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2220      	movs	r2, #32
 8003756:	4013      	ands	r3, r2
 8003758:	d009      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800375a:	4b47      	ldr	r3, [pc, #284]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800375c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375e:	4a4c      	ldr	r2, [pc, #304]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003760:	4013      	ands	r3, r2
 8003762:	0019      	movs	r1, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	4b43      	ldr	r3, [pc, #268]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800376a:	430a      	orrs	r2, r1
 800376c:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2240      	movs	r2, #64	; 0x40
 8003774:	4013      	ands	r3, r2
 8003776:	d009      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003778:	4b3f      	ldr	r3, [pc, #252]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800377a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377c:	4a45      	ldr	r2, [pc, #276]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800377e:	4013      	ands	r3, r2
 8003780:	0019      	movs	r1, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695a      	ldr	r2, [r3, #20]
 8003786:	4b3c      	ldr	r3, [pc, #240]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003788:	430a      	orrs	r2, r1
 800378a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	2380      	movs	r3, #128	; 0x80
 8003792:	01db      	lsls	r3, r3, #7
 8003794:	4013      	ands	r3, r2
 8003796:	d015      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003798:	4b37      	ldr	r3, [pc, #220]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800379a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	0899      	lsrs	r1, r3, #2
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1a      	ldr	r2, [r3, #32]
 80037a4:	4b34      	ldr	r3, [pc, #208]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037a6:	430a      	orrs	r2, r1
 80037a8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1a      	ldr	r2, [r3, #32]
 80037ae:	2380      	movs	r3, #128	; 0x80
 80037b0:	05db      	lsls	r3, r3, #23
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d106      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80037b6:	4b30      	ldr	r3, [pc, #192]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	4b2f      	ldr	r3, [pc, #188]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037bc:	2180      	movs	r1, #128	; 0x80
 80037be:	0249      	lsls	r1, r1, #9
 80037c0:	430a      	orrs	r2, r1
 80037c2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	2380      	movs	r3, #128	; 0x80
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	4013      	ands	r3, r2
 80037ce:	d014      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80037d0:	4b29      	ldr	r3, [pc, #164]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d4:	2203      	movs	r2, #3
 80037d6:	4393      	bics	r3, r2
 80037d8:	0019      	movs	r1, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699a      	ldr	r2, [r3, #24]
 80037de:	4b26      	ldr	r3, [pc, #152]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037e0:	430a      	orrs	r2, r1
 80037e2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d106      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80037ec:	4b22      	ldr	r3, [pc, #136]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	4b21      	ldr	r3, [pc, #132]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037f2:	2180      	movs	r1, #128	; 0x80
 80037f4:	0249      	lsls	r1, r1, #9
 80037f6:	430a      	orrs	r2, r1
 80037f8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	2380      	movs	r3, #128	; 0x80
 8003800:	019b      	lsls	r3, r3, #6
 8003802:	4013      	ands	r3, r2
 8003804:	d014      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003806:	4b1c      	ldr	r3, [pc, #112]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380a:	220c      	movs	r2, #12
 800380c:	4393      	bics	r3, r2
 800380e:	0019      	movs	r1, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69da      	ldr	r2, [r3, #28]
 8003814:	4b18      	ldr	r3, [pc, #96]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003816:	430a      	orrs	r2, r1
 8003818:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	2b04      	cmp	r3, #4
 8003820:	d106      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003822:	4b15      	ldr	r3, [pc, #84]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	4b14      	ldr	r3, [pc, #80]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003828:	2180      	movs	r1, #128	; 0x80
 800382a:	0249      	lsls	r1, r1, #9
 800382c:	430a      	orrs	r2, r1
 800382e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	2380      	movs	r3, #128	; 0x80
 8003836:	045b      	lsls	r3, r3, #17
 8003838:	4013      	ands	r3, r2
 800383a:	d016      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800383c:	4b0e      	ldr	r3, [pc, #56]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800383e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003840:	4a13      	ldr	r2, [pc, #76]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003842:	4013      	ands	r3, r2
 8003844:	0019      	movs	r1, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800384a:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800384c:	430a      	orrs	r2, r1
 800384e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003854:	2380      	movs	r3, #128	; 0x80
 8003856:	019b      	lsls	r3, r3, #6
 8003858:	429a      	cmp	r2, r3
 800385a:	d106      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800385c:	4b06      	ldr	r3, [pc, #24]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	4b05      	ldr	r3, [pc, #20]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003862:	2180      	movs	r1, #128	; 0x80
 8003864:	0449      	lsls	r1, r1, #17
 8003866:	430a      	orrs	r2, r1
 8003868:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800386a:	2312      	movs	r3, #18
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	781b      	ldrb	r3, [r3, #0]
}
 8003870:	0018      	movs	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	b006      	add	sp, #24
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40021000 	.word	0x40021000
 800387c:	40007000 	.word	0x40007000
 8003880:	fffffcff 	.word	0xfffffcff
 8003884:	fffeffff 	.word	0xfffeffff
 8003888:	00001388 	.word	0x00001388
 800388c:	efffffff 	.word	0xefffffff
 8003890:	ffffcfff 	.word	0xffffcfff
 8003894:	ffff3fff 	.word	0xffff3fff

08003898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e04a      	b.n	8003940 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	223d      	movs	r2, #61	; 0x3d
 80038ae:	5c9b      	ldrb	r3, [r3, r2]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d107      	bne.n	80038c6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	223c      	movs	r2, #60	; 0x3c
 80038ba:	2100      	movs	r1, #0
 80038bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	0018      	movs	r0, r3
 80038c2:	f7fe f9e1 	bl	8001c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	223d      	movs	r2, #61	; 0x3d
 80038ca:	2102      	movs	r1, #2
 80038cc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3304      	adds	r3, #4
 80038d6:	0019      	movs	r1, r3
 80038d8:	0010      	movs	r0, r2
 80038da:	f000 fae7 	bl	8003eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2248      	movs	r2, #72	; 0x48
 80038e2:	2101      	movs	r1, #1
 80038e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	223e      	movs	r2, #62	; 0x3e
 80038ea:	2101      	movs	r1, #1
 80038ec:	5499      	strb	r1, [r3, r2]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	223f      	movs	r2, #63	; 0x3f
 80038f2:	2101      	movs	r1, #1
 80038f4:	5499      	strb	r1, [r3, r2]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2240      	movs	r2, #64	; 0x40
 80038fa:	2101      	movs	r1, #1
 80038fc:	5499      	strb	r1, [r3, r2]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2241      	movs	r2, #65	; 0x41
 8003902:	2101      	movs	r1, #1
 8003904:	5499      	strb	r1, [r3, r2]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2242      	movs	r2, #66	; 0x42
 800390a:	2101      	movs	r1, #1
 800390c:	5499      	strb	r1, [r3, r2]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2243      	movs	r2, #67	; 0x43
 8003912:	2101      	movs	r1, #1
 8003914:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2244      	movs	r2, #68	; 0x44
 800391a:	2101      	movs	r1, #1
 800391c:	5499      	strb	r1, [r3, r2]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2245      	movs	r2, #69	; 0x45
 8003922:	2101      	movs	r1, #1
 8003924:	5499      	strb	r1, [r3, r2]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2246      	movs	r2, #70	; 0x46
 800392a:	2101      	movs	r1, #1
 800392c:	5499      	strb	r1, [r3, r2]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2247      	movs	r2, #71	; 0x47
 8003932:	2101      	movs	r1, #1
 8003934:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	223d      	movs	r2, #61	; 0x3d
 800393a:	2101      	movs	r1, #1
 800393c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	0018      	movs	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	b002      	add	sp, #8
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	223d      	movs	r2, #61	; 0x3d
 8003954:	5c9b      	ldrb	r3, [r3, r2]
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b01      	cmp	r3, #1
 800395a:	d001      	beq.n	8003960 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e041      	b.n	80039e4 <HAL_TIM_Base_Start_IT+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	223d      	movs	r2, #61	; 0x3d
 8003964:	2102      	movs	r1, #2
 8003966:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2101      	movs	r1, #1
 8003974:	430a      	orrs	r2, r1
 8003976:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a1b      	ldr	r2, [pc, #108]	; (80039ec <HAL_TIM_Base_Start_IT+0xa4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00e      	beq.n	80039a0 <HAL_TIM_Base_Start_IT+0x58>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a1a      	ldr	r2, [pc, #104]	; (80039f0 <HAL_TIM_Base_Start_IT+0xa8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d009      	beq.n	80039a0 <HAL_TIM_Base_Start_IT+0x58>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a18      	ldr	r2, [pc, #96]	; (80039f4 <HAL_TIM_Base_Start_IT+0xac>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d004      	beq.n	80039a0 <HAL_TIM_Base_Start_IT+0x58>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a17      	ldr	r2, [pc, #92]	; (80039f8 <HAL_TIM_Base_Start_IT+0xb0>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d116      	bne.n	80039ce <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	4a15      	ldr	r2, [pc, #84]	; (80039fc <HAL_TIM_Base_Start_IT+0xb4>)
 80039a8:	4013      	ands	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b06      	cmp	r3, #6
 80039b0:	d016      	beq.n	80039e0 <HAL_TIM_Base_Start_IT+0x98>
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	2380      	movs	r3, #128	; 0x80
 80039b6:	025b      	lsls	r3, r3, #9
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d011      	beq.n	80039e0 <HAL_TIM_Base_Start_IT+0x98>
    {
      __HAL_TIM_ENABLE(htim);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2101      	movs	r1, #1
 80039c8:	430a      	orrs	r2, r1
 80039ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039cc:	e008      	b.n	80039e0 <HAL_TIM_Base_Start_IT+0x98>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2101      	movs	r1, #1
 80039da:	430a      	orrs	r2, r1
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	e000      	b.n	80039e2 <HAL_TIM_Base_Start_IT+0x9a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	0018      	movs	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b004      	add	sp, #16
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40012c00 	.word	0x40012c00
 80039f0:	40000400 	.word	0x40000400
 80039f4:	40000800 	.word	0x40000800
 80039f8:	40014000 	.word	0x40014000
 80039fc:	00010007 	.word	0x00010007

08003a00 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2101      	movs	r1, #1
 8003a14:	438a      	bics	r2, r1
 8003a16:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	4a0d      	ldr	r2, [pc, #52]	; (8003a54 <HAL_TIM_Base_Stop_IT+0x54>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	d10d      	bne.n	8003a40 <HAL_TIM_Base_Stop_IT+0x40>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	4a0b      	ldr	r2, [pc, #44]	; (8003a58 <HAL_TIM_Base_Stop_IT+0x58>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d107      	bne.n	8003a40 <HAL_TIM_Base_Stop_IT+0x40>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	438a      	bics	r2, r1
 8003a3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	223d      	movs	r2, #61	; 0x3d
 8003a44:	2101      	movs	r1, #1
 8003a46:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	b002      	add	sp, #8
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	00001111 	.word	0x00001111
 8003a58:	00000444 	.word	0x00000444

08003a5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d124      	bne.n	8003abc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	2202      	movs	r2, #2
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d11d      	bne.n	8003abc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2203      	movs	r2, #3
 8003a86:	4252      	negs	r2, r2
 8003a88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	2203      	movs	r2, #3
 8003a98:	4013      	ands	r3, r2
 8003a9a:	d004      	beq.n	8003aa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f000 f9ec 	bl	8003e7c <HAL_TIM_IC_CaptureCallback>
 8003aa4:	e007      	b.n	8003ab6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f000 f9df 	bl	8003e6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f000 f9eb 	bl	8003e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	2204      	movs	r2, #4
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d125      	bne.n	8003b16 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d11e      	bne.n	8003b16 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2205      	movs	r2, #5
 8003ade:	4252      	negs	r2, r2
 8003ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	23c0      	movs	r3, #192	; 0xc0
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4013      	ands	r3, r2
 8003af4:	d004      	beq.n	8003b00 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	0018      	movs	r0, r3
 8003afa:	f000 f9bf 	bl	8003e7c <HAL_TIM_IC_CaptureCallback>
 8003afe:	e007      	b.n	8003b10 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	0018      	movs	r0, r3
 8003b04:	f000 f9b2 	bl	8003e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f000 f9be 	bl	8003e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	2208      	movs	r2, #8
 8003b1e:	4013      	ands	r3, r2
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d124      	bne.n	8003b6e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	2208      	movs	r2, #8
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b08      	cmp	r3, #8
 8003b30:	d11d      	bne.n	8003b6e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2209      	movs	r2, #9
 8003b38:	4252      	negs	r2, r2
 8003b3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2204      	movs	r2, #4
 8003b40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	2203      	movs	r2, #3
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d004      	beq.n	8003b58 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	0018      	movs	r0, r3
 8003b52:	f000 f993 	bl	8003e7c <HAL_TIM_IC_CaptureCallback>
 8003b56:	e007      	b.n	8003b68 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f000 f986 	bl	8003e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	0018      	movs	r0, r3
 8003b64:	f000 f992 	bl	8003e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	2210      	movs	r2, #16
 8003b76:	4013      	ands	r3, r2
 8003b78:	2b10      	cmp	r3, #16
 8003b7a:	d125      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	2210      	movs	r2, #16
 8003b84:	4013      	ands	r3, r2
 8003b86:	2b10      	cmp	r3, #16
 8003b88:	d11e      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2211      	movs	r2, #17
 8003b90:	4252      	negs	r2, r2
 8003b92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2208      	movs	r2, #8
 8003b98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69da      	ldr	r2, [r3, #28]
 8003ba0:	23c0      	movs	r3, #192	; 0xc0
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	d004      	beq.n	8003bb2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	0018      	movs	r0, r3
 8003bac:	f000 f966 	bl	8003e7c <HAL_TIM_IC_CaptureCallback>
 8003bb0:	e007      	b.n	8003bc2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f000 f959 	bl	8003e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f000 f965 	bl	8003e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d10f      	bne.n	8003bf6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d108      	bne.n	8003bf6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2202      	movs	r2, #2
 8003bea:	4252      	negs	r2, r2
 8003bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	f7fd fe77 	bl	80018e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	2280      	movs	r2, #128	; 0x80
 8003bfe:	4013      	ands	r3, r2
 8003c00:	2b80      	cmp	r3, #128	; 0x80
 8003c02:	d10f      	bne.n	8003c24 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	2280      	movs	r2, #128	; 0x80
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	2b80      	cmp	r3, #128	; 0x80
 8003c10:	d108      	bne.n	8003c24 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2281      	movs	r2, #129	; 0x81
 8003c18:	4252      	negs	r2, r2
 8003c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f000 fad8 	bl	80041d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	2380      	movs	r3, #128	; 0x80
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	401a      	ands	r2, r3
 8003c30:	2380      	movs	r3, #128	; 0x80
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d10e      	bne.n	8003c56 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	2280      	movs	r2, #128	; 0x80
 8003c40:	4013      	ands	r3, r2
 8003c42:	2b80      	cmp	r3, #128	; 0x80
 8003c44:	d107      	bne.n	8003c56 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a1c      	ldr	r2, [pc, #112]	; (8003cbc <HAL_TIM_IRQHandler+0x260>)
 8003c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	0018      	movs	r0, r3
 8003c52:	f000 fac7 	bl	80041e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	2240      	movs	r2, #64	; 0x40
 8003c5e:	4013      	ands	r3, r2
 8003c60:	2b40      	cmp	r3, #64	; 0x40
 8003c62:	d10f      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	2240      	movs	r2, #64	; 0x40
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2b40      	cmp	r3, #64	; 0x40
 8003c70:	d108      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2241      	movs	r2, #65	; 0x41
 8003c78:	4252      	negs	r2, r2
 8003c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f000 f90c 	bl	8003e9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d10f      	bne.n	8003cb2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	d108      	bne.n	8003cb2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2221      	movs	r2, #33	; 0x21
 8003ca6:	4252      	negs	r2, r2
 8003ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	0018      	movs	r0, r3
 8003cae:	f000 fa89 	bl	80041c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	b002      	add	sp, #8
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	fffffeff 	.word	0xfffffeff

08003cc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cca:	230f      	movs	r3, #15
 8003ccc:	18fb      	adds	r3, r7, r3
 8003cce:	2200      	movs	r2, #0
 8003cd0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	223c      	movs	r2, #60	; 0x3c
 8003cd6:	5c9b      	ldrb	r3, [r3, r2]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_TIM_ConfigClockSource+0x20>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e0bc      	b.n	8003e5a <HAL_TIM_ConfigClockSource+0x19a>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	223c      	movs	r2, #60	; 0x3c
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	223d      	movs	r2, #61	; 0x3d
 8003cec:	2102      	movs	r1, #2
 8003cee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4a5a      	ldr	r2, [pc, #360]	; (8003e64 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	4a59      	ldr	r2, [pc, #356]	; (8003e68 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2280      	movs	r2, #128	; 0x80
 8003d16:	0192      	lsls	r2, r2, #6
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d040      	beq.n	8003d9e <HAL_TIM_ConfigClockSource+0xde>
 8003d1c:	2280      	movs	r2, #128	; 0x80
 8003d1e:	0192      	lsls	r2, r2, #6
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d900      	bls.n	8003d26 <HAL_TIM_ConfigClockSource+0x66>
 8003d24:	e088      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x178>
 8003d26:	2280      	movs	r2, #128	; 0x80
 8003d28:	0152      	lsls	r2, r2, #5
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d100      	bne.n	8003d30 <HAL_TIM_ConfigClockSource+0x70>
 8003d2e:	e088      	b.n	8003e42 <HAL_TIM_ConfigClockSource+0x182>
 8003d30:	2280      	movs	r2, #128	; 0x80
 8003d32:	0152      	lsls	r2, r2, #5
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d900      	bls.n	8003d3a <HAL_TIM_ConfigClockSource+0x7a>
 8003d38:	e07e      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x178>
 8003d3a:	2b70      	cmp	r3, #112	; 0x70
 8003d3c:	d018      	beq.n	8003d70 <HAL_TIM_ConfigClockSource+0xb0>
 8003d3e:	d900      	bls.n	8003d42 <HAL_TIM_ConfigClockSource+0x82>
 8003d40:	e07a      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x178>
 8003d42:	2b60      	cmp	r3, #96	; 0x60
 8003d44:	d04f      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0x126>
 8003d46:	d900      	bls.n	8003d4a <HAL_TIM_ConfigClockSource+0x8a>
 8003d48:	e076      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x178>
 8003d4a:	2b50      	cmp	r3, #80	; 0x50
 8003d4c:	d03b      	beq.n	8003dc6 <HAL_TIM_ConfigClockSource+0x106>
 8003d4e:	d900      	bls.n	8003d52 <HAL_TIM_ConfigClockSource+0x92>
 8003d50:	e072      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x178>
 8003d52:	2b40      	cmp	r3, #64	; 0x40
 8003d54:	d057      	beq.n	8003e06 <HAL_TIM_ConfigClockSource+0x146>
 8003d56:	d900      	bls.n	8003d5a <HAL_TIM_ConfigClockSource+0x9a>
 8003d58:	e06e      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x178>
 8003d5a:	2b30      	cmp	r3, #48	; 0x30
 8003d5c:	d063      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0x166>
 8003d5e:	d86b      	bhi.n	8003e38 <HAL_TIM_ConfigClockSource+0x178>
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	d060      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0x166>
 8003d64:	d868      	bhi.n	8003e38 <HAL_TIM_ConfigClockSource+0x178>
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d05d      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0x166>
 8003d6a:	2b10      	cmp	r3, #16
 8003d6c:	d05b      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0x166>
 8003d6e:	e063      	b.n	8003e38 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	6899      	ldr	r1, [r3, #8]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f000 f990 	bl	80040a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2277      	movs	r2, #119	; 0x77
 8003d90:	4313      	orrs	r3, r2
 8003d92:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	609a      	str	r2, [r3, #8]
      break;
 8003d9c:	e052      	b.n	8003e44 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	6899      	ldr	r1, [r3, #8]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f000 f979 	bl	80040a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2180      	movs	r1, #128	; 0x80
 8003dbe:	01c9      	lsls	r1, r1, #7
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	609a      	str	r2, [r3, #8]
      break;
 8003dc4:	e03e      	b.n	8003e44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	6859      	ldr	r1, [r3, #4]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	001a      	movs	r2, r3
 8003dd4:	f000 f8ea 	bl	8003fac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2150      	movs	r1, #80	; 0x50
 8003dde:	0018      	movs	r0, r3
 8003de0:	f000 f944 	bl	800406c <TIM_ITRx_SetConfig>
      break;
 8003de4:	e02e      	b.n	8003e44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6818      	ldr	r0, [r3, #0]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	6859      	ldr	r1, [r3, #4]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	001a      	movs	r2, r3
 8003df4:	f000 f908 	bl	8004008 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2160      	movs	r1, #96	; 0x60
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f000 f934 	bl	800406c <TIM_ITRx_SetConfig>
      break;
 8003e04:	e01e      	b.n	8003e44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	6859      	ldr	r1, [r3, #4]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	001a      	movs	r2, r3
 8003e14:	f000 f8ca 	bl	8003fac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2140      	movs	r1, #64	; 0x40
 8003e1e:	0018      	movs	r0, r3
 8003e20:	f000 f924 	bl	800406c <TIM_ITRx_SetConfig>
      break;
 8003e24:	e00e      	b.n	8003e44 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	0019      	movs	r1, r3
 8003e30:	0010      	movs	r0, r2
 8003e32:	f000 f91b 	bl	800406c <TIM_ITRx_SetConfig>
      break;
 8003e36:	e005      	b.n	8003e44 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003e38:	230f      	movs	r3, #15
 8003e3a:	18fb      	adds	r3, r7, r3
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	701a      	strb	r2, [r3, #0]
      break;
 8003e40:	e000      	b.n	8003e44 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003e42:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	223d      	movs	r2, #61	; 0x3d
 8003e48:	2101      	movs	r1, #1
 8003e4a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	223c      	movs	r2, #60	; 0x3c
 8003e50:	2100      	movs	r1, #0
 8003e52:	5499      	strb	r1, [r3, r2]

  return status;
 8003e54:	230f      	movs	r3, #15
 8003e56:	18fb      	adds	r3, r7, r3
 8003e58:	781b      	ldrb	r3, [r3, #0]
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	ffceff88 	.word	0xffceff88
 8003e68:	ffff00ff 	.word	0xffff00ff

08003e6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e74:	46c0      	nop			; (mov r8, r8)
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b002      	add	sp, #8
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e84:	46c0      	nop			; (mov r8, r8)
 8003e86:	46bd      	mov	sp, r7
 8003e88:	b002      	add	sp, #8
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e94:	46c0      	nop			; (mov r8, r8)
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b002      	add	sp, #8
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ea4:	46c0      	nop			; (mov r8, r8)
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	b002      	add	sp, #8
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a33      	ldr	r2, [pc, #204]	; (8003f8c <TIM_Base_SetConfig+0xe0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d007      	beq.n	8003ed4 <TIM_Base_SetConfig+0x28>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a32      	ldr	r2, [pc, #200]	; (8003f90 <TIM_Base_SetConfig+0xe4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d003      	beq.n	8003ed4 <TIM_Base_SetConfig+0x28>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a31      	ldr	r2, [pc, #196]	; (8003f94 <TIM_Base_SetConfig+0xe8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d108      	bne.n	8003ee6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2270      	movs	r2, #112	; 0x70
 8003ed8:	4393      	bics	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a28      	ldr	r2, [pc, #160]	; (8003f8c <TIM_Base_SetConfig+0xe0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d017      	beq.n	8003f1e <TIM_Base_SetConfig+0x72>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a27      	ldr	r2, [pc, #156]	; (8003f90 <TIM_Base_SetConfig+0xe4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <TIM_Base_SetConfig+0x72>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a26      	ldr	r2, [pc, #152]	; (8003f94 <TIM_Base_SetConfig+0xe8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00f      	beq.n	8003f1e <TIM_Base_SetConfig+0x72>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a25      	ldr	r2, [pc, #148]	; (8003f98 <TIM_Base_SetConfig+0xec>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00b      	beq.n	8003f1e <TIM_Base_SetConfig+0x72>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a24      	ldr	r2, [pc, #144]	; (8003f9c <TIM_Base_SetConfig+0xf0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d007      	beq.n	8003f1e <TIM_Base_SetConfig+0x72>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a23      	ldr	r2, [pc, #140]	; (8003fa0 <TIM_Base_SetConfig+0xf4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d003      	beq.n	8003f1e <TIM_Base_SetConfig+0x72>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a22      	ldr	r2, [pc, #136]	; (8003fa4 <TIM_Base_SetConfig+0xf8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d108      	bne.n	8003f30 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4a21      	ldr	r2, [pc, #132]	; (8003fa8 <TIM_Base_SetConfig+0xfc>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2280      	movs	r2, #128	; 0x80
 8003f34:	4393      	bics	r3, r2
 8003f36:	001a      	movs	r2, r3
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a0c      	ldr	r2, [pc, #48]	; (8003f8c <TIM_Base_SetConfig+0xe0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d00b      	beq.n	8003f76 <TIM_Base_SetConfig+0xca>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a0e      	ldr	r2, [pc, #56]	; (8003f9c <TIM_Base_SetConfig+0xf0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d007      	beq.n	8003f76 <TIM_Base_SetConfig+0xca>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a0d      	ldr	r2, [pc, #52]	; (8003fa0 <TIM_Base_SetConfig+0xf4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d003      	beq.n	8003f76 <TIM_Base_SetConfig+0xca>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a0c      	ldr	r2, [pc, #48]	; (8003fa4 <TIM_Base_SetConfig+0xf8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d103      	bne.n	8003f7e <TIM_Base_SetConfig+0xd2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	691a      	ldr	r2, [r3, #16]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	615a      	str	r2, [r3, #20]
}
 8003f84:	46c0      	nop			; (mov r8, r8)
 8003f86:	46bd      	mov	sp, r7
 8003f88:	b004      	add	sp, #16
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40012c00 	.word	0x40012c00
 8003f90:	40000400 	.word	0x40000400
 8003f94:	40000800 	.word	0x40000800
 8003f98:	40002000 	.word	0x40002000
 8003f9c:	40014000 	.word	0x40014000
 8003fa0:	40014400 	.word	0x40014400
 8003fa4:	40014800 	.word	0x40014800
 8003fa8:	fffffcff 	.word	0xfffffcff

08003fac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	4393      	bics	r3, r2
 8003fc6:	001a      	movs	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	22f0      	movs	r2, #240	; 0xf0
 8003fd6:	4393      	bics	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	220a      	movs	r2, #10
 8003fe8:	4393      	bics	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	621a      	str	r2, [r3, #32]
}
 8004000:	46c0      	nop			; (mov r8, r8)
 8004002:	46bd      	mov	sp, r7
 8004004:	b006      	add	sp, #24
 8004006:	bd80      	pop	{r7, pc}

08004008 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	2210      	movs	r2, #16
 800401a:	4393      	bics	r3, r2
 800401c:	001a      	movs	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	4a0d      	ldr	r2, [pc, #52]	; (8004068 <TIM_TI2_ConfigInputStage+0x60>)
 8004032:	4013      	ands	r3, r2
 8004034:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	031b      	lsls	r3, r3, #12
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	22a0      	movs	r2, #160	; 0xa0
 8004044:	4393      	bics	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	621a      	str	r2, [r3, #32]
}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	46bd      	mov	sp, r7
 8004062:	b006      	add	sp, #24
 8004064:	bd80      	pop	{r7, pc}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	ffff0fff 	.word	0xffff0fff

0800406c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4a08      	ldr	r2, [pc, #32]	; (80040a0 <TIM_ITRx_SetConfig+0x34>)
 8004080:	4013      	ands	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	2207      	movs	r2, #7
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	609a      	str	r2, [r3, #8]
}
 8004096:	46c0      	nop			; (mov r8, r8)
 8004098:	46bd      	mov	sp, r7
 800409a:	b004      	add	sp, #16
 800409c:	bd80      	pop	{r7, pc}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	ffcfff8f 	.word	0xffcfff8f

080040a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	4a09      	ldr	r2, [pc, #36]	; (80040e0 <TIM_ETR_SetConfig+0x3c>)
 80040bc:	4013      	ands	r3, r2
 80040be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	021a      	lsls	r2, r3, #8
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	609a      	str	r2, [r3, #8]
}
 80040d8:	46c0      	nop			; (mov r8, r8)
 80040da:	46bd      	mov	sp, r7
 80040dc:	b006      	add	sp, #24
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	ffff00ff 	.word	0xffff00ff

080040e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	223c      	movs	r2, #60	; 0x3c
 80040f2:	5c9b      	ldrb	r3, [r3, r2]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d101      	bne.n	80040fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040f8:	2302      	movs	r3, #2
 80040fa:	e054      	b.n	80041a6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	223c      	movs	r2, #60	; 0x3c
 8004100:	2101      	movs	r1, #1
 8004102:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	223d      	movs	r2, #61	; 0x3d
 8004108:	2102      	movs	r1, #2
 800410a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a23      	ldr	r2, [pc, #140]	; (80041b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d108      	bne.n	8004138 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4a22      	ldr	r2, [pc, #136]	; (80041b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800412a:	4013      	ands	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2270      	movs	r2, #112	; 0x70
 800413c:	4393      	bics	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a16      	ldr	r2, [pc, #88]	; (80041b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00e      	beq.n	800417a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a15      	ldr	r2, [pc, #84]	; (80041b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d009      	beq.n	800417a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a14      	ldr	r2, [pc, #80]	; (80041bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d004      	beq.n	800417a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a12      	ldr	r2, [pc, #72]	; (80041c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d10c      	bne.n	8004194 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2280      	movs	r2, #128	; 0x80
 800417e:	4393      	bics	r3, r2
 8004180:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	4313      	orrs	r3, r2
 800418a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	223d      	movs	r2, #61	; 0x3d
 8004198:	2101      	movs	r1, #1
 800419a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	223c      	movs	r2, #60	; 0x3c
 80041a0:	2100      	movs	r1, #0
 80041a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	0018      	movs	r0, r3
 80041a8:	46bd      	mov	sp, r7
 80041aa:	b004      	add	sp, #16
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	40012c00 	.word	0x40012c00
 80041b4:	ff0fffff 	.word	0xff0fffff
 80041b8:	40000400 	.word	0x40000400
 80041bc:	40000800 	.word	0x40000800
 80041c0:	40014000 	.word	0x40014000

080041c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041cc:	46c0      	nop			; (mov r8, r8)
 80041ce:	46bd      	mov	sp, r7
 80041d0:	b002      	add	sp, #8
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041dc:	46c0      	nop			; (mov r8, r8)
 80041de:	46bd      	mov	sp, r7
 80041e0:	b002      	add	sp, #8
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80041ec:	46c0      	nop			; (mov r8, r8)
 80041ee:	46bd      	mov	sp, r7
 80041f0:	b002      	add	sp, #8
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e046      	b.n	8004294 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2288      	movs	r2, #136	; 0x88
 800420a:	589b      	ldr	r3, [r3, r2]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d107      	bne.n	8004220 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2284      	movs	r2, #132	; 0x84
 8004214:	2100      	movs	r1, #0
 8004216:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	0018      	movs	r0, r3
 800421c:	f7fd fd78 	bl	8001d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2288      	movs	r2, #136	; 0x88
 8004224:	2124      	movs	r1, #36	; 0x24
 8004226:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2101      	movs	r1, #1
 8004234:	438a      	bics	r2, r1
 8004236:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	0018      	movs	r0, r3
 800423c:	f000 fcec 	bl	8004c18 <UART_SetConfig>
 8004240:	0003      	movs	r3, r0
 8004242:	2b01      	cmp	r3, #1
 8004244:	d101      	bne.n	800424a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e024      	b.n	8004294 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	0018      	movs	r0, r3
 8004256:	f000 fec1 	bl	8004fdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	490d      	ldr	r1, [pc, #52]	; (800429c <HAL_UART_Init+0xa8>)
 8004266:	400a      	ands	r2, r1
 8004268:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	212a      	movs	r1, #42	; 0x2a
 8004276:	438a      	bics	r2, r1
 8004278:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2101      	movs	r1, #1
 8004286:	430a      	orrs	r2, r1
 8004288:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	0018      	movs	r0, r3
 800428e:	f000 ff59 	bl	8005144 <UART_CheckIdleState>
 8004292:	0003      	movs	r3, r0
}
 8004294:	0018      	movs	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	b002      	add	sp, #8
 800429a:	bd80      	pop	{r7, pc}
 800429c:	ffffb7ff 	.word	0xffffb7ff

080042a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08a      	sub	sp, #40	; 0x28
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	603b      	str	r3, [r7, #0]
 80042ac:	1dbb      	adds	r3, r7, #6
 80042ae:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2288      	movs	r2, #136	; 0x88
 80042b4:	589b      	ldr	r3, [r3, r2]
 80042b6:	2b20      	cmp	r3, #32
 80042b8:	d000      	beq.n	80042bc <HAL_UART_Transmit+0x1c>
 80042ba:	e088      	b.n	80043ce <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_UART_Transmit+0x2a>
 80042c2:	1dbb      	adds	r3, r7, #6
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e080      	b.n	80043d0 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	2380      	movs	r3, #128	; 0x80
 80042d4:	015b      	lsls	r3, r3, #5
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d109      	bne.n	80042ee <HAL_UART_Transmit+0x4e>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d105      	bne.n	80042ee <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2201      	movs	r2, #1
 80042e6:	4013      	ands	r3, r2
 80042e8:	d001      	beq.n	80042ee <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e070      	b.n	80043d0 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2290      	movs	r2, #144	; 0x90
 80042f2:	2100      	movs	r1, #0
 80042f4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2288      	movs	r2, #136	; 0x88
 80042fa:	2121      	movs	r1, #33	; 0x21
 80042fc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042fe:	f7fd fedb 	bl	80020b8 <HAL_GetTick>
 8004302:	0003      	movs	r3, r0
 8004304:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	1dba      	adds	r2, r7, #6
 800430a:	2154      	movs	r1, #84	; 0x54
 800430c:	8812      	ldrh	r2, [r2, #0]
 800430e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	1dba      	adds	r2, r7, #6
 8004314:	2156      	movs	r1, #86	; 0x56
 8004316:	8812      	ldrh	r2, [r2, #0]
 8004318:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	2380      	movs	r3, #128	; 0x80
 8004320:	015b      	lsls	r3, r3, #5
 8004322:	429a      	cmp	r2, r3
 8004324:	d108      	bne.n	8004338 <HAL_UART_Transmit+0x98>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d104      	bne.n	8004338 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800432e:	2300      	movs	r3, #0
 8004330:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	e003      	b.n	8004340 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800433c:	2300      	movs	r3, #0
 800433e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004340:	e02c      	b.n	800439c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	0013      	movs	r3, r2
 800434c:	2200      	movs	r2, #0
 800434e:	2180      	movs	r1, #128	; 0x80
 8004350:	f000 ff46 	bl	80051e0 <UART_WaitOnFlagUntilTimeout>
 8004354:	1e03      	subs	r3, r0, #0
 8004356:	d001      	beq.n	800435c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e039      	b.n	80043d0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10b      	bne.n	800437a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	001a      	movs	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	05d2      	lsls	r2, r2, #23
 800436e:	0dd2      	lsrs	r2, r2, #23
 8004370:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	3302      	adds	r3, #2
 8004376:	61bb      	str	r3, [r7, #24]
 8004378:	e007      	b.n	800438a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	781a      	ldrb	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	3301      	adds	r3, #1
 8004388:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2256      	movs	r2, #86	; 0x56
 800438e:	5a9b      	ldrh	r3, [r3, r2]
 8004390:	b29b      	uxth	r3, r3
 8004392:	3b01      	subs	r3, #1
 8004394:	b299      	uxth	r1, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2256      	movs	r2, #86	; 0x56
 800439a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2256      	movs	r2, #86	; 0x56
 80043a0:	5a9b      	ldrh	r3, [r3, r2]
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1cc      	bne.n	8004342 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	0013      	movs	r3, r2
 80043b2:	2200      	movs	r2, #0
 80043b4:	2140      	movs	r1, #64	; 0x40
 80043b6:	f000 ff13 	bl	80051e0 <UART_WaitOnFlagUntilTimeout>
 80043ba:	1e03      	subs	r3, r0, #0
 80043bc:	d001      	beq.n	80043c2 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e006      	b.n	80043d0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2288      	movs	r2, #136	; 0x88
 80043c6:	2120      	movs	r1, #32
 80043c8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	e000      	b.n	80043d0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80043ce:	2302      	movs	r3, #2
  }
}
 80043d0:	0018      	movs	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b008      	add	sp, #32
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b08a      	sub	sp, #40	; 0x28
 80043dc:	af02      	add	r7, sp, #8
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	603b      	str	r3, [r7, #0]
 80043e4:	1dbb      	adds	r3, r7, #6
 80043e6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	228c      	movs	r2, #140	; 0x8c
 80043ec:	589b      	ldr	r3, [r3, r2]
 80043ee:	2b20      	cmp	r3, #32
 80043f0:	d000      	beq.n	80043f4 <HAL_UART_Receive+0x1c>
 80043f2:	e0cc      	b.n	800458e <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_UART_Receive+0x2a>
 80043fa:	1dbb      	adds	r3, r7, #6
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e0c4      	b.n	8004590 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	689a      	ldr	r2, [r3, #8]
 800440a:	2380      	movs	r3, #128	; 0x80
 800440c:	015b      	lsls	r3, r3, #5
 800440e:	429a      	cmp	r2, r3
 8004410:	d109      	bne.n	8004426 <HAL_UART_Receive+0x4e>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d105      	bne.n	8004426 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2201      	movs	r2, #1
 800441e:	4013      	ands	r3, r2
 8004420:	d001      	beq.n	8004426 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e0b4      	b.n	8004590 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2290      	movs	r2, #144	; 0x90
 800442a:	2100      	movs	r1, #0
 800442c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	228c      	movs	r2, #140	; 0x8c
 8004432:	2122      	movs	r1, #34	; 0x22
 8004434:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800443c:	f7fd fe3c 	bl	80020b8 <HAL_GetTick>
 8004440:	0003      	movs	r3, r0
 8004442:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	1dba      	adds	r2, r7, #6
 8004448:	215c      	movs	r1, #92	; 0x5c
 800444a:	8812      	ldrh	r2, [r2, #0]
 800444c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	1dba      	adds	r2, r7, #6
 8004452:	215e      	movs	r1, #94	; 0x5e
 8004454:	8812      	ldrh	r2, [r2, #0]
 8004456:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	2380      	movs	r3, #128	; 0x80
 800445e:	015b      	lsls	r3, r3, #5
 8004460:	429a      	cmp	r2, r3
 8004462:	d10d      	bne.n	8004480 <HAL_UART_Receive+0xa8>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d104      	bne.n	8004476 <HAL_UART_Receive+0x9e>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2260      	movs	r2, #96	; 0x60
 8004470:	4949      	ldr	r1, [pc, #292]	; (8004598 <HAL_UART_Receive+0x1c0>)
 8004472:	5299      	strh	r1, [r3, r2]
 8004474:	e02e      	b.n	80044d4 <HAL_UART_Receive+0xfc>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2260      	movs	r2, #96	; 0x60
 800447a:	21ff      	movs	r1, #255	; 0xff
 800447c:	5299      	strh	r1, [r3, r2]
 800447e:	e029      	b.n	80044d4 <HAL_UART_Receive+0xfc>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10d      	bne.n	80044a4 <HAL_UART_Receive+0xcc>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d104      	bne.n	800449a <HAL_UART_Receive+0xc2>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2260      	movs	r2, #96	; 0x60
 8004494:	21ff      	movs	r1, #255	; 0xff
 8004496:	5299      	strh	r1, [r3, r2]
 8004498:	e01c      	b.n	80044d4 <HAL_UART_Receive+0xfc>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2260      	movs	r2, #96	; 0x60
 800449e:	217f      	movs	r1, #127	; 0x7f
 80044a0:	5299      	strh	r1, [r3, r2]
 80044a2:	e017      	b.n	80044d4 <HAL_UART_Receive+0xfc>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	2380      	movs	r3, #128	; 0x80
 80044aa:	055b      	lsls	r3, r3, #21
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d10d      	bne.n	80044cc <HAL_UART_Receive+0xf4>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d104      	bne.n	80044c2 <HAL_UART_Receive+0xea>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2260      	movs	r2, #96	; 0x60
 80044bc:	217f      	movs	r1, #127	; 0x7f
 80044be:	5299      	strh	r1, [r3, r2]
 80044c0:	e008      	b.n	80044d4 <HAL_UART_Receive+0xfc>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2260      	movs	r2, #96	; 0x60
 80044c6:	213f      	movs	r1, #63	; 0x3f
 80044c8:	5299      	strh	r1, [r3, r2]
 80044ca:	e003      	b.n	80044d4 <HAL_UART_Receive+0xfc>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2260      	movs	r2, #96	; 0x60
 80044d0:	2100      	movs	r1, #0
 80044d2:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80044d4:	2312      	movs	r3, #18
 80044d6:	18fb      	adds	r3, r7, r3
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	2160      	movs	r1, #96	; 0x60
 80044dc:	5a52      	ldrh	r2, [r2, r1]
 80044de:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	2380      	movs	r3, #128	; 0x80
 80044e6:	015b      	lsls	r3, r3, #5
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d108      	bne.n	80044fe <HAL_UART_Receive+0x126>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d104      	bne.n	80044fe <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80044f4:	2300      	movs	r3, #0
 80044f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	61bb      	str	r3, [r7, #24]
 80044fc:	e003      	b.n	8004506 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004502:	2300      	movs	r3, #0
 8004504:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004506:	e036      	b.n	8004576 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	0013      	movs	r3, r2
 8004512:	2200      	movs	r2, #0
 8004514:	2120      	movs	r1, #32
 8004516:	f000 fe63 	bl	80051e0 <UART_WaitOnFlagUntilTimeout>
 800451a:	1e03      	subs	r3, r0, #0
 800451c:	d001      	beq.n	8004522 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e036      	b.n	8004590 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10e      	bne.n	8004546 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	b29b      	uxth	r3, r3
 8004530:	2212      	movs	r2, #18
 8004532:	18ba      	adds	r2, r7, r2
 8004534:	8812      	ldrh	r2, [r2, #0]
 8004536:	4013      	ands	r3, r2
 8004538:	b29a      	uxth	r2, r3
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	3302      	adds	r3, #2
 8004542:	61bb      	str	r3, [r7, #24]
 8004544:	e00e      	b.n	8004564 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2212      	movs	r2, #18
 8004550:	18ba      	adds	r2, r7, r2
 8004552:	8812      	ldrh	r2, [r2, #0]
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	4013      	ands	r3, r2
 8004558:	b2da      	uxtb	r2, r3
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	3301      	adds	r3, #1
 8004562:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	225e      	movs	r2, #94	; 0x5e
 8004568:	5a9b      	ldrh	r3, [r3, r2]
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b299      	uxth	r1, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	225e      	movs	r2, #94	; 0x5e
 8004574:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	225e      	movs	r2, #94	; 0x5e
 800457a:	5a9b      	ldrh	r3, [r3, r2]
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1c2      	bne.n	8004508 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	228c      	movs	r2, #140	; 0x8c
 8004586:	2120      	movs	r1, #32
 8004588:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	e000      	b.n	8004590 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 800458e:	2302      	movs	r3, #2
  }
}
 8004590:	0018      	movs	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	b008      	add	sp, #32
 8004596:	bd80      	pop	{r7, pc}
 8004598:	000001ff 	.word	0x000001ff

0800459c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800459c:	b5b0      	push	{r4, r5, r7, lr}
 800459e:	b0aa      	sub	sp, #168	; 0xa8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	22a4      	movs	r2, #164	; 0xa4
 80045ac:	18b9      	adds	r1, r7, r2
 80045ae:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	20a0      	movs	r0, #160	; 0xa0
 80045b8:	1839      	adds	r1, r7, r0
 80045ba:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	249c      	movs	r4, #156	; 0x9c
 80045c4:	1939      	adds	r1, r7, r4
 80045c6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80045c8:	0011      	movs	r1, r2
 80045ca:	18bb      	adds	r3, r7, r2
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4aa2      	ldr	r2, [pc, #648]	; (8004858 <HAL_UART_IRQHandler+0x2bc>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	2298      	movs	r2, #152	; 0x98
 80045d4:	18bd      	adds	r5, r7, r2
 80045d6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80045d8:	18bb      	adds	r3, r7, r2
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d11a      	bne.n	8004616 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80045e0:	187b      	adds	r3, r7, r1
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2220      	movs	r2, #32
 80045e6:	4013      	ands	r3, r2
 80045e8:	d015      	beq.n	8004616 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80045ea:	183b      	adds	r3, r7, r0
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2220      	movs	r2, #32
 80045f0:	4013      	ands	r3, r2
 80045f2:	d105      	bne.n	8004600 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80045f4:	193b      	adds	r3, r7, r4
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	2380      	movs	r3, #128	; 0x80
 80045fa:	055b      	lsls	r3, r3, #21
 80045fc:	4013      	ands	r3, r2
 80045fe:	d00a      	beq.n	8004616 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004604:	2b00      	cmp	r3, #0
 8004606:	d100      	bne.n	800460a <HAL_UART_IRQHandler+0x6e>
 8004608:	e2dc      	b.n	8004bc4 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	0010      	movs	r0, r2
 8004612:	4798      	blx	r3
      }
      return;
 8004614:	e2d6      	b.n	8004bc4 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004616:	2398      	movs	r3, #152	; 0x98
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d100      	bne.n	8004622 <HAL_UART_IRQHandler+0x86>
 8004620:	e122      	b.n	8004868 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004622:	239c      	movs	r3, #156	; 0x9c
 8004624:	18fb      	adds	r3, r7, r3
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a8c      	ldr	r2, [pc, #560]	; (800485c <HAL_UART_IRQHandler+0x2c0>)
 800462a:	4013      	ands	r3, r2
 800462c:	d106      	bne.n	800463c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800462e:	23a0      	movs	r3, #160	; 0xa0
 8004630:	18fb      	adds	r3, r7, r3
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a8a      	ldr	r2, [pc, #552]	; (8004860 <HAL_UART_IRQHandler+0x2c4>)
 8004636:	4013      	ands	r3, r2
 8004638:	d100      	bne.n	800463c <HAL_UART_IRQHandler+0xa0>
 800463a:	e115      	b.n	8004868 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800463c:	23a4      	movs	r3, #164	; 0xa4
 800463e:	18fb      	adds	r3, r7, r3
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2201      	movs	r2, #1
 8004644:	4013      	ands	r3, r2
 8004646:	d012      	beq.n	800466e <HAL_UART_IRQHandler+0xd2>
 8004648:	23a0      	movs	r3, #160	; 0xa0
 800464a:	18fb      	adds	r3, r7, r3
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	2380      	movs	r3, #128	; 0x80
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	4013      	ands	r3, r2
 8004654:	d00b      	beq.n	800466e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2201      	movs	r2, #1
 800465c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2290      	movs	r2, #144	; 0x90
 8004662:	589b      	ldr	r3, [r3, r2]
 8004664:	2201      	movs	r2, #1
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2190      	movs	r1, #144	; 0x90
 800466c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800466e:	23a4      	movs	r3, #164	; 0xa4
 8004670:	18fb      	adds	r3, r7, r3
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2202      	movs	r2, #2
 8004676:	4013      	ands	r3, r2
 8004678:	d011      	beq.n	800469e <HAL_UART_IRQHandler+0x102>
 800467a:	239c      	movs	r3, #156	; 0x9c
 800467c:	18fb      	adds	r3, r7, r3
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2201      	movs	r2, #1
 8004682:	4013      	ands	r3, r2
 8004684:	d00b      	beq.n	800469e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2202      	movs	r2, #2
 800468c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2290      	movs	r2, #144	; 0x90
 8004692:	589b      	ldr	r3, [r3, r2]
 8004694:	2204      	movs	r2, #4
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2190      	movs	r1, #144	; 0x90
 800469c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800469e:	23a4      	movs	r3, #164	; 0xa4
 80046a0:	18fb      	adds	r3, r7, r3
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2204      	movs	r2, #4
 80046a6:	4013      	ands	r3, r2
 80046a8:	d011      	beq.n	80046ce <HAL_UART_IRQHandler+0x132>
 80046aa:	239c      	movs	r3, #156	; 0x9c
 80046ac:	18fb      	adds	r3, r7, r3
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2201      	movs	r2, #1
 80046b2:	4013      	ands	r3, r2
 80046b4:	d00b      	beq.n	80046ce <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2204      	movs	r2, #4
 80046bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2290      	movs	r2, #144	; 0x90
 80046c2:	589b      	ldr	r3, [r3, r2]
 80046c4:	2202      	movs	r2, #2
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2190      	movs	r1, #144	; 0x90
 80046cc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80046ce:	23a4      	movs	r3, #164	; 0xa4
 80046d0:	18fb      	adds	r3, r7, r3
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2208      	movs	r2, #8
 80046d6:	4013      	ands	r3, r2
 80046d8:	d017      	beq.n	800470a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80046da:	23a0      	movs	r3, #160	; 0xa0
 80046dc:	18fb      	adds	r3, r7, r3
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2220      	movs	r2, #32
 80046e2:	4013      	ands	r3, r2
 80046e4:	d105      	bne.n	80046f2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80046e6:	239c      	movs	r3, #156	; 0x9c
 80046e8:	18fb      	adds	r3, r7, r3
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a5b      	ldr	r2, [pc, #364]	; (800485c <HAL_UART_IRQHandler+0x2c0>)
 80046ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80046f0:	d00b      	beq.n	800470a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2208      	movs	r2, #8
 80046f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2290      	movs	r2, #144	; 0x90
 80046fe:	589b      	ldr	r3, [r3, r2]
 8004700:	2208      	movs	r2, #8
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2190      	movs	r1, #144	; 0x90
 8004708:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800470a:	23a4      	movs	r3, #164	; 0xa4
 800470c:	18fb      	adds	r3, r7, r3
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	2380      	movs	r3, #128	; 0x80
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	4013      	ands	r3, r2
 8004716:	d013      	beq.n	8004740 <HAL_UART_IRQHandler+0x1a4>
 8004718:	23a0      	movs	r3, #160	; 0xa0
 800471a:	18fb      	adds	r3, r7, r3
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	2380      	movs	r3, #128	; 0x80
 8004720:	04db      	lsls	r3, r3, #19
 8004722:	4013      	ands	r3, r2
 8004724:	d00c      	beq.n	8004740 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2280      	movs	r2, #128	; 0x80
 800472c:	0112      	lsls	r2, r2, #4
 800472e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2290      	movs	r2, #144	; 0x90
 8004734:	589b      	ldr	r3, [r3, r2]
 8004736:	2220      	movs	r2, #32
 8004738:	431a      	orrs	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2190      	movs	r1, #144	; 0x90
 800473e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2290      	movs	r2, #144	; 0x90
 8004744:	589b      	ldr	r3, [r3, r2]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d100      	bne.n	800474c <HAL_UART_IRQHandler+0x1b0>
 800474a:	e23d      	b.n	8004bc8 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800474c:	23a4      	movs	r3, #164	; 0xa4
 800474e:	18fb      	adds	r3, r7, r3
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2220      	movs	r2, #32
 8004754:	4013      	ands	r3, r2
 8004756:	d015      	beq.n	8004784 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004758:	23a0      	movs	r3, #160	; 0xa0
 800475a:	18fb      	adds	r3, r7, r3
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2220      	movs	r2, #32
 8004760:	4013      	ands	r3, r2
 8004762:	d106      	bne.n	8004772 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004764:	239c      	movs	r3, #156	; 0x9c
 8004766:	18fb      	adds	r3, r7, r3
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	2380      	movs	r3, #128	; 0x80
 800476c:	055b      	lsls	r3, r3, #21
 800476e:	4013      	ands	r3, r2
 8004770:	d008      	beq.n	8004784 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004776:	2b00      	cmp	r3, #0
 8004778:	d004      	beq.n	8004784 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	0010      	movs	r0, r2
 8004782:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2290      	movs	r2, #144	; 0x90
 8004788:	589b      	ldr	r3, [r3, r2]
 800478a:	2194      	movs	r1, #148	; 0x94
 800478c:	187a      	adds	r2, r7, r1
 800478e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2240      	movs	r2, #64	; 0x40
 8004798:	4013      	ands	r3, r2
 800479a:	2b40      	cmp	r3, #64	; 0x40
 800479c:	d004      	beq.n	80047a8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800479e:	187b      	adds	r3, r7, r1
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2228      	movs	r2, #40	; 0x28
 80047a4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047a6:	d04c      	beq.n	8004842 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	0018      	movs	r0, r3
 80047ac:	f000 ff04 	bl	80055b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	2240      	movs	r2, #64	; 0x40
 80047b8:	4013      	ands	r3, r2
 80047ba:	2b40      	cmp	r3, #64	; 0x40
 80047bc:	d13c      	bne.n	8004838 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047be:	f3ef 8310 	mrs	r3, PRIMASK
 80047c2:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80047c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047c6:	2090      	movs	r0, #144	; 0x90
 80047c8:	183a      	adds	r2, r7, r0
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	2301      	movs	r3, #1
 80047ce:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047d2:	f383 8810 	msr	PRIMASK, r3
}
 80047d6:	46c0      	nop			; (mov r8, r8)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2140      	movs	r1, #64	; 0x40
 80047e4:	438a      	bics	r2, r1
 80047e6:	609a      	str	r2, [r3, #8]
 80047e8:	183b      	adds	r3, r7, r0
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047f0:	f383 8810 	msr	PRIMASK, r3
}
 80047f4:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2280      	movs	r2, #128	; 0x80
 80047fa:	589b      	ldr	r3, [r3, r2]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d016      	beq.n	800482e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2280      	movs	r2, #128	; 0x80
 8004804:	589b      	ldr	r3, [r3, r2]
 8004806:	4a17      	ldr	r2, [pc, #92]	; (8004864 <HAL_UART_IRQHandler+0x2c8>)
 8004808:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2280      	movs	r2, #128	; 0x80
 800480e:	589b      	ldr	r3, [r3, r2]
 8004810:	0018      	movs	r0, r3
 8004812:	f7fd fdd3 	bl	80023bc <HAL_DMA_Abort_IT>
 8004816:	1e03      	subs	r3, r0, #0
 8004818:	d01c      	beq.n	8004854 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2280      	movs	r2, #128	; 0x80
 800481e:	589b      	ldr	r3, [r3, r2]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	2180      	movs	r1, #128	; 0x80
 8004826:	5852      	ldr	r2, [r2, r1]
 8004828:	0010      	movs	r0, r2
 800482a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800482c:	e012      	b.n	8004854 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	0018      	movs	r0, r3
 8004832:	f000 f9e9 	bl	8004c08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004836:	e00d      	b.n	8004854 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	0018      	movs	r0, r3
 800483c:	f000 f9e4 	bl	8004c08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004840:	e008      	b.n	8004854 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	0018      	movs	r0, r3
 8004846:	f000 f9df 	bl	8004c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2290      	movs	r2, #144	; 0x90
 800484e:	2100      	movs	r1, #0
 8004850:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004852:	e1b9      	b.n	8004bc8 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004854:	46c0      	nop			; (mov r8, r8)
    return;
 8004856:	e1b7      	b.n	8004bc8 <HAL_UART_IRQHandler+0x62c>
 8004858:	0000080f 	.word	0x0000080f
 800485c:	10000001 	.word	0x10000001
 8004860:	04000120 	.word	0x04000120
 8004864:	08005685 	.word	0x08005685

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800486c:	2b01      	cmp	r3, #1
 800486e:	d000      	beq.n	8004872 <HAL_UART_IRQHandler+0x2d6>
 8004870:	e13e      	b.n	8004af0 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004872:	23a4      	movs	r3, #164	; 0xa4
 8004874:	18fb      	adds	r3, r7, r3
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2210      	movs	r2, #16
 800487a:	4013      	ands	r3, r2
 800487c:	d100      	bne.n	8004880 <HAL_UART_IRQHandler+0x2e4>
 800487e:	e137      	b.n	8004af0 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004880:	23a0      	movs	r3, #160	; 0xa0
 8004882:	18fb      	adds	r3, r7, r3
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2210      	movs	r2, #16
 8004888:	4013      	ands	r3, r2
 800488a:	d100      	bne.n	800488e <HAL_UART_IRQHandler+0x2f2>
 800488c:	e130      	b.n	8004af0 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2210      	movs	r2, #16
 8004894:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2240      	movs	r2, #64	; 0x40
 800489e:	4013      	ands	r3, r2
 80048a0:	2b40      	cmp	r3, #64	; 0x40
 80048a2:	d000      	beq.n	80048a6 <HAL_UART_IRQHandler+0x30a>
 80048a4:	e0a4      	b.n	80049f0 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2280      	movs	r2, #128	; 0x80
 80048aa:	589b      	ldr	r3, [r3, r2]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	217e      	movs	r1, #126	; 0x7e
 80048b2:	187b      	adds	r3, r7, r1
 80048b4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80048b6:	187b      	adds	r3, r7, r1
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d100      	bne.n	80048c0 <HAL_UART_IRQHandler+0x324>
 80048be:	e185      	b.n	8004bcc <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	225c      	movs	r2, #92	; 0x5c
 80048c4:	5a9b      	ldrh	r3, [r3, r2]
 80048c6:	187a      	adds	r2, r7, r1
 80048c8:	8812      	ldrh	r2, [r2, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d300      	bcc.n	80048d0 <HAL_UART_IRQHandler+0x334>
 80048ce:	e17d      	b.n	8004bcc <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	187a      	adds	r2, r7, r1
 80048d4:	215e      	movs	r1, #94	; 0x5e
 80048d6:	8812      	ldrh	r2, [r2, #0]
 80048d8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2280      	movs	r2, #128	; 0x80
 80048de:	589b      	ldr	r3, [r3, r2]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2220      	movs	r2, #32
 80048e6:	4013      	ands	r3, r2
 80048e8:	d170      	bne.n	80049cc <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ea:	f3ef 8310 	mrs	r3, PRIMASK
 80048ee:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80048f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048f2:	67bb      	str	r3, [r7, #120]	; 0x78
 80048f4:	2301      	movs	r3, #1
 80048f6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fa:	f383 8810 	msr	PRIMASK, r3
}
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	49b4      	ldr	r1, [pc, #720]	; (8004bdc <HAL_UART_IRQHandler+0x640>)
 800490c:	400a      	ands	r2, r1
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004912:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004916:	f383 8810 	msr	PRIMASK, r3
}
 800491a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800491c:	f3ef 8310 	mrs	r3, PRIMASK
 8004920:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004924:	677b      	str	r3, [r7, #116]	; 0x74
 8004926:	2301      	movs	r3, #1
 8004928:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800492a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800492c:	f383 8810 	msr	PRIMASK, r3
}
 8004930:	46c0      	nop			; (mov r8, r8)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2101      	movs	r1, #1
 800493e:	438a      	bics	r2, r1
 8004940:	609a      	str	r2, [r3, #8]
 8004942:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004944:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004948:	f383 8810 	msr	PRIMASK, r3
}
 800494c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800494e:	f3ef 8310 	mrs	r3, PRIMASK
 8004952:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004954:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004956:	673b      	str	r3, [r7, #112]	; 0x70
 8004958:	2301      	movs	r3, #1
 800495a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800495c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800495e:	f383 8810 	msr	PRIMASK, r3
}
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2140      	movs	r1, #64	; 0x40
 8004970:	438a      	bics	r2, r1
 8004972:	609a      	str	r2, [r3, #8]
 8004974:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004976:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800497a:	f383 8810 	msr	PRIMASK, r3
}
 800497e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	228c      	movs	r2, #140	; 0x8c
 8004984:	2120      	movs	r1, #32
 8004986:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800498e:	f3ef 8310 	mrs	r3, PRIMASK
 8004992:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004994:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004996:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004998:	2301      	movs	r3, #1
 800499a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800499e:	f383 8810 	msr	PRIMASK, r3
}
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2110      	movs	r1, #16
 80049b0:	438a      	bics	r2, r1
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ba:	f383 8810 	msr	PRIMASK, r3
}
 80049be:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2280      	movs	r2, #128	; 0x80
 80049c4:	589b      	ldr	r3, [r3, r2]
 80049c6:	0018      	movs	r0, r3
 80049c8:	f7fd fc98 	bl	80022fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	225c      	movs	r2, #92	; 0x5c
 80049d6:	5a9a      	ldrh	r2, [r3, r2]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	215e      	movs	r1, #94	; 0x5e
 80049dc:	5a5b      	ldrh	r3, [r3, r1]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	0011      	movs	r1, r2
 80049e8:	0018      	movs	r0, r3
 80049ea:	f7fb fdfd 	bl	80005e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049ee:	e0ed      	b.n	8004bcc <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	225c      	movs	r2, #92	; 0x5c
 80049f4:	5a99      	ldrh	r1, [r3, r2]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	225e      	movs	r2, #94	; 0x5e
 80049fa:	5a9b      	ldrh	r3, [r3, r2]
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	208e      	movs	r0, #142	; 0x8e
 8004a00:	183b      	adds	r3, r7, r0
 8004a02:	1a8a      	subs	r2, r1, r2
 8004a04:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	225e      	movs	r2, #94	; 0x5e
 8004a0a:	5a9b      	ldrh	r3, [r3, r2]
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d100      	bne.n	8004a14 <HAL_UART_IRQHandler+0x478>
 8004a12:	e0dd      	b.n	8004bd0 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004a14:	183b      	adds	r3, r7, r0
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d100      	bne.n	8004a1e <HAL_UART_IRQHandler+0x482>
 8004a1c:	e0d8      	b.n	8004bd0 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a22:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a24:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a26:	2488      	movs	r4, #136	; 0x88
 8004a28:	193a      	adds	r2, r7, r4
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f383 8810 	msr	PRIMASK, r3
}
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4967      	ldr	r1, [pc, #412]	; (8004be0 <HAL_UART_IRQHandler+0x644>)
 8004a44:	400a      	ands	r2, r1
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	193b      	adds	r3, r7, r4
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f383 8810 	msr	PRIMASK, r3
}
 8004a54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a56:	f3ef 8310 	mrs	r3, PRIMASK
 8004a5a:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a5c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a5e:	2484      	movs	r4, #132	; 0x84
 8004a60:	193a      	adds	r2, r7, r4
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	2301      	movs	r3, #1
 8004a66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	f383 8810 	msr	PRIMASK, r3
}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689a      	ldr	r2, [r3, #8]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	495a      	ldr	r1, [pc, #360]	; (8004be4 <HAL_UART_IRQHandler+0x648>)
 8004a7c:	400a      	ands	r2, r1
 8004a7e:	609a      	str	r2, [r3, #8]
 8004a80:	193b      	adds	r3, r7, r4
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	f383 8810 	msr	PRIMASK, r3
}
 8004a8c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	228c      	movs	r2, #140	; 0x8c
 8004a92:	2120      	movs	r1, #32
 8004a94:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aaa:	2480      	movs	r4, #128	; 0x80
 8004aac:	193a      	adds	r2, r7, r4
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab6:	f383 8810 	msr	PRIMASK, r3
}
 8004aba:	46c0      	nop			; (mov r8, r8)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2110      	movs	r1, #16
 8004ac8:	438a      	bics	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	193b      	adds	r3, r7, r4
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad4:	f383 8810 	msr	PRIMASK, r3
}
 8004ad8:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2202      	movs	r2, #2
 8004ade:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ae0:	183b      	adds	r3, r7, r0
 8004ae2:	881a      	ldrh	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	0011      	movs	r1, r2
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f7fb fd7d 	bl	80005e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004aee:	e06f      	b.n	8004bd0 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004af0:	23a4      	movs	r3, #164	; 0xa4
 8004af2:	18fb      	adds	r3, r7, r3
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	2380      	movs	r3, #128	; 0x80
 8004af8:	035b      	lsls	r3, r3, #13
 8004afa:	4013      	ands	r3, r2
 8004afc:	d010      	beq.n	8004b20 <HAL_UART_IRQHandler+0x584>
 8004afe:	239c      	movs	r3, #156	; 0x9c
 8004b00:	18fb      	adds	r3, r7, r3
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	2380      	movs	r3, #128	; 0x80
 8004b06:	03db      	lsls	r3, r3, #15
 8004b08:	4013      	ands	r3, r2
 8004b0a:	d009      	beq.n	8004b20 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2280      	movs	r2, #128	; 0x80
 8004b12:	0352      	lsls	r2, r2, #13
 8004b14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f001 fa57 	bl	8005fcc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b1e:	e05a      	b.n	8004bd6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004b20:	23a4      	movs	r3, #164	; 0xa4
 8004b22:	18fb      	adds	r3, r7, r3
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2280      	movs	r2, #128	; 0x80
 8004b28:	4013      	ands	r3, r2
 8004b2a:	d016      	beq.n	8004b5a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004b2c:	23a0      	movs	r3, #160	; 0xa0
 8004b2e:	18fb      	adds	r3, r7, r3
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2280      	movs	r2, #128	; 0x80
 8004b34:	4013      	ands	r3, r2
 8004b36:	d106      	bne.n	8004b46 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004b38:	239c      	movs	r3, #156	; 0x9c
 8004b3a:	18fb      	adds	r3, r7, r3
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	2380      	movs	r3, #128	; 0x80
 8004b40:	041b      	lsls	r3, r3, #16
 8004b42:	4013      	ands	r3, r2
 8004b44:	d009      	beq.n	8004b5a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d042      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	0010      	movs	r0, r2
 8004b56:	4798      	blx	r3
    }
    return;
 8004b58:	e03c      	b.n	8004bd4 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b5a:	23a4      	movs	r3, #164	; 0xa4
 8004b5c:	18fb      	adds	r3, r7, r3
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2240      	movs	r2, #64	; 0x40
 8004b62:	4013      	ands	r3, r2
 8004b64:	d00a      	beq.n	8004b7c <HAL_UART_IRQHandler+0x5e0>
 8004b66:	23a0      	movs	r3, #160	; 0xa0
 8004b68:	18fb      	adds	r3, r7, r3
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2240      	movs	r2, #64	; 0x40
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d004      	beq.n	8004b7c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	0018      	movs	r0, r3
 8004b76:	f000 fd9c 	bl	80056b2 <UART_EndTransmit_IT>
    return;
 8004b7a:	e02c      	b.n	8004bd6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004b7c:	23a4      	movs	r3, #164	; 0xa4
 8004b7e:	18fb      	adds	r3, r7, r3
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	2380      	movs	r3, #128	; 0x80
 8004b84:	041b      	lsls	r3, r3, #16
 8004b86:	4013      	ands	r3, r2
 8004b88:	d00b      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x606>
 8004b8a:	23a0      	movs	r3, #160	; 0xa0
 8004b8c:	18fb      	adds	r3, r7, r3
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	2380      	movs	r3, #128	; 0x80
 8004b92:	05db      	lsls	r3, r3, #23
 8004b94:	4013      	ands	r3, r2
 8004b96:	d004      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	f001 fa26 	bl	8005fec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ba0:	e019      	b.n	8004bd6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004ba2:	23a4      	movs	r3, #164	; 0xa4
 8004ba4:	18fb      	adds	r3, r7, r3
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	2380      	movs	r3, #128	; 0x80
 8004baa:	045b      	lsls	r3, r3, #17
 8004bac:	4013      	ands	r3, r2
 8004bae:	d012      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x63a>
 8004bb0:	23a0      	movs	r3, #160	; 0xa0
 8004bb2:	18fb      	adds	r3, r7, r3
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	da0d      	bge.n	8004bd6 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f001 fa0d 	bl	8005fdc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bc2:	e008      	b.n	8004bd6 <HAL_UART_IRQHandler+0x63a>
      return;
 8004bc4:	46c0      	nop			; (mov r8, r8)
 8004bc6:	e006      	b.n	8004bd6 <HAL_UART_IRQHandler+0x63a>
    return;
 8004bc8:	46c0      	nop			; (mov r8, r8)
 8004bca:	e004      	b.n	8004bd6 <HAL_UART_IRQHandler+0x63a>
      return;
 8004bcc:	46c0      	nop			; (mov r8, r8)
 8004bce:	e002      	b.n	8004bd6 <HAL_UART_IRQHandler+0x63a>
      return;
 8004bd0:	46c0      	nop			; (mov r8, r8)
 8004bd2:	e000      	b.n	8004bd6 <HAL_UART_IRQHandler+0x63a>
    return;
 8004bd4:	46c0      	nop			; (mov r8, r8)
  }
}
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	b02a      	add	sp, #168	; 0xa8
 8004bda:	bdb0      	pop	{r4, r5, r7, pc}
 8004bdc:	fffffeff 	.word	0xfffffeff
 8004be0:	fffffedf 	.word	0xfffffedf
 8004be4:	effffffe 	.word	0xeffffffe

08004be8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004bf0:	46c0      	nop			; (mov r8, r8)
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	b002      	add	sp, #8
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004c00:	46c0      	nop			; (mov r8, r8)
 8004c02:	46bd      	mov	sp, r7
 8004c04:	b002      	add	sp, #8
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c10:	46c0      	nop			; (mov r8, r8)
 8004c12:	46bd      	mov	sp, r7
 8004c14:	b002      	add	sp, #8
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b088      	sub	sp, #32
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c20:	231b      	movs	r3, #27
 8004c22:	18fb      	adds	r3, r7, r3
 8004c24:	2200      	movs	r2, #0
 8004c26:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4ab4      	ldr	r2, [pc, #720]	; (8004f18 <UART_SetConfig+0x300>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	0019      	movs	r1, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	69fa      	ldr	r2, [r7, #28]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	4aaf      	ldr	r2, [pc, #700]	; (8004f1c <UART_SetConfig+0x304>)
 8004c5e:	4013      	ands	r3, r2
 8004c60:	0019      	movs	r1, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	69fa      	ldr	r2, [r7, #28]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	4aa6      	ldr	r2, [pc, #664]	; (8004f20 <UART_SetConfig+0x308>)
 8004c86:	4013      	ands	r3, r2
 8004c88:	0019      	movs	r1, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69fa      	ldr	r2, [r7, #28]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	220f      	movs	r2, #15
 8004c9c:	4393      	bics	r3, r2
 8004c9e:	0019      	movs	r1, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a9c      	ldr	r2, [pc, #624]	; (8004f24 <UART_SetConfig+0x30c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d127      	bne.n	8004d06 <UART_SetConfig+0xee>
 8004cb6:	4b9c      	ldr	r3, [pc, #624]	; (8004f28 <UART_SetConfig+0x310>)
 8004cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cba:	2203      	movs	r2, #3
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d017      	beq.n	8004cf2 <UART_SetConfig+0xda>
 8004cc2:	d81b      	bhi.n	8004cfc <UART_SetConfig+0xe4>
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d00a      	beq.n	8004cde <UART_SetConfig+0xc6>
 8004cc8:	d818      	bhi.n	8004cfc <UART_SetConfig+0xe4>
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <UART_SetConfig+0xbc>
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d00a      	beq.n	8004ce8 <UART_SetConfig+0xd0>
 8004cd2:	e013      	b.n	8004cfc <UART_SetConfig+0xe4>
 8004cd4:	231a      	movs	r3, #26
 8004cd6:	18fb      	adds	r3, r7, r3
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]
 8004cdc:	e08f      	b.n	8004dfe <UART_SetConfig+0x1e6>
 8004cde:	231a      	movs	r3, #26
 8004ce0:	18fb      	adds	r3, r7, r3
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	701a      	strb	r2, [r3, #0]
 8004ce6:	e08a      	b.n	8004dfe <UART_SetConfig+0x1e6>
 8004ce8:	231a      	movs	r3, #26
 8004cea:	18fb      	adds	r3, r7, r3
 8004cec:	2204      	movs	r2, #4
 8004cee:	701a      	strb	r2, [r3, #0]
 8004cf0:	e085      	b.n	8004dfe <UART_SetConfig+0x1e6>
 8004cf2:	231a      	movs	r3, #26
 8004cf4:	18fb      	adds	r3, r7, r3
 8004cf6:	2208      	movs	r2, #8
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	e080      	b.n	8004dfe <UART_SetConfig+0x1e6>
 8004cfc:	231a      	movs	r3, #26
 8004cfe:	18fb      	adds	r3, r7, r3
 8004d00:	2210      	movs	r2, #16
 8004d02:	701a      	strb	r2, [r3, #0]
 8004d04:	e07b      	b.n	8004dfe <UART_SetConfig+0x1e6>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a88      	ldr	r2, [pc, #544]	; (8004f2c <UART_SetConfig+0x314>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d127      	bne.n	8004d60 <UART_SetConfig+0x148>
 8004d10:	4b85      	ldr	r3, [pc, #532]	; (8004f28 <UART_SetConfig+0x310>)
 8004d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d14:	220c      	movs	r2, #12
 8004d16:	4013      	ands	r3, r2
 8004d18:	2b0c      	cmp	r3, #12
 8004d1a:	d017      	beq.n	8004d4c <UART_SetConfig+0x134>
 8004d1c:	d81b      	bhi.n	8004d56 <UART_SetConfig+0x13e>
 8004d1e:	2b08      	cmp	r3, #8
 8004d20:	d00a      	beq.n	8004d38 <UART_SetConfig+0x120>
 8004d22:	d818      	bhi.n	8004d56 <UART_SetConfig+0x13e>
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <UART_SetConfig+0x116>
 8004d28:	2b04      	cmp	r3, #4
 8004d2a:	d00a      	beq.n	8004d42 <UART_SetConfig+0x12a>
 8004d2c:	e013      	b.n	8004d56 <UART_SetConfig+0x13e>
 8004d2e:	231a      	movs	r3, #26
 8004d30:	18fb      	adds	r3, r7, r3
 8004d32:	2200      	movs	r2, #0
 8004d34:	701a      	strb	r2, [r3, #0]
 8004d36:	e062      	b.n	8004dfe <UART_SetConfig+0x1e6>
 8004d38:	231a      	movs	r3, #26
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	701a      	strb	r2, [r3, #0]
 8004d40:	e05d      	b.n	8004dfe <UART_SetConfig+0x1e6>
 8004d42:	231a      	movs	r3, #26
 8004d44:	18fb      	adds	r3, r7, r3
 8004d46:	2204      	movs	r2, #4
 8004d48:	701a      	strb	r2, [r3, #0]
 8004d4a:	e058      	b.n	8004dfe <UART_SetConfig+0x1e6>
 8004d4c:	231a      	movs	r3, #26
 8004d4e:	18fb      	adds	r3, r7, r3
 8004d50:	2208      	movs	r2, #8
 8004d52:	701a      	strb	r2, [r3, #0]
 8004d54:	e053      	b.n	8004dfe <UART_SetConfig+0x1e6>
 8004d56:	231a      	movs	r3, #26
 8004d58:	18fb      	adds	r3, r7, r3
 8004d5a:	2210      	movs	r2, #16
 8004d5c:	701a      	strb	r2, [r3, #0]
 8004d5e:	e04e      	b.n	8004dfe <UART_SetConfig+0x1e6>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a72      	ldr	r2, [pc, #456]	; (8004f30 <UART_SetConfig+0x318>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d127      	bne.n	8004dba <UART_SetConfig+0x1a2>
 8004d6a:	4b6f      	ldr	r3, [pc, #444]	; (8004f28 <UART_SetConfig+0x310>)
 8004d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6e:	2230      	movs	r2, #48	; 0x30
 8004d70:	4013      	ands	r3, r2
 8004d72:	2b30      	cmp	r3, #48	; 0x30
 8004d74:	d017      	beq.n	8004da6 <UART_SetConfig+0x18e>
 8004d76:	d81b      	bhi.n	8004db0 <UART_SetConfig+0x198>
 8004d78:	2b20      	cmp	r3, #32
 8004d7a:	d00a      	beq.n	8004d92 <UART_SetConfig+0x17a>
 8004d7c:	d818      	bhi.n	8004db0 <UART_SetConfig+0x198>
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <UART_SetConfig+0x170>
 8004d82:	2b10      	cmp	r3, #16
 8004d84:	d00a      	beq.n	8004d9c <UART_SetConfig+0x184>
 8004d86:	e013      	b.n	8004db0 <UART_SetConfig+0x198>
 8004d88:	231a      	movs	r3, #26
 8004d8a:	18fb      	adds	r3, r7, r3
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	701a      	strb	r2, [r3, #0]
 8004d90:	e035      	b.n	8004dfe <UART_SetConfig+0x1e6>
 8004d92:	231a      	movs	r3, #26
 8004d94:	18fb      	adds	r3, r7, r3
 8004d96:	2202      	movs	r2, #2
 8004d98:	701a      	strb	r2, [r3, #0]
 8004d9a:	e030      	b.n	8004dfe <UART_SetConfig+0x1e6>
 8004d9c:	231a      	movs	r3, #26
 8004d9e:	18fb      	adds	r3, r7, r3
 8004da0:	2204      	movs	r2, #4
 8004da2:	701a      	strb	r2, [r3, #0]
 8004da4:	e02b      	b.n	8004dfe <UART_SetConfig+0x1e6>
 8004da6:	231a      	movs	r3, #26
 8004da8:	18fb      	adds	r3, r7, r3
 8004daa:	2208      	movs	r2, #8
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	e026      	b.n	8004dfe <UART_SetConfig+0x1e6>
 8004db0:	231a      	movs	r3, #26
 8004db2:	18fb      	adds	r3, r7, r3
 8004db4:	2210      	movs	r2, #16
 8004db6:	701a      	strb	r2, [r3, #0]
 8004db8:	e021      	b.n	8004dfe <UART_SetConfig+0x1e6>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a5d      	ldr	r2, [pc, #372]	; (8004f34 <UART_SetConfig+0x31c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d104      	bne.n	8004dce <UART_SetConfig+0x1b6>
 8004dc4:	231a      	movs	r3, #26
 8004dc6:	18fb      	adds	r3, r7, r3
 8004dc8:	2200      	movs	r2, #0
 8004dca:	701a      	strb	r2, [r3, #0]
 8004dcc:	e017      	b.n	8004dfe <UART_SetConfig+0x1e6>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a59      	ldr	r2, [pc, #356]	; (8004f38 <UART_SetConfig+0x320>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d104      	bne.n	8004de2 <UART_SetConfig+0x1ca>
 8004dd8:	231a      	movs	r3, #26
 8004dda:	18fb      	adds	r3, r7, r3
 8004ddc:	2200      	movs	r2, #0
 8004dde:	701a      	strb	r2, [r3, #0]
 8004de0:	e00d      	b.n	8004dfe <UART_SetConfig+0x1e6>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a55      	ldr	r2, [pc, #340]	; (8004f3c <UART_SetConfig+0x324>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d104      	bne.n	8004df6 <UART_SetConfig+0x1de>
 8004dec:	231a      	movs	r3, #26
 8004dee:	18fb      	adds	r3, r7, r3
 8004df0:	2200      	movs	r2, #0
 8004df2:	701a      	strb	r2, [r3, #0]
 8004df4:	e003      	b.n	8004dfe <UART_SetConfig+0x1e6>
 8004df6:	231a      	movs	r3, #26
 8004df8:	18fb      	adds	r3, r7, r3
 8004dfa:	2210      	movs	r2, #16
 8004dfc:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69da      	ldr	r2, [r3, #28]
 8004e02:	2380      	movs	r3, #128	; 0x80
 8004e04:	021b      	lsls	r3, r3, #8
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d000      	beq.n	8004e0c <UART_SetConfig+0x1f4>
 8004e0a:	e065      	b.n	8004ed8 <UART_SetConfig+0x2c0>
  {
    switch (clocksource)
 8004e0c:	231a      	movs	r3, #26
 8004e0e:	18fb      	adds	r3, r7, r3
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b08      	cmp	r3, #8
 8004e14:	d015      	beq.n	8004e42 <UART_SetConfig+0x22a>
 8004e16:	dc18      	bgt.n	8004e4a <UART_SetConfig+0x232>
 8004e18:	2b04      	cmp	r3, #4
 8004e1a:	d00d      	beq.n	8004e38 <UART_SetConfig+0x220>
 8004e1c:	dc15      	bgt.n	8004e4a <UART_SetConfig+0x232>
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <UART_SetConfig+0x210>
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d005      	beq.n	8004e32 <UART_SetConfig+0x21a>
 8004e26:	e010      	b.n	8004e4a <UART_SetConfig+0x232>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e28:	f7fe fb98 	bl	800355c <HAL_RCC_GetPCLK1Freq>
 8004e2c:	0003      	movs	r3, r0
 8004e2e:	617b      	str	r3, [r7, #20]
        break;
 8004e30:	e012      	b.n	8004e58 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e32:	4b43      	ldr	r3, [pc, #268]	; (8004f40 <UART_SetConfig+0x328>)
 8004e34:	617b      	str	r3, [r7, #20]
        break;
 8004e36:	e00f      	b.n	8004e58 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e38:	f7fe fb04 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 8004e3c:	0003      	movs	r3, r0
 8004e3e:	617b      	str	r3, [r7, #20]
        break;
 8004e40:	e00a      	b.n	8004e58 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e42:	2380      	movs	r3, #128	; 0x80
 8004e44:	021b      	lsls	r3, r3, #8
 8004e46:	617b      	str	r3, [r7, #20]
        break;
 8004e48:	e006      	b.n	8004e58 <UART_SetConfig+0x240>
      default:
        pclk = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e4e:	231b      	movs	r3, #27
 8004e50:	18fb      	adds	r3, r7, r3
 8004e52:	2201      	movs	r2, #1
 8004e54:	701a      	strb	r2, [r3, #0]
        break;
 8004e56:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d100      	bne.n	8004e60 <UART_SetConfig+0x248>
 8004e5e:	e0a6      	b.n	8004fae <UART_SetConfig+0x396>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e64:	4b37      	ldr	r3, [pc, #220]	; (8004f44 <UART_SetConfig+0x32c>)
 8004e66:	0052      	lsls	r2, r2, #1
 8004e68:	5ad3      	ldrh	r3, [r2, r3]
 8004e6a:	0019      	movs	r1, r3
 8004e6c:	6978      	ldr	r0, [r7, #20]
 8004e6e:	f7fb f959 	bl	8000124 <__udivsi3>
 8004e72:	0003      	movs	r3, r0
 8004e74:	005a      	lsls	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	085b      	lsrs	r3, r3, #1
 8004e7c:	18d2      	adds	r2, r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	0019      	movs	r1, r3
 8004e84:	0010      	movs	r0, r2
 8004e86:	f7fb f94d 	bl	8000124 <__udivsi3>
 8004e8a:	0003      	movs	r3, r0
 8004e8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	2b0f      	cmp	r3, #15
 8004e92:	d91c      	bls.n	8004ece <UART_SetConfig+0x2b6>
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	2380      	movs	r3, #128	; 0x80
 8004e98:	025b      	lsls	r3, r3, #9
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d217      	bcs.n	8004ece <UART_SetConfig+0x2b6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	200e      	movs	r0, #14
 8004ea4:	183b      	adds	r3, r7, r0
 8004ea6:	210f      	movs	r1, #15
 8004ea8:	438a      	bics	r2, r1
 8004eaa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	085b      	lsrs	r3, r3, #1
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	2207      	movs	r2, #7
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	b299      	uxth	r1, r3
 8004eb8:	183b      	adds	r3, r7, r0
 8004eba:	183a      	adds	r2, r7, r0
 8004ebc:	8812      	ldrh	r2, [r2, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	183a      	adds	r2, r7, r0
 8004ec8:	8812      	ldrh	r2, [r2, #0]
 8004eca:	60da      	str	r2, [r3, #12]
 8004ecc:	e06f      	b.n	8004fae <UART_SetConfig+0x396>
      }
      else
      {
        ret = HAL_ERROR;
 8004ece:	231b      	movs	r3, #27
 8004ed0:	18fb      	adds	r3, r7, r3
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	701a      	strb	r2, [r3, #0]
 8004ed6:	e06a      	b.n	8004fae <UART_SetConfig+0x396>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ed8:	231a      	movs	r3, #26
 8004eda:	18fb      	adds	r3, r7, r3
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d015      	beq.n	8004f0e <UART_SetConfig+0x2f6>
 8004ee2:	dc31      	bgt.n	8004f48 <UART_SetConfig+0x330>
 8004ee4:	2b04      	cmp	r3, #4
 8004ee6:	d00d      	beq.n	8004f04 <UART_SetConfig+0x2ec>
 8004ee8:	dc2e      	bgt.n	8004f48 <UART_SetConfig+0x330>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d002      	beq.n	8004ef4 <UART_SetConfig+0x2dc>
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d005      	beq.n	8004efe <UART_SetConfig+0x2e6>
 8004ef2:	e029      	b.n	8004f48 <UART_SetConfig+0x330>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ef4:	f7fe fb32 	bl	800355c <HAL_RCC_GetPCLK1Freq>
 8004ef8:	0003      	movs	r3, r0
 8004efa:	617b      	str	r3, [r7, #20]
        break;
 8004efc:	e02b      	b.n	8004f56 <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004efe:	4b10      	ldr	r3, [pc, #64]	; (8004f40 <UART_SetConfig+0x328>)
 8004f00:	617b      	str	r3, [r7, #20]
        break;
 8004f02:	e028      	b.n	8004f56 <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f04:	f7fe fa9e 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 8004f08:	0003      	movs	r3, r0
 8004f0a:	617b      	str	r3, [r7, #20]
        break;
 8004f0c:	e023      	b.n	8004f56 <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f0e:	2380      	movs	r3, #128	; 0x80
 8004f10:	021b      	lsls	r3, r3, #8
 8004f12:	617b      	str	r3, [r7, #20]
        break;
 8004f14:	e01f      	b.n	8004f56 <UART_SetConfig+0x33e>
 8004f16:	46c0      	nop			; (mov r8, r8)
 8004f18:	cfff69f3 	.word	0xcfff69f3
 8004f1c:	ffffcfff 	.word	0xffffcfff
 8004f20:	11fff4ff 	.word	0x11fff4ff
 8004f24:	40013800 	.word	0x40013800
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	40004400 	.word	0x40004400
 8004f30:	40004800 	.word	0x40004800
 8004f34:	40004c00 	.word	0x40004c00
 8004f38:	40005000 	.word	0x40005000
 8004f3c:	40013c00 	.word	0x40013c00
 8004f40:	00f42400 	.word	0x00f42400
 8004f44:	0800807c 	.word	0x0800807c
      default:
        pclk = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f4c:	231b      	movs	r3, #27
 8004f4e:	18fb      	adds	r3, r7, r3
 8004f50:	2201      	movs	r2, #1
 8004f52:	701a      	strb	r2, [r3, #0]
        break;
 8004f54:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d028      	beq.n	8004fae <UART_SetConfig+0x396>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f60:	4b1d      	ldr	r3, [pc, #116]	; (8004fd8 <UART_SetConfig+0x3c0>)
 8004f62:	0052      	lsls	r2, r2, #1
 8004f64:	5ad3      	ldrh	r3, [r2, r3]
 8004f66:	0019      	movs	r1, r3
 8004f68:	6978      	ldr	r0, [r7, #20]
 8004f6a:	f7fb f8db 	bl	8000124 <__udivsi3>
 8004f6e:	0003      	movs	r3, r0
 8004f70:	001a      	movs	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	085b      	lsrs	r3, r3, #1
 8004f78:	18d2      	adds	r2, r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	0019      	movs	r1, r3
 8004f80:	0010      	movs	r0, r2
 8004f82:	f7fb f8cf 	bl	8000124 <__udivsi3>
 8004f86:	0003      	movs	r3, r0
 8004f88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	2b0f      	cmp	r3, #15
 8004f8e:	d90a      	bls.n	8004fa6 <UART_SetConfig+0x38e>
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	2380      	movs	r3, #128	; 0x80
 8004f94:	025b      	lsls	r3, r3, #9
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d205      	bcs.n	8004fa6 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	60da      	str	r2, [r3, #12]
 8004fa4:	e003      	b.n	8004fae <UART_SetConfig+0x396>
      }
      else
      {
        ret = HAL_ERROR;
 8004fa6:	231b      	movs	r3, #27
 8004fa8:	18fb      	adds	r3, r7, r3
 8004faa:	2201      	movs	r2, #1
 8004fac:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	226a      	movs	r2, #106	; 0x6a
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2268      	movs	r2, #104	; 0x68
 8004fba:	2101      	movs	r1, #1
 8004fbc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004fca:	231b      	movs	r3, #27
 8004fcc:	18fb      	adds	r3, r7, r3
 8004fce:	781b      	ldrb	r3, [r3, #0]
}
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	b008      	add	sp, #32
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	0800807c 	.word	0x0800807c

08004fdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe8:	2201      	movs	r2, #1
 8004fea:	4013      	ands	r3, r2
 8004fec:	d00b      	beq.n	8005006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	4a4a      	ldr	r2, [pc, #296]	; (8005120 <UART_AdvFeatureConfig+0x144>)
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	0019      	movs	r1, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500a:	2202      	movs	r2, #2
 800500c:	4013      	ands	r3, r2
 800500e:	d00b      	beq.n	8005028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	4a43      	ldr	r2, [pc, #268]	; (8005124 <UART_AdvFeatureConfig+0x148>)
 8005018:	4013      	ands	r3, r2
 800501a:	0019      	movs	r1, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502c:	2204      	movs	r2, #4
 800502e:	4013      	ands	r3, r2
 8005030:	d00b      	beq.n	800504a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	4a3b      	ldr	r2, [pc, #236]	; (8005128 <UART_AdvFeatureConfig+0x14c>)
 800503a:	4013      	ands	r3, r2
 800503c:	0019      	movs	r1, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504e:	2208      	movs	r2, #8
 8005050:	4013      	ands	r3, r2
 8005052:	d00b      	beq.n	800506c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	4a34      	ldr	r2, [pc, #208]	; (800512c <UART_AdvFeatureConfig+0x150>)
 800505c:	4013      	ands	r3, r2
 800505e:	0019      	movs	r1, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005070:	2210      	movs	r2, #16
 8005072:	4013      	ands	r3, r2
 8005074:	d00b      	beq.n	800508e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	4a2c      	ldr	r2, [pc, #176]	; (8005130 <UART_AdvFeatureConfig+0x154>)
 800507e:	4013      	ands	r3, r2
 8005080:	0019      	movs	r1, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005092:	2220      	movs	r2, #32
 8005094:	4013      	ands	r3, r2
 8005096:	d00b      	beq.n	80050b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	4a25      	ldr	r2, [pc, #148]	; (8005134 <UART_AdvFeatureConfig+0x158>)
 80050a0:	4013      	ands	r3, r2
 80050a2:	0019      	movs	r1, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b4:	2240      	movs	r2, #64	; 0x40
 80050b6:	4013      	ands	r3, r2
 80050b8:	d01d      	beq.n	80050f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	4a1d      	ldr	r2, [pc, #116]	; (8005138 <UART_AdvFeatureConfig+0x15c>)
 80050c2:	4013      	ands	r3, r2
 80050c4:	0019      	movs	r1, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050d6:	2380      	movs	r3, #128	; 0x80
 80050d8:	035b      	lsls	r3, r3, #13
 80050da:	429a      	cmp	r2, r3
 80050dc:	d10b      	bne.n	80050f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	4a15      	ldr	r2, [pc, #84]	; (800513c <UART_AdvFeatureConfig+0x160>)
 80050e6:	4013      	ands	r3, r2
 80050e8:	0019      	movs	r1, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fa:	2280      	movs	r2, #128	; 0x80
 80050fc:	4013      	ands	r3, r2
 80050fe:	d00b      	beq.n	8005118 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	4a0e      	ldr	r2, [pc, #56]	; (8005140 <UART_AdvFeatureConfig+0x164>)
 8005108:	4013      	ands	r3, r2
 800510a:	0019      	movs	r1, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	605a      	str	r2, [r3, #4]
  }
}
 8005118:	46c0      	nop			; (mov r8, r8)
 800511a:	46bd      	mov	sp, r7
 800511c:	b002      	add	sp, #8
 800511e:	bd80      	pop	{r7, pc}
 8005120:	fffdffff 	.word	0xfffdffff
 8005124:	fffeffff 	.word	0xfffeffff
 8005128:	fffbffff 	.word	0xfffbffff
 800512c:	ffff7fff 	.word	0xffff7fff
 8005130:	ffffefff 	.word	0xffffefff
 8005134:	ffffdfff 	.word	0xffffdfff
 8005138:	ffefffff 	.word	0xffefffff
 800513c:	ff9fffff 	.word	0xff9fffff
 8005140:	fff7ffff 	.word	0xfff7ffff

08005144 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af02      	add	r7, sp, #8
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2290      	movs	r2, #144	; 0x90
 8005150:	2100      	movs	r1, #0
 8005152:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005154:	f7fc ffb0 	bl	80020b8 <HAL_GetTick>
 8005158:	0003      	movs	r3, r0
 800515a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2208      	movs	r2, #8
 8005164:	4013      	ands	r3, r2
 8005166:	2b08      	cmp	r3, #8
 8005168:	d10c      	bne.n	8005184 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2280      	movs	r2, #128	; 0x80
 800516e:	0391      	lsls	r1, r2, #14
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	4a1a      	ldr	r2, [pc, #104]	; (80051dc <UART_CheckIdleState+0x98>)
 8005174:	9200      	str	r2, [sp, #0]
 8005176:	2200      	movs	r2, #0
 8005178:	f000 f832 	bl	80051e0 <UART_WaitOnFlagUntilTimeout>
 800517c:	1e03      	subs	r3, r0, #0
 800517e:	d001      	beq.n	8005184 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e026      	b.n	80051d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2204      	movs	r2, #4
 800518c:	4013      	ands	r3, r2
 800518e:	2b04      	cmp	r3, #4
 8005190:	d10c      	bne.n	80051ac <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2280      	movs	r2, #128	; 0x80
 8005196:	03d1      	lsls	r1, r2, #15
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	4a10      	ldr	r2, [pc, #64]	; (80051dc <UART_CheckIdleState+0x98>)
 800519c:	9200      	str	r2, [sp, #0]
 800519e:	2200      	movs	r2, #0
 80051a0:	f000 f81e 	bl	80051e0 <UART_WaitOnFlagUntilTimeout>
 80051a4:	1e03      	subs	r3, r0, #0
 80051a6:	d001      	beq.n	80051ac <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e012      	b.n	80051d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2288      	movs	r2, #136	; 0x88
 80051b0:	2120      	movs	r1, #32
 80051b2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	228c      	movs	r2, #140	; 0x8c
 80051b8:	2120      	movs	r1, #32
 80051ba:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2284      	movs	r2, #132	; 0x84
 80051cc:	2100      	movs	r1, #0
 80051ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	0018      	movs	r0, r3
 80051d4:	46bd      	mov	sp, r7
 80051d6:	b004      	add	sp, #16
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	46c0      	nop			; (mov r8, r8)
 80051dc:	01ffffff 	.word	0x01ffffff

080051e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b094      	sub	sp, #80	; 0x50
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	603b      	str	r3, [r7, #0]
 80051ec:	1dfb      	adds	r3, r7, #7
 80051ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051f0:	e0a7      	b.n	8005342 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051f4:	3301      	adds	r3, #1
 80051f6:	d100      	bne.n	80051fa <UART_WaitOnFlagUntilTimeout+0x1a>
 80051f8:	e0a3      	b.n	8005342 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051fa:	f7fc ff5d 	bl	80020b8 <HAL_GetTick>
 80051fe:	0002      	movs	r2, r0
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005206:	429a      	cmp	r2, r3
 8005208:	d302      	bcc.n	8005210 <UART_WaitOnFlagUntilTimeout+0x30>
 800520a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800520c:	2b00      	cmp	r3, #0
 800520e:	d13f      	bne.n	8005290 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005210:	f3ef 8310 	mrs	r3, PRIMASK
 8005214:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005216:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005218:	647b      	str	r3, [r7, #68]	; 0x44
 800521a:	2301      	movs	r3, #1
 800521c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800521e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005220:	f383 8810 	msr	PRIMASK, r3
}
 8005224:	46c0      	nop			; (mov r8, r8)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	494e      	ldr	r1, [pc, #312]	; (800536c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005232:	400a      	ands	r2, r1
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005238:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	f383 8810 	msr	PRIMASK, r3
}
 8005240:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005242:	f3ef 8310 	mrs	r3, PRIMASK
 8005246:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800524a:	643b      	str	r3, [r7, #64]	; 0x40
 800524c:	2301      	movs	r3, #1
 800524e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005252:	f383 8810 	msr	PRIMASK, r3
}
 8005256:	46c0      	nop			; (mov r8, r8)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689a      	ldr	r2, [r3, #8]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2101      	movs	r1, #1
 8005264:	438a      	bics	r2, r1
 8005266:	609a      	str	r2, [r3, #8]
 8005268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800526a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800526c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800526e:	f383 8810 	msr	PRIMASK, r3
}
 8005272:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2288      	movs	r2, #136	; 0x88
 8005278:	2120      	movs	r1, #32
 800527a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	228c      	movs	r2, #140	; 0x8c
 8005280:	2120      	movs	r1, #32
 8005282:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2284      	movs	r2, #132	; 0x84
 8005288:	2100      	movs	r1, #0
 800528a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e069      	b.n	8005364 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2204      	movs	r2, #4
 8005298:	4013      	ands	r3, r2
 800529a:	d052      	beq.n	8005342 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	69da      	ldr	r2, [r3, #28]
 80052a2:	2380      	movs	r3, #128	; 0x80
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	401a      	ands	r2, r3
 80052a8:	2380      	movs	r3, #128	; 0x80
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d148      	bne.n	8005342 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2280      	movs	r2, #128	; 0x80
 80052b6:	0112      	lsls	r2, r2, #4
 80052b8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ba:	f3ef 8310 	mrs	r3, PRIMASK
 80052be:	613b      	str	r3, [r7, #16]
  return(result);
 80052c0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80052c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052c4:	2301      	movs	r3, #1
 80052c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f383 8810 	msr	PRIMASK, r3
}
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4924      	ldr	r1, [pc, #144]	; (800536c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80052dc:	400a      	ands	r2, r1
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	f383 8810 	msr	PRIMASK, r3
}
 80052ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ec:	f3ef 8310 	mrs	r3, PRIMASK
 80052f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80052f2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80052f6:	2301      	movs	r3, #1
 80052f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	f383 8810 	msr	PRIMASK, r3
}
 8005300:	46c0      	nop			; (mov r8, r8)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2101      	movs	r1, #1
 800530e:	438a      	bics	r2, r1
 8005310:	609a      	str	r2, [r3, #8]
 8005312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005314:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	f383 8810 	msr	PRIMASK, r3
}
 800531c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2288      	movs	r2, #136	; 0x88
 8005322:	2120      	movs	r1, #32
 8005324:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	228c      	movs	r2, #140	; 0x8c
 800532a:	2120      	movs	r1, #32
 800532c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2290      	movs	r2, #144	; 0x90
 8005332:	2120      	movs	r1, #32
 8005334:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2284      	movs	r2, #132	; 0x84
 800533a:	2100      	movs	r1, #0
 800533c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e010      	b.n	8005364 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	4013      	ands	r3, r2
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	425a      	negs	r2, r3
 8005352:	4153      	adcs	r3, r2
 8005354:	b2db      	uxtb	r3, r3
 8005356:	001a      	movs	r2, r3
 8005358:	1dfb      	adds	r3, r7, #7
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	429a      	cmp	r2, r3
 800535e:	d100      	bne.n	8005362 <UART_WaitOnFlagUntilTimeout+0x182>
 8005360:	e747      	b.n	80051f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	0018      	movs	r0, r3
 8005366:	46bd      	mov	sp, r7
 8005368:	b014      	add	sp, #80	; 0x50
 800536a:	bd80      	pop	{r7, pc}
 800536c:	fffffe5f 	.word	0xfffffe5f

08005370 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b098      	sub	sp, #96	; 0x60
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	1dbb      	adds	r3, r7, #6
 800537c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	1dba      	adds	r2, r7, #6
 8005388:	215c      	movs	r1, #92	; 0x5c
 800538a:	8812      	ldrh	r2, [r2, #0]
 800538c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	1dba      	adds	r2, r7, #6
 8005392:	215e      	movs	r1, #94	; 0x5e
 8005394:	8812      	ldrh	r2, [r2, #0]
 8005396:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	2380      	movs	r3, #128	; 0x80
 80053a4:	015b      	lsls	r3, r3, #5
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d10d      	bne.n	80053c6 <UART_Start_Receive_IT+0x56>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d104      	bne.n	80053bc <UART_Start_Receive_IT+0x4c>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2260      	movs	r2, #96	; 0x60
 80053b6:	497b      	ldr	r1, [pc, #492]	; (80055a4 <UART_Start_Receive_IT+0x234>)
 80053b8:	5299      	strh	r1, [r3, r2]
 80053ba:	e02e      	b.n	800541a <UART_Start_Receive_IT+0xaa>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2260      	movs	r2, #96	; 0x60
 80053c0:	21ff      	movs	r1, #255	; 0xff
 80053c2:	5299      	strh	r1, [r3, r2]
 80053c4:	e029      	b.n	800541a <UART_Start_Receive_IT+0xaa>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10d      	bne.n	80053ea <UART_Start_Receive_IT+0x7a>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d104      	bne.n	80053e0 <UART_Start_Receive_IT+0x70>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2260      	movs	r2, #96	; 0x60
 80053da:	21ff      	movs	r1, #255	; 0xff
 80053dc:	5299      	strh	r1, [r3, r2]
 80053de:	e01c      	b.n	800541a <UART_Start_Receive_IT+0xaa>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2260      	movs	r2, #96	; 0x60
 80053e4:	217f      	movs	r1, #127	; 0x7f
 80053e6:	5299      	strh	r1, [r3, r2]
 80053e8:	e017      	b.n	800541a <UART_Start_Receive_IT+0xaa>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	689a      	ldr	r2, [r3, #8]
 80053ee:	2380      	movs	r3, #128	; 0x80
 80053f0:	055b      	lsls	r3, r3, #21
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d10d      	bne.n	8005412 <UART_Start_Receive_IT+0xa2>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d104      	bne.n	8005408 <UART_Start_Receive_IT+0x98>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2260      	movs	r2, #96	; 0x60
 8005402:	217f      	movs	r1, #127	; 0x7f
 8005404:	5299      	strh	r1, [r3, r2]
 8005406:	e008      	b.n	800541a <UART_Start_Receive_IT+0xaa>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2260      	movs	r2, #96	; 0x60
 800540c:	213f      	movs	r1, #63	; 0x3f
 800540e:	5299      	strh	r1, [r3, r2]
 8005410:	e003      	b.n	800541a <UART_Start_Receive_IT+0xaa>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2260      	movs	r2, #96	; 0x60
 8005416:	2100      	movs	r1, #0
 8005418:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2290      	movs	r2, #144	; 0x90
 800541e:	2100      	movs	r1, #0
 8005420:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	228c      	movs	r2, #140	; 0x8c
 8005426:	2122      	movs	r1, #34	; 0x22
 8005428:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800542a:	f3ef 8310 	mrs	r3, PRIMASK
 800542e:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8005430:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005432:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005434:	2301      	movs	r3, #1
 8005436:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800543a:	f383 8810 	msr	PRIMASK, r3
}
 800543e:	46c0      	nop			; (mov r8, r8)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2101      	movs	r1, #1
 800544c:	430a      	orrs	r2, r1
 800544e:	609a      	str	r2, [r3, #8]
 8005450:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005452:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005456:	f383 8810 	msr	PRIMASK, r3
}
 800545a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005460:	2380      	movs	r3, #128	; 0x80
 8005462:	059b      	lsls	r3, r3, #22
 8005464:	429a      	cmp	r2, r3
 8005466:	d150      	bne.n	800550a <UART_Start_Receive_IT+0x19a>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2268      	movs	r2, #104	; 0x68
 800546c:	5a9b      	ldrh	r3, [r3, r2]
 800546e:	1dba      	adds	r2, r7, #6
 8005470:	8812      	ldrh	r2, [r2, #0]
 8005472:	429a      	cmp	r2, r3
 8005474:	d349      	bcc.n	800550a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	2380      	movs	r3, #128	; 0x80
 800547c:	015b      	lsls	r3, r3, #5
 800547e:	429a      	cmp	r2, r3
 8005480:	d107      	bne.n	8005492 <UART_Start_Receive_IT+0x122>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d103      	bne.n	8005492 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4a46      	ldr	r2, [pc, #280]	; (80055a8 <UART_Start_Receive_IT+0x238>)
 800548e:	675a      	str	r2, [r3, #116]	; 0x74
 8005490:	e002      	b.n	8005498 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4a45      	ldr	r2, [pc, #276]	; (80055ac <UART_Start_Receive_IT+0x23c>)
 8005496:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d019      	beq.n	80054d4 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054a0:	f3ef 8310 	mrs	r3, PRIMASK
 80054a4:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80054a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80054aa:	2301      	movs	r3, #1
 80054ac:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b0:	f383 8810 	msr	PRIMASK, r3
}
 80054b4:	46c0      	nop			; (mov r8, r8)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2180      	movs	r1, #128	; 0x80
 80054c2:	0049      	lsls	r1, r1, #1
 80054c4:	430a      	orrs	r2, r1
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ce:	f383 8810 	msr	PRIMASK, r3
}
 80054d2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054d4:	f3ef 8310 	mrs	r3, PRIMASK
 80054d8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80054da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80054dc:	657b      	str	r3, [r7, #84]	; 0x54
 80054de:	2301      	movs	r3, #1
 80054e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e4:	f383 8810 	msr	PRIMASK, r3
}
 80054e8:	46c0      	nop			; (mov r8, r8)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689a      	ldr	r2, [r3, #8]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2180      	movs	r1, #128	; 0x80
 80054f6:	0549      	lsls	r1, r1, #21
 80054f8:	430a      	orrs	r2, r1
 80054fa:	609a      	str	r2, [r3, #8]
 80054fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054fe:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005502:	f383 8810 	msr	PRIMASK, r3
}
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	e047      	b.n	800559a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	689a      	ldr	r2, [r3, #8]
 800550e:	2380      	movs	r3, #128	; 0x80
 8005510:	015b      	lsls	r3, r3, #5
 8005512:	429a      	cmp	r2, r3
 8005514:	d107      	bne.n	8005526 <UART_Start_Receive_IT+0x1b6>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d103      	bne.n	8005526 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4a23      	ldr	r2, [pc, #140]	; (80055b0 <UART_Start_Receive_IT+0x240>)
 8005522:	675a      	str	r2, [r3, #116]	; 0x74
 8005524:	e002      	b.n	800552c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4a22      	ldr	r2, [pc, #136]	; (80055b4 <UART_Start_Receive_IT+0x244>)
 800552a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d019      	beq.n	8005568 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005534:	f3ef 8310 	mrs	r3, PRIMASK
 8005538:	61fb      	str	r3, [r7, #28]
  return(result);
 800553a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800553c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800553e:	2301      	movs	r3, #1
 8005540:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	f383 8810 	msr	PRIMASK, r3
}
 8005548:	46c0      	nop			; (mov r8, r8)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2190      	movs	r1, #144	; 0x90
 8005556:	0049      	lsls	r1, r1, #1
 8005558:	430a      	orrs	r2, r1
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	f383 8810 	msr	PRIMASK, r3
}
 8005566:	e018      	b.n	800559a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005568:	f3ef 8310 	mrs	r3, PRIMASK
 800556c:	613b      	str	r3, [r7, #16]
  return(result);
 800556e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005570:	653b      	str	r3, [r7, #80]	; 0x50
 8005572:	2301      	movs	r3, #1
 8005574:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f383 8810 	msr	PRIMASK, r3
}
 800557c:	46c0      	nop			; (mov r8, r8)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2120      	movs	r1, #32
 800558a:	430a      	orrs	r2, r1
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005590:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	f383 8810 	msr	PRIMASK, r3
}
 8005598:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	0018      	movs	r0, r3
 800559e:	46bd      	mov	sp, r7
 80055a0:	b018      	add	sp, #96	; 0x60
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	000001ff 	.word	0x000001ff
 80055a8:	08005ce1 	.word	0x08005ce1
 80055ac:	080059f5 	.word	0x080059f5
 80055b0:	08005881 	.word	0x08005881
 80055b4:	0800570d 	.word	0x0800570d

080055b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08e      	sub	sp, #56	; 0x38
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055c0:	f3ef 8310 	mrs	r3, PRIMASK
 80055c4:	617b      	str	r3, [r7, #20]
  return(result);
 80055c6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055c8:	637b      	str	r3, [r7, #52]	; 0x34
 80055ca:	2301      	movs	r3, #1
 80055cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	f383 8810 	msr	PRIMASK, r3
}
 80055d4:	46c0      	nop			; (mov r8, r8)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4926      	ldr	r1, [pc, #152]	; (800567c <UART_EndRxTransfer+0xc4>)
 80055e2:	400a      	ands	r2, r1
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	f383 8810 	msr	PRIMASK, r3
}
 80055f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055f2:	f3ef 8310 	mrs	r3, PRIMASK
 80055f6:	623b      	str	r3, [r7, #32]
  return(result);
 80055f8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055fa:	633b      	str	r3, [r7, #48]	; 0x30
 80055fc:	2301      	movs	r3, #1
 80055fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	f383 8810 	msr	PRIMASK, r3
}
 8005606:	46c0      	nop			; (mov r8, r8)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689a      	ldr	r2, [r3, #8]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	491b      	ldr	r1, [pc, #108]	; (8005680 <UART_EndRxTransfer+0xc8>)
 8005614:	400a      	ands	r2, r1
 8005616:	609a      	str	r2, [r3, #8]
 8005618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561e:	f383 8810 	msr	PRIMASK, r3
}
 8005622:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005628:	2b01      	cmp	r3, #1
 800562a:	d118      	bne.n	800565e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800562c:	f3ef 8310 	mrs	r3, PRIMASK
 8005630:	60bb      	str	r3, [r7, #8]
  return(result);
 8005632:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005634:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005636:	2301      	movs	r3, #1
 8005638:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f383 8810 	msr	PRIMASK, r3
}
 8005640:	46c0      	nop			; (mov r8, r8)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2110      	movs	r1, #16
 800564e:	438a      	bics	r2, r1
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005654:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f383 8810 	msr	PRIMASK, r3
}
 800565c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	228c      	movs	r2, #140	; 0x8c
 8005662:	2120      	movs	r1, #32
 8005664:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	46bd      	mov	sp, r7
 8005676:	b00e      	add	sp, #56	; 0x38
 8005678:	bd80      	pop	{r7, pc}
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	fffffedf 	.word	0xfffffedf
 8005680:	effffffe 	.word	0xeffffffe

08005684 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005690:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	225e      	movs	r2, #94	; 0x5e
 8005696:	2100      	movs	r1, #0
 8005698:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2256      	movs	r2, #86	; 0x56
 800569e:	2100      	movs	r1, #0
 80056a0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	0018      	movs	r0, r3
 80056a6:	f7ff faaf 	bl	8004c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	46bd      	mov	sp, r7
 80056ae:	b004      	add	sp, #16
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b086      	sub	sp, #24
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ba:	f3ef 8310 	mrs	r3, PRIMASK
 80056be:	60bb      	str	r3, [r7, #8]
  return(result);
 80056c0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056c2:	617b      	str	r3, [r7, #20]
 80056c4:	2301      	movs	r3, #1
 80056c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f383 8810 	msr	PRIMASK, r3
}
 80056ce:	46c0      	nop			; (mov r8, r8)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2140      	movs	r1, #64	; 0x40
 80056dc:	438a      	bics	r2, r1
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f383 8810 	msr	PRIMASK, r3
}
 80056ea:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2288      	movs	r2, #136	; 0x88
 80056f0:	2120      	movs	r1, #32
 80056f2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	0018      	movs	r0, r3
 80056fe:	f7ff fa73 	bl	8004be8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005702:	46c0      	nop			; (mov r8, r8)
 8005704:	46bd      	mov	sp, r7
 8005706:	b006      	add	sp, #24
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b090      	sub	sp, #64	; 0x40
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005714:	203e      	movs	r0, #62	; 0x3e
 8005716:	183b      	adds	r3, r7, r0
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	2160      	movs	r1, #96	; 0x60
 800571c:	5a52      	ldrh	r2, [r2, r1]
 800571e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	228c      	movs	r2, #140	; 0x8c
 8005724:	589b      	ldr	r3, [r3, r2]
 8005726:	2b22      	cmp	r3, #34	; 0x22
 8005728:	d000      	beq.n	800572c <UART_RxISR_8BIT+0x20>
 800572a:	e09a      	b.n	8005862 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005732:	213c      	movs	r1, #60	; 0x3c
 8005734:	187b      	adds	r3, r7, r1
 8005736:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005738:	187b      	adds	r3, r7, r1
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	b2da      	uxtb	r2, r3
 800573e:	183b      	adds	r3, r7, r0
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	b2d9      	uxtb	r1, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005748:	400a      	ands	r2, r1
 800574a:	b2d2      	uxtb	r2, r2
 800574c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005752:	1c5a      	adds	r2, r3, #1
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	225e      	movs	r2, #94	; 0x5e
 800575c:	5a9b      	ldrh	r3, [r3, r2]
 800575e:	b29b      	uxth	r3, r3
 8005760:	3b01      	subs	r3, #1
 8005762:	b299      	uxth	r1, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	225e      	movs	r2, #94	; 0x5e
 8005768:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	225e      	movs	r2, #94	; 0x5e
 800576e:	5a9b      	ldrh	r3, [r3, r2]
 8005770:	b29b      	uxth	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d000      	beq.n	8005778 <UART_RxISR_8BIT+0x6c>
 8005776:	e07c      	b.n	8005872 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005778:	f3ef 8310 	mrs	r3, PRIMASK
 800577c:	61bb      	str	r3, [r7, #24]
  return(result);
 800577e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005780:	63bb      	str	r3, [r7, #56]	; 0x38
 8005782:	2301      	movs	r3, #1
 8005784:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	f383 8810 	msr	PRIMASK, r3
}
 800578c:	46c0      	nop			; (mov r8, r8)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4938      	ldr	r1, [pc, #224]	; (800587c <UART_RxISR_8BIT+0x170>)
 800579a:	400a      	ands	r2, r1
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	f383 8810 	msr	PRIMASK, r3
}
 80057a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057aa:	f3ef 8310 	mrs	r3, PRIMASK
 80057ae:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b2:	637b      	str	r3, [r7, #52]	; 0x34
 80057b4:	2301      	movs	r3, #1
 80057b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ba:	f383 8810 	msr	PRIMASK, r3
}
 80057be:	46c0      	nop			; (mov r8, r8)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2101      	movs	r1, #1
 80057cc:	438a      	bics	r2, r1
 80057ce:	609a      	str	r2, [r3, #8]
 80057d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d6:	f383 8810 	msr	PRIMASK, r3
}
 80057da:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	228c      	movs	r2, #140	; 0x8c
 80057e0:	2120      	movs	r1, #32
 80057e2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d12f      	bne.n	8005858 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005802:	60fb      	str	r3, [r7, #12]
  return(result);
 8005804:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005806:	633b      	str	r3, [r7, #48]	; 0x30
 8005808:	2301      	movs	r3, #1
 800580a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f383 8810 	msr	PRIMASK, r3
}
 8005812:	46c0      	nop			; (mov r8, r8)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2110      	movs	r1, #16
 8005820:	438a      	bics	r2, r1
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005826:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f383 8810 	msr	PRIMASK, r3
}
 800582e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	2210      	movs	r2, #16
 8005838:	4013      	ands	r3, r2
 800583a:	2b10      	cmp	r3, #16
 800583c:	d103      	bne.n	8005846 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2210      	movs	r2, #16
 8005844:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	225c      	movs	r2, #92	; 0x5c
 800584a:	5a9a      	ldrh	r2, [r3, r2]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	0011      	movs	r1, r2
 8005850:	0018      	movs	r0, r3
 8005852:	f7fa fec9 	bl	80005e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005856:	e00c      	b.n	8005872 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	0018      	movs	r0, r3
 800585c:	f7ff f9cc 	bl	8004bf8 <HAL_UART_RxCpltCallback>
}
 8005860:	e007      	b.n	8005872 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	699a      	ldr	r2, [r3, #24]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2108      	movs	r1, #8
 800586e:	430a      	orrs	r2, r1
 8005870:	619a      	str	r2, [r3, #24]
}
 8005872:	46c0      	nop			; (mov r8, r8)
 8005874:	46bd      	mov	sp, r7
 8005876:	b010      	add	sp, #64	; 0x40
 8005878:	bd80      	pop	{r7, pc}
 800587a:	46c0      	nop			; (mov r8, r8)
 800587c:	fffffedf 	.word	0xfffffedf

08005880 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b090      	sub	sp, #64	; 0x40
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005888:	203e      	movs	r0, #62	; 0x3e
 800588a:	183b      	adds	r3, r7, r0
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	2160      	movs	r1, #96	; 0x60
 8005890:	5a52      	ldrh	r2, [r2, r1]
 8005892:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	228c      	movs	r2, #140	; 0x8c
 8005898:	589b      	ldr	r3, [r3, r2]
 800589a:	2b22      	cmp	r3, #34	; 0x22
 800589c:	d000      	beq.n	80058a0 <UART_RxISR_16BIT+0x20>
 800589e:	e09a      	b.n	80059d6 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058a6:	213c      	movs	r1, #60	; 0x3c
 80058a8:	187b      	adds	r3, r7, r1
 80058aa:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b0:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80058b2:	187b      	adds	r3, r7, r1
 80058b4:	183a      	adds	r2, r7, r0
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	8812      	ldrh	r2, [r2, #0]
 80058ba:	4013      	ands	r3, r2
 80058bc:	b29a      	uxth	r2, r3
 80058be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c6:	1c9a      	adds	r2, r3, #2
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	225e      	movs	r2, #94	; 0x5e
 80058d0:	5a9b      	ldrh	r3, [r3, r2]
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b299      	uxth	r1, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	225e      	movs	r2, #94	; 0x5e
 80058dc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	225e      	movs	r2, #94	; 0x5e
 80058e2:	5a9b      	ldrh	r3, [r3, r2]
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d000      	beq.n	80058ec <UART_RxISR_16BIT+0x6c>
 80058ea:	e07c      	b.n	80059e6 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ec:	f3ef 8310 	mrs	r3, PRIMASK
 80058f0:	617b      	str	r3, [r7, #20]
  return(result);
 80058f2:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058f4:	637b      	str	r3, [r7, #52]	; 0x34
 80058f6:	2301      	movs	r3, #1
 80058f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	f383 8810 	msr	PRIMASK, r3
}
 8005900:	46c0      	nop			; (mov r8, r8)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4938      	ldr	r1, [pc, #224]	; (80059f0 <UART_RxISR_16BIT+0x170>)
 800590e:	400a      	ands	r2, r1
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005914:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	f383 8810 	msr	PRIMASK, r3
}
 800591c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800591e:	f3ef 8310 	mrs	r3, PRIMASK
 8005922:	623b      	str	r3, [r7, #32]
  return(result);
 8005924:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005926:	633b      	str	r3, [r7, #48]	; 0x30
 8005928:	2301      	movs	r3, #1
 800592a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	f383 8810 	msr	PRIMASK, r3
}
 8005932:	46c0      	nop			; (mov r8, r8)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689a      	ldr	r2, [r3, #8]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2101      	movs	r1, #1
 8005940:	438a      	bics	r2, r1
 8005942:	609a      	str	r2, [r3, #8]
 8005944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005946:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594a:	f383 8810 	msr	PRIMASK, r3
}
 800594e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	228c      	movs	r2, #140	; 0x8c
 8005954:	2120      	movs	r1, #32
 8005956:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005968:	2b01      	cmp	r3, #1
 800596a:	d12f      	bne.n	80059cc <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005972:	f3ef 8310 	mrs	r3, PRIMASK
 8005976:	60bb      	str	r3, [r7, #8]
  return(result);
 8005978:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800597a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800597c:	2301      	movs	r3, #1
 800597e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f383 8810 	msr	PRIMASK, r3
}
 8005986:	46c0      	nop			; (mov r8, r8)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2110      	movs	r1, #16
 8005994:	438a      	bics	r2, r1
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	f383 8810 	msr	PRIMASK, r3
}
 80059a2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	2210      	movs	r2, #16
 80059ac:	4013      	ands	r3, r2
 80059ae:	2b10      	cmp	r3, #16
 80059b0:	d103      	bne.n	80059ba <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2210      	movs	r2, #16
 80059b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	225c      	movs	r2, #92	; 0x5c
 80059be:	5a9a      	ldrh	r2, [r3, r2]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	0011      	movs	r1, r2
 80059c4:	0018      	movs	r0, r3
 80059c6:	f7fa fe0f 	bl	80005e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059ca:	e00c      	b.n	80059e6 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	0018      	movs	r0, r3
 80059d0:	f7ff f912 	bl	8004bf8 <HAL_UART_RxCpltCallback>
}
 80059d4:	e007      	b.n	80059e6 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	699a      	ldr	r2, [r3, #24]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2108      	movs	r1, #8
 80059e2:	430a      	orrs	r2, r1
 80059e4:	619a      	str	r2, [r3, #24]
}
 80059e6:	46c0      	nop			; (mov r8, r8)
 80059e8:	46bd      	mov	sp, r7
 80059ea:	b010      	add	sp, #64	; 0x40
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	46c0      	nop			; (mov r8, r8)
 80059f0:	fffffedf 	.word	0xfffffedf

080059f4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b09c      	sub	sp, #112	; 0x70
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80059fc:	236a      	movs	r3, #106	; 0x6a
 80059fe:	18fb      	adds	r3, r7, r3
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	2160      	movs	r1, #96	; 0x60
 8005a04:	5a52      	ldrh	r2, [r2, r1]
 8005a06:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	228c      	movs	r2, #140	; 0x8c
 8005a24:	589b      	ldr	r3, [r3, r2]
 8005a26:	2b22      	cmp	r3, #34	; 0x22
 8005a28:	d000      	beq.n	8005a2c <UART_RxISR_8BIT_FIFOEN+0x38>
 8005a2a:	e144      	b.n	8005cb6 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005a2c:	235e      	movs	r3, #94	; 0x5e
 8005a2e:	18fb      	adds	r3, r7, r3
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	2168      	movs	r1, #104	; 0x68
 8005a34:	5a52      	ldrh	r2, [r2, r1]
 8005a36:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005a38:	e0eb      	b.n	8005c12 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a40:	215c      	movs	r1, #92	; 0x5c
 8005a42:	187b      	adds	r3, r7, r1
 8005a44:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a46:	187b      	adds	r3, r7, r1
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	236a      	movs	r3, #106	; 0x6a
 8005a4e:	18fb      	adds	r3, r7, r3
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	b2d9      	uxtb	r1, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a58:	400a      	ands	r2, r1
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a62:	1c5a      	adds	r2, r3, #1
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	225e      	movs	r2, #94	; 0x5e
 8005a6c:	5a9b      	ldrh	r3, [r3, r2]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b299      	uxth	r1, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	225e      	movs	r2, #94	; 0x5e
 8005a78:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a84:	2207      	movs	r2, #7
 8005a86:	4013      	ands	r3, r2
 8005a88:	d049      	beq.n	8005b1e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	4013      	ands	r3, r2
 8005a90:	d010      	beq.n	8005ab4 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005a92:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005a94:	2380      	movs	r3, #128	; 0x80
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	4013      	ands	r3, r2
 8005a9a:	d00b      	beq.n	8005ab4 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2290      	movs	r2, #144	; 0x90
 8005aa8:	589b      	ldr	r3, [r3, r2]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	431a      	orrs	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2190      	movs	r1, #144	; 0x90
 8005ab2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	4013      	ands	r3, r2
 8005aba:	d00f      	beq.n	8005adc <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005abc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005abe:	2201      	movs	r2, #1
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	d00b      	beq.n	8005adc <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2202      	movs	r2, #2
 8005aca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2290      	movs	r2, #144	; 0x90
 8005ad0:	589b      	ldr	r3, [r3, r2]
 8005ad2:	2204      	movs	r2, #4
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2190      	movs	r1, #144	; 0x90
 8005ada:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ade:	2204      	movs	r2, #4
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	d00f      	beq.n	8005b04 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005ae4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	4013      	ands	r3, r2
 8005aea:	d00b      	beq.n	8005b04 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2204      	movs	r2, #4
 8005af2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2290      	movs	r2, #144	; 0x90
 8005af8:	589b      	ldr	r3, [r3, r2]
 8005afa:	2202      	movs	r2, #2
 8005afc:	431a      	orrs	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2190      	movs	r1, #144	; 0x90
 8005b02:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2290      	movs	r2, #144	; 0x90
 8005b08:	589b      	ldr	r3, [r3, r2]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d007      	beq.n	8005b1e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	0018      	movs	r0, r3
 8005b12:	f7ff f879 	bl	8004c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2290      	movs	r2, #144	; 0x90
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	225e      	movs	r2, #94	; 0x5e
 8005b22:	5a9b      	ldrh	r3, [r3, r2]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d173      	bne.n	8005c12 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b2a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b32:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b34:	2301      	movs	r3, #1
 8005b36:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3a:	f383 8810 	msr	PRIMASK, r3
}
 8005b3e:	46c0      	nop			; (mov r8, r8)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4961      	ldr	r1, [pc, #388]	; (8005cd0 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8005b4c:	400a      	ands	r2, r1
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b52:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b56:	f383 8810 	msr	PRIMASK, r3
}
 8005b5a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b5c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b60:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8005b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b64:	657b      	str	r3, [r7, #84]	; 0x54
 8005b66:	2301      	movs	r3, #1
 8005b68:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b6c:	f383 8810 	msr	PRIMASK, r3
}
 8005b70:	46c0      	nop			; (mov r8, r8)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4955      	ldr	r1, [pc, #340]	; (8005cd4 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8005b7e:	400a      	ands	r2, r1
 8005b80:	609a      	str	r2, [r3, #8]
 8005b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b84:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b88:	f383 8810 	msr	PRIMASK, r3
}
 8005b8c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	228c      	movs	r2, #140	; 0x8c
 8005b92:	2120      	movs	r1, #32
 8005b94:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d12f      	bne.n	8005c0a <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8005bb4:	623b      	str	r3, [r7, #32]
  return(result);
 8005bb6:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bb8:	653b      	str	r3, [r7, #80]	; 0x50
 8005bba:	2301      	movs	r3, #1
 8005bbc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	f383 8810 	msr	PRIMASK, r3
}
 8005bc4:	46c0      	nop			; (mov r8, r8)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2110      	movs	r1, #16
 8005bd2:	438a      	bics	r2, r1
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bdc:	f383 8810 	msr	PRIMASK, r3
}
 8005be0:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	2210      	movs	r2, #16
 8005bea:	4013      	ands	r3, r2
 8005bec:	2b10      	cmp	r3, #16
 8005bee:	d103      	bne.n	8005bf8 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2210      	movs	r2, #16
 8005bf6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	225c      	movs	r2, #92	; 0x5c
 8005bfc:	5a9a      	ldrh	r2, [r3, r2]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	0011      	movs	r1, r2
 8005c02:	0018      	movs	r0, r3
 8005c04:	f7fa fcf0 	bl	80005e8 <HAL_UARTEx_RxEventCallback>
 8005c08:	e003      	b.n	8005c12 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f7fe fff3 	bl	8004bf8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005c12:	235e      	movs	r3, #94	; 0x5e
 8005c14:	18fb      	adds	r3, r7, r3
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d004      	beq.n	8005c26 <UART_RxISR_8BIT_FIFOEN+0x232>
 8005c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c1e:	2220      	movs	r2, #32
 8005c20:	4013      	ands	r3, r2
 8005c22:	d000      	beq.n	8005c26 <UART_RxISR_8BIT_FIFOEN+0x232>
 8005c24:	e709      	b.n	8005a3a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005c26:	204e      	movs	r0, #78	; 0x4e
 8005c28:	183b      	adds	r3, r7, r0
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	215e      	movs	r1, #94	; 0x5e
 8005c2e:	5a52      	ldrh	r2, [r2, r1]
 8005c30:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005c32:	0001      	movs	r1, r0
 8005c34:	187b      	adds	r3, r7, r1
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d044      	beq.n	8005cc6 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2268      	movs	r2, #104	; 0x68
 8005c40:	5a9b      	ldrh	r3, [r3, r2]
 8005c42:	187a      	adds	r2, r7, r1
 8005c44:	8812      	ldrh	r2, [r2, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d23d      	bcs.n	8005cc6 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c50:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005c52:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c54:	2301      	movs	r3, #1
 8005c56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f383 8810 	msr	PRIMASK, r3
}
 8005c5e:	46c0      	nop			; (mov r8, r8)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689a      	ldr	r2, [r3, #8]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	491b      	ldr	r1, [pc, #108]	; (8005cd8 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8005c6c:	400a      	ands	r2, r1
 8005c6e:	609a      	str	r2, [r3, #8]
 8005c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f383 8810 	msr	PRIMASK, r3
}
 8005c7a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a17      	ldr	r2, [pc, #92]	; (8005cdc <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8005c80:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c82:	f3ef 8310 	mrs	r3, PRIMASK
 8005c86:	617b      	str	r3, [r7, #20]
  return(result);
 8005c88:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005c8a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	f383 8810 	msr	PRIMASK, r3
}
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2120      	movs	r1, #32
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005caa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	f383 8810 	msr	PRIMASK, r3
}
 8005cb2:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cb4:	e007      	b.n	8005cc6 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	699a      	ldr	r2, [r3, #24]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2108      	movs	r1, #8
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	619a      	str	r2, [r3, #24]
}
 8005cc6:	46c0      	nop			; (mov r8, r8)
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	b01c      	add	sp, #112	; 0x70
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	46c0      	nop			; (mov r8, r8)
 8005cd0:	fffffeff 	.word	0xfffffeff
 8005cd4:	effffffe 	.word	0xeffffffe
 8005cd8:	efffffff 	.word	0xefffffff
 8005cdc:	0800570d 	.word	0x0800570d

08005ce0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b09e      	sub	sp, #120	; 0x78
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005ce8:	2372      	movs	r3, #114	; 0x72
 8005cea:	18fb      	adds	r3, r7, r3
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	2160      	movs	r1, #96	; 0x60
 8005cf0:	5a52      	ldrh	r2, [r2, r1]
 8005cf2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	228c      	movs	r2, #140	; 0x8c
 8005d10:	589b      	ldr	r3, [r3, r2]
 8005d12:	2b22      	cmp	r3, #34	; 0x22
 8005d14:	d000      	beq.n	8005d18 <UART_RxISR_16BIT_FIFOEN+0x38>
 8005d16:	e144      	b.n	8005fa2 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005d18:	2366      	movs	r3, #102	; 0x66
 8005d1a:	18fb      	adds	r3, r7, r3
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	2168      	movs	r1, #104	; 0x68
 8005d20:	5a52      	ldrh	r2, [r2, r1]
 8005d22:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d24:	e0eb      	b.n	8005efe <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d2c:	2164      	movs	r1, #100	; 0x64
 8005d2e:	187b      	adds	r3, r7, r1
 8005d30:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d36:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8005d38:	187b      	adds	r3, r7, r1
 8005d3a:	2272      	movs	r2, #114	; 0x72
 8005d3c:	18ba      	adds	r2, r7, r2
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	8812      	ldrh	r2, [r2, #0]
 8005d42:	4013      	ands	r3, r2
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4e:	1c9a      	adds	r2, r3, #2
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	225e      	movs	r2, #94	; 0x5e
 8005d58:	5a9b      	ldrh	r3, [r3, r2]
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	b299      	uxth	r1, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	225e      	movs	r2, #94	; 0x5e
 8005d64:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d70:	2207      	movs	r2, #7
 8005d72:	4013      	ands	r3, r2
 8005d74:	d049      	beq.n	8005e0a <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d78:	2201      	movs	r2, #1
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	d010      	beq.n	8005da0 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8005d7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d80:	2380      	movs	r3, #128	; 0x80
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	4013      	ands	r3, r2
 8005d86:	d00b      	beq.n	8005da0 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2290      	movs	r2, #144	; 0x90
 8005d94:	589b      	ldr	r3, [r3, r2]
 8005d96:	2201      	movs	r2, #1
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2190      	movs	r1, #144	; 0x90
 8005d9e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005da0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005da2:	2202      	movs	r2, #2
 8005da4:	4013      	ands	r3, r2
 8005da6:	d00f      	beq.n	8005dc8 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8005da8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005daa:	2201      	movs	r2, #1
 8005dac:	4013      	ands	r3, r2
 8005dae:	d00b      	beq.n	8005dc8 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2202      	movs	r2, #2
 8005db6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2290      	movs	r2, #144	; 0x90
 8005dbc:	589b      	ldr	r3, [r3, r2]
 8005dbe:	2204      	movs	r2, #4
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2190      	movs	r1, #144	; 0x90
 8005dc6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dca:	2204      	movs	r2, #4
 8005dcc:	4013      	ands	r3, r2
 8005dce:	d00f      	beq.n	8005df0 <UART_RxISR_16BIT_FIFOEN+0x110>
 8005dd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	d00b      	beq.n	8005df0 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2204      	movs	r2, #4
 8005dde:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2290      	movs	r2, #144	; 0x90
 8005de4:	589b      	ldr	r3, [r3, r2]
 8005de6:	2202      	movs	r2, #2
 8005de8:	431a      	orrs	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2190      	movs	r1, #144	; 0x90
 8005dee:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2290      	movs	r2, #144	; 0x90
 8005df4:	589b      	ldr	r3, [r3, r2]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d007      	beq.n	8005e0a <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	f7fe ff03 	bl	8004c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2290      	movs	r2, #144	; 0x90
 8005e06:	2100      	movs	r1, #0
 8005e08:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	225e      	movs	r2, #94	; 0x5e
 8005e0e:	5a9b      	ldrh	r3, [r3, r2]
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d173      	bne.n	8005efe <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e16:	f3ef 8310 	mrs	r3, PRIMASK
 8005e1a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e20:	2301      	movs	r3, #1
 8005e22:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e26:	f383 8810 	msr	PRIMASK, r3
}
 8005e2a:	46c0      	nop			; (mov r8, r8)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4961      	ldr	r1, [pc, #388]	; (8005fbc <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8005e38:	400a      	ands	r2, r1
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e3e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e42:	f383 8810 	msr	PRIMASK, r3
}
 8005e46:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e48:	f3ef 8310 	mrs	r3, PRIMASK
 8005e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e50:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e52:	2301      	movs	r3, #1
 8005e54:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e58:	f383 8810 	msr	PRIMASK, r3
}
 8005e5c:	46c0      	nop			; (mov r8, r8)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	689a      	ldr	r2, [r3, #8]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4955      	ldr	r1, [pc, #340]	; (8005fc0 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8005e6a:	400a      	ands	r2, r1
 8005e6c:	609a      	str	r2, [r3, #8]
 8005e6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e70:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e74:	f383 8810 	msr	PRIMASK, r3
}
 8005e78:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	228c      	movs	r2, #140	; 0x8c
 8005e7e:	2120      	movs	r1, #32
 8005e80:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d12f      	bne.n	8005ef6 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005ea0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ea4:	657b      	str	r3, [r7, #84]	; 0x54
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eac:	f383 8810 	msr	PRIMASK, r3
}
 8005eb0:	46c0      	nop			; (mov r8, r8)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2110      	movs	r1, #16
 8005ebe:	438a      	bics	r2, r1
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec8:	f383 8810 	msr	PRIMASK, r3
}
 8005ecc:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	69db      	ldr	r3, [r3, #28]
 8005ed4:	2210      	movs	r2, #16
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	2b10      	cmp	r3, #16
 8005eda:	d103      	bne.n	8005ee4 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2210      	movs	r2, #16
 8005ee2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	225c      	movs	r2, #92	; 0x5c
 8005ee8:	5a9a      	ldrh	r2, [r3, r2]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	0011      	movs	r1, r2
 8005eee:	0018      	movs	r0, r3
 8005ef0:	f7fa fb7a 	bl	80005e8 <HAL_UARTEx_RxEventCallback>
 8005ef4:	e003      	b.n	8005efe <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	0018      	movs	r0, r3
 8005efa:	f7fe fe7d 	bl	8004bf8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005efe:	2366      	movs	r3, #102	; 0x66
 8005f00:	18fb      	adds	r3, r7, r3
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d004      	beq.n	8005f12 <UART_RxISR_16BIT_FIFOEN+0x232>
 8005f08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	d000      	beq.n	8005f12 <UART_RxISR_16BIT_FIFOEN+0x232>
 8005f10:	e709      	b.n	8005d26 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005f12:	2052      	movs	r0, #82	; 0x52
 8005f14:	183b      	adds	r3, r7, r0
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	215e      	movs	r1, #94	; 0x5e
 8005f1a:	5a52      	ldrh	r2, [r2, r1]
 8005f1c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005f1e:	0001      	movs	r1, r0
 8005f20:	187b      	adds	r3, r7, r1
 8005f22:	881b      	ldrh	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d044      	beq.n	8005fb2 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2268      	movs	r2, #104	; 0x68
 8005f2c:	5a9b      	ldrh	r3, [r3, r2]
 8005f2e:	187a      	adds	r2, r7, r1
 8005f30:	8812      	ldrh	r2, [r2, #0]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d23d      	bcs.n	8005fb2 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f36:	f3ef 8310 	mrs	r3, PRIMASK
 8005f3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f40:	2301      	movs	r3, #1
 8005f42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f383 8810 	msr	PRIMASK, r3
}
 8005f4a:	46c0      	nop			; (mov r8, r8)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	491b      	ldr	r1, [pc, #108]	; (8005fc4 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8005f58:	400a      	ands	r2, r1
 8005f5a:	609a      	str	r2, [r3, #8]
 8005f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f383 8810 	msr	PRIMASK, r3
}
 8005f66:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a17      	ldr	r2, [pc, #92]	; (8005fc8 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8005f6c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8005f72:	61bb      	str	r3, [r7, #24]
  return(result);
 8005f74:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005f76:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f78:	2301      	movs	r3, #1
 8005f7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	f383 8810 	msr	PRIMASK, r3
}
 8005f82:	46c0      	nop			; (mov r8, r8)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2120      	movs	r1, #32
 8005f90:	430a      	orrs	r2, r1
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f96:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	f383 8810 	msr	PRIMASK, r3
}
 8005f9e:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005fa0:	e007      	b.n	8005fb2 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	699a      	ldr	r2, [r3, #24]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2108      	movs	r1, #8
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	619a      	str	r2, [r3, #24]
}
 8005fb2:	46c0      	nop			; (mov r8, r8)
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	b01e      	add	sp, #120	; 0x78
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	46c0      	nop			; (mov r8, r8)
 8005fbc:	fffffeff 	.word	0xfffffeff
 8005fc0:	effffffe 	.word	0xeffffffe
 8005fc4:	efffffff 	.word	0xefffffff
 8005fc8:	08005881 	.word	0x08005881

08005fcc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005fd4:	46c0      	nop			; (mov r8, r8)
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	b002      	add	sp, #8
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005fe4:	46c0      	nop			; (mov r8, r8)
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	b002      	add	sp, #8
 8005fea:	bd80      	pop	{r7, pc}

08005fec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005ff4:	46c0      	nop			; (mov r8, r8)
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	b002      	add	sp, #8
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2284      	movs	r2, #132	; 0x84
 8006008:	5c9b      	ldrb	r3, [r3, r2]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d101      	bne.n	8006012 <HAL_UARTEx_DisableFifoMode+0x16>
 800600e:	2302      	movs	r3, #2
 8006010:	e027      	b.n	8006062 <HAL_UARTEx_DisableFifoMode+0x66>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2284      	movs	r2, #132	; 0x84
 8006016:	2101      	movs	r1, #1
 8006018:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2288      	movs	r2, #136	; 0x88
 800601e:	2124      	movs	r1, #36	; 0x24
 8006020:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2101      	movs	r1, #1
 8006036:	438a      	bics	r2, r1
 8006038:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	4a0b      	ldr	r2, [pc, #44]	; (800606c <HAL_UARTEx_DisableFifoMode+0x70>)
 800603e:	4013      	ands	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2288      	movs	r2, #136	; 0x88
 8006054:	2120      	movs	r1, #32
 8006056:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2284      	movs	r2, #132	; 0x84
 800605c:	2100      	movs	r1, #0
 800605e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	0018      	movs	r0, r3
 8006064:	46bd      	mov	sp, r7
 8006066:	b004      	add	sp, #16
 8006068:	bd80      	pop	{r7, pc}
 800606a:	46c0      	nop			; (mov r8, r8)
 800606c:	dfffffff 	.word	0xdfffffff

08006070 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2284      	movs	r2, #132	; 0x84
 800607e:	5c9b      	ldrb	r3, [r3, r2]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d101      	bne.n	8006088 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006084:	2302      	movs	r3, #2
 8006086:	e02e      	b.n	80060e6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2284      	movs	r2, #132	; 0x84
 800608c:	2101      	movs	r1, #1
 800608e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2288      	movs	r2, #136	; 0x88
 8006094:	2124      	movs	r1, #36	; 0x24
 8006096:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2101      	movs	r1, #1
 80060ac:	438a      	bics	r2, r1
 80060ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	08d9      	lsrs	r1, r3, #3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	0018      	movs	r0, r3
 80060c8:	f000 f8bc 	bl	8006244 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2288      	movs	r2, #136	; 0x88
 80060d8:	2120      	movs	r1, #32
 80060da:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2284      	movs	r2, #132	; 0x84
 80060e0:	2100      	movs	r1, #0
 80060e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	0018      	movs	r0, r3
 80060e8:	46bd      	mov	sp, r7
 80060ea:	b004      	add	sp, #16
 80060ec:	bd80      	pop	{r7, pc}
	...

080060f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2284      	movs	r2, #132	; 0x84
 80060fe:	5c9b      	ldrb	r3, [r3, r2]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d101      	bne.n	8006108 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006104:	2302      	movs	r3, #2
 8006106:	e02f      	b.n	8006168 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2284      	movs	r2, #132	; 0x84
 800610c:	2101      	movs	r1, #1
 800610e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2288      	movs	r2, #136	; 0x88
 8006114:	2124      	movs	r1, #36	; 0x24
 8006116:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2101      	movs	r1, #1
 800612c:	438a      	bics	r2, r1
 800612e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	4a0e      	ldr	r2, [pc, #56]	; (8006170 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006138:	4013      	ands	r3, r2
 800613a:	0019      	movs	r1, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	0018      	movs	r0, r3
 800614a:	f000 f87b 	bl	8006244 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2288      	movs	r2, #136	; 0x88
 800615a:	2120      	movs	r1, #32
 800615c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2284      	movs	r2, #132	; 0x84
 8006162:	2100      	movs	r1, #0
 8006164:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	0018      	movs	r0, r3
 800616a:	46bd      	mov	sp, r7
 800616c:	b004      	add	sp, #16
 800616e:	bd80      	pop	{r7, pc}
 8006170:	f1ffffff 	.word	0xf1ffffff

08006174 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006174:	b5b0      	push	{r4, r5, r7, lr}
 8006176:	b08a      	sub	sp, #40	; 0x28
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	1dbb      	adds	r3, r7, #6
 8006180:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	228c      	movs	r2, #140	; 0x8c
 8006186:	589b      	ldr	r3, [r3, r2]
 8006188:	2b20      	cmp	r3, #32
 800618a:	d156      	bne.n	800623a <HAL_UARTEx_ReceiveToIdle_IT+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8006192:	1dbb      	adds	r3, r7, #6
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e04e      	b.n	800623c <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	689a      	ldr	r2, [r3, #8]
 80061a2:	2380      	movs	r3, #128	; 0x80
 80061a4:	015b      	lsls	r3, r3, #5
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d109      	bne.n	80061be <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d105      	bne.n	80061be <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2201      	movs	r2, #1
 80061b6:	4013      	ands	r3, r2
 80061b8:	d001      	beq.n	80061be <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
      {
        return  HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e03e      	b.n	800623c <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2201      	movs	r2, #1
 80061c2:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80061ca:	2527      	movs	r5, #39	; 0x27
 80061cc:	197c      	adds	r4, r7, r5
 80061ce:	1dbb      	adds	r3, r7, #6
 80061d0:	881a      	ldrh	r2, [r3, #0]
 80061d2:	68b9      	ldr	r1, [r7, #8]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	0018      	movs	r0, r3
 80061d8:	f7ff f8ca 	bl	8005370 <UART_Start_Receive_IT>
 80061dc:	0003      	movs	r3, r0
 80061de:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80061e0:	197b      	adds	r3, r7, r5
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d124      	bne.n	8006232 <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d11c      	bne.n	800622a <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2210      	movs	r2, #16
 80061f6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061f8:	f3ef 8310 	mrs	r3, PRIMASK
 80061fc:	617b      	str	r3, [r7, #20]
  return(result);
 80061fe:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006200:	623b      	str	r3, [r7, #32]
 8006202:	2301      	movs	r3, #1
 8006204:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	f383 8810 	msr	PRIMASK, r3
}
 800620c:	46c0      	nop			; (mov r8, r8)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2110      	movs	r1, #16
 800621a:	430a      	orrs	r2, r1
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	f383 8810 	msr	PRIMASK, r3
}
 8006228:	e003      	b.n	8006232 <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800622a:	2327      	movs	r3, #39	; 0x27
 800622c:	18fb      	adds	r3, r7, r3
 800622e:	2201      	movs	r2, #1
 8006230:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8006232:	2327      	movs	r3, #39	; 0x27
 8006234:	18fb      	adds	r3, r7, r3
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	e000      	b.n	800623c <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800623a:	2302      	movs	r3, #2
  }
}
 800623c:	0018      	movs	r0, r3
 800623e:	46bd      	mov	sp, r7
 8006240:	b00a      	add	sp, #40	; 0x28
 8006242:	bdb0      	pop	{r4, r5, r7, pc}

08006244 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006250:	2b00      	cmp	r3, #0
 8006252:	d108      	bne.n	8006266 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	226a      	movs	r2, #106	; 0x6a
 8006258:	2101      	movs	r1, #1
 800625a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2268      	movs	r2, #104	; 0x68
 8006260:	2101      	movs	r1, #1
 8006262:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006264:	e043      	b.n	80062ee <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006266:	260f      	movs	r6, #15
 8006268:	19bb      	adds	r3, r7, r6
 800626a:	2208      	movs	r2, #8
 800626c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800626e:	200e      	movs	r0, #14
 8006270:	183b      	adds	r3, r7, r0
 8006272:	2208      	movs	r2, #8
 8006274:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	0e5b      	lsrs	r3, r3, #25
 800627e:	b2da      	uxtb	r2, r3
 8006280:	240d      	movs	r4, #13
 8006282:	193b      	adds	r3, r7, r4
 8006284:	2107      	movs	r1, #7
 8006286:	400a      	ands	r2, r1
 8006288:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	0f5b      	lsrs	r3, r3, #29
 8006292:	b2da      	uxtb	r2, r3
 8006294:	250c      	movs	r5, #12
 8006296:	197b      	adds	r3, r7, r5
 8006298:	2107      	movs	r1, #7
 800629a:	400a      	ands	r2, r1
 800629c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800629e:	183b      	adds	r3, r7, r0
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	197a      	adds	r2, r7, r5
 80062a4:	7812      	ldrb	r2, [r2, #0]
 80062a6:	4914      	ldr	r1, [pc, #80]	; (80062f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80062a8:	5c8a      	ldrb	r2, [r1, r2]
 80062aa:	435a      	muls	r2, r3
 80062ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80062ae:	197b      	adds	r3, r7, r5
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	4a12      	ldr	r2, [pc, #72]	; (80062fc <UARTEx_SetNbDataToProcess+0xb8>)
 80062b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062b6:	0019      	movs	r1, r3
 80062b8:	f7f9 ffbe 	bl	8000238 <__divsi3>
 80062bc:	0003      	movs	r3, r0
 80062be:	b299      	uxth	r1, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	226a      	movs	r2, #106	; 0x6a
 80062c4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062c6:	19bb      	adds	r3, r7, r6
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	193a      	adds	r2, r7, r4
 80062cc:	7812      	ldrb	r2, [r2, #0]
 80062ce:	490a      	ldr	r1, [pc, #40]	; (80062f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80062d0:	5c8a      	ldrb	r2, [r1, r2]
 80062d2:	435a      	muls	r2, r3
 80062d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80062d6:	193b      	adds	r3, r7, r4
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	4a08      	ldr	r2, [pc, #32]	; (80062fc <UARTEx_SetNbDataToProcess+0xb8>)
 80062dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062de:	0019      	movs	r1, r3
 80062e0:	f7f9 ffaa 	bl	8000238 <__divsi3>
 80062e4:	0003      	movs	r3, r0
 80062e6:	b299      	uxth	r1, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2268      	movs	r2, #104	; 0x68
 80062ec:	5299      	strh	r1, [r3, r2]
}
 80062ee:	46c0      	nop			; (mov r8, r8)
 80062f0:	46bd      	mov	sp, r7
 80062f2:	b005      	add	sp, #20
 80062f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062f6:	46c0      	nop			; (mov r8, r8)
 80062f8:	08008094 	.word	0x08008094
 80062fc:	0800809c 	.word	0x0800809c

08006300 <__errno>:
 8006300:	4b01      	ldr	r3, [pc, #4]	; (8006308 <__errno+0x8>)
 8006302:	6818      	ldr	r0, [r3, #0]
 8006304:	4770      	bx	lr
 8006306:	46c0      	nop			; (mov r8, r8)
 8006308:	2000040c 	.word	0x2000040c

0800630c <__libc_init_array>:
 800630c:	b570      	push	{r4, r5, r6, lr}
 800630e:	2600      	movs	r6, #0
 8006310:	4d0c      	ldr	r5, [pc, #48]	; (8006344 <__libc_init_array+0x38>)
 8006312:	4c0d      	ldr	r4, [pc, #52]	; (8006348 <__libc_init_array+0x3c>)
 8006314:	1b64      	subs	r4, r4, r5
 8006316:	10a4      	asrs	r4, r4, #2
 8006318:	42a6      	cmp	r6, r4
 800631a:	d109      	bne.n	8006330 <__libc_init_array+0x24>
 800631c:	2600      	movs	r6, #0
 800631e:	f001 fb31 	bl	8007984 <_init>
 8006322:	4d0a      	ldr	r5, [pc, #40]	; (800634c <__libc_init_array+0x40>)
 8006324:	4c0a      	ldr	r4, [pc, #40]	; (8006350 <__libc_init_array+0x44>)
 8006326:	1b64      	subs	r4, r4, r5
 8006328:	10a4      	asrs	r4, r4, #2
 800632a:	42a6      	cmp	r6, r4
 800632c:	d105      	bne.n	800633a <__libc_init_array+0x2e>
 800632e:	bd70      	pop	{r4, r5, r6, pc}
 8006330:	00b3      	lsls	r3, r6, #2
 8006332:	58eb      	ldr	r3, [r5, r3]
 8006334:	4798      	blx	r3
 8006336:	3601      	adds	r6, #1
 8006338:	e7ee      	b.n	8006318 <__libc_init_array+0xc>
 800633a:	00b3      	lsls	r3, r6, #2
 800633c:	58eb      	ldr	r3, [r5, r3]
 800633e:	4798      	blx	r3
 8006340:	3601      	adds	r6, #1
 8006342:	e7f2      	b.n	800632a <__libc_init_array+0x1e>
 8006344:	0800813c 	.word	0x0800813c
 8006348:	0800813c 	.word	0x0800813c
 800634c:	0800813c 	.word	0x0800813c
 8006350:	08008140 	.word	0x08008140

08006354 <memcpy>:
 8006354:	2300      	movs	r3, #0
 8006356:	b510      	push	{r4, lr}
 8006358:	429a      	cmp	r2, r3
 800635a:	d100      	bne.n	800635e <memcpy+0xa>
 800635c:	bd10      	pop	{r4, pc}
 800635e:	5ccc      	ldrb	r4, [r1, r3]
 8006360:	54c4      	strb	r4, [r0, r3]
 8006362:	3301      	adds	r3, #1
 8006364:	e7f8      	b.n	8006358 <memcpy+0x4>

08006366 <memset>:
 8006366:	0003      	movs	r3, r0
 8006368:	1882      	adds	r2, r0, r2
 800636a:	4293      	cmp	r3, r2
 800636c:	d100      	bne.n	8006370 <memset+0xa>
 800636e:	4770      	bx	lr
 8006370:	7019      	strb	r1, [r3, #0]
 8006372:	3301      	adds	r3, #1
 8006374:	e7f9      	b.n	800636a <memset+0x4>
	...

08006378 <iprintf>:
 8006378:	b40f      	push	{r0, r1, r2, r3}
 800637a:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <iprintf+0x30>)
 800637c:	b513      	push	{r0, r1, r4, lr}
 800637e:	681c      	ldr	r4, [r3, #0]
 8006380:	2c00      	cmp	r4, #0
 8006382:	d005      	beq.n	8006390 <iprintf+0x18>
 8006384:	69a3      	ldr	r3, [r4, #24]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d102      	bne.n	8006390 <iprintf+0x18>
 800638a:	0020      	movs	r0, r4
 800638c:	f000 fb82 	bl	8006a94 <__sinit>
 8006390:	ab05      	add	r3, sp, #20
 8006392:	0020      	movs	r0, r4
 8006394:	9a04      	ldr	r2, [sp, #16]
 8006396:	68a1      	ldr	r1, [r4, #8]
 8006398:	9301      	str	r3, [sp, #4]
 800639a:	f000 ff01 	bl	80071a0 <_vfiprintf_r>
 800639e:	bc16      	pop	{r1, r2, r4}
 80063a0:	bc08      	pop	{r3}
 80063a2:	b004      	add	sp, #16
 80063a4:	4718      	bx	r3
 80063a6:	46c0      	nop			; (mov r8, r8)
 80063a8:	2000040c 	.word	0x2000040c

080063ac <_puts_r>:
 80063ac:	b570      	push	{r4, r5, r6, lr}
 80063ae:	0005      	movs	r5, r0
 80063b0:	000e      	movs	r6, r1
 80063b2:	2800      	cmp	r0, #0
 80063b4:	d004      	beq.n	80063c0 <_puts_r+0x14>
 80063b6:	6983      	ldr	r3, [r0, #24]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <_puts_r+0x14>
 80063bc:	f000 fb6a 	bl	8006a94 <__sinit>
 80063c0:	69ab      	ldr	r3, [r5, #24]
 80063c2:	68ac      	ldr	r4, [r5, #8]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d102      	bne.n	80063ce <_puts_r+0x22>
 80063c8:	0028      	movs	r0, r5
 80063ca:	f000 fb63 	bl	8006a94 <__sinit>
 80063ce:	4b2d      	ldr	r3, [pc, #180]	; (8006484 <_puts_r+0xd8>)
 80063d0:	429c      	cmp	r4, r3
 80063d2:	d122      	bne.n	800641a <_puts_r+0x6e>
 80063d4:	686c      	ldr	r4, [r5, #4]
 80063d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063d8:	07db      	lsls	r3, r3, #31
 80063da:	d405      	bmi.n	80063e8 <_puts_r+0x3c>
 80063dc:	89a3      	ldrh	r3, [r4, #12]
 80063de:	059b      	lsls	r3, r3, #22
 80063e0:	d402      	bmi.n	80063e8 <_puts_r+0x3c>
 80063e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063e4:	f000 fbf7 	bl	8006bd6 <__retarget_lock_acquire_recursive>
 80063e8:	89a3      	ldrh	r3, [r4, #12]
 80063ea:	071b      	lsls	r3, r3, #28
 80063ec:	d502      	bpl.n	80063f4 <_puts_r+0x48>
 80063ee:	6923      	ldr	r3, [r4, #16]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d129      	bne.n	8006448 <_puts_r+0x9c>
 80063f4:	0021      	movs	r1, r4
 80063f6:	0028      	movs	r0, r5
 80063f8:	f000 f9a6 	bl	8006748 <__swsetup_r>
 80063fc:	2800      	cmp	r0, #0
 80063fe:	d023      	beq.n	8006448 <_puts_r+0x9c>
 8006400:	2501      	movs	r5, #1
 8006402:	426d      	negs	r5, r5
 8006404:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006406:	07db      	lsls	r3, r3, #31
 8006408:	d405      	bmi.n	8006416 <_puts_r+0x6a>
 800640a:	89a3      	ldrh	r3, [r4, #12]
 800640c:	059b      	lsls	r3, r3, #22
 800640e:	d402      	bmi.n	8006416 <_puts_r+0x6a>
 8006410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006412:	f000 fbe1 	bl	8006bd8 <__retarget_lock_release_recursive>
 8006416:	0028      	movs	r0, r5
 8006418:	bd70      	pop	{r4, r5, r6, pc}
 800641a:	4b1b      	ldr	r3, [pc, #108]	; (8006488 <_puts_r+0xdc>)
 800641c:	429c      	cmp	r4, r3
 800641e:	d101      	bne.n	8006424 <_puts_r+0x78>
 8006420:	68ac      	ldr	r4, [r5, #8]
 8006422:	e7d8      	b.n	80063d6 <_puts_r+0x2a>
 8006424:	4b19      	ldr	r3, [pc, #100]	; (800648c <_puts_r+0xe0>)
 8006426:	429c      	cmp	r4, r3
 8006428:	d1d5      	bne.n	80063d6 <_puts_r+0x2a>
 800642a:	68ec      	ldr	r4, [r5, #12]
 800642c:	e7d3      	b.n	80063d6 <_puts_r+0x2a>
 800642e:	3601      	adds	r6, #1
 8006430:	60a3      	str	r3, [r4, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	da04      	bge.n	8006440 <_puts_r+0x94>
 8006436:	69a2      	ldr	r2, [r4, #24]
 8006438:	429a      	cmp	r2, r3
 800643a:	dc16      	bgt.n	800646a <_puts_r+0xbe>
 800643c:	290a      	cmp	r1, #10
 800643e:	d014      	beq.n	800646a <_puts_r+0xbe>
 8006440:	6823      	ldr	r3, [r4, #0]
 8006442:	1c5a      	adds	r2, r3, #1
 8006444:	6022      	str	r2, [r4, #0]
 8006446:	7019      	strb	r1, [r3, #0]
 8006448:	68a3      	ldr	r3, [r4, #8]
 800644a:	7831      	ldrb	r1, [r6, #0]
 800644c:	3b01      	subs	r3, #1
 800644e:	2900      	cmp	r1, #0
 8006450:	d1ed      	bne.n	800642e <_puts_r+0x82>
 8006452:	60a3      	str	r3, [r4, #8]
 8006454:	2b00      	cmp	r3, #0
 8006456:	da0f      	bge.n	8006478 <_puts_r+0xcc>
 8006458:	0028      	movs	r0, r5
 800645a:	0022      	movs	r2, r4
 800645c:	310a      	adds	r1, #10
 800645e:	f000 f91d 	bl	800669c <__swbuf_r>
 8006462:	250a      	movs	r5, #10
 8006464:	1c43      	adds	r3, r0, #1
 8006466:	d1cd      	bne.n	8006404 <_puts_r+0x58>
 8006468:	e7ca      	b.n	8006400 <_puts_r+0x54>
 800646a:	0022      	movs	r2, r4
 800646c:	0028      	movs	r0, r5
 800646e:	f000 f915 	bl	800669c <__swbuf_r>
 8006472:	1c43      	adds	r3, r0, #1
 8006474:	d1e8      	bne.n	8006448 <_puts_r+0x9c>
 8006476:	e7c3      	b.n	8006400 <_puts_r+0x54>
 8006478:	250a      	movs	r5, #10
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	1c5a      	adds	r2, r3, #1
 800647e:	6022      	str	r2, [r4, #0]
 8006480:	701d      	strb	r5, [r3, #0]
 8006482:	e7bf      	b.n	8006404 <_puts_r+0x58>
 8006484:	080080c8 	.word	0x080080c8
 8006488:	080080e8 	.word	0x080080e8
 800648c:	080080a8 	.word	0x080080a8

08006490 <puts>:
 8006490:	b510      	push	{r4, lr}
 8006492:	4b03      	ldr	r3, [pc, #12]	; (80064a0 <puts+0x10>)
 8006494:	0001      	movs	r1, r0
 8006496:	6818      	ldr	r0, [r3, #0]
 8006498:	f7ff ff88 	bl	80063ac <_puts_r>
 800649c:	bd10      	pop	{r4, pc}
 800649e:	46c0      	nop			; (mov r8, r8)
 80064a0:	2000040c 	.word	0x2000040c

080064a4 <setvbuf>:
 80064a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064a6:	001d      	movs	r5, r3
 80064a8:	4b5d      	ldr	r3, [pc, #372]	; (8006620 <setvbuf+0x17c>)
 80064aa:	b085      	sub	sp, #20
 80064ac:	681e      	ldr	r6, [r3, #0]
 80064ae:	0004      	movs	r4, r0
 80064b0:	000f      	movs	r7, r1
 80064b2:	9200      	str	r2, [sp, #0]
 80064b4:	2e00      	cmp	r6, #0
 80064b6:	d005      	beq.n	80064c4 <setvbuf+0x20>
 80064b8:	69b3      	ldr	r3, [r6, #24]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d102      	bne.n	80064c4 <setvbuf+0x20>
 80064be:	0030      	movs	r0, r6
 80064c0:	f000 fae8 	bl	8006a94 <__sinit>
 80064c4:	4b57      	ldr	r3, [pc, #348]	; (8006624 <setvbuf+0x180>)
 80064c6:	429c      	cmp	r4, r3
 80064c8:	d161      	bne.n	800658e <setvbuf+0xea>
 80064ca:	6874      	ldr	r4, [r6, #4]
 80064cc:	9b00      	ldr	r3, [sp, #0]
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d005      	beq.n	80064de <setvbuf+0x3a>
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d900      	bls.n	80064d8 <setvbuf+0x34>
 80064d6:	e09d      	b.n	8006614 <setvbuf+0x170>
 80064d8:	2d00      	cmp	r5, #0
 80064da:	da00      	bge.n	80064de <setvbuf+0x3a>
 80064dc:	e09a      	b.n	8006614 <setvbuf+0x170>
 80064de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064e0:	07db      	lsls	r3, r3, #31
 80064e2:	d405      	bmi.n	80064f0 <setvbuf+0x4c>
 80064e4:	89a3      	ldrh	r3, [r4, #12]
 80064e6:	059b      	lsls	r3, r3, #22
 80064e8:	d402      	bmi.n	80064f0 <setvbuf+0x4c>
 80064ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064ec:	f000 fb73 	bl	8006bd6 <__retarget_lock_acquire_recursive>
 80064f0:	0021      	movs	r1, r4
 80064f2:	0030      	movs	r0, r6
 80064f4:	f000 fa2c 	bl	8006950 <_fflush_r>
 80064f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064fa:	2900      	cmp	r1, #0
 80064fc:	d008      	beq.n	8006510 <setvbuf+0x6c>
 80064fe:	0023      	movs	r3, r4
 8006500:	3344      	adds	r3, #68	; 0x44
 8006502:	4299      	cmp	r1, r3
 8006504:	d002      	beq.n	800650c <setvbuf+0x68>
 8006506:	0030      	movs	r0, r6
 8006508:	f000 fbde 	bl	8006cc8 <_free_r>
 800650c:	2300      	movs	r3, #0
 800650e:	6363      	str	r3, [r4, #52]	; 0x34
 8006510:	2300      	movs	r3, #0
 8006512:	61a3      	str	r3, [r4, #24]
 8006514:	6063      	str	r3, [r4, #4]
 8006516:	89a3      	ldrh	r3, [r4, #12]
 8006518:	061b      	lsls	r3, r3, #24
 800651a:	d503      	bpl.n	8006524 <setvbuf+0x80>
 800651c:	0030      	movs	r0, r6
 800651e:	6921      	ldr	r1, [r4, #16]
 8006520:	f000 fbd2 	bl	8006cc8 <_free_r>
 8006524:	89a3      	ldrh	r3, [r4, #12]
 8006526:	4a40      	ldr	r2, [pc, #256]	; (8006628 <setvbuf+0x184>)
 8006528:	4013      	ands	r3, r2
 800652a:	81a3      	strh	r3, [r4, #12]
 800652c:	9b00      	ldr	r3, [sp, #0]
 800652e:	2b02      	cmp	r3, #2
 8006530:	d100      	bne.n	8006534 <setvbuf+0x90>
 8006532:	e069      	b.n	8006608 <setvbuf+0x164>
 8006534:	ab03      	add	r3, sp, #12
 8006536:	0021      	movs	r1, r4
 8006538:	0030      	movs	r0, r6
 800653a:	aa02      	add	r2, sp, #8
 800653c:	f000 fb4e 	bl	8006bdc <__swhatbuf_r>
 8006540:	89a3      	ldrh	r3, [r4, #12]
 8006542:	4303      	orrs	r3, r0
 8006544:	81a3      	strh	r3, [r4, #12]
 8006546:	2d00      	cmp	r5, #0
 8006548:	d12b      	bne.n	80065a2 <setvbuf+0xfe>
 800654a:	9d02      	ldr	r5, [sp, #8]
 800654c:	0028      	movs	r0, r5
 800654e:	f000 fbb1 	bl	8006cb4 <malloc>
 8006552:	1e07      	subs	r7, r0, #0
 8006554:	d153      	bne.n	80065fe <setvbuf+0x15a>
 8006556:	9b02      	ldr	r3, [sp, #8]
 8006558:	9301      	str	r3, [sp, #4]
 800655a:	42ab      	cmp	r3, r5
 800655c:	d149      	bne.n	80065f2 <setvbuf+0x14e>
 800655e:	2501      	movs	r5, #1
 8006560:	426d      	negs	r5, r5
 8006562:	2302      	movs	r3, #2
 8006564:	89a2      	ldrh	r2, [r4, #12]
 8006566:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006568:	4313      	orrs	r3, r2
 800656a:	2200      	movs	r2, #0
 800656c:	60a2      	str	r2, [r4, #8]
 800656e:	0022      	movs	r2, r4
 8006570:	3247      	adds	r2, #71	; 0x47
 8006572:	6022      	str	r2, [r4, #0]
 8006574:	6122      	str	r2, [r4, #16]
 8006576:	2201      	movs	r2, #1
 8006578:	b21b      	sxth	r3, r3
 800657a:	81a3      	strh	r3, [r4, #12]
 800657c:	6162      	str	r2, [r4, #20]
 800657e:	4211      	tst	r1, r2
 8006580:	d134      	bne.n	80065ec <setvbuf+0x148>
 8006582:	059b      	lsls	r3, r3, #22
 8006584:	d432      	bmi.n	80065ec <setvbuf+0x148>
 8006586:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006588:	f000 fb26 	bl	8006bd8 <__retarget_lock_release_recursive>
 800658c:	e02e      	b.n	80065ec <setvbuf+0x148>
 800658e:	4b27      	ldr	r3, [pc, #156]	; (800662c <setvbuf+0x188>)
 8006590:	429c      	cmp	r4, r3
 8006592:	d101      	bne.n	8006598 <setvbuf+0xf4>
 8006594:	68b4      	ldr	r4, [r6, #8]
 8006596:	e799      	b.n	80064cc <setvbuf+0x28>
 8006598:	4b25      	ldr	r3, [pc, #148]	; (8006630 <setvbuf+0x18c>)
 800659a:	429c      	cmp	r4, r3
 800659c:	d196      	bne.n	80064cc <setvbuf+0x28>
 800659e:	68f4      	ldr	r4, [r6, #12]
 80065a0:	e794      	b.n	80064cc <setvbuf+0x28>
 80065a2:	2f00      	cmp	r7, #0
 80065a4:	d0d2      	beq.n	800654c <setvbuf+0xa8>
 80065a6:	69b3      	ldr	r3, [r6, #24]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d102      	bne.n	80065b2 <setvbuf+0x10e>
 80065ac:	0030      	movs	r0, r6
 80065ae:	f000 fa71 	bl	8006a94 <__sinit>
 80065b2:	9b00      	ldr	r3, [sp, #0]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d102      	bne.n	80065be <setvbuf+0x11a>
 80065b8:	89a2      	ldrh	r2, [r4, #12]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	81a3      	strh	r3, [r4, #12]
 80065be:	89a2      	ldrh	r2, [r4, #12]
 80065c0:	2308      	movs	r3, #8
 80065c2:	0011      	movs	r1, r2
 80065c4:	6027      	str	r7, [r4, #0]
 80065c6:	6127      	str	r7, [r4, #16]
 80065c8:	6165      	str	r5, [r4, #20]
 80065ca:	4019      	ands	r1, r3
 80065cc:	421a      	tst	r2, r3
 80065ce:	d01f      	beq.n	8006610 <setvbuf+0x16c>
 80065d0:	07d3      	lsls	r3, r2, #31
 80065d2:	d51b      	bpl.n	800660c <setvbuf+0x168>
 80065d4:	2300      	movs	r3, #0
 80065d6:	426d      	negs	r5, r5
 80065d8:	60a3      	str	r3, [r4, #8]
 80065da:	61a5      	str	r5, [r4, #24]
 80065dc:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80065de:	2301      	movs	r3, #1
 80065e0:	000d      	movs	r5, r1
 80065e2:	401d      	ands	r5, r3
 80065e4:	4219      	tst	r1, r3
 80065e6:	d118      	bne.n	800661a <setvbuf+0x176>
 80065e8:	0593      	lsls	r3, r2, #22
 80065ea:	d5cc      	bpl.n	8006586 <setvbuf+0xe2>
 80065ec:	0028      	movs	r0, r5
 80065ee:	b005      	add	sp, #20
 80065f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065f2:	9801      	ldr	r0, [sp, #4]
 80065f4:	f000 fb5e 	bl	8006cb4 <malloc>
 80065f8:	9d01      	ldr	r5, [sp, #4]
 80065fa:	1e07      	subs	r7, r0, #0
 80065fc:	d0af      	beq.n	800655e <setvbuf+0xba>
 80065fe:	2380      	movs	r3, #128	; 0x80
 8006600:	89a2      	ldrh	r2, [r4, #12]
 8006602:	4313      	orrs	r3, r2
 8006604:	81a3      	strh	r3, [r4, #12]
 8006606:	e7ce      	b.n	80065a6 <setvbuf+0x102>
 8006608:	2500      	movs	r5, #0
 800660a:	e7aa      	b.n	8006562 <setvbuf+0xbe>
 800660c:	60a5      	str	r5, [r4, #8]
 800660e:	e7e5      	b.n	80065dc <setvbuf+0x138>
 8006610:	60a1      	str	r1, [r4, #8]
 8006612:	e7e3      	b.n	80065dc <setvbuf+0x138>
 8006614:	2501      	movs	r5, #1
 8006616:	426d      	negs	r5, r5
 8006618:	e7e8      	b.n	80065ec <setvbuf+0x148>
 800661a:	2500      	movs	r5, #0
 800661c:	e7e6      	b.n	80065ec <setvbuf+0x148>
 800661e:	46c0      	nop			; (mov r8, r8)
 8006620:	2000040c 	.word	0x2000040c
 8006624:	080080c8 	.word	0x080080c8
 8006628:	fffff35c 	.word	0xfffff35c
 800662c:	080080e8 	.word	0x080080e8
 8006630:	080080a8 	.word	0x080080a8

08006634 <sniprintf>:
 8006634:	b40c      	push	{r2, r3}
 8006636:	b530      	push	{r4, r5, lr}
 8006638:	4b17      	ldr	r3, [pc, #92]	; (8006698 <sniprintf+0x64>)
 800663a:	000c      	movs	r4, r1
 800663c:	681d      	ldr	r5, [r3, #0]
 800663e:	b09d      	sub	sp, #116	; 0x74
 8006640:	2900      	cmp	r1, #0
 8006642:	da08      	bge.n	8006656 <sniprintf+0x22>
 8006644:	238b      	movs	r3, #139	; 0x8b
 8006646:	2001      	movs	r0, #1
 8006648:	602b      	str	r3, [r5, #0]
 800664a:	4240      	negs	r0, r0
 800664c:	b01d      	add	sp, #116	; 0x74
 800664e:	bc30      	pop	{r4, r5}
 8006650:	bc08      	pop	{r3}
 8006652:	b002      	add	sp, #8
 8006654:	4718      	bx	r3
 8006656:	2382      	movs	r3, #130	; 0x82
 8006658:	466a      	mov	r2, sp
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	8293      	strh	r3, [r2, #20]
 800665e:	2300      	movs	r3, #0
 8006660:	9002      	str	r0, [sp, #8]
 8006662:	9006      	str	r0, [sp, #24]
 8006664:	4299      	cmp	r1, r3
 8006666:	d000      	beq.n	800666a <sniprintf+0x36>
 8006668:	1e4b      	subs	r3, r1, #1
 800666a:	9304      	str	r3, [sp, #16]
 800666c:	9307      	str	r3, [sp, #28]
 800666e:	2301      	movs	r3, #1
 8006670:	466a      	mov	r2, sp
 8006672:	425b      	negs	r3, r3
 8006674:	82d3      	strh	r3, [r2, #22]
 8006676:	0028      	movs	r0, r5
 8006678:	ab21      	add	r3, sp, #132	; 0x84
 800667a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800667c:	a902      	add	r1, sp, #8
 800667e:	9301      	str	r3, [sp, #4]
 8006680:	f000 fc66 	bl	8006f50 <_svfiprintf_r>
 8006684:	1c43      	adds	r3, r0, #1
 8006686:	da01      	bge.n	800668c <sniprintf+0x58>
 8006688:	238b      	movs	r3, #139	; 0x8b
 800668a:	602b      	str	r3, [r5, #0]
 800668c:	2c00      	cmp	r4, #0
 800668e:	d0dd      	beq.n	800664c <sniprintf+0x18>
 8006690:	2300      	movs	r3, #0
 8006692:	9a02      	ldr	r2, [sp, #8]
 8006694:	7013      	strb	r3, [r2, #0]
 8006696:	e7d9      	b.n	800664c <sniprintf+0x18>
 8006698:	2000040c 	.word	0x2000040c

0800669c <__swbuf_r>:
 800669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669e:	0005      	movs	r5, r0
 80066a0:	000e      	movs	r6, r1
 80066a2:	0014      	movs	r4, r2
 80066a4:	2800      	cmp	r0, #0
 80066a6:	d004      	beq.n	80066b2 <__swbuf_r+0x16>
 80066a8:	6983      	ldr	r3, [r0, #24]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <__swbuf_r+0x16>
 80066ae:	f000 f9f1 	bl	8006a94 <__sinit>
 80066b2:	4b22      	ldr	r3, [pc, #136]	; (800673c <__swbuf_r+0xa0>)
 80066b4:	429c      	cmp	r4, r3
 80066b6:	d12e      	bne.n	8006716 <__swbuf_r+0x7a>
 80066b8:	686c      	ldr	r4, [r5, #4]
 80066ba:	69a3      	ldr	r3, [r4, #24]
 80066bc:	60a3      	str	r3, [r4, #8]
 80066be:	89a3      	ldrh	r3, [r4, #12]
 80066c0:	071b      	lsls	r3, r3, #28
 80066c2:	d532      	bpl.n	800672a <__swbuf_r+0x8e>
 80066c4:	6923      	ldr	r3, [r4, #16]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d02f      	beq.n	800672a <__swbuf_r+0x8e>
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	6922      	ldr	r2, [r4, #16]
 80066ce:	b2f7      	uxtb	r7, r6
 80066d0:	1a98      	subs	r0, r3, r2
 80066d2:	6963      	ldr	r3, [r4, #20]
 80066d4:	b2f6      	uxtb	r6, r6
 80066d6:	4283      	cmp	r3, r0
 80066d8:	dc05      	bgt.n	80066e6 <__swbuf_r+0x4a>
 80066da:	0021      	movs	r1, r4
 80066dc:	0028      	movs	r0, r5
 80066de:	f000 f937 	bl	8006950 <_fflush_r>
 80066e2:	2800      	cmp	r0, #0
 80066e4:	d127      	bne.n	8006736 <__swbuf_r+0x9a>
 80066e6:	68a3      	ldr	r3, [r4, #8]
 80066e8:	3001      	adds	r0, #1
 80066ea:	3b01      	subs	r3, #1
 80066ec:	60a3      	str	r3, [r4, #8]
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	6022      	str	r2, [r4, #0]
 80066f4:	701f      	strb	r7, [r3, #0]
 80066f6:	6963      	ldr	r3, [r4, #20]
 80066f8:	4283      	cmp	r3, r0
 80066fa:	d004      	beq.n	8006706 <__swbuf_r+0x6a>
 80066fc:	89a3      	ldrh	r3, [r4, #12]
 80066fe:	07db      	lsls	r3, r3, #31
 8006700:	d507      	bpl.n	8006712 <__swbuf_r+0x76>
 8006702:	2e0a      	cmp	r6, #10
 8006704:	d105      	bne.n	8006712 <__swbuf_r+0x76>
 8006706:	0021      	movs	r1, r4
 8006708:	0028      	movs	r0, r5
 800670a:	f000 f921 	bl	8006950 <_fflush_r>
 800670e:	2800      	cmp	r0, #0
 8006710:	d111      	bne.n	8006736 <__swbuf_r+0x9a>
 8006712:	0030      	movs	r0, r6
 8006714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006716:	4b0a      	ldr	r3, [pc, #40]	; (8006740 <__swbuf_r+0xa4>)
 8006718:	429c      	cmp	r4, r3
 800671a:	d101      	bne.n	8006720 <__swbuf_r+0x84>
 800671c:	68ac      	ldr	r4, [r5, #8]
 800671e:	e7cc      	b.n	80066ba <__swbuf_r+0x1e>
 8006720:	4b08      	ldr	r3, [pc, #32]	; (8006744 <__swbuf_r+0xa8>)
 8006722:	429c      	cmp	r4, r3
 8006724:	d1c9      	bne.n	80066ba <__swbuf_r+0x1e>
 8006726:	68ec      	ldr	r4, [r5, #12]
 8006728:	e7c7      	b.n	80066ba <__swbuf_r+0x1e>
 800672a:	0021      	movs	r1, r4
 800672c:	0028      	movs	r0, r5
 800672e:	f000 f80b 	bl	8006748 <__swsetup_r>
 8006732:	2800      	cmp	r0, #0
 8006734:	d0c9      	beq.n	80066ca <__swbuf_r+0x2e>
 8006736:	2601      	movs	r6, #1
 8006738:	4276      	negs	r6, r6
 800673a:	e7ea      	b.n	8006712 <__swbuf_r+0x76>
 800673c:	080080c8 	.word	0x080080c8
 8006740:	080080e8 	.word	0x080080e8
 8006744:	080080a8 	.word	0x080080a8

08006748 <__swsetup_r>:
 8006748:	4b37      	ldr	r3, [pc, #220]	; (8006828 <__swsetup_r+0xe0>)
 800674a:	b570      	push	{r4, r5, r6, lr}
 800674c:	681d      	ldr	r5, [r3, #0]
 800674e:	0006      	movs	r6, r0
 8006750:	000c      	movs	r4, r1
 8006752:	2d00      	cmp	r5, #0
 8006754:	d005      	beq.n	8006762 <__swsetup_r+0x1a>
 8006756:	69ab      	ldr	r3, [r5, #24]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d102      	bne.n	8006762 <__swsetup_r+0x1a>
 800675c:	0028      	movs	r0, r5
 800675e:	f000 f999 	bl	8006a94 <__sinit>
 8006762:	4b32      	ldr	r3, [pc, #200]	; (800682c <__swsetup_r+0xe4>)
 8006764:	429c      	cmp	r4, r3
 8006766:	d10f      	bne.n	8006788 <__swsetup_r+0x40>
 8006768:	686c      	ldr	r4, [r5, #4]
 800676a:	230c      	movs	r3, #12
 800676c:	5ee2      	ldrsh	r2, [r4, r3]
 800676e:	b293      	uxth	r3, r2
 8006770:	0711      	lsls	r1, r2, #28
 8006772:	d42d      	bmi.n	80067d0 <__swsetup_r+0x88>
 8006774:	06d9      	lsls	r1, r3, #27
 8006776:	d411      	bmi.n	800679c <__swsetup_r+0x54>
 8006778:	2309      	movs	r3, #9
 800677a:	2001      	movs	r0, #1
 800677c:	6033      	str	r3, [r6, #0]
 800677e:	3337      	adds	r3, #55	; 0x37
 8006780:	4313      	orrs	r3, r2
 8006782:	81a3      	strh	r3, [r4, #12]
 8006784:	4240      	negs	r0, r0
 8006786:	bd70      	pop	{r4, r5, r6, pc}
 8006788:	4b29      	ldr	r3, [pc, #164]	; (8006830 <__swsetup_r+0xe8>)
 800678a:	429c      	cmp	r4, r3
 800678c:	d101      	bne.n	8006792 <__swsetup_r+0x4a>
 800678e:	68ac      	ldr	r4, [r5, #8]
 8006790:	e7eb      	b.n	800676a <__swsetup_r+0x22>
 8006792:	4b28      	ldr	r3, [pc, #160]	; (8006834 <__swsetup_r+0xec>)
 8006794:	429c      	cmp	r4, r3
 8006796:	d1e8      	bne.n	800676a <__swsetup_r+0x22>
 8006798:	68ec      	ldr	r4, [r5, #12]
 800679a:	e7e6      	b.n	800676a <__swsetup_r+0x22>
 800679c:	075b      	lsls	r3, r3, #29
 800679e:	d513      	bpl.n	80067c8 <__swsetup_r+0x80>
 80067a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067a2:	2900      	cmp	r1, #0
 80067a4:	d008      	beq.n	80067b8 <__swsetup_r+0x70>
 80067a6:	0023      	movs	r3, r4
 80067a8:	3344      	adds	r3, #68	; 0x44
 80067aa:	4299      	cmp	r1, r3
 80067ac:	d002      	beq.n	80067b4 <__swsetup_r+0x6c>
 80067ae:	0030      	movs	r0, r6
 80067b0:	f000 fa8a 	bl	8006cc8 <_free_r>
 80067b4:	2300      	movs	r3, #0
 80067b6:	6363      	str	r3, [r4, #52]	; 0x34
 80067b8:	2224      	movs	r2, #36	; 0x24
 80067ba:	89a3      	ldrh	r3, [r4, #12]
 80067bc:	4393      	bics	r3, r2
 80067be:	81a3      	strh	r3, [r4, #12]
 80067c0:	2300      	movs	r3, #0
 80067c2:	6063      	str	r3, [r4, #4]
 80067c4:	6923      	ldr	r3, [r4, #16]
 80067c6:	6023      	str	r3, [r4, #0]
 80067c8:	2308      	movs	r3, #8
 80067ca:	89a2      	ldrh	r2, [r4, #12]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	81a3      	strh	r3, [r4, #12]
 80067d0:	6923      	ldr	r3, [r4, #16]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10b      	bne.n	80067ee <__swsetup_r+0xa6>
 80067d6:	21a0      	movs	r1, #160	; 0xa0
 80067d8:	2280      	movs	r2, #128	; 0x80
 80067da:	89a3      	ldrh	r3, [r4, #12]
 80067dc:	0089      	lsls	r1, r1, #2
 80067de:	0092      	lsls	r2, r2, #2
 80067e0:	400b      	ands	r3, r1
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d003      	beq.n	80067ee <__swsetup_r+0xa6>
 80067e6:	0021      	movs	r1, r4
 80067e8:	0030      	movs	r0, r6
 80067ea:	f000 fa1f 	bl	8006c2c <__smakebuf_r>
 80067ee:	220c      	movs	r2, #12
 80067f0:	5ea3      	ldrsh	r3, [r4, r2]
 80067f2:	2001      	movs	r0, #1
 80067f4:	001a      	movs	r2, r3
 80067f6:	b299      	uxth	r1, r3
 80067f8:	4002      	ands	r2, r0
 80067fa:	4203      	tst	r3, r0
 80067fc:	d00f      	beq.n	800681e <__swsetup_r+0xd6>
 80067fe:	2200      	movs	r2, #0
 8006800:	60a2      	str	r2, [r4, #8]
 8006802:	6962      	ldr	r2, [r4, #20]
 8006804:	4252      	negs	r2, r2
 8006806:	61a2      	str	r2, [r4, #24]
 8006808:	2000      	movs	r0, #0
 800680a:	6922      	ldr	r2, [r4, #16]
 800680c:	4282      	cmp	r2, r0
 800680e:	d1ba      	bne.n	8006786 <__swsetup_r+0x3e>
 8006810:	060a      	lsls	r2, r1, #24
 8006812:	d5b8      	bpl.n	8006786 <__swsetup_r+0x3e>
 8006814:	2240      	movs	r2, #64	; 0x40
 8006816:	4313      	orrs	r3, r2
 8006818:	81a3      	strh	r3, [r4, #12]
 800681a:	3801      	subs	r0, #1
 800681c:	e7b3      	b.n	8006786 <__swsetup_r+0x3e>
 800681e:	0788      	lsls	r0, r1, #30
 8006820:	d400      	bmi.n	8006824 <__swsetup_r+0xdc>
 8006822:	6962      	ldr	r2, [r4, #20]
 8006824:	60a2      	str	r2, [r4, #8]
 8006826:	e7ef      	b.n	8006808 <__swsetup_r+0xc0>
 8006828:	2000040c 	.word	0x2000040c
 800682c:	080080c8 	.word	0x080080c8
 8006830:	080080e8 	.word	0x080080e8
 8006834:	080080a8 	.word	0x080080a8

08006838 <__sflush_r>:
 8006838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800683a:	898b      	ldrh	r3, [r1, #12]
 800683c:	0005      	movs	r5, r0
 800683e:	000c      	movs	r4, r1
 8006840:	071a      	lsls	r2, r3, #28
 8006842:	d45f      	bmi.n	8006904 <__sflush_r+0xcc>
 8006844:	684a      	ldr	r2, [r1, #4]
 8006846:	2a00      	cmp	r2, #0
 8006848:	dc04      	bgt.n	8006854 <__sflush_r+0x1c>
 800684a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800684c:	2a00      	cmp	r2, #0
 800684e:	dc01      	bgt.n	8006854 <__sflush_r+0x1c>
 8006850:	2000      	movs	r0, #0
 8006852:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006854:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006856:	2f00      	cmp	r7, #0
 8006858:	d0fa      	beq.n	8006850 <__sflush_r+0x18>
 800685a:	2200      	movs	r2, #0
 800685c:	2180      	movs	r1, #128	; 0x80
 800685e:	682e      	ldr	r6, [r5, #0]
 8006860:	602a      	str	r2, [r5, #0]
 8006862:	001a      	movs	r2, r3
 8006864:	0149      	lsls	r1, r1, #5
 8006866:	400a      	ands	r2, r1
 8006868:	420b      	tst	r3, r1
 800686a:	d034      	beq.n	80068d6 <__sflush_r+0x9e>
 800686c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800686e:	89a3      	ldrh	r3, [r4, #12]
 8006870:	075b      	lsls	r3, r3, #29
 8006872:	d506      	bpl.n	8006882 <__sflush_r+0x4a>
 8006874:	6863      	ldr	r3, [r4, #4]
 8006876:	1ac0      	subs	r0, r0, r3
 8006878:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <__sflush_r+0x4a>
 800687e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006880:	1ac0      	subs	r0, r0, r3
 8006882:	0002      	movs	r2, r0
 8006884:	6a21      	ldr	r1, [r4, #32]
 8006886:	2300      	movs	r3, #0
 8006888:	0028      	movs	r0, r5
 800688a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800688c:	47b8      	blx	r7
 800688e:	89a1      	ldrh	r1, [r4, #12]
 8006890:	1c43      	adds	r3, r0, #1
 8006892:	d106      	bne.n	80068a2 <__sflush_r+0x6a>
 8006894:	682b      	ldr	r3, [r5, #0]
 8006896:	2b1d      	cmp	r3, #29
 8006898:	d831      	bhi.n	80068fe <__sflush_r+0xc6>
 800689a:	4a2c      	ldr	r2, [pc, #176]	; (800694c <__sflush_r+0x114>)
 800689c:	40da      	lsrs	r2, r3
 800689e:	07d3      	lsls	r3, r2, #31
 80068a0:	d52d      	bpl.n	80068fe <__sflush_r+0xc6>
 80068a2:	2300      	movs	r3, #0
 80068a4:	6063      	str	r3, [r4, #4]
 80068a6:	6923      	ldr	r3, [r4, #16]
 80068a8:	6023      	str	r3, [r4, #0]
 80068aa:	04cb      	lsls	r3, r1, #19
 80068ac:	d505      	bpl.n	80068ba <__sflush_r+0x82>
 80068ae:	1c43      	adds	r3, r0, #1
 80068b0:	d102      	bne.n	80068b8 <__sflush_r+0x80>
 80068b2:	682b      	ldr	r3, [r5, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d100      	bne.n	80068ba <__sflush_r+0x82>
 80068b8:	6560      	str	r0, [r4, #84]	; 0x54
 80068ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068bc:	602e      	str	r6, [r5, #0]
 80068be:	2900      	cmp	r1, #0
 80068c0:	d0c6      	beq.n	8006850 <__sflush_r+0x18>
 80068c2:	0023      	movs	r3, r4
 80068c4:	3344      	adds	r3, #68	; 0x44
 80068c6:	4299      	cmp	r1, r3
 80068c8:	d002      	beq.n	80068d0 <__sflush_r+0x98>
 80068ca:	0028      	movs	r0, r5
 80068cc:	f000 f9fc 	bl	8006cc8 <_free_r>
 80068d0:	2000      	movs	r0, #0
 80068d2:	6360      	str	r0, [r4, #52]	; 0x34
 80068d4:	e7bd      	b.n	8006852 <__sflush_r+0x1a>
 80068d6:	2301      	movs	r3, #1
 80068d8:	0028      	movs	r0, r5
 80068da:	6a21      	ldr	r1, [r4, #32]
 80068dc:	47b8      	blx	r7
 80068de:	1c43      	adds	r3, r0, #1
 80068e0:	d1c5      	bne.n	800686e <__sflush_r+0x36>
 80068e2:	682b      	ldr	r3, [r5, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d0c2      	beq.n	800686e <__sflush_r+0x36>
 80068e8:	2b1d      	cmp	r3, #29
 80068ea:	d001      	beq.n	80068f0 <__sflush_r+0xb8>
 80068ec:	2b16      	cmp	r3, #22
 80068ee:	d101      	bne.n	80068f4 <__sflush_r+0xbc>
 80068f0:	602e      	str	r6, [r5, #0]
 80068f2:	e7ad      	b.n	8006850 <__sflush_r+0x18>
 80068f4:	2340      	movs	r3, #64	; 0x40
 80068f6:	89a2      	ldrh	r2, [r4, #12]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	81a3      	strh	r3, [r4, #12]
 80068fc:	e7a9      	b.n	8006852 <__sflush_r+0x1a>
 80068fe:	2340      	movs	r3, #64	; 0x40
 8006900:	430b      	orrs	r3, r1
 8006902:	e7fa      	b.n	80068fa <__sflush_r+0xc2>
 8006904:	690f      	ldr	r7, [r1, #16]
 8006906:	2f00      	cmp	r7, #0
 8006908:	d0a2      	beq.n	8006850 <__sflush_r+0x18>
 800690a:	680a      	ldr	r2, [r1, #0]
 800690c:	600f      	str	r7, [r1, #0]
 800690e:	1bd2      	subs	r2, r2, r7
 8006910:	9201      	str	r2, [sp, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	079b      	lsls	r3, r3, #30
 8006916:	d100      	bne.n	800691a <__sflush_r+0xe2>
 8006918:	694a      	ldr	r2, [r1, #20]
 800691a:	60a2      	str	r2, [r4, #8]
 800691c:	9b01      	ldr	r3, [sp, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	dc00      	bgt.n	8006924 <__sflush_r+0xec>
 8006922:	e795      	b.n	8006850 <__sflush_r+0x18>
 8006924:	003a      	movs	r2, r7
 8006926:	0028      	movs	r0, r5
 8006928:	9b01      	ldr	r3, [sp, #4]
 800692a:	6a21      	ldr	r1, [r4, #32]
 800692c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800692e:	47b0      	blx	r6
 8006930:	2800      	cmp	r0, #0
 8006932:	dc06      	bgt.n	8006942 <__sflush_r+0x10a>
 8006934:	2340      	movs	r3, #64	; 0x40
 8006936:	2001      	movs	r0, #1
 8006938:	89a2      	ldrh	r2, [r4, #12]
 800693a:	4240      	negs	r0, r0
 800693c:	4313      	orrs	r3, r2
 800693e:	81a3      	strh	r3, [r4, #12]
 8006940:	e787      	b.n	8006852 <__sflush_r+0x1a>
 8006942:	9b01      	ldr	r3, [sp, #4]
 8006944:	183f      	adds	r7, r7, r0
 8006946:	1a1b      	subs	r3, r3, r0
 8006948:	9301      	str	r3, [sp, #4]
 800694a:	e7e7      	b.n	800691c <__sflush_r+0xe4>
 800694c:	20400001 	.word	0x20400001

08006950 <_fflush_r>:
 8006950:	690b      	ldr	r3, [r1, #16]
 8006952:	b570      	push	{r4, r5, r6, lr}
 8006954:	0005      	movs	r5, r0
 8006956:	000c      	movs	r4, r1
 8006958:	2b00      	cmp	r3, #0
 800695a:	d102      	bne.n	8006962 <_fflush_r+0x12>
 800695c:	2500      	movs	r5, #0
 800695e:	0028      	movs	r0, r5
 8006960:	bd70      	pop	{r4, r5, r6, pc}
 8006962:	2800      	cmp	r0, #0
 8006964:	d004      	beq.n	8006970 <_fflush_r+0x20>
 8006966:	6983      	ldr	r3, [r0, #24]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <_fflush_r+0x20>
 800696c:	f000 f892 	bl	8006a94 <__sinit>
 8006970:	4b14      	ldr	r3, [pc, #80]	; (80069c4 <_fflush_r+0x74>)
 8006972:	429c      	cmp	r4, r3
 8006974:	d11b      	bne.n	80069ae <_fflush_r+0x5e>
 8006976:	686c      	ldr	r4, [r5, #4]
 8006978:	220c      	movs	r2, #12
 800697a:	5ea3      	ldrsh	r3, [r4, r2]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d0ed      	beq.n	800695c <_fflush_r+0xc>
 8006980:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006982:	07d2      	lsls	r2, r2, #31
 8006984:	d404      	bmi.n	8006990 <_fflush_r+0x40>
 8006986:	059b      	lsls	r3, r3, #22
 8006988:	d402      	bmi.n	8006990 <_fflush_r+0x40>
 800698a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800698c:	f000 f923 	bl	8006bd6 <__retarget_lock_acquire_recursive>
 8006990:	0028      	movs	r0, r5
 8006992:	0021      	movs	r1, r4
 8006994:	f7ff ff50 	bl	8006838 <__sflush_r>
 8006998:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800699a:	0005      	movs	r5, r0
 800699c:	07db      	lsls	r3, r3, #31
 800699e:	d4de      	bmi.n	800695e <_fflush_r+0xe>
 80069a0:	89a3      	ldrh	r3, [r4, #12]
 80069a2:	059b      	lsls	r3, r3, #22
 80069a4:	d4db      	bmi.n	800695e <_fflush_r+0xe>
 80069a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069a8:	f000 f916 	bl	8006bd8 <__retarget_lock_release_recursive>
 80069ac:	e7d7      	b.n	800695e <_fflush_r+0xe>
 80069ae:	4b06      	ldr	r3, [pc, #24]	; (80069c8 <_fflush_r+0x78>)
 80069b0:	429c      	cmp	r4, r3
 80069b2:	d101      	bne.n	80069b8 <_fflush_r+0x68>
 80069b4:	68ac      	ldr	r4, [r5, #8]
 80069b6:	e7df      	b.n	8006978 <_fflush_r+0x28>
 80069b8:	4b04      	ldr	r3, [pc, #16]	; (80069cc <_fflush_r+0x7c>)
 80069ba:	429c      	cmp	r4, r3
 80069bc:	d1dc      	bne.n	8006978 <_fflush_r+0x28>
 80069be:	68ec      	ldr	r4, [r5, #12]
 80069c0:	e7da      	b.n	8006978 <_fflush_r+0x28>
 80069c2:	46c0      	nop			; (mov r8, r8)
 80069c4:	080080c8 	.word	0x080080c8
 80069c8:	080080e8 	.word	0x080080e8
 80069cc:	080080a8 	.word	0x080080a8

080069d0 <std>:
 80069d0:	2300      	movs	r3, #0
 80069d2:	b510      	push	{r4, lr}
 80069d4:	0004      	movs	r4, r0
 80069d6:	6003      	str	r3, [r0, #0]
 80069d8:	6043      	str	r3, [r0, #4]
 80069da:	6083      	str	r3, [r0, #8]
 80069dc:	8181      	strh	r1, [r0, #12]
 80069de:	6643      	str	r3, [r0, #100]	; 0x64
 80069e0:	0019      	movs	r1, r3
 80069e2:	81c2      	strh	r2, [r0, #14]
 80069e4:	6103      	str	r3, [r0, #16]
 80069e6:	6143      	str	r3, [r0, #20]
 80069e8:	6183      	str	r3, [r0, #24]
 80069ea:	2208      	movs	r2, #8
 80069ec:	305c      	adds	r0, #92	; 0x5c
 80069ee:	f7ff fcba 	bl	8006366 <memset>
 80069f2:	4b05      	ldr	r3, [pc, #20]	; (8006a08 <std+0x38>)
 80069f4:	6224      	str	r4, [r4, #32]
 80069f6:	6263      	str	r3, [r4, #36]	; 0x24
 80069f8:	4b04      	ldr	r3, [pc, #16]	; (8006a0c <std+0x3c>)
 80069fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80069fc:	4b04      	ldr	r3, [pc, #16]	; (8006a10 <std+0x40>)
 80069fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a00:	4b04      	ldr	r3, [pc, #16]	; (8006a14 <std+0x44>)
 8006a02:	6323      	str	r3, [r4, #48]	; 0x30
 8006a04:	bd10      	pop	{r4, pc}
 8006a06:	46c0      	nop			; (mov r8, r8)
 8006a08:	0800773d 	.word	0x0800773d
 8006a0c:	08007765 	.word	0x08007765
 8006a10:	0800779d 	.word	0x0800779d
 8006a14:	080077c9 	.word	0x080077c9

08006a18 <_cleanup_r>:
 8006a18:	b510      	push	{r4, lr}
 8006a1a:	4902      	ldr	r1, [pc, #8]	; (8006a24 <_cleanup_r+0xc>)
 8006a1c:	f000 f8ba 	bl	8006b94 <_fwalk_reent>
 8006a20:	bd10      	pop	{r4, pc}
 8006a22:	46c0      	nop			; (mov r8, r8)
 8006a24:	08006951 	.word	0x08006951

08006a28 <__sfmoreglue>:
 8006a28:	b570      	push	{r4, r5, r6, lr}
 8006a2a:	2568      	movs	r5, #104	; 0x68
 8006a2c:	1e4a      	subs	r2, r1, #1
 8006a2e:	4355      	muls	r5, r2
 8006a30:	000e      	movs	r6, r1
 8006a32:	0029      	movs	r1, r5
 8006a34:	3174      	adds	r1, #116	; 0x74
 8006a36:	f000 f9b3 	bl	8006da0 <_malloc_r>
 8006a3a:	1e04      	subs	r4, r0, #0
 8006a3c:	d008      	beq.n	8006a50 <__sfmoreglue+0x28>
 8006a3e:	2100      	movs	r1, #0
 8006a40:	002a      	movs	r2, r5
 8006a42:	6001      	str	r1, [r0, #0]
 8006a44:	6046      	str	r6, [r0, #4]
 8006a46:	300c      	adds	r0, #12
 8006a48:	60a0      	str	r0, [r4, #8]
 8006a4a:	3268      	adds	r2, #104	; 0x68
 8006a4c:	f7ff fc8b 	bl	8006366 <memset>
 8006a50:	0020      	movs	r0, r4
 8006a52:	bd70      	pop	{r4, r5, r6, pc}

08006a54 <__sfp_lock_acquire>:
 8006a54:	b510      	push	{r4, lr}
 8006a56:	4802      	ldr	r0, [pc, #8]	; (8006a60 <__sfp_lock_acquire+0xc>)
 8006a58:	f000 f8bd 	bl	8006bd6 <__retarget_lock_acquire_recursive>
 8006a5c:	bd10      	pop	{r4, pc}
 8006a5e:	46c0      	nop			; (mov r8, r8)
 8006a60:	20000d59 	.word	0x20000d59

08006a64 <__sfp_lock_release>:
 8006a64:	b510      	push	{r4, lr}
 8006a66:	4802      	ldr	r0, [pc, #8]	; (8006a70 <__sfp_lock_release+0xc>)
 8006a68:	f000 f8b6 	bl	8006bd8 <__retarget_lock_release_recursive>
 8006a6c:	bd10      	pop	{r4, pc}
 8006a6e:	46c0      	nop			; (mov r8, r8)
 8006a70:	20000d59 	.word	0x20000d59

08006a74 <__sinit_lock_acquire>:
 8006a74:	b510      	push	{r4, lr}
 8006a76:	4802      	ldr	r0, [pc, #8]	; (8006a80 <__sinit_lock_acquire+0xc>)
 8006a78:	f000 f8ad 	bl	8006bd6 <__retarget_lock_acquire_recursive>
 8006a7c:	bd10      	pop	{r4, pc}
 8006a7e:	46c0      	nop			; (mov r8, r8)
 8006a80:	20000d5a 	.word	0x20000d5a

08006a84 <__sinit_lock_release>:
 8006a84:	b510      	push	{r4, lr}
 8006a86:	4802      	ldr	r0, [pc, #8]	; (8006a90 <__sinit_lock_release+0xc>)
 8006a88:	f000 f8a6 	bl	8006bd8 <__retarget_lock_release_recursive>
 8006a8c:	bd10      	pop	{r4, pc}
 8006a8e:	46c0      	nop			; (mov r8, r8)
 8006a90:	20000d5a 	.word	0x20000d5a

08006a94 <__sinit>:
 8006a94:	b513      	push	{r0, r1, r4, lr}
 8006a96:	0004      	movs	r4, r0
 8006a98:	f7ff ffec 	bl	8006a74 <__sinit_lock_acquire>
 8006a9c:	69a3      	ldr	r3, [r4, #24]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d002      	beq.n	8006aa8 <__sinit+0x14>
 8006aa2:	f7ff ffef 	bl	8006a84 <__sinit_lock_release>
 8006aa6:	bd13      	pop	{r0, r1, r4, pc}
 8006aa8:	64a3      	str	r3, [r4, #72]	; 0x48
 8006aaa:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006aac:	6523      	str	r3, [r4, #80]	; 0x50
 8006aae:	4b13      	ldr	r3, [pc, #76]	; (8006afc <__sinit+0x68>)
 8006ab0:	4a13      	ldr	r2, [pc, #76]	; (8006b00 <__sinit+0x6c>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ab6:	9301      	str	r3, [sp, #4]
 8006ab8:	42a3      	cmp	r3, r4
 8006aba:	d101      	bne.n	8006ac0 <__sinit+0x2c>
 8006abc:	2301      	movs	r3, #1
 8006abe:	61a3      	str	r3, [r4, #24]
 8006ac0:	0020      	movs	r0, r4
 8006ac2:	f000 f81f 	bl	8006b04 <__sfp>
 8006ac6:	6060      	str	r0, [r4, #4]
 8006ac8:	0020      	movs	r0, r4
 8006aca:	f000 f81b 	bl	8006b04 <__sfp>
 8006ace:	60a0      	str	r0, [r4, #8]
 8006ad0:	0020      	movs	r0, r4
 8006ad2:	f000 f817 	bl	8006b04 <__sfp>
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	2104      	movs	r1, #4
 8006ada:	60e0      	str	r0, [r4, #12]
 8006adc:	6860      	ldr	r0, [r4, #4]
 8006ade:	f7ff ff77 	bl	80069d0 <std>
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	2109      	movs	r1, #9
 8006ae6:	68a0      	ldr	r0, [r4, #8]
 8006ae8:	f7ff ff72 	bl	80069d0 <std>
 8006aec:	2202      	movs	r2, #2
 8006aee:	2112      	movs	r1, #18
 8006af0:	68e0      	ldr	r0, [r4, #12]
 8006af2:	f7ff ff6d 	bl	80069d0 <std>
 8006af6:	2301      	movs	r3, #1
 8006af8:	61a3      	str	r3, [r4, #24]
 8006afa:	e7d2      	b.n	8006aa2 <__sinit+0xe>
 8006afc:	080080a4 	.word	0x080080a4
 8006b00:	08006a19 	.word	0x08006a19

08006b04 <__sfp>:
 8006b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b06:	0007      	movs	r7, r0
 8006b08:	f7ff ffa4 	bl	8006a54 <__sfp_lock_acquire>
 8006b0c:	4b1f      	ldr	r3, [pc, #124]	; (8006b8c <__sfp+0x88>)
 8006b0e:	681e      	ldr	r6, [r3, #0]
 8006b10:	69b3      	ldr	r3, [r6, #24]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d102      	bne.n	8006b1c <__sfp+0x18>
 8006b16:	0030      	movs	r0, r6
 8006b18:	f7ff ffbc 	bl	8006a94 <__sinit>
 8006b1c:	3648      	adds	r6, #72	; 0x48
 8006b1e:	68b4      	ldr	r4, [r6, #8]
 8006b20:	6873      	ldr	r3, [r6, #4]
 8006b22:	3b01      	subs	r3, #1
 8006b24:	d504      	bpl.n	8006b30 <__sfp+0x2c>
 8006b26:	6833      	ldr	r3, [r6, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d022      	beq.n	8006b72 <__sfp+0x6e>
 8006b2c:	6836      	ldr	r6, [r6, #0]
 8006b2e:	e7f6      	b.n	8006b1e <__sfp+0x1a>
 8006b30:	220c      	movs	r2, #12
 8006b32:	5ea5      	ldrsh	r5, [r4, r2]
 8006b34:	2d00      	cmp	r5, #0
 8006b36:	d11a      	bne.n	8006b6e <__sfp+0x6a>
 8006b38:	0020      	movs	r0, r4
 8006b3a:	4b15      	ldr	r3, [pc, #84]	; (8006b90 <__sfp+0x8c>)
 8006b3c:	3058      	adds	r0, #88	; 0x58
 8006b3e:	60e3      	str	r3, [r4, #12]
 8006b40:	6665      	str	r5, [r4, #100]	; 0x64
 8006b42:	f000 f847 	bl	8006bd4 <__retarget_lock_init_recursive>
 8006b46:	f7ff ff8d 	bl	8006a64 <__sfp_lock_release>
 8006b4a:	0020      	movs	r0, r4
 8006b4c:	2208      	movs	r2, #8
 8006b4e:	0029      	movs	r1, r5
 8006b50:	6025      	str	r5, [r4, #0]
 8006b52:	60a5      	str	r5, [r4, #8]
 8006b54:	6065      	str	r5, [r4, #4]
 8006b56:	6125      	str	r5, [r4, #16]
 8006b58:	6165      	str	r5, [r4, #20]
 8006b5a:	61a5      	str	r5, [r4, #24]
 8006b5c:	305c      	adds	r0, #92	; 0x5c
 8006b5e:	f7ff fc02 	bl	8006366 <memset>
 8006b62:	6365      	str	r5, [r4, #52]	; 0x34
 8006b64:	63a5      	str	r5, [r4, #56]	; 0x38
 8006b66:	64a5      	str	r5, [r4, #72]	; 0x48
 8006b68:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006b6a:	0020      	movs	r0, r4
 8006b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b6e:	3468      	adds	r4, #104	; 0x68
 8006b70:	e7d7      	b.n	8006b22 <__sfp+0x1e>
 8006b72:	2104      	movs	r1, #4
 8006b74:	0038      	movs	r0, r7
 8006b76:	f7ff ff57 	bl	8006a28 <__sfmoreglue>
 8006b7a:	1e04      	subs	r4, r0, #0
 8006b7c:	6030      	str	r0, [r6, #0]
 8006b7e:	d1d5      	bne.n	8006b2c <__sfp+0x28>
 8006b80:	f7ff ff70 	bl	8006a64 <__sfp_lock_release>
 8006b84:	230c      	movs	r3, #12
 8006b86:	603b      	str	r3, [r7, #0]
 8006b88:	e7ef      	b.n	8006b6a <__sfp+0x66>
 8006b8a:	46c0      	nop			; (mov r8, r8)
 8006b8c:	080080a4 	.word	0x080080a4
 8006b90:	ffff0001 	.word	0xffff0001

08006b94 <_fwalk_reent>:
 8006b94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b96:	0004      	movs	r4, r0
 8006b98:	0006      	movs	r6, r0
 8006b9a:	2700      	movs	r7, #0
 8006b9c:	9101      	str	r1, [sp, #4]
 8006b9e:	3448      	adds	r4, #72	; 0x48
 8006ba0:	6863      	ldr	r3, [r4, #4]
 8006ba2:	68a5      	ldr	r5, [r4, #8]
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	9b00      	ldr	r3, [sp, #0]
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	d504      	bpl.n	8006bb8 <_fwalk_reent+0x24>
 8006bae:	6824      	ldr	r4, [r4, #0]
 8006bb0:	2c00      	cmp	r4, #0
 8006bb2:	d1f5      	bne.n	8006ba0 <_fwalk_reent+0xc>
 8006bb4:	0038      	movs	r0, r7
 8006bb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006bb8:	89ab      	ldrh	r3, [r5, #12]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d908      	bls.n	8006bd0 <_fwalk_reent+0x3c>
 8006bbe:	220e      	movs	r2, #14
 8006bc0:	5eab      	ldrsh	r3, [r5, r2]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	d004      	beq.n	8006bd0 <_fwalk_reent+0x3c>
 8006bc6:	0029      	movs	r1, r5
 8006bc8:	0030      	movs	r0, r6
 8006bca:	9b01      	ldr	r3, [sp, #4]
 8006bcc:	4798      	blx	r3
 8006bce:	4307      	orrs	r7, r0
 8006bd0:	3568      	adds	r5, #104	; 0x68
 8006bd2:	e7e8      	b.n	8006ba6 <_fwalk_reent+0x12>

08006bd4 <__retarget_lock_init_recursive>:
 8006bd4:	4770      	bx	lr

08006bd6 <__retarget_lock_acquire_recursive>:
 8006bd6:	4770      	bx	lr

08006bd8 <__retarget_lock_release_recursive>:
 8006bd8:	4770      	bx	lr
	...

08006bdc <__swhatbuf_r>:
 8006bdc:	b570      	push	{r4, r5, r6, lr}
 8006bde:	000e      	movs	r6, r1
 8006be0:	001d      	movs	r5, r3
 8006be2:	230e      	movs	r3, #14
 8006be4:	5ec9      	ldrsh	r1, [r1, r3]
 8006be6:	0014      	movs	r4, r2
 8006be8:	b096      	sub	sp, #88	; 0x58
 8006bea:	2900      	cmp	r1, #0
 8006bec:	da08      	bge.n	8006c00 <__swhatbuf_r+0x24>
 8006bee:	220c      	movs	r2, #12
 8006bf0:	5eb3      	ldrsh	r3, [r6, r2]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	602a      	str	r2, [r5, #0]
 8006bf6:	061b      	lsls	r3, r3, #24
 8006bf8:	d411      	bmi.n	8006c1e <__swhatbuf_r+0x42>
 8006bfa:	2380      	movs	r3, #128	; 0x80
 8006bfc:	00db      	lsls	r3, r3, #3
 8006bfe:	e00f      	b.n	8006c20 <__swhatbuf_r+0x44>
 8006c00:	466a      	mov	r2, sp
 8006c02:	f000 fe0d 	bl	8007820 <_fstat_r>
 8006c06:	2800      	cmp	r0, #0
 8006c08:	dbf1      	blt.n	8006bee <__swhatbuf_r+0x12>
 8006c0a:	23f0      	movs	r3, #240	; 0xf0
 8006c0c:	9901      	ldr	r1, [sp, #4]
 8006c0e:	021b      	lsls	r3, r3, #8
 8006c10:	4019      	ands	r1, r3
 8006c12:	4b05      	ldr	r3, [pc, #20]	; (8006c28 <__swhatbuf_r+0x4c>)
 8006c14:	18c9      	adds	r1, r1, r3
 8006c16:	424b      	negs	r3, r1
 8006c18:	4159      	adcs	r1, r3
 8006c1a:	6029      	str	r1, [r5, #0]
 8006c1c:	e7ed      	b.n	8006bfa <__swhatbuf_r+0x1e>
 8006c1e:	2340      	movs	r3, #64	; 0x40
 8006c20:	2000      	movs	r0, #0
 8006c22:	6023      	str	r3, [r4, #0]
 8006c24:	b016      	add	sp, #88	; 0x58
 8006c26:	bd70      	pop	{r4, r5, r6, pc}
 8006c28:	ffffe000 	.word	0xffffe000

08006c2c <__smakebuf_r>:
 8006c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c2e:	2602      	movs	r6, #2
 8006c30:	898b      	ldrh	r3, [r1, #12]
 8006c32:	0005      	movs	r5, r0
 8006c34:	000c      	movs	r4, r1
 8006c36:	4233      	tst	r3, r6
 8006c38:	d006      	beq.n	8006c48 <__smakebuf_r+0x1c>
 8006c3a:	0023      	movs	r3, r4
 8006c3c:	3347      	adds	r3, #71	; 0x47
 8006c3e:	6023      	str	r3, [r4, #0]
 8006c40:	6123      	str	r3, [r4, #16]
 8006c42:	2301      	movs	r3, #1
 8006c44:	6163      	str	r3, [r4, #20]
 8006c46:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006c48:	466a      	mov	r2, sp
 8006c4a:	ab01      	add	r3, sp, #4
 8006c4c:	f7ff ffc6 	bl	8006bdc <__swhatbuf_r>
 8006c50:	9900      	ldr	r1, [sp, #0]
 8006c52:	0007      	movs	r7, r0
 8006c54:	0028      	movs	r0, r5
 8006c56:	f000 f8a3 	bl	8006da0 <_malloc_r>
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	d108      	bne.n	8006c70 <__smakebuf_r+0x44>
 8006c5e:	220c      	movs	r2, #12
 8006c60:	5ea3      	ldrsh	r3, [r4, r2]
 8006c62:	059a      	lsls	r2, r3, #22
 8006c64:	d4ef      	bmi.n	8006c46 <__smakebuf_r+0x1a>
 8006c66:	2203      	movs	r2, #3
 8006c68:	4393      	bics	r3, r2
 8006c6a:	431e      	orrs	r6, r3
 8006c6c:	81a6      	strh	r6, [r4, #12]
 8006c6e:	e7e4      	b.n	8006c3a <__smakebuf_r+0xe>
 8006c70:	4b0f      	ldr	r3, [pc, #60]	; (8006cb0 <__smakebuf_r+0x84>)
 8006c72:	62ab      	str	r3, [r5, #40]	; 0x28
 8006c74:	2380      	movs	r3, #128	; 0x80
 8006c76:	89a2      	ldrh	r2, [r4, #12]
 8006c78:	6020      	str	r0, [r4, #0]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	81a3      	strh	r3, [r4, #12]
 8006c7e:	9b00      	ldr	r3, [sp, #0]
 8006c80:	6120      	str	r0, [r4, #16]
 8006c82:	6163      	str	r3, [r4, #20]
 8006c84:	9b01      	ldr	r3, [sp, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00d      	beq.n	8006ca6 <__smakebuf_r+0x7a>
 8006c8a:	0028      	movs	r0, r5
 8006c8c:	230e      	movs	r3, #14
 8006c8e:	5ee1      	ldrsh	r1, [r4, r3]
 8006c90:	f000 fdd8 	bl	8007844 <_isatty_r>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d006      	beq.n	8006ca6 <__smakebuf_r+0x7a>
 8006c98:	2203      	movs	r2, #3
 8006c9a:	89a3      	ldrh	r3, [r4, #12]
 8006c9c:	4393      	bics	r3, r2
 8006c9e:	001a      	movs	r2, r3
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	81a3      	strh	r3, [r4, #12]
 8006ca6:	89a0      	ldrh	r0, [r4, #12]
 8006ca8:	4307      	orrs	r7, r0
 8006caa:	81a7      	strh	r7, [r4, #12]
 8006cac:	e7cb      	b.n	8006c46 <__smakebuf_r+0x1a>
 8006cae:	46c0      	nop			; (mov r8, r8)
 8006cb0:	08006a19 	.word	0x08006a19

08006cb4 <malloc>:
 8006cb4:	b510      	push	{r4, lr}
 8006cb6:	4b03      	ldr	r3, [pc, #12]	; (8006cc4 <malloc+0x10>)
 8006cb8:	0001      	movs	r1, r0
 8006cba:	6818      	ldr	r0, [r3, #0]
 8006cbc:	f000 f870 	bl	8006da0 <_malloc_r>
 8006cc0:	bd10      	pop	{r4, pc}
 8006cc2:	46c0      	nop			; (mov r8, r8)
 8006cc4:	2000040c 	.word	0x2000040c

08006cc8 <_free_r>:
 8006cc8:	b570      	push	{r4, r5, r6, lr}
 8006cca:	0005      	movs	r5, r0
 8006ccc:	2900      	cmp	r1, #0
 8006cce:	d010      	beq.n	8006cf2 <_free_r+0x2a>
 8006cd0:	1f0c      	subs	r4, r1, #4
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	da00      	bge.n	8006cda <_free_r+0x12>
 8006cd8:	18e4      	adds	r4, r4, r3
 8006cda:	0028      	movs	r0, r5
 8006cdc:	f000 fdf6 	bl	80078cc <__malloc_lock>
 8006ce0:	4a1d      	ldr	r2, [pc, #116]	; (8006d58 <_free_r+0x90>)
 8006ce2:	6813      	ldr	r3, [r2, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d105      	bne.n	8006cf4 <_free_r+0x2c>
 8006ce8:	6063      	str	r3, [r4, #4]
 8006cea:	6014      	str	r4, [r2, #0]
 8006cec:	0028      	movs	r0, r5
 8006cee:	f000 fdf5 	bl	80078dc <__malloc_unlock>
 8006cf2:	bd70      	pop	{r4, r5, r6, pc}
 8006cf4:	42a3      	cmp	r3, r4
 8006cf6:	d908      	bls.n	8006d0a <_free_r+0x42>
 8006cf8:	6821      	ldr	r1, [r4, #0]
 8006cfa:	1860      	adds	r0, r4, r1
 8006cfc:	4283      	cmp	r3, r0
 8006cfe:	d1f3      	bne.n	8006ce8 <_free_r+0x20>
 8006d00:	6818      	ldr	r0, [r3, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	1841      	adds	r1, r0, r1
 8006d06:	6021      	str	r1, [r4, #0]
 8006d08:	e7ee      	b.n	8006ce8 <_free_r+0x20>
 8006d0a:	001a      	movs	r2, r3
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d001      	beq.n	8006d16 <_free_r+0x4e>
 8006d12:	42a3      	cmp	r3, r4
 8006d14:	d9f9      	bls.n	8006d0a <_free_r+0x42>
 8006d16:	6811      	ldr	r1, [r2, #0]
 8006d18:	1850      	adds	r0, r2, r1
 8006d1a:	42a0      	cmp	r0, r4
 8006d1c:	d10b      	bne.n	8006d36 <_free_r+0x6e>
 8006d1e:	6820      	ldr	r0, [r4, #0]
 8006d20:	1809      	adds	r1, r1, r0
 8006d22:	1850      	adds	r0, r2, r1
 8006d24:	6011      	str	r1, [r2, #0]
 8006d26:	4283      	cmp	r3, r0
 8006d28:	d1e0      	bne.n	8006cec <_free_r+0x24>
 8006d2a:	6818      	ldr	r0, [r3, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	1841      	adds	r1, r0, r1
 8006d30:	6011      	str	r1, [r2, #0]
 8006d32:	6053      	str	r3, [r2, #4]
 8006d34:	e7da      	b.n	8006cec <_free_r+0x24>
 8006d36:	42a0      	cmp	r0, r4
 8006d38:	d902      	bls.n	8006d40 <_free_r+0x78>
 8006d3a:	230c      	movs	r3, #12
 8006d3c:	602b      	str	r3, [r5, #0]
 8006d3e:	e7d5      	b.n	8006cec <_free_r+0x24>
 8006d40:	6821      	ldr	r1, [r4, #0]
 8006d42:	1860      	adds	r0, r4, r1
 8006d44:	4283      	cmp	r3, r0
 8006d46:	d103      	bne.n	8006d50 <_free_r+0x88>
 8006d48:	6818      	ldr	r0, [r3, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	1841      	adds	r1, r0, r1
 8006d4e:	6021      	str	r1, [r4, #0]
 8006d50:	6063      	str	r3, [r4, #4]
 8006d52:	6054      	str	r4, [r2, #4]
 8006d54:	e7ca      	b.n	8006cec <_free_r+0x24>
 8006d56:	46c0      	nop			; (mov r8, r8)
 8006d58:	20000d5c 	.word	0x20000d5c

08006d5c <sbrk_aligned>:
 8006d5c:	b570      	push	{r4, r5, r6, lr}
 8006d5e:	4e0f      	ldr	r6, [pc, #60]	; (8006d9c <sbrk_aligned+0x40>)
 8006d60:	000d      	movs	r5, r1
 8006d62:	6831      	ldr	r1, [r6, #0]
 8006d64:	0004      	movs	r4, r0
 8006d66:	2900      	cmp	r1, #0
 8006d68:	d102      	bne.n	8006d70 <sbrk_aligned+0x14>
 8006d6a:	f000 fcd5 	bl	8007718 <_sbrk_r>
 8006d6e:	6030      	str	r0, [r6, #0]
 8006d70:	0029      	movs	r1, r5
 8006d72:	0020      	movs	r0, r4
 8006d74:	f000 fcd0 	bl	8007718 <_sbrk_r>
 8006d78:	1c43      	adds	r3, r0, #1
 8006d7a:	d00a      	beq.n	8006d92 <sbrk_aligned+0x36>
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	1cc5      	adds	r5, r0, #3
 8006d80:	439d      	bics	r5, r3
 8006d82:	42a8      	cmp	r0, r5
 8006d84:	d007      	beq.n	8006d96 <sbrk_aligned+0x3a>
 8006d86:	1a29      	subs	r1, r5, r0
 8006d88:	0020      	movs	r0, r4
 8006d8a:	f000 fcc5 	bl	8007718 <_sbrk_r>
 8006d8e:	1c43      	adds	r3, r0, #1
 8006d90:	d101      	bne.n	8006d96 <sbrk_aligned+0x3a>
 8006d92:	2501      	movs	r5, #1
 8006d94:	426d      	negs	r5, r5
 8006d96:	0028      	movs	r0, r5
 8006d98:	bd70      	pop	{r4, r5, r6, pc}
 8006d9a:	46c0      	nop			; (mov r8, r8)
 8006d9c:	20000d60 	.word	0x20000d60

08006da0 <_malloc_r>:
 8006da0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006da2:	2203      	movs	r2, #3
 8006da4:	1ccb      	adds	r3, r1, #3
 8006da6:	4393      	bics	r3, r2
 8006da8:	3308      	adds	r3, #8
 8006daa:	0006      	movs	r6, r0
 8006dac:	001f      	movs	r7, r3
 8006dae:	2b0c      	cmp	r3, #12
 8006db0:	d232      	bcs.n	8006e18 <_malloc_r+0x78>
 8006db2:	270c      	movs	r7, #12
 8006db4:	42b9      	cmp	r1, r7
 8006db6:	d831      	bhi.n	8006e1c <_malloc_r+0x7c>
 8006db8:	0030      	movs	r0, r6
 8006dba:	f000 fd87 	bl	80078cc <__malloc_lock>
 8006dbe:	4d32      	ldr	r5, [pc, #200]	; (8006e88 <_malloc_r+0xe8>)
 8006dc0:	682b      	ldr	r3, [r5, #0]
 8006dc2:	001c      	movs	r4, r3
 8006dc4:	2c00      	cmp	r4, #0
 8006dc6:	d12e      	bne.n	8006e26 <_malloc_r+0x86>
 8006dc8:	0039      	movs	r1, r7
 8006dca:	0030      	movs	r0, r6
 8006dcc:	f7ff ffc6 	bl	8006d5c <sbrk_aligned>
 8006dd0:	0004      	movs	r4, r0
 8006dd2:	1c43      	adds	r3, r0, #1
 8006dd4:	d11e      	bne.n	8006e14 <_malloc_r+0x74>
 8006dd6:	682c      	ldr	r4, [r5, #0]
 8006dd8:	0025      	movs	r5, r4
 8006dda:	2d00      	cmp	r5, #0
 8006ddc:	d14a      	bne.n	8006e74 <_malloc_r+0xd4>
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	0029      	movs	r1, r5
 8006de2:	18e3      	adds	r3, r4, r3
 8006de4:	0030      	movs	r0, r6
 8006de6:	9301      	str	r3, [sp, #4]
 8006de8:	f000 fc96 	bl	8007718 <_sbrk_r>
 8006dec:	9b01      	ldr	r3, [sp, #4]
 8006dee:	4283      	cmp	r3, r0
 8006df0:	d143      	bne.n	8006e7a <_malloc_r+0xda>
 8006df2:	6823      	ldr	r3, [r4, #0]
 8006df4:	3703      	adds	r7, #3
 8006df6:	1aff      	subs	r7, r7, r3
 8006df8:	2303      	movs	r3, #3
 8006dfa:	439f      	bics	r7, r3
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	2f0c      	cmp	r7, #12
 8006e00:	d200      	bcs.n	8006e04 <_malloc_r+0x64>
 8006e02:	270c      	movs	r7, #12
 8006e04:	0039      	movs	r1, r7
 8006e06:	0030      	movs	r0, r6
 8006e08:	f7ff ffa8 	bl	8006d5c <sbrk_aligned>
 8006e0c:	1c43      	adds	r3, r0, #1
 8006e0e:	d034      	beq.n	8006e7a <_malloc_r+0xda>
 8006e10:	6823      	ldr	r3, [r4, #0]
 8006e12:	19df      	adds	r7, r3, r7
 8006e14:	6027      	str	r7, [r4, #0]
 8006e16:	e013      	b.n	8006e40 <_malloc_r+0xa0>
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	dacb      	bge.n	8006db4 <_malloc_r+0x14>
 8006e1c:	230c      	movs	r3, #12
 8006e1e:	2500      	movs	r5, #0
 8006e20:	6033      	str	r3, [r6, #0]
 8006e22:	0028      	movs	r0, r5
 8006e24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e26:	6822      	ldr	r2, [r4, #0]
 8006e28:	1bd1      	subs	r1, r2, r7
 8006e2a:	d420      	bmi.n	8006e6e <_malloc_r+0xce>
 8006e2c:	290b      	cmp	r1, #11
 8006e2e:	d917      	bls.n	8006e60 <_malloc_r+0xc0>
 8006e30:	19e2      	adds	r2, r4, r7
 8006e32:	6027      	str	r7, [r4, #0]
 8006e34:	42a3      	cmp	r3, r4
 8006e36:	d111      	bne.n	8006e5c <_malloc_r+0xbc>
 8006e38:	602a      	str	r2, [r5, #0]
 8006e3a:	6863      	ldr	r3, [r4, #4]
 8006e3c:	6011      	str	r1, [r2, #0]
 8006e3e:	6053      	str	r3, [r2, #4]
 8006e40:	0030      	movs	r0, r6
 8006e42:	0025      	movs	r5, r4
 8006e44:	f000 fd4a 	bl	80078dc <__malloc_unlock>
 8006e48:	2207      	movs	r2, #7
 8006e4a:	350b      	adds	r5, #11
 8006e4c:	1d23      	adds	r3, r4, #4
 8006e4e:	4395      	bics	r5, r2
 8006e50:	1aea      	subs	r2, r5, r3
 8006e52:	429d      	cmp	r5, r3
 8006e54:	d0e5      	beq.n	8006e22 <_malloc_r+0x82>
 8006e56:	1b5b      	subs	r3, r3, r5
 8006e58:	50a3      	str	r3, [r4, r2]
 8006e5a:	e7e2      	b.n	8006e22 <_malloc_r+0x82>
 8006e5c:	605a      	str	r2, [r3, #4]
 8006e5e:	e7ec      	b.n	8006e3a <_malloc_r+0x9a>
 8006e60:	6862      	ldr	r2, [r4, #4]
 8006e62:	42a3      	cmp	r3, r4
 8006e64:	d101      	bne.n	8006e6a <_malloc_r+0xca>
 8006e66:	602a      	str	r2, [r5, #0]
 8006e68:	e7ea      	b.n	8006e40 <_malloc_r+0xa0>
 8006e6a:	605a      	str	r2, [r3, #4]
 8006e6c:	e7e8      	b.n	8006e40 <_malloc_r+0xa0>
 8006e6e:	0023      	movs	r3, r4
 8006e70:	6864      	ldr	r4, [r4, #4]
 8006e72:	e7a7      	b.n	8006dc4 <_malloc_r+0x24>
 8006e74:	002c      	movs	r4, r5
 8006e76:	686d      	ldr	r5, [r5, #4]
 8006e78:	e7af      	b.n	8006dda <_malloc_r+0x3a>
 8006e7a:	230c      	movs	r3, #12
 8006e7c:	0030      	movs	r0, r6
 8006e7e:	6033      	str	r3, [r6, #0]
 8006e80:	f000 fd2c 	bl	80078dc <__malloc_unlock>
 8006e84:	e7cd      	b.n	8006e22 <_malloc_r+0x82>
 8006e86:	46c0      	nop			; (mov r8, r8)
 8006e88:	20000d5c 	.word	0x20000d5c

08006e8c <__ssputs_r>:
 8006e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e8e:	688e      	ldr	r6, [r1, #8]
 8006e90:	b085      	sub	sp, #20
 8006e92:	0007      	movs	r7, r0
 8006e94:	000c      	movs	r4, r1
 8006e96:	9203      	str	r2, [sp, #12]
 8006e98:	9301      	str	r3, [sp, #4]
 8006e9a:	429e      	cmp	r6, r3
 8006e9c:	d83c      	bhi.n	8006f18 <__ssputs_r+0x8c>
 8006e9e:	2390      	movs	r3, #144	; 0x90
 8006ea0:	898a      	ldrh	r2, [r1, #12]
 8006ea2:	00db      	lsls	r3, r3, #3
 8006ea4:	421a      	tst	r2, r3
 8006ea6:	d034      	beq.n	8006f12 <__ssputs_r+0x86>
 8006ea8:	6909      	ldr	r1, [r1, #16]
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	6960      	ldr	r0, [r4, #20]
 8006eae:	1a5b      	subs	r3, r3, r1
 8006eb0:	9302      	str	r3, [sp, #8]
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	4343      	muls	r3, r0
 8006eb6:	0fdd      	lsrs	r5, r3, #31
 8006eb8:	18ed      	adds	r5, r5, r3
 8006eba:	9b01      	ldr	r3, [sp, #4]
 8006ebc:	9802      	ldr	r0, [sp, #8]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	181b      	adds	r3, r3, r0
 8006ec2:	106d      	asrs	r5, r5, #1
 8006ec4:	42ab      	cmp	r3, r5
 8006ec6:	d900      	bls.n	8006eca <__ssputs_r+0x3e>
 8006ec8:	001d      	movs	r5, r3
 8006eca:	0553      	lsls	r3, r2, #21
 8006ecc:	d532      	bpl.n	8006f34 <__ssputs_r+0xa8>
 8006ece:	0029      	movs	r1, r5
 8006ed0:	0038      	movs	r0, r7
 8006ed2:	f7ff ff65 	bl	8006da0 <_malloc_r>
 8006ed6:	1e06      	subs	r6, r0, #0
 8006ed8:	d109      	bne.n	8006eee <__ssputs_r+0x62>
 8006eda:	230c      	movs	r3, #12
 8006edc:	603b      	str	r3, [r7, #0]
 8006ede:	2340      	movs	r3, #64	; 0x40
 8006ee0:	2001      	movs	r0, #1
 8006ee2:	89a2      	ldrh	r2, [r4, #12]
 8006ee4:	4240      	negs	r0, r0
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	81a3      	strh	r3, [r4, #12]
 8006eea:	b005      	add	sp, #20
 8006eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eee:	9a02      	ldr	r2, [sp, #8]
 8006ef0:	6921      	ldr	r1, [r4, #16]
 8006ef2:	f7ff fa2f 	bl	8006354 <memcpy>
 8006ef6:	89a3      	ldrh	r3, [r4, #12]
 8006ef8:	4a14      	ldr	r2, [pc, #80]	; (8006f4c <__ssputs_r+0xc0>)
 8006efa:	401a      	ands	r2, r3
 8006efc:	2380      	movs	r3, #128	; 0x80
 8006efe:	4313      	orrs	r3, r2
 8006f00:	81a3      	strh	r3, [r4, #12]
 8006f02:	9b02      	ldr	r3, [sp, #8]
 8006f04:	6126      	str	r6, [r4, #16]
 8006f06:	18f6      	adds	r6, r6, r3
 8006f08:	6026      	str	r6, [r4, #0]
 8006f0a:	6165      	str	r5, [r4, #20]
 8006f0c:	9e01      	ldr	r6, [sp, #4]
 8006f0e:	1aed      	subs	r5, r5, r3
 8006f10:	60a5      	str	r5, [r4, #8]
 8006f12:	9b01      	ldr	r3, [sp, #4]
 8006f14:	429e      	cmp	r6, r3
 8006f16:	d900      	bls.n	8006f1a <__ssputs_r+0x8e>
 8006f18:	9e01      	ldr	r6, [sp, #4]
 8006f1a:	0032      	movs	r2, r6
 8006f1c:	9903      	ldr	r1, [sp, #12]
 8006f1e:	6820      	ldr	r0, [r4, #0]
 8006f20:	f000 fcc1 	bl	80078a6 <memmove>
 8006f24:	68a3      	ldr	r3, [r4, #8]
 8006f26:	2000      	movs	r0, #0
 8006f28:	1b9b      	subs	r3, r3, r6
 8006f2a:	60a3      	str	r3, [r4, #8]
 8006f2c:	6823      	ldr	r3, [r4, #0]
 8006f2e:	199e      	adds	r6, r3, r6
 8006f30:	6026      	str	r6, [r4, #0]
 8006f32:	e7da      	b.n	8006eea <__ssputs_r+0x5e>
 8006f34:	002a      	movs	r2, r5
 8006f36:	0038      	movs	r0, r7
 8006f38:	f000 fcd8 	bl	80078ec <_realloc_r>
 8006f3c:	1e06      	subs	r6, r0, #0
 8006f3e:	d1e0      	bne.n	8006f02 <__ssputs_r+0x76>
 8006f40:	0038      	movs	r0, r7
 8006f42:	6921      	ldr	r1, [r4, #16]
 8006f44:	f7ff fec0 	bl	8006cc8 <_free_r>
 8006f48:	e7c7      	b.n	8006eda <__ssputs_r+0x4e>
 8006f4a:	46c0      	nop			; (mov r8, r8)
 8006f4c:	fffffb7f 	.word	0xfffffb7f

08006f50 <_svfiprintf_r>:
 8006f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f52:	b0a1      	sub	sp, #132	; 0x84
 8006f54:	9003      	str	r0, [sp, #12]
 8006f56:	001d      	movs	r5, r3
 8006f58:	898b      	ldrh	r3, [r1, #12]
 8006f5a:	000f      	movs	r7, r1
 8006f5c:	0016      	movs	r6, r2
 8006f5e:	061b      	lsls	r3, r3, #24
 8006f60:	d511      	bpl.n	8006f86 <_svfiprintf_r+0x36>
 8006f62:	690b      	ldr	r3, [r1, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10e      	bne.n	8006f86 <_svfiprintf_r+0x36>
 8006f68:	2140      	movs	r1, #64	; 0x40
 8006f6a:	f7ff ff19 	bl	8006da0 <_malloc_r>
 8006f6e:	6038      	str	r0, [r7, #0]
 8006f70:	6138      	str	r0, [r7, #16]
 8006f72:	2800      	cmp	r0, #0
 8006f74:	d105      	bne.n	8006f82 <_svfiprintf_r+0x32>
 8006f76:	230c      	movs	r3, #12
 8006f78:	9a03      	ldr	r2, [sp, #12]
 8006f7a:	3801      	subs	r0, #1
 8006f7c:	6013      	str	r3, [r2, #0]
 8006f7e:	b021      	add	sp, #132	; 0x84
 8006f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f82:	2340      	movs	r3, #64	; 0x40
 8006f84:	617b      	str	r3, [r7, #20]
 8006f86:	2300      	movs	r3, #0
 8006f88:	ac08      	add	r4, sp, #32
 8006f8a:	6163      	str	r3, [r4, #20]
 8006f8c:	3320      	adds	r3, #32
 8006f8e:	7663      	strb	r3, [r4, #25]
 8006f90:	3310      	adds	r3, #16
 8006f92:	76a3      	strb	r3, [r4, #26]
 8006f94:	9507      	str	r5, [sp, #28]
 8006f96:	0035      	movs	r5, r6
 8006f98:	782b      	ldrb	r3, [r5, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <_svfiprintf_r+0x52>
 8006f9e:	2b25      	cmp	r3, #37	; 0x25
 8006fa0:	d147      	bne.n	8007032 <_svfiprintf_r+0xe2>
 8006fa2:	1bab      	subs	r3, r5, r6
 8006fa4:	9305      	str	r3, [sp, #20]
 8006fa6:	42b5      	cmp	r5, r6
 8006fa8:	d00c      	beq.n	8006fc4 <_svfiprintf_r+0x74>
 8006faa:	0032      	movs	r2, r6
 8006fac:	0039      	movs	r1, r7
 8006fae:	9803      	ldr	r0, [sp, #12]
 8006fb0:	f7ff ff6c 	bl	8006e8c <__ssputs_r>
 8006fb4:	1c43      	adds	r3, r0, #1
 8006fb6:	d100      	bne.n	8006fba <_svfiprintf_r+0x6a>
 8006fb8:	e0ae      	b.n	8007118 <_svfiprintf_r+0x1c8>
 8006fba:	6962      	ldr	r2, [r4, #20]
 8006fbc:	9b05      	ldr	r3, [sp, #20]
 8006fbe:	4694      	mov	ip, r2
 8006fc0:	4463      	add	r3, ip
 8006fc2:	6163      	str	r3, [r4, #20]
 8006fc4:	782b      	ldrb	r3, [r5, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d100      	bne.n	8006fcc <_svfiprintf_r+0x7c>
 8006fca:	e0a5      	b.n	8007118 <_svfiprintf_r+0x1c8>
 8006fcc:	2201      	movs	r2, #1
 8006fce:	2300      	movs	r3, #0
 8006fd0:	4252      	negs	r2, r2
 8006fd2:	6062      	str	r2, [r4, #4]
 8006fd4:	a904      	add	r1, sp, #16
 8006fd6:	3254      	adds	r2, #84	; 0x54
 8006fd8:	1852      	adds	r2, r2, r1
 8006fda:	1c6e      	adds	r6, r5, #1
 8006fdc:	6023      	str	r3, [r4, #0]
 8006fde:	60e3      	str	r3, [r4, #12]
 8006fe0:	60a3      	str	r3, [r4, #8]
 8006fe2:	7013      	strb	r3, [r2, #0]
 8006fe4:	65a3      	str	r3, [r4, #88]	; 0x58
 8006fe6:	2205      	movs	r2, #5
 8006fe8:	7831      	ldrb	r1, [r6, #0]
 8006fea:	4854      	ldr	r0, [pc, #336]	; (800713c <_svfiprintf_r+0x1ec>)
 8006fec:	f000 fc50 	bl	8007890 <memchr>
 8006ff0:	1c75      	adds	r5, r6, #1
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	d11f      	bne.n	8007036 <_svfiprintf_r+0xe6>
 8006ff6:	6822      	ldr	r2, [r4, #0]
 8006ff8:	06d3      	lsls	r3, r2, #27
 8006ffa:	d504      	bpl.n	8007006 <_svfiprintf_r+0xb6>
 8006ffc:	2353      	movs	r3, #83	; 0x53
 8006ffe:	a904      	add	r1, sp, #16
 8007000:	185b      	adds	r3, r3, r1
 8007002:	2120      	movs	r1, #32
 8007004:	7019      	strb	r1, [r3, #0]
 8007006:	0713      	lsls	r3, r2, #28
 8007008:	d504      	bpl.n	8007014 <_svfiprintf_r+0xc4>
 800700a:	2353      	movs	r3, #83	; 0x53
 800700c:	a904      	add	r1, sp, #16
 800700e:	185b      	adds	r3, r3, r1
 8007010:	212b      	movs	r1, #43	; 0x2b
 8007012:	7019      	strb	r1, [r3, #0]
 8007014:	7833      	ldrb	r3, [r6, #0]
 8007016:	2b2a      	cmp	r3, #42	; 0x2a
 8007018:	d016      	beq.n	8007048 <_svfiprintf_r+0xf8>
 800701a:	0035      	movs	r5, r6
 800701c:	2100      	movs	r1, #0
 800701e:	200a      	movs	r0, #10
 8007020:	68e3      	ldr	r3, [r4, #12]
 8007022:	782a      	ldrb	r2, [r5, #0]
 8007024:	1c6e      	adds	r6, r5, #1
 8007026:	3a30      	subs	r2, #48	; 0x30
 8007028:	2a09      	cmp	r2, #9
 800702a:	d94e      	bls.n	80070ca <_svfiprintf_r+0x17a>
 800702c:	2900      	cmp	r1, #0
 800702e:	d111      	bne.n	8007054 <_svfiprintf_r+0x104>
 8007030:	e017      	b.n	8007062 <_svfiprintf_r+0x112>
 8007032:	3501      	adds	r5, #1
 8007034:	e7b0      	b.n	8006f98 <_svfiprintf_r+0x48>
 8007036:	4b41      	ldr	r3, [pc, #260]	; (800713c <_svfiprintf_r+0x1ec>)
 8007038:	6822      	ldr	r2, [r4, #0]
 800703a:	1ac0      	subs	r0, r0, r3
 800703c:	2301      	movs	r3, #1
 800703e:	4083      	lsls	r3, r0
 8007040:	4313      	orrs	r3, r2
 8007042:	002e      	movs	r6, r5
 8007044:	6023      	str	r3, [r4, #0]
 8007046:	e7ce      	b.n	8006fe6 <_svfiprintf_r+0x96>
 8007048:	9b07      	ldr	r3, [sp, #28]
 800704a:	1d19      	adds	r1, r3, #4
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	9107      	str	r1, [sp, #28]
 8007050:	2b00      	cmp	r3, #0
 8007052:	db01      	blt.n	8007058 <_svfiprintf_r+0x108>
 8007054:	930b      	str	r3, [sp, #44]	; 0x2c
 8007056:	e004      	b.n	8007062 <_svfiprintf_r+0x112>
 8007058:	425b      	negs	r3, r3
 800705a:	60e3      	str	r3, [r4, #12]
 800705c:	2302      	movs	r3, #2
 800705e:	4313      	orrs	r3, r2
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	782b      	ldrb	r3, [r5, #0]
 8007064:	2b2e      	cmp	r3, #46	; 0x2e
 8007066:	d10a      	bne.n	800707e <_svfiprintf_r+0x12e>
 8007068:	786b      	ldrb	r3, [r5, #1]
 800706a:	2b2a      	cmp	r3, #42	; 0x2a
 800706c:	d135      	bne.n	80070da <_svfiprintf_r+0x18a>
 800706e:	9b07      	ldr	r3, [sp, #28]
 8007070:	3502      	adds	r5, #2
 8007072:	1d1a      	adds	r2, r3, #4
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	9207      	str	r2, [sp, #28]
 8007078:	2b00      	cmp	r3, #0
 800707a:	db2b      	blt.n	80070d4 <_svfiprintf_r+0x184>
 800707c:	9309      	str	r3, [sp, #36]	; 0x24
 800707e:	4e30      	ldr	r6, [pc, #192]	; (8007140 <_svfiprintf_r+0x1f0>)
 8007080:	2203      	movs	r2, #3
 8007082:	0030      	movs	r0, r6
 8007084:	7829      	ldrb	r1, [r5, #0]
 8007086:	f000 fc03 	bl	8007890 <memchr>
 800708a:	2800      	cmp	r0, #0
 800708c:	d006      	beq.n	800709c <_svfiprintf_r+0x14c>
 800708e:	2340      	movs	r3, #64	; 0x40
 8007090:	1b80      	subs	r0, r0, r6
 8007092:	4083      	lsls	r3, r0
 8007094:	6822      	ldr	r2, [r4, #0]
 8007096:	3501      	adds	r5, #1
 8007098:	4313      	orrs	r3, r2
 800709a:	6023      	str	r3, [r4, #0]
 800709c:	7829      	ldrb	r1, [r5, #0]
 800709e:	2206      	movs	r2, #6
 80070a0:	4828      	ldr	r0, [pc, #160]	; (8007144 <_svfiprintf_r+0x1f4>)
 80070a2:	1c6e      	adds	r6, r5, #1
 80070a4:	7621      	strb	r1, [r4, #24]
 80070a6:	f000 fbf3 	bl	8007890 <memchr>
 80070aa:	2800      	cmp	r0, #0
 80070ac:	d03c      	beq.n	8007128 <_svfiprintf_r+0x1d8>
 80070ae:	4b26      	ldr	r3, [pc, #152]	; (8007148 <_svfiprintf_r+0x1f8>)
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d125      	bne.n	8007100 <_svfiprintf_r+0x1b0>
 80070b4:	2207      	movs	r2, #7
 80070b6:	9b07      	ldr	r3, [sp, #28]
 80070b8:	3307      	adds	r3, #7
 80070ba:	4393      	bics	r3, r2
 80070bc:	3308      	adds	r3, #8
 80070be:	9307      	str	r3, [sp, #28]
 80070c0:	6963      	ldr	r3, [r4, #20]
 80070c2:	9a04      	ldr	r2, [sp, #16]
 80070c4:	189b      	adds	r3, r3, r2
 80070c6:	6163      	str	r3, [r4, #20]
 80070c8:	e765      	b.n	8006f96 <_svfiprintf_r+0x46>
 80070ca:	4343      	muls	r3, r0
 80070cc:	0035      	movs	r5, r6
 80070ce:	2101      	movs	r1, #1
 80070d0:	189b      	adds	r3, r3, r2
 80070d2:	e7a6      	b.n	8007022 <_svfiprintf_r+0xd2>
 80070d4:	2301      	movs	r3, #1
 80070d6:	425b      	negs	r3, r3
 80070d8:	e7d0      	b.n	800707c <_svfiprintf_r+0x12c>
 80070da:	2300      	movs	r3, #0
 80070dc:	200a      	movs	r0, #10
 80070de:	001a      	movs	r2, r3
 80070e0:	3501      	adds	r5, #1
 80070e2:	6063      	str	r3, [r4, #4]
 80070e4:	7829      	ldrb	r1, [r5, #0]
 80070e6:	1c6e      	adds	r6, r5, #1
 80070e8:	3930      	subs	r1, #48	; 0x30
 80070ea:	2909      	cmp	r1, #9
 80070ec:	d903      	bls.n	80070f6 <_svfiprintf_r+0x1a6>
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d0c5      	beq.n	800707e <_svfiprintf_r+0x12e>
 80070f2:	9209      	str	r2, [sp, #36]	; 0x24
 80070f4:	e7c3      	b.n	800707e <_svfiprintf_r+0x12e>
 80070f6:	4342      	muls	r2, r0
 80070f8:	0035      	movs	r5, r6
 80070fa:	2301      	movs	r3, #1
 80070fc:	1852      	adds	r2, r2, r1
 80070fe:	e7f1      	b.n	80070e4 <_svfiprintf_r+0x194>
 8007100:	ab07      	add	r3, sp, #28
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	003a      	movs	r2, r7
 8007106:	0021      	movs	r1, r4
 8007108:	4b10      	ldr	r3, [pc, #64]	; (800714c <_svfiprintf_r+0x1fc>)
 800710a:	9803      	ldr	r0, [sp, #12]
 800710c:	e000      	b.n	8007110 <_svfiprintf_r+0x1c0>
 800710e:	bf00      	nop
 8007110:	9004      	str	r0, [sp, #16]
 8007112:	9b04      	ldr	r3, [sp, #16]
 8007114:	3301      	adds	r3, #1
 8007116:	d1d3      	bne.n	80070c0 <_svfiprintf_r+0x170>
 8007118:	89bb      	ldrh	r3, [r7, #12]
 800711a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800711c:	065b      	lsls	r3, r3, #25
 800711e:	d400      	bmi.n	8007122 <_svfiprintf_r+0x1d2>
 8007120:	e72d      	b.n	8006f7e <_svfiprintf_r+0x2e>
 8007122:	2001      	movs	r0, #1
 8007124:	4240      	negs	r0, r0
 8007126:	e72a      	b.n	8006f7e <_svfiprintf_r+0x2e>
 8007128:	ab07      	add	r3, sp, #28
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	003a      	movs	r2, r7
 800712e:	0021      	movs	r1, r4
 8007130:	4b06      	ldr	r3, [pc, #24]	; (800714c <_svfiprintf_r+0x1fc>)
 8007132:	9803      	ldr	r0, [sp, #12]
 8007134:	f000 f9de 	bl	80074f4 <_printf_i>
 8007138:	e7ea      	b.n	8007110 <_svfiprintf_r+0x1c0>
 800713a:	46c0      	nop			; (mov r8, r8)
 800713c:	08008108 	.word	0x08008108
 8007140:	0800810e 	.word	0x0800810e
 8007144:	08008112 	.word	0x08008112
 8007148:	00000000 	.word	0x00000000
 800714c:	08006e8d 	.word	0x08006e8d

08007150 <__sfputc_r>:
 8007150:	6893      	ldr	r3, [r2, #8]
 8007152:	b510      	push	{r4, lr}
 8007154:	3b01      	subs	r3, #1
 8007156:	6093      	str	r3, [r2, #8]
 8007158:	2b00      	cmp	r3, #0
 800715a:	da04      	bge.n	8007166 <__sfputc_r+0x16>
 800715c:	6994      	ldr	r4, [r2, #24]
 800715e:	42a3      	cmp	r3, r4
 8007160:	db07      	blt.n	8007172 <__sfputc_r+0x22>
 8007162:	290a      	cmp	r1, #10
 8007164:	d005      	beq.n	8007172 <__sfputc_r+0x22>
 8007166:	6813      	ldr	r3, [r2, #0]
 8007168:	1c58      	adds	r0, r3, #1
 800716a:	6010      	str	r0, [r2, #0]
 800716c:	7019      	strb	r1, [r3, #0]
 800716e:	0008      	movs	r0, r1
 8007170:	bd10      	pop	{r4, pc}
 8007172:	f7ff fa93 	bl	800669c <__swbuf_r>
 8007176:	0001      	movs	r1, r0
 8007178:	e7f9      	b.n	800716e <__sfputc_r+0x1e>

0800717a <__sfputs_r>:
 800717a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717c:	0006      	movs	r6, r0
 800717e:	000f      	movs	r7, r1
 8007180:	0014      	movs	r4, r2
 8007182:	18d5      	adds	r5, r2, r3
 8007184:	42ac      	cmp	r4, r5
 8007186:	d101      	bne.n	800718c <__sfputs_r+0x12>
 8007188:	2000      	movs	r0, #0
 800718a:	e007      	b.n	800719c <__sfputs_r+0x22>
 800718c:	7821      	ldrb	r1, [r4, #0]
 800718e:	003a      	movs	r2, r7
 8007190:	0030      	movs	r0, r6
 8007192:	f7ff ffdd 	bl	8007150 <__sfputc_r>
 8007196:	3401      	adds	r4, #1
 8007198:	1c43      	adds	r3, r0, #1
 800719a:	d1f3      	bne.n	8007184 <__sfputs_r+0xa>
 800719c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071a0 <_vfiprintf_r>:
 80071a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071a2:	b0a1      	sub	sp, #132	; 0x84
 80071a4:	0006      	movs	r6, r0
 80071a6:	000c      	movs	r4, r1
 80071a8:	001f      	movs	r7, r3
 80071aa:	9203      	str	r2, [sp, #12]
 80071ac:	2800      	cmp	r0, #0
 80071ae:	d004      	beq.n	80071ba <_vfiprintf_r+0x1a>
 80071b0:	6983      	ldr	r3, [r0, #24]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <_vfiprintf_r+0x1a>
 80071b6:	f7ff fc6d 	bl	8006a94 <__sinit>
 80071ba:	4b8e      	ldr	r3, [pc, #568]	; (80073f4 <_vfiprintf_r+0x254>)
 80071bc:	429c      	cmp	r4, r3
 80071be:	d11c      	bne.n	80071fa <_vfiprintf_r+0x5a>
 80071c0:	6874      	ldr	r4, [r6, #4]
 80071c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071c4:	07db      	lsls	r3, r3, #31
 80071c6:	d405      	bmi.n	80071d4 <_vfiprintf_r+0x34>
 80071c8:	89a3      	ldrh	r3, [r4, #12]
 80071ca:	059b      	lsls	r3, r3, #22
 80071cc:	d402      	bmi.n	80071d4 <_vfiprintf_r+0x34>
 80071ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071d0:	f7ff fd01 	bl	8006bd6 <__retarget_lock_acquire_recursive>
 80071d4:	89a3      	ldrh	r3, [r4, #12]
 80071d6:	071b      	lsls	r3, r3, #28
 80071d8:	d502      	bpl.n	80071e0 <_vfiprintf_r+0x40>
 80071da:	6923      	ldr	r3, [r4, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d11d      	bne.n	800721c <_vfiprintf_r+0x7c>
 80071e0:	0021      	movs	r1, r4
 80071e2:	0030      	movs	r0, r6
 80071e4:	f7ff fab0 	bl	8006748 <__swsetup_r>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d017      	beq.n	800721c <_vfiprintf_r+0x7c>
 80071ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071ee:	07db      	lsls	r3, r3, #31
 80071f0:	d50d      	bpl.n	800720e <_vfiprintf_r+0x6e>
 80071f2:	2001      	movs	r0, #1
 80071f4:	4240      	negs	r0, r0
 80071f6:	b021      	add	sp, #132	; 0x84
 80071f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071fa:	4b7f      	ldr	r3, [pc, #508]	; (80073f8 <_vfiprintf_r+0x258>)
 80071fc:	429c      	cmp	r4, r3
 80071fe:	d101      	bne.n	8007204 <_vfiprintf_r+0x64>
 8007200:	68b4      	ldr	r4, [r6, #8]
 8007202:	e7de      	b.n	80071c2 <_vfiprintf_r+0x22>
 8007204:	4b7d      	ldr	r3, [pc, #500]	; (80073fc <_vfiprintf_r+0x25c>)
 8007206:	429c      	cmp	r4, r3
 8007208:	d1db      	bne.n	80071c2 <_vfiprintf_r+0x22>
 800720a:	68f4      	ldr	r4, [r6, #12]
 800720c:	e7d9      	b.n	80071c2 <_vfiprintf_r+0x22>
 800720e:	89a3      	ldrh	r3, [r4, #12]
 8007210:	059b      	lsls	r3, r3, #22
 8007212:	d4ee      	bmi.n	80071f2 <_vfiprintf_r+0x52>
 8007214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007216:	f7ff fcdf 	bl	8006bd8 <__retarget_lock_release_recursive>
 800721a:	e7ea      	b.n	80071f2 <_vfiprintf_r+0x52>
 800721c:	2300      	movs	r3, #0
 800721e:	ad08      	add	r5, sp, #32
 8007220:	616b      	str	r3, [r5, #20]
 8007222:	3320      	adds	r3, #32
 8007224:	766b      	strb	r3, [r5, #25]
 8007226:	3310      	adds	r3, #16
 8007228:	76ab      	strb	r3, [r5, #26]
 800722a:	9707      	str	r7, [sp, #28]
 800722c:	9f03      	ldr	r7, [sp, #12]
 800722e:	783b      	ldrb	r3, [r7, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <_vfiprintf_r+0x98>
 8007234:	2b25      	cmp	r3, #37	; 0x25
 8007236:	d14e      	bne.n	80072d6 <_vfiprintf_r+0x136>
 8007238:	9b03      	ldr	r3, [sp, #12]
 800723a:	1afb      	subs	r3, r7, r3
 800723c:	9305      	str	r3, [sp, #20]
 800723e:	9b03      	ldr	r3, [sp, #12]
 8007240:	429f      	cmp	r7, r3
 8007242:	d00d      	beq.n	8007260 <_vfiprintf_r+0xc0>
 8007244:	9b05      	ldr	r3, [sp, #20]
 8007246:	0021      	movs	r1, r4
 8007248:	0030      	movs	r0, r6
 800724a:	9a03      	ldr	r2, [sp, #12]
 800724c:	f7ff ff95 	bl	800717a <__sfputs_r>
 8007250:	1c43      	adds	r3, r0, #1
 8007252:	d100      	bne.n	8007256 <_vfiprintf_r+0xb6>
 8007254:	e0b5      	b.n	80073c2 <_vfiprintf_r+0x222>
 8007256:	696a      	ldr	r2, [r5, #20]
 8007258:	9b05      	ldr	r3, [sp, #20]
 800725a:	4694      	mov	ip, r2
 800725c:	4463      	add	r3, ip
 800725e:	616b      	str	r3, [r5, #20]
 8007260:	783b      	ldrb	r3, [r7, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d100      	bne.n	8007268 <_vfiprintf_r+0xc8>
 8007266:	e0ac      	b.n	80073c2 <_vfiprintf_r+0x222>
 8007268:	2201      	movs	r2, #1
 800726a:	1c7b      	adds	r3, r7, #1
 800726c:	9303      	str	r3, [sp, #12]
 800726e:	2300      	movs	r3, #0
 8007270:	4252      	negs	r2, r2
 8007272:	606a      	str	r2, [r5, #4]
 8007274:	a904      	add	r1, sp, #16
 8007276:	3254      	adds	r2, #84	; 0x54
 8007278:	1852      	adds	r2, r2, r1
 800727a:	602b      	str	r3, [r5, #0]
 800727c:	60eb      	str	r3, [r5, #12]
 800727e:	60ab      	str	r3, [r5, #8]
 8007280:	7013      	strb	r3, [r2, #0]
 8007282:	65ab      	str	r3, [r5, #88]	; 0x58
 8007284:	9b03      	ldr	r3, [sp, #12]
 8007286:	2205      	movs	r2, #5
 8007288:	7819      	ldrb	r1, [r3, #0]
 800728a:	485d      	ldr	r0, [pc, #372]	; (8007400 <_vfiprintf_r+0x260>)
 800728c:	f000 fb00 	bl	8007890 <memchr>
 8007290:	9b03      	ldr	r3, [sp, #12]
 8007292:	1c5f      	adds	r7, r3, #1
 8007294:	2800      	cmp	r0, #0
 8007296:	d120      	bne.n	80072da <_vfiprintf_r+0x13a>
 8007298:	682a      	ldr	r2, [r5, #0]
 800729a:	06d3      	lsls	r3, r2, #27
 800729c:	d504      	bpl.n	80072a8 <_vfiprintf_r+0x108>
 800729e:	2353      	movs	r3, #83	; 0x53
 80072a0:	a904      	add	r1, sp, #16
 80072a2:	185b      	adds	r3, r3, r1
 80072a4:	2120      	movs	r1, #32
 80072a6:	7019      	strb	r1, [r3, #0]
 80072a8:	0713      	lsls	r3, r2, #28
 80072aa:	d504      	bpl.n	80072b6 <_vfiprintf_r+0x116>
 80072ac:	2353      	movs	r3, #83	; 0x53
 80072ae:	a904      	add	r1, sp, #16
 80072b0:	185b      	adds	r3, r3, r1
 80072b2:	212b      	movs	r1, #43	; 0x2b
 80072b4:	7019      	strb	r1, [r3, #0]
 80072b6:	9b03      	ldr	r3, [sp, #12]
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	2b2a      	cmp	r3, #42	; 0x2a
 80072bc:	d016      	beq.n	80072ec <_vfiprintf_r+0x14c>
 80072be:	2100      	movs	r1, #0
 80072c0:	68eb      	ldr	r3, [r5, #12]
 80072c2:	9f03      	ldr	r7, [sp, #12]
 80072c4:	783a      	ldrb	r2, [r7, #0]
 80072c6:	1c78      	adds	r0, r7, #1
 80072c8:	3a30      	subs	r2, #48	; 0x30
 80072ca:	4684      	mov	ip, r0
 80072cc:	2a09      	cmp	r2, #9
 80072ce:	d94f      	bls.n	8007370 <_vfiprintf_r+0x1d0>
 80072d0:	2900      	cmp	r1, #0
 80072d2:	d111      	bne.n	80072f8 <_vfiprintf_r+0x158>
 80072d4:	e017      	b.n	8007306 <_vfiprintf_r+0x166>
 80072d6:	3701      	adds	r7, #1
 80072d8:	e7a9      	b.n	800722e <_vfiprintf_r+0x8e>
 80072da:	4b49      	ldr	r3, [pc, #292]	; (8007400 <_vfiprintf_r+0x260>)
 80072dc:	682a      	ldr	r2, [r5, #0]
 80072de:	1ac0      	subs	r0, r0, r3
 80072e0:	2301      	movs	r3, #1
 80072e2:	4083      	lsls	r3, r0
 80072e4:	4313      	orrs	r3, r2
 80072e6:	602b      	str	r3, [r5, #0]
 80072e8:	9703      	str	r7, [sp, #12]
 80072ea:	e7cb      	b.n	8007284 <_vfiprintf_r+0xe4>
 80072ec:	9b07      	ldr	r3, [sp, #28]
 80072ee:	1d19      	adds	r1, r3, #4
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	9107      	str	r1, [sp, #28]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	db01      	blt.n	80072fc <_vfiprintf_r+0x15c>
 80072f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80072fa:	e004      	b.n	8007306 <_vfiprintf_r+0x166>
 80072fc:	425b      	negs	r3, r3
 80072fe:	60eb      	str	r3, [r5, #12]
 8007300:	2302      	movs	r3, #2
 8007302:	4313      	orrs	r3, r2
 8007304:	602b      	str	r3, [r5, #0]
 8007306:	783b      	ldrb	r3, [r7, #0]
 8007308:	2b2e      	cmp	r3, #46	; 0x2e
 800730a:	d10a      	bne.n	8007322 <_vfiprintf_r+0x182>
 800730c:	787b      	ldrb	r3, [r7, #1]
 800730e:	2b2a      	cmp	r3, #42	; 0x2a
 8007310:	d137      	bne.n	8007382 <_vfiprintf_r+0x1e2>
 8007312:	9b07      	ldr	r3, [sp, #28]
 8007314:	3702      	adds	r7, #2
 8007316:	1d1a      	adds	r2, r3, #4
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	9207      	str	r2, [sp, #28]
 800731c:	2b00      	cmp	r3, #0
 800731e:	db2d      	blt.n	800737c <_vfiprintf_r+0x1dc>
 8007320:	9309      	str	r3, [sp, #36]	; 0x24
 8007322:	2203      	movs	r2, #3
 8007324:	7839      	ldrb	r1, [r7, #0]
 8007326:	4837      	ldr	r0, [pc, #220]	; (8007404 <_vfiprintf_r+0x264>)
 8007328:	f000 fab2 	bl	8007890 <memchr>
 800732c:	2800      	cmp	r0, #0
 800732e:	d007      	beq.n	8007340 <_vfiprintf_r+0x1a0>
 8007330:	4b34      	ldr	r3, [pc, #208]	; (8007404 <_vfiprintf_r+0x264>)
 8007332:	682a      	ldr	r2, [r5, #0]
 8007334:	1ac0      	subs	r0, r0, r3
 8007336:	2340      	movs	r3, #64	; 0x40
 8007338:	4083      	lsls	r3, r0
 800733a:	4313      	orrs	r3, r2
 800733c:	3701      	adds	r7, #1
 800733e:	602b      	str	r3, [r5, #0]
 8007340:	7839      	ldrb	r1, [r7, #0]
 8007342:	1c7b      	adds	r3, r7, #1
 8007344:	2206      	movs	r2, #6
 8007346:	4830      	ldr	r0, [pc, #192]	; (8007408 <_vfiprintf_r+0x268>)
 8007348:	9303      	str	r3, [sp, #12]
 800734a:	7629      	strb	r1, [r5, #24]
 800734c:	f000 faa0 	bl	8007890 <memchr>
 8007350:	2800      	cmp	r0, #0
 8007352:	d045      	beq.n	80073e0 <_vfiprintf_r+0x240>
 8007354:	4b2d      	ldr	r3, [pc, #180]	; (800740c <_vfiprintf_r+0x26c>)
 8007356:	2b00      	cmp	r3, #0
 8007358:	d127      	bne.n	80073aa <_vfiprintf_r+0x20a>
 800735a:	2207      	movs	r2, #7
 800735c:	9b07      	ldr	r3, [sp, #28]
 800735e:	3307      	adds	r3, #7
 8007360:	4393      	bics	r3, r2
 8007362:	3308      	adds	r3, #8
 8007364:	9307      	str	r3, [sp, #28]
 8007366:	696b      	ldr	r3, [r5, #20]
 8007368:	9a04      	ldr	r2, [sp, #16]
 800736a:	189b      	adds	r3, r3, r2
 800736c:	616b      	str	r3, [r5, #20]
 800736e:	e75d      	b.n	800722c <_vfiprintf_r+0x8c>
 8007370:	210a      	movs	r1, #10
 8007372:	434b      	muls	r3, r1
 8007374:	4667      	mov	r7, ip
 8007376:	189b      	adds	r3, r3, r2
 8007378:	3909      	subs	r1, #9
 800737a:	e7a3      	b.n	80072c4 <_vfiprintf_r+0x124>
 800737c:	2301      	movs	r3, #1
 800737e:	425b      	negs	r3, r3
 8007380:	e7ce      	b.n	8007320 <_vfiprintf_r+0x180>
 8007382:	2300      	movs	r3, #0
 8007384:	001a      	movs	r2, r3
 8007386:	3701      	adds	r7, #1
 8007388:	606b      	str	r3, [r5, #4]
 800738a:	7839      	ldrb	r1, [r7, #0]
 800738c:	1c78      	adds	r0, r7, #1
 800738e:	3930      	subs	r1, #48	; 0x30
 8007390:	4684      	mov	ip, r0
 8007392:	2909      	cmp	r1, #9
 8007394:	d903      	bls.n	800739e <_vfiprintf_r+0x1fe>
 8007396:	2b00      	cmp	r3, #0
 8007398:	d0c3      	beq.n	8007322 <_vfiprintf_r+0x182>
 800739a:	9209      	str	r2, [sp, #36]	; 0x24
 800739c:	e7c1      	b.n	8007322 <_vfiprintf_r+0x182>
 800739e:	230a      	movs	r3, #10
 80073a0:	435a      	muls	r2, r3
 80073a2:	4667      	mov	r7, ip
 80073a4:	1852      	adds	r2, r2, r1
 80073a6:	3b09      	subs	r3, #9
 80073a8:	e7ef      	b.n	800738a <_vfiprintf_r+0x1ea>
 80073aa:	ab07      	add	r3, sp, #28
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	0022      	movs	r2, r4
 80073b0:	0029      	movs	r1, r5
 80073b2:	0030      	movs	r0, r6
 80073b4:	4b16      	ldr	r3, [pc, #88]	; (8007410 <_vfiprintf_r+0x270>)
 80073b6:	e000      	b.n	80073ba <_vfiprintf_r+0x21a>
 80073b8:	bf00      	nop
 80073ba:	9004      	str	r0, [sp, #16]
 80073bc:	9b04      	ldr	r3, [sp, #16]
 80073be:	3301      	adds	r3, #1
 80073c0:	d1d1      	bne.n	8007366 <_vfiprintf_r+0x1c6>
 80073c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073c4:	07db      	lsls	r3, r3, #31
 80073c6:	d405      	bmi.n	80073d4 <_vfiprintf_r+0x234>
 80073c8:	89a3      	ldrh	r3, [r4, #12]
 80073ca:	059b      	lsls	r3, r3, #22
 80073cc:	d402      	bmi.n	80073d4 <_vfiprintf_r+0x234>
 80073ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073d0:	f7ff fc02 	bl	8006bd8 <__retarget_lock_release_recursive>
 80073d4:	89a3      	ldrh	r3, [r4, #12]
 80073d6:	065b      	lsls	r3, r3, #25
 80073d8:	d500      	bpl.n	80073dc <_vfiprintf_r+0x23c>
 80073da:	e70a      	b.n	80071f2 <_vfiprintf_r+0x52>
 80073dc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80073de:	e70a      	b.n	80071f6 <_vfiprintf_r+0x56>
 80073e0:	ab07      	add	r3, sp, #28
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	0022      	movs	r2, r4
 80073e6:	0029      	movs	r1, r5
 80073e8:	0030      	movs	r0, r6
 80073ea:	4b09      	ldr	r3, [pc, #36]	; (8007410 <_vfiprintf_r+0x270>)
 80073ec:	f000 f882 	bl	80074f4 <_printf_i>
 80073f0:	e7e3      	b.n	80073ba <_vfiprintf_r+0x21a>
 80073f2:	46c0      	nop			; (mov r8, r8)
 80073f4:	080080c8 	.word	0x080080c8
 80073f8:	080080e8 	.word	0x080080e8
 80073fc:	080080a8 	.word	0x080080a8
 8007400:	08008108 	.word	0x08008108
 8007404:	0800810e 	.word	0x0800810e
 8007408:	08008112 	.word	0x08008112
 800740c:	00000000 	.word	0x00000000
 8007410:	0800717b 	.word	0x0800717b

08007414 <_printf_common>:
 8007414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007416:	0015      	movs	r5, r2
 8007418:	9301      	str	r3, [sp, #4]
 800741a:	688a      	ldr	r2, [r1, #8]
 800741c:	690b      	ldr	r3, [r1, #16]
 800741e:	000c      	movs	r4, r1
 8007420:	9000      	str	r0, [sp, #0]
 8007422:	4293      	cmp	r3, r2
 8007424:	da00      	bge.n	8007428 <_printf_common+0x14>
 8007426:	0013      	movs	r3, r2
 8007428:	0022      	movs	r2, r4
 800742a:	602b      	str	r3, [r5, #0]
 800742c:	3243      	adds	r2, #67	; 0x43
 800742e:	7812      	ldrb	r2, [r2, #0]
 8007430:	2a00      	cmp	r2, #0
 8007432:	d001      	beq.n	8007438 <_printf_common+0x24>
 8007434:	3301      	adds	r3, #1
 8007436:	602b      	str	r3, [r5, #0]
 8007438:	6823      	ldr	r3, [r4, #0]
 800743a:	069b      	lsls	r3, r3, #26
 800743c:	d502      	bpl.n	8007444 <_printf_common+0x30>
 800743e:	682b      	ldr	r3, [r5, #0]
 8007440:	3302      	adds	r3, #2
 8007442:	602b      	str	r3, [r5, #0]
 8007444:	6822      	ldr	r2, [r4, #0]
 8007446:	2306      	movs	r3, #6
 8007448:	0017      	movs	r7, r2
 800744a:	401f      	ands	r7, r3
 800744c:	421a      	tst	r2, r3
 800744e:	d027      	beq.n	80074a0 <_printf_common+0x8c>
 8007450:	0023      	movs	r3, r4
 8007452:	3343      	adds	r3, #67	; 0x43
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	1e5a      	subs	r2, r3, #1
 8007458:	4193      	sbcs	r3, r2
 800745a:	6822      	ldr	r2, [r4, #0]
 800745c:	0692      	lsls	r2, r2, #26
 800745e:	d430      	bmi.n	80074c2 <_printf_common+0xae>
 8007460:	0022      	movs	r2, r4
 8007462:	9901      	ldr	r1, [sp, #4]
 8007464:	9800      	ldr	r0, [sp, #0]
 8007466:	9e08      	ldr	r6, [sp, #32]
 8007468:	3243      	adds	r2, #67	; 0x43
 800746a:	47b0      	blx	r6
 800746c:	1c43      	adds	r3, r0, #1
 800746e:	d025      	beq.n	80074bc <_printf_common+0xa8>
 8007470:	2306      	movs	r3, #6
 8007472:	6820      	ldr	r0, [r4, #0]
 8007474:	682a      	ldr	r2, [r5, #0]
 8007476:	68e1      	ldr	r1, [r4, #12]
 8007478:	2500      	movs	r5, #0
 800747a:	4003      	ands	r3, r0
 800747c:	2b04      	cmp	r3, #4
 800747e:	d103      	bne.n	8007488 <_printf_common+0x74>
 8007480:	1a8d      	subs	r5, r1, r2
 8007482:	43eb      	mvns	r3, r5
 8007484:	17db      	asrs	r3, r3, #31
 8007486:	401d      	ands	r5, r3
 8007488:	68a3      	ldr	r3, [r4, #8]
 800748a:	6922      	ldr	r2, [r4, #16]
 800748c:	4293      	cmp	r3, r2
 800748e:	dd01      	ble.n	8007494 <_printf_common+0x80>
 8007490:	1a9b      	subs	r3, r3, r2
 8007492:	18ed      	adds	r5, r5, r3
 8007494:	2700      	movs	r7, #0
 8007496:	42bd      	cmp	r5, r7
 8007498:	d120      	bne.n	80074dc <_printf_common+0xc8>
 800749a:	2000      	movs	r0, #0
 800749c:	e010      	b.n	80074c0 <_printf_common+0xac>
 800749e:	3701      	adds	r7, #1
 80074a0:	68e3      	ldr	r3, [r4, #12]
 80074a2:	682a      	ldr	r2, [r5, #0]
 80074a4:	1a9b      	subs	r3, r3, r2
 80074a6:	42bb      	cmp	r3, r7
 80074a8:	ddd2      	ble.n	8007450 <_printf_common+0x3c>
 80074aa:	0022      	movs	r2, r4
 80074ac:	2301      	movs	r3, #1
 80074ae:	9901      	ldr	r1, [sp, #4]
 80074b0:	9800      	ldr	r0, [sp, #0]
 80074b2:	9e08      	ldr	r6, [sp, #32]
 80074b4:	3219      	adds	r2, #25
 80074b6:	47b0      	blx	r6
 80074b8:	1c43      	adds	r3, r0, #1
 80074ba:	d1f0      	bne.n	800749e <_printf_common+0x8a>
 80074bc:	2001      	movs	r0, #1
 80074be:	4240      	negs	r0, r0
 80074c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80074c2:	2030      	movs	r0, #48	; 0x30
 80074c4:	18e1      	adds	r1, r4, r3
 80074c6:	3143      	adds	r1, #67	; 0x43
 80074c8:	7008      	strb	r0, [r1, #0]
 80074ca:	0021      	movs	r1, r4
 80074cc:	1c5a      	adds	r2, r3, #1
 80074ce:	3145      	adds	r1, #69	; 0x45
 80074d0:	7809      	ldrb	r1, [r1, #0]
 80074d2:	18a2      	adds	r2, r4, r2
 80074d4:	3243      	adds	r2, #67	; 0x43
 80074d6:	3302      	adds	r3, #2
 80074d8:	7011      	strb	r1, [r2, #0]
 80074da:	e7c1      	b.n	8007460 <_printf_common+0x4c>
 80074dc:	0022      	movs	r2, r4
 80074de:	2301      	movs	r3, #1
 80074e0:	9901      	ldr	r1, [sp, #4]
 80074e2:	9800      	ldr	r0, [sp, #0]
 80074e4:	9e08      	ldr	r6, [sp, #32]
 80074e6:	321a      	adds	r2, #26
 80074e8:	47b0      	blx	r6
 80074ea:	1c43      	adds	r3, r0, #1
 80074ec:	d0e6      	beq.n	80074bc <_printf_common+0xa8>
 80074ee:	3701      	adds	r7, #1
 80074f0:	e7d1      	b.n	8007496 <_printf_common+0x82>
	...

080074f4 <_printf_i>:
 80074f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074f6:	b08b      	sub	sp, #44	; 0x2c
 80074f8:	9206      	str	r2, [sp, #24]
 80074fa:	000a      	movs	r2, r1
 80074fc:	3243      	adds	r2, #67	; 0x43
 80074fe:	9307      	str	r3, [sp, #28]
 8007500:	9005      	str	r0, [sp, #20]
 8007502:	9204      	str	r2, [sp, #16]
 8007504:	7e0a      	ldrb	r2, [r1, #24]
 8007506:	000c      	movs	r4, r1
 8007508:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800750a:	2a78      	cmp	r2, #120	; 0x78
 800750c:	d807      	bhi.n	800751e <_printf_i+0x2a>
 800750e:	2a62      	cmp	r2, #98	; 0x62
 8007510:	d809      	bhi.n	8007526 <_printf_i+0x32>
 8007512:	2a00      	cmp	r2, #0
 8007514:	d100      	bne.n	8007518 <_printf_i+0x24>
 8007516:	e0c1      	b.n	800769c <_printf_i+0x1a8>
 8007518:	2a58      	cmp	r2, #88	; 0x58
 800751a:	d100      	bne.n	800751e <_printf_i+0x2a>
 800751c:	e08c      	b.n	8007638 <_printf_i+0x144>
 800751e:	0026      	movs	r6, r4
 8007520:	3642      	adds	r6, #66	; 0x42
 8007522:	7032      	strb	r2, [r6, #0]
 8007524:	e022      	b.n	800756c <_printf_i+0x78>
 8007526:	0010      	movs	r0, r2
 8007528:	3863      	subs	r0, #99	; 0x63
 800752a:	2815      	cmp	r0, #21
 800752c:	d8f7      	bhi.n	800751e <_printf_i+0x2a>
 800752e:	f7f8 fdef 	bl	8000110 <__gnu_thumb1_case_shi>
 8007532:	0016      	.short	0x0016
 8007534:	fff6001f 	.word	0xfff6001f
 8007538:	fff6fff6 	.word	0xfff6fff6
 800753c:	001ffff6 	.word	0x001ffff6
 8007540:	fff6fff6 	.word	0xfff6fff6
 8007544:	fff6fff6 	.word	0xfff6fff6
 8007548:	003600a8 	.word	0x003600a8
 800754c:	fff6009a 	.word	0xfff6009a
 8007550:	00b9fff6 	.word	0x00b9fff6
 8007554:	0036fff6 	.word	0x0036fff6
 8007558:	fff6fff6 	.word	0xfff6fff6
 800755c:	009e      	.short	0x009e
 800755e:	0026      	movs	r6, r4
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	3642      	adds	r6, #66	; 0x42
 8007564:	1d11      	adds	r1, r2, #4
 8007566:	6019      	str	r1, [r3, #0]
 8007568:	6813      	ldr	r3, [r2, #0]
 800756a:	7033      	strb	r3, [r6, #0]
 800756c:	2301      	movs	r3, #1
 800756e:	e0a7      	b.n	80076c0 <_printf_i+0x1cc>
 8007570:	6808      	ldr	r0, [r1, #0]
 8007572:	6819      	ldr	r1, [r3, #0]
 8007574:	1d0a      	adds	r2, r1, #4
 8007576:	0605      	lsls	r5, r0, #24
 8007578:	d50b      	bpl.n	8007592 <_printf_i+0x9e>
 800757a:	680d      	ldr	r5, [r1, #0]
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	2d00      	cmp	r5, #0
 8007580:	da03      	bge.n	800758a <_printf_i+0x96>
 8007582:	232d      	movs	r3, #45	; 0x2d
 8007584:	9a04      	ldr	r2, [sp, #16]
 8007586:	426d      	negs	r5, r5
 8007588:	7013      	strb	r3, [r2, #0]
 800758a:	4b61      	ldr	r3, [pc, #388]	; (8007710 <_printf_i+0x21c>)
 800758c:	270a      	movs	r7, #10
 800758e:	9303      	str	r3, [sp, #12]
 8007590:	e01b      	b.n	80075ca <_printf_i+0xd6>
 8007592:	680d      	ldr	r5, [r1, #0]
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	0641      	lsls	r1, r0, #25
 8007598:	d5f1      	bpl.n	800757e <_printf_i+0x8a>
 800759a:	b22d      	sxth	r5, r5
 800759c:	e7ef      	b.n	800757e <_printf_i+0x8a>
 800759e:	680d      	ldr	r5, [r1, #0]
 80075a0:	6819      	ldr	r1, [r3, #0]
 80075a2:	1d08      	adds	r0, r1, #4
 80075a4:	6018      	str	r0, [r3, #0]
 80075a6:	062e      	lsls	r6, r5, #24
 80075a8:	d501      	bpl.n	80075ae <_printf_i+0xba>
 80075aa:	680d      	ldr	r5, [r1, #0]
 80075ac:	e003      	b.n	80075b6 <_printf_i+0xc2>
 80075ae:	066d      	lsls	r5, r5, #25
 80075b0:	d5fb      	bpl.n	80075aa <_printf_i+0xb6>
 80075b2:	680d      	ldr	r5, [r1, #0]
 80075b4:	b2ad      	uxth	r5, r5
 80075b6:	4b56      	ldr	r3, [pc, #344]	; (8007710 <_printf_i+0x21c>)
 80075b8:	2708      	movs	r7, #8
 80075ba:	9303      	str	r3, [sp, #12]
 80075bc:	2a6f      	cmp	r2, #111	; 0x6f
 80075be:	d000      	beq.n	80075c2 <_printf_i+0xce>
 80075c0:	3702      	adds	r7, #2
 80075c2:	0023      	movs	r3, r4
 80075c4:	2200      	movs	r2, #0
 80075c6:	3343      	adds	r3, #67	; 0x43
 80075c8:	701a      	strb	r2, [r3, #0]
 80075ca:	6863      	ldr	r3, [r4, #4]
 80075cc:	60a3      	str	r3, [r4, #8]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	db03      	blt.n	80075da <_printf_i+0xe6>
 80075d2:	2204      	movs	r2, #4
 80075d4:	6821      	ldr	r1, [r4, #0]
 80075d6:	4391      	bics	r1, r2
 80075d8:	6021      	str	r1, [r4, #0]
 80075da:	2d00      	cmp	r5, #0
 80075dc:	d102      	bne.n	80075e4 <_printf_i+0xf0>
 80075de:	9e04      	ldr	r6, [sp, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00c      	beq.n	80075fe <_printf_i+0x10a>
 80075e4:	9e04      	ldr	r6, [sp, #16]
 80075e6:	0028      	movs	r0, r5
 80075e8:	0039      	movs	r1, r7
 80075ea:	f7f8 fe21 	bl	8000230 <__aeabi_uidivmod>
 80075ee:	9b03      	ldr	r3, [sp, #12]
 80075f0:	3e01      	subs	r6, #1
 80075f2:	5c5b      	ldrb	r3, [r3, r1]
 80075f4:	7033      	strb	r3, [r6, #0]
 80075f6:	002b      	movs	r3, r5
 80075f8:	0005      	movs	r5, r0
 80075fa:	429f      	cmp	r7, r3
 80075fc:	d9f3      	bls.n	80075e6 <_printf_i+0xf2>
 80075fe:	2f08      	cmp	r7, #8
 8007600:	d109      	bne.n	8007616 <_printf_i+0x122>
 8007602:	6823      	ldr	r3, [r4, #0]
 8007604:	07db      	lsls	r3, r3, #31
 8007606:	d506      	bpl.n	8007616 <_printf_i+0x122>
 8007608:	6863      	ldr	r3, [r4, #4]
 800760a:	6922      	ldr	r2, [r4, #16]
 800760c:	4293      	cmp	r3, r2
 800760e:	dc02      	bgt.n	8007616 <_printf_i+0x122>
 8007610:	2330      	movs	r3, #48	; 0x30
 8007612:	3e01      	subs	r6, #1
 8007614:	7033      	strb	r3, [r6, #0]
 8007616:	9b04      	ldr	r3, [sp, #16]
 8007618:	1b9b      	subs	r3, r3, r6
 800761a:	6123      	str	r3, [r4, #16]
 800761c:	9b07      	ldr	r3, [sp, #28]
 800761e:	0021      	movs	r1, r4
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	9805      	ldr	r0, [sp, #20]
 8007624:	9b06      	ldr	r3, [sp, #24]
 8007626:	aa09      	add	r2, sp, #36	; 0x24
 8007628:	f7ff fef4 	bl	8007414 <_printf_common>
 800762c:	1c43      	adds	r3, r0, #1
 800762e:	d14c      	bne.n	80076ca <_printf_i+0x1d6>
 8007630:	2001      	movs	r0, #1
 8007632:	4240      	negs	r0, r0
 8007634:	b00b      	add	sp, #44	; 0x2c
 8007636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007638:	3145      	adds	r1, #69	; 0x45
 800763a:	700a      	strb	r2, [r1, #0]
 800763c:	4a34      	ldr	r2, [pc, #208]	; (8007710 <_printf_i+0x21c>)
 800763e:	9203      	str	r2, [sp, #12]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	6821      	ldr	r1, [r4, #0]
 8007644:	ca20      	ldmia	r2!, {r5}
 8007646:	601a      	str	r2, [r3, #0]
 8007648:	0608      	lsls	r0, r1, #24
 800764a:	d516      	bpl.n	800767a <_printf_i+0x186>
 800764c:	07cb      	lsls	r3, r1, #31
 800764e:	d502      	bpl.n	8007656 <_printf_i+0x162>
 8007650:	2320      	movs	r3, #32
 8007652:	4319      	orrs	r1, r3
 8007654:	6021      	str	r1, [r4, #0]
 8007656:	2710      	movs	r7, #16
 8007658:	2d00      	cmp	r5, #0
 800765a:	d1b2      	bne.n	80075c2 <_printf_i+0xce>
 800765c:	2320      	movs	r3, #32
 800765e:	6822      	ldr	r2, [r4, #0]
 8007660:	439a      	bics	r2, r3
 8007662:	6022      	str	r2, [r4, #0]
 8007664:	e7ad      	b.n	80075c2 <_printf_i+0xce>
 8007666:	2220      	movs	r2, #32
 8007668:	6809      	ldr	r1, [r1, #0]
 800766a:	430a      	orrs	r2, r1
 800766c:	6022      	str	r2, [r4, #0]
 800766e:	0022      	movs	r2, r4
 8007670:	2178      	movs	r1, #120	; 0x78
 8007672:	3245      	adds	r2, #69	; 0x45
 8007674:	7011      	strb	r1, [r2, #0]
 8007676:	4a27      	ldr	r2, [pc, #156]	; (8007714 <_printf_i+0x220>)
 8007678:	e7e1      	b.n	800763e <_printf_i+0x14a>
 800767a:	0648      	lsls	r0, r1, #25
 800767c:	d5e6      	bpl.n	800764c <_printf_i+0x158>
 800767e:	b2ad      	uxth	r5, r5
 8007680:	e7e4      	b.n	800764c <_printf_i+0x158>
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	680d      	ldr	r5, [r1, #0]
 8007686:	1d10      	adds	r0, r2, #4
 8007688:	6949      	ldr	r1, [r1, #20]
 800768a:	6018      	str	r0, [r3, #0]
 800768c:	6813      	ldr	r3, [r2, #0]
 800768e:	062e      	lsls	r6, r5, #24
 8007690:	d501      	bpl.n	8007696 <_printf_i+0x1a2>
 8007692:	6019      	str	r1, [r3, #0]
 8007694:	e002      	b.n	800769c <_printf_i+0x1a8>
 8007696:	066d      	lsls	r5, r5, #25
 8007698:	d5fb      	bpl.n	8007692 <_printf_i+0x19e>
 800769a:	8019      	strh	r1, [r3, #0]
 800769c:	2300      	movs	r3, #0
 800769e:	9e04      	ldr	r6, [sp, #16]
 80076a0:	6123      	str	r3, [r4, #16]
 80076a2:	e7bb      	b.n	800761c <_printf_i+0x128>
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	1d11      	adds	r1, r2, #4
 80076a8:	6019      	str	r1, [r3, #0]
 80076aa:	6816      	ldr	r6, [r2, #0]
 80076ac:	2100      	movs	r1, #0
 80076ae:	0030      	movs	r0, r6
 80076b0:	6862      	ldr	r2, [r4, #4]
 80076b2:	f000 f8ed 	bl	8007890 <memchr>
 80076b6:	2800      	cmp	r0, #0
 80076b8:	d001      	beq.n	80076be <_printf_i+0x1ca>
 80076ba:	1b80      	subs	r0, r0, r6
 80076bc:	6060      	str	r0, [r4, #4]
 80076be:	6863      	ldr	r3, [r4, #4]
 80076c0:	6123      	str	r3, [r4, #16]
 80076c2:	2300      	movs	r3, #0
 80076c4:	9a04      	ldr	r2, [sp, #16]
 80076c6:	7013      	strb	r3, [r2, #0]
 80076c8:	e7a8      	b.n	800761c <_printf_i+0x128>
 80076ca:	6923      	ldr	r3, [r4, #16]
 80076cc:	0032      	movs	r2, r6
 80076ce:	9906      	ldr	r1, [sp, #24]
 80076d0:	9805      	ldr	r0, [sp, #20]
 80076d2:	9d07      	ldr	r5, [sp, #28]
 80076d4:	47a8      	blx	r5
 80076d6:	1c43      	adds	r3, r0, #1
 80076d8:	d0aa      	beq.n	8007630 <_printf_i+0x13c>
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	079b      	lsls	r3, r3, #30
 80076de:	d415      	bmi.n	800770c <_printf_i+0x218>
 80076e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e2:	68e0      	ldr	r0, [r4, #12]
 80076e4:	4298      	cmp	r0, r3
 80076e6:	daa5      	bge.n	8007634 <_printf_i+0x140>
 80076e8:	0018      	movs	r0, r3
 80076ea:	e7a3      	b.n	8007634 <_printf_i+0x140>
 80076ec:	0022      	movs	r2, r4
 80076ee:	2301      	movs	r3, #1
 80076f0:	9906      	ldr	r1, [sp, #24]
 80076f2:	9805      	ldr	r0, [sp, #20]
 80076f4:	9e07      	ldr	r6, [sp, #28]
 80076f6:	3219      	adds	r2, #25
 80076f8:	47b0      	blx	r6
 80076fa:	1c43      	adds	r3, r0, #1
 80076fc:	d098      	beq.n	8007630 <_printf_i+0x13c>
 80076fe:	3501      	adds	r5, #1
 8007700:	68e3      	ldr	r3, [r4, #12]
 8007702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007704:	1a9b      	subs	r3, r3, r2
 8007706:	42ab      	cmp	r3, r5
 8007708:	dcf0      	bgt.n	80076ec <_printf_i+0x1f8>
 800770a:	e7e9      	b.n	80076e0 <_printf_i+0x1ec>
 800770c:	2500      	movs	r5, #0
 800770e:	e7f7      	b.n	8007700 <_printf_i+0x20c>
 8007710:	08008119 	.word	0x08008119
 8007714:	0800812a 	.word	0x0800812a

08007718 <_sbrk_r>:
 8007718:	2300      	movs	r3, #0
 800771a:	b570      	push	{r4, r5, r6, lr}
 800771c:	4d06      	ldr	r5, [pc, #24]	; (8007738 <_sbrk_r+0x20>)
 800771e:	0004      	movs	r4, r0
 8007720:	0008      	movs	r0, r1
 8007722:	602b      	str	r3, [r5, #0]
 8007724:	f7fa fbe6 	bl	8001ef4 <_sbrk>
 8007728:	1c43      	adds	r3, r0, #1
 800772a:	d103      	bne.n	8007734 <_sbrk_r+0x1c>
 800772c:	682b      	ldr	r3, [r5, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d000      	beq.n	8007734 <_sbrk_r+0x1c>
 8007732:	6023      	str	r3, [r4, #0]
 8007734:	bd70      	pop	{r4, r5, r6, pc}
 8007736:	46c0      	nop			; (mov r8, r8)
 8007738:	20000d64 	.word	0x20000d64

0800773c <__sread>:
 800773c:	b570      	push	{r4, r5, r6, lr}
 800773e:	000c      	movs	r4, r1
 8007740:	250e      	movs	r5, #14
 8007742:	5f49      	ldrsh	r1, [r1, r5]
 8007744:	f000 f902 	bl	800794c <_read_r>
 8007748:	2800      	cmp	r0, #0
 800774a:	db03      	blt.n	8007754 <__sread+0x18>
 800774c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800774e:	181b      	adds	r3, r3, r0
 8007750:	6563      	str	r3, [r4, #84]	; 0x54
 8007752:	bd70      	pop	{r4, r5, r6, pc}
 8007754:	89a3      	ldrh	r3, [r4, #12]
 8007756:	4a02      	ldr	r2, [pc, #8]	; (8007760 <__sread+0x24>)
 8007758:	4013      	ands	r3, r2
 800775a:	81a3      	strh	r3, [r4, #12]
 800775c:	e7f9      	b.n	8007752 <__sread+0x16>
 800775e:	46c0      	nop			; (mov r8, r8)
 8007760:	ffffefff 	.word	0xffffefff

08007764 <__swrite>:
 8007764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007766:	001f      	movs	r7, r3
 8007768:	898b      	ldrh	r3, [r1, #12]
 800776a:	0005      	movs	r5, r0
 800776c:	000c      	movs	r4, r1
 800776e:	0016      	movs	r6, r2
 8007770:	05db      	lsls	r3, r3, #23
 8007772:	d505      	bpl.n	8007780 <__swrite+0x1c>
 8007774:	230e      	movs	r3, #14
 8007776:	5ec9      	ldrsh	r1, [r1, r3]
 8007778:	2200      	movs	r2, #0
 800777a:	2302      	movs	r3, #2
 800777c:	f000 f874 	bl	8007868 <_lseek_r>
 8007780:	89a3      	ldrh	r3, [r4, #12]
 8007782:	4a05      	ldr	r2, [pc, #20]	; (8007798 <__swrite+0x34>)
 8007784:	0028      	movs	r0, r5
 8007786:	4013      	ands	r3, r2
 8007788:	81a3      	strh	r3, [r4, #12]
 800778a:	0032      	movs	r2, r6
 800778c:	230e      	movs	r3, #14
 800778e:	5ee1      	ldrsh	r1, [r4, r3]
 8007790:	003b      	movs	r3, r7
 8007792:	f000 f81f 	bl	80077d4 <_write_r>
 8007796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007798:	ffffefff 	.word	0xffffefff

0800779c <__sseek>:
 800779c:	b570      	push	{r4, r5, r6, lr}
 800779e:	000c      	movs	r4, r1
 80077a0:	250e      	movs	r5, #14
 80077a2:	5f49      	ldrsh	r1, [r1, r5]
 80077a4:	f000 f860 	bl	8007868 <_lseek_r>
 80077a8:	89a3      	ldrh	r3, [r4, #12]
 80077aa:	1c42      	adds	r2, r0, #1
 80077ac:	d103      	bne.n	80077b6 <__sseek+0x1a>
 80077ae:	4a05      	ldr	r2, [pc, #20]	; (80077c4 <__sseek+0x28>)
 80077b0:	4013      	ands	r3, r2
 80077b2:	81a3      	strh	r3, [r4, #12]
 80077b4:	bd70      	pop	{r4, r5, r6, pc}
 80077b6:	2280      	movs	r2, #128	; 0x80
 80077b8:	0152      	lsls	r2, r2, #5
 80077ba:	4313      	orrs	r3, r2
 80077bc:	81a3      	strh	r3, [r4, #12]
 80077be:	6560      	str	r0, [r4, #84]	; 0x54
 80077c0:	e7f8      	b.n	80077b4 <__sseek+0x18>
 80077c2:	46c0      	nop			; (mov r8, r8)
 80077c4:	ffffefff 	.word	0xffffefff

080077c8 <__sclose>:
 80077c8:	b510      	push	{r4, lr}
 80077ca:	230e      	movs	r3, #14
 80077cc:	5ec9      	ldrsh	r1, [r1, r3]
 80077ce:	f000 f815 	bl	80077fc <_close_r>
 80077d2:	bd10      	pop	{r4, pc}

080077d4 <_write_r>:
 80077d4:	b570      	push	{r4, r5, r6, lr}
 80077d6:	0004      	movs	r4, r0
 80077d8:	0008      	movs	r0, r1
 80077da:	0011      	movs	r1, r2
 80077dc:	001a      	movs	r2, r3
 80077de:	2300      	movs	r3, #0
 80077e0:	4d05      	ldr	r5, [pc, #20]	; (80077f8 <_write_r+0x24>)
 80077e2:	602b      	str	r3, [r5, #0]
 80077e4:	f7fa f990 	bl	8001b08 <_write>
 80077e8:	1c43      	adds	r3, r0, #1
 80077ea:	d103      	bne.n	80077f4 <_write_r+0x20>
 80077ec:	682b      	ldr	r3, [r5, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d000      	beq.n	80077f4 <_write_r+0x20>
 80077f2:	6023      	str	r3, [r4, #0]
 80077f4:	bd70      	pop	{r4, r5, r6, pc}
 80077f6:	46c0      	nop			; (mov r8, r8)
 80077f8:	20000d64 	.word	0x20000d64

080077fc <_close_r>:
 80077fc:	2300      	movs	r3, #0
 80077fe:	b570      	push	{r4, r5, r6, lr}
 8007800:	4d06      	ldr	r5, [pc, #24]	; (800781c <_close_r+0x20>)
 8007802:	0004      	movs	r4, r0
 8007804:	0008      	movs	r0, r1
 8007806:	602b      	str	r3, [r5, #0]
 8007808:	f7fa f9ac 	bl	8001b64 <_close>
 800780c:	1c43      	adds	r3, r0, #1
 800780e:	d103      	bne.n	8007818 <_close_r+0x1c>
 8007810:	682b      	ldr	r3, [r5, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d000      	beq.n	8007818 <_close_r+0x1c>
 8007816:	6023      	str	r3, [r4, #0]
 8007818:	bd70      	pop	{r4, r5, r6, pc}
 800781a:	46c0      	nop			; (mov r8, r8)
 800781c:	20000d64 	.word	0x20000d64

08007820 <_fstat_r>:
 8007820:	2300      	movs	r3, #0
 8007822:	b570      	push	{r4, r5, r6, lr}
 8007824:	4d06      	ldr	r5, [pc, #24]	; (8007840 <_fstat_r+0x20>)
 8007826:	0004      	movs	r4, r0
 8007828:	0008      	movs	r0, r1
 800782a:	0011      	movs	r1, r2
 800782c:	602b      	str	r3, [r5, #0]
 800782e:	f7fa f9eb 	bl	8001c08 <_fstat>
 8007832:	1c43      	adds	r3, r0, #1
 8007834:	d103      	bne.n	800783e <_fstat_r+0x1e>
 8007836:	682b      	ldr	r3, [r5, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d000      	beq.n	800783e <_fstat_r+0x1e>
 800783c:	6023      	str	r3, [r4, #0]
 800783e:	bd70      	pop	{r4, r5, r6, pc}
 8007840:	20000d64 	.word	0x20000d64

08007844 <_isatty_r>:
 8007844:	2300      	movs	r3, #0
 8007846:	b570      	push	{r4, r5, r6, lr}
 8007848:	4d06      	ldr	r5, [pc, #24]	; (8007864 <_isatty_r+0x20>)
 800784a:	0004      	movs	r4, r0
 800784c:	0008      	movs	r0, r1
 800784e:	602b      	str	r3, [r5, #0]
 8007850:	f7fa f944 	bl	8001adc <_isatty>
 8007854:	1c43      	adds	r3, r0, #1
 8007856:	d103      	bne.n	8007860 <_isatty_r+0x1c>
 8007858:	682b      	ldr	r3, [r5, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d000      	beq.n	8007860 <_isatty_r+0x1c>
 800785e:	6023      	str	r3, [r4, #0]
 8007860:	bd70      	pop	{r4, r5, r6, pc}
 8007862:	46c0      	nop			; (mov r8, r8)
 8007864:	20000d64 	.word	0x20000d64

08007868 <_lseek_r>:
 8007868:	b570      	push	{r4, r5, r6, lr}
 800786a:	0004      	movs	r4, r0
 800786c:	0008      	movs	r0, r1
 800786e:	0011      	movs	r1, r2
 8007870:	001a      	movs	r2, r3
 8007872:	2300      	movs	r3, #0
 8007874:	4d05      	ldr	r5, [pc, #20]	; (800788c <_lseek_r+0x24>)
 8007876:	602b      	str	r3, [r5, #0]
 8007878:	f7fa f98b 	bl	8001b92 <_lseek>
 800787c:	1c43      	adds	r3, r0, #1
 800787e:	d103      	bne.n	8007888 <_lseek_r+0x20>
 8007880:	682b      	ldr	r3, [r5, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d000      	beq.n	8007888 <_lseek_r+0x20>
 8007886:	6023      	str	r3, [r4, #0]
 8007888:	bd70      	pop	{r4, r5, r6, pc}
 800788a:	46c0      	nop			; (mov r8, r8)
 800788c:	20000d64 	.word	0x20000d64

08007890 <memchr>:
 8007890:	b2c9      	uxtb	r1, r1
 8007892:	1882      	adds	r2, r0, r2
 8007894:	4290      	cmp	r0, r2
 8007896:	d101      	bne.n	800789c <memchr+0xc>
 8007898:	2000      	movs	r0, #0
 800789a:	4770      	bx	lr
 800789c:	7803      	ldrb	r3, [r0, #0]
 800789e:	428b      	cmp	r3, r1
 80078a0:	d0fb      	beq.n	800789a <memchr+0xa>
 80078a2:	3001      	adds	r0, #1
 80078a4:	e7f6      	b.n	8007894 <memchr+0x4>

080078a6 <memmove>:
 80078a6:	b510      	push	{r4, lr}
 80078a8:	4288      	cmp	r0, r1
 80078aa:	d902      	bls.n	80078b2 <memmove+0xc>
 80078ac:	188b      	adds	r3, r1, r2
 80078ae:	4298      	cmp	r0, r3
 80078b0:	d303      	bcc.n	80078ba <memmove+0x14>
 80078b2:	2300      	movs	r3, #0
 80078b4:	e007      	b.n	80078c6 <memmove+0x20>
 80078b6:	5c8b      	ldrb	r3, [r1, r2]
 80078b8:	5483      	strb	r3, [r0, r2]
 80078ba:	3a01      	subs	r2, #1
 80078bc:	d2fb      	bcs.n	80078b6 <memmove+0x10>
 80078be:	bd10      	pop	{r4, pc}
 80078c0:	5ccc      	ldrb	r4, [r1, r3]
 80078c2:	54c4      	strb	r4, [r0, r3]
 80078c4:	3301      	adds	r3, #1
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d1fa      	bne.n	80078c0 <memmove+0x1a>
 80078ca:	e7f8      	b.n	80078be <memmove+0x18>

080078cc <__malloc_lock>:
 80078cc:	b510      	push	{r4, lr}
 80078ce:	4802      	ldr	r0, [pc, #8]	; (80078d8 <__malloc_lock+0xc>)
 80078d0:	f7ff f981 	bl	8006bd6 <__retarget_lock_acquire_recursive>
 80078d4:	bd10      	pop	{r4, pc}
 80078d6:	46c0      	nop			; (mov r8, r8)
 80078d8:	20000d58 	.word	0x20000d58

080078dc <__malloc_unlock>:
 80078dc:	b510      	push	{r4, lr}
 80078de:	4802      	ldr	r0, [pc, #8]	; (80078e8 <__malloc_unlock+0xc>)
 80078e0:	f7ff f97a 	bl	8006bd8 <__retarget_lock_release_recursive>
 80078e4:	bd10      	pop	{r4, pc}
 80078e6:	46c0      	nop			; (mov r8, r8)
 80078e8:	20000d58 	.word	0x20000d58

080078ec <_realloc_r>:
 80078ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078ee:	0007      	movs	r7, r0
 80078f0:	000e      	movs	r6, r1
 80078f2:	0014      	movs	r4, r2
 80078f4:	2900      	cmp	r1, #0
 80078f6:	d105      	bne.n	8007904 <_realloc_r+0x18>
 80078f8:	0011      	movs	r1, r2
 80078fa:	f7ff fa51 	bl	8006da0 <_malloc_r>
 80078fe:	0005      	movs	r5, r0
 8007900:	0028      	movs	r0, r5
 8007902:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007904:	2a00      	cmp	r2, #0
 8007906:	d103      	bne.n	8007910 <_realloc_r+0x24>
 8007908:	f7ff f9de 	bl	8006cc8 <_free_r>
 800790c:	0025      	movs	r5, r4
 800790e:	e7f7      	b.n	8007900 <_realloc_r+0x14>
 8007910:	f000 f830 	bl	8007974 <_malloc_usable_size_r>
 8007914:	9001      	str	r0, [sp, #4]
 8007916:	4284      	cmp	r4, r0
 8007918:	d803      	bhi.n	8007922 <_realloc_r+0x36>
 800791a:	0035      	movs	r5, r6
 800791c:	0843      	lsrs	r3, r0, #1
 800791e:	42a3      	cmp	r3, r4
 8007920:	d3ee      	bcc.n	8007900 <_realloc_r+0x14>
 8007922:	0021      	movs	r1, r4
 8007924:	0038      	movs	r0, r7
 8007926:	f7ff fa3b 	bl	8006da0 <_malloc_r>
 800792a:	1e05      	subs	r5, r0, #0
 800792c:	d0e8      	beq.n	8007900 <_realloc_r+0x14>
 800792e:	9b01      	ldr	r3, [sp, #4]
 8007930:	0022      	movs	r2, r4
 8007932:	429c      	cmp	r4, r3
 8007934:	d900      	bls.n	8007938 <_realloc_r+0x4c>
 8007936:	001a      	movs	r2, r3
 8007938:	0031      	movs	r1, r6
 800793a:	0028      	movs	r0, r5
 800793c:	f7fe fd0a 	bl	8006354 <memcpy>
 8007940:	0031      	movs	r1, r6
 8007942:	0038      	movs	r0, r7
 8007944:	f7ff f9c0 	bl	8006cc8 <_free_r>
 8007948:	e7da      	b.n	8007900 <_realloc_r+0x14>
	...

0800794c <_read_r>:
 800794c:	b570      	push	{r4, r5, r6, lr}
 800794e:	0004      	movs	r4, r0
 8007950:	0008      	movs	r0, r1
 8007952:	0011      	movs	r1, r2
 8007954:	001a      	movs	r2, r3
 8007956:	2300      	movs	r3, #0
 8007958:	4d05      	ldr	r5, [pc, #20]	; (8007970 <_read_r+0x24>)
 800795a:	602b      	str	r3, [r5, #0]
 800795c:	f7fa f92a 	bl	8001bb4 <_read>
 8007960:	1c43      	adds	r3, r0, #1
 8007962:	d103      	bne.n	800796c <_read_r+0x20>
 8007964:	682b      	ldr	r3, [r5, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d000      	beq.n	800796c <_read_r+0x20>
 800796a:	6023      	str	r3, [r4, #0]
 800796c:	bd70      	pop	{r4, r5, r6, pc}
 800796e:	46c0      	nop			; (mov r8, r8)
 8007970:	20000d64 	.word	0x20000d64

08007974 <_malloc_usable_size_r>:
 8007974:	1f0b      	subs	r3, r1, #4
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	1f18      	subs	r0, r3, #4
 800797a:	2b00      	cmp	r3, #0
 800797c:	da01      	bge.n	8007982 <_malloc_usable_size_r+0xe>
 800797e:	580b      	ldr	r3, [r1, r0]
 8007980:	18c0      	adds	r0, r0, r3
 8007982:	4770      	bx	lr

08007984 <_init>:
 8007984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007986:	46c0      	nop			; (mov r8, r8)
 8007988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800798a:	bc08      	pop	{r3}
 800798c:	469e      	mov	lr, r3
 800798e:	4770      	bx	lr

08007990 <_fini>:
 8007990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007992:	46c0      	nop			; (mov r8, r8)
 8007994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007996:	bc08      	pop	{r3}
 8007998:	469e      	mov	lr, r3
 800799a:	4770      	bx	lr
 800799c:	0000      	movs	r0, r0
	...

080079a0 <__FLASH_Program_Fast_veneer>:
 80079a0:	b401      	push	{r0}
 80079a2:	4802      	ldr	r0, [pc, #8]	; (80079ac <__FLASH_Program_Fast_veneer+0xc>)
 80079a4:	4684      	mov	ip, r0
 80079a6:	bc01      	pop	{r0}
 80079a8:	4760      	bx	ip
 80079aa:	bf00      	nop
 80079ac:	20000471 	.word	0x20000471

Disassembly of section .data:

20000400 <SystemCoreClock>:
20000400:	00f42400                                .$..

20000404 <uwTickPrio>:
20000404:	00000004                                ....

20000408 <uwTickFreq>:
20000408:	00000001                                ....

2000040c <_impure_ptr>:
2000040c:	20000410                                ... 

20000410 <impure_data>:
20000410:	00000000 080080c8 080080e8 080080a8     ................
	...

20000470 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000470:	b580      	push	{r7, lr}
20000472:	b088      	sub	sp, #32
20000474:	af00      	add	r7, sp, #0
20000476:	6078      	str	r0, [r7, #4]
20000478:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000047a:	231f      	movs	r3, #31
2000047c:	18fb      	adds	r3, r7, r3
2000047e:	2200      	movs	r2, #0
20000480:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000482:	687b      	ldr	r3, [r7, #4]
20000484:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000486:	683b      	ldr	r3, [r7, #0]
20000488:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000048a:	4b1a      	ldr	r3, [pc, #104]	; (200004f4 <FLASH_Program_Fast+0x84>)
2000048c:	695a      	ldr	r2, [r3, #20]
2000048e:	4b19      	ldr	r3, [pc, #100]	; (200004f4 <FLASH_Program_Fast+0x84>)
20000490:	2180      	movs	r1, #128	; 0x80
20000492:	02c9      	lsls	r1, r1, #11
20000494:	430a      	orrs	r2, r1
20000496:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000498:	f3ef 8310 	mrs	r3, PRIMASK
2000049c:	60fb      	str	r3, [r7, #12]
  return(result);
2000049e:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200004a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200004a2:	b672      	cpsid	i
}
200004a4:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200004a6:	e00f      	b.n	200004c8 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200004a8:	697a      	ldr	r2, [r7, #20]
200004aa:	69bb      	ldr	r3, [r7, #24]
200004ac:	6812      	ldr	r2, [r2, #0]
200004ae:	601a      	str	r2, [r3, #0]
    src += 4U;
200004b0:	697b      	ldr	r3, [r7, #20]
200004b2:	3304      	adds	r3, #4
200004b4:	617b      	str	r3, [r7, #20]
    dest += 4U;
200004b6:	69bb      	ldr	r3, [r7, #24]
200004b8:	3304      	adds	r3, #4
200004ba:	61bb      	str	r3, [r7, #24]
    index++;
200004bc:	211f      	movs	r1, #31
200004be:	187b      	adds	r3, r7, r1
200004c0:	781a      	ldrb	r2, [r3, #0]
200004c2:	187b      	adds	r3, r7, r1
200004c4:	3201      	adds	r2, #1
200004c6:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200004c8:	231f      	movs	r3, #31
200004ca:	18fb      	adds	r3, r7, r3
200004cc:	781b      	ldrb	r3, [r3, #0]
200004ce:	2b3f      	cmp	r3, #63	; 0x3f
200004d0:	d9ea      	bls.n	200004a8 <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
200004d2:	46c0      	nop			; (mov r8, r8)
200004d4:	4b07      	ldr	r3, [pc, #28]	; (200004f4 <FLASH_Program_Fast+0x84>)
200004d6:	691a      	ldr	r2, [r3, #16]
200004d8:	23c0      	movs	r3, #192	; 0xc0
200004da:	029b      	lsls	r3, r3, #10
200004dc:	4013      	ands	r3, r2
200004de:	d1f9      	bne.n	200004d4 <FLASH_Program_Fast+0x64>
200004e0:	693b      	ldr	r3, [r7, #16]
200004e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200004e4:	68bb      	ldr	r3, [r7, #8]
200004e6:	f383 8810 	msr	PRIMASK, r3
}
200004ea:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200004ec:	46c0      	nop			; (mov r8, r8)
200004ee:	46bd      	mov	sp, r7
200004f0:	b008      	add	sp, #32
200004f2:	bd80      	pop	{r7, pc}
200004f4:	40022000 	.word	0x40022000
