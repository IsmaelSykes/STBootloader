
BL_RIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007080  080000b8  080000b8  000100b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  08007138  08007138  00017138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800746c  0800746c  0002050a  2**0
                  CONTENTS
  4 .ARM          00000000  0800746c  0800746c  0002050a  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800746c  0800746c  0002050a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800746c  0800746c  0001746c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007470  08007470  00017470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000400  08007474  00020400  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .shared_mem   00000012  200004f8  0800756c  000204f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000008b4  20000510  0800757e  00020510  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000dc4  0800757e  00020dc4  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  0002050a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c46  00000000  00000000  00020532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ff6  00000000  00000000  00035178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  00038170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fe8  00000000  00000000  00039270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b319  00000000  00000000  0003a258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000150b2  00000000  00000000  00055571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a65ea  00000000  00000000  0006a623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00110c0d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000446c  00000000  00000000  00110c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000510 	.word	0x20000510
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800710c 	.word	0x0800710c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000514 	.word	0x20000514
 80000fc:	0800710c 	.word	0x0800710c

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	; 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	; 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	; 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <crc32_for_byte>:
 * Invalid file names and files that cause errors are silently skipped.
 * The program reads from stdin if it is called with no arguments.
 *
 * From http://home.thep.lu.se/~bjorn/crc/ */

uint32_t crc32_for_byte(uint32_t r) {
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  for(int j = 0; j < 8; ++j)
 8000418:	2300      	movs	r3, #0
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	e00d      	b.n	800043a <crc32_for_byte+0x2a>
    r = (r & 1? 0: (uint32_t)0xEDB88320L) ^ r >> 1;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2201      	movs	r2, #1
 8000422:	4013      	ands	r3, r2
 8000424:	d001      	beq.n	800042a <crc32_for_byte+0x1a>
 8000426:	2300      	movs	r3, #0
 8000428:	e000      	b.n	800042c <crc32_for_byte+0x1c>
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <crc32_for_byte+0x40>)
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	0852      	lsrs	r2, r2, #1
 8000430:	4053      	eors	r3, r2
 8000432:	607b      	str	r3, [r7, #4]
  for(int j = 0; j < 8; ++j)
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	3301      	adds	r3, #1
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	2b07      	cmp	r3, #7
 800043e:	ddee      	ble.n	800041e <crc32_for_byte+0xe>
  return r ^ (uint32_t)0xFF000000L;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	22ff      	movs	r2, #255	; 0xff
 8000444:	0612      	lsls	r2, r2, #24
 8000446:	4053      	eors	r3, r2
}
 8000448:	0018      	movs	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	b004      	add	sp, #16
 800044e:	bd80      	pop	{r7, pc}
 8000450:	edb88320 	.word	0xedb88320

08000454 <crc32>:

uint32_t crc32(const void *data, uint32_t n_bytes) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0;
 800045e:	2300      	movs	r3, #0
 8000460:	617b      	str	r3, [r7, #20]
  static uint32_t table[0x100];
  if(!*table)
 8000462:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <crc32+0x78>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d111      	bne.n	800048e <crc32+0x3a>
    for(size_t i = 0; i < 0x100; ++i)
 800046a:	2300      	movs	r3, #0
 800046c:	613b      	str	r3, [r7, #16]
 800046e:	e00b      	b.n	8000488 <crc32+0x34>
      table[i] = crc32_for_byte(i);
 8000470:	693b      	ldr	r3, [r7, #16]
 8000472:	0018      	movs	r0, r3
 8000474:	f7ff ffcc 	bl	8000410 <crc32_for_byte>
 8000478:	0001      	movs	r1, r0
 800047a:	4b14      	ldr	r3, [pc, #80]	; (80004cc <crc32+0x78>)
 800047c:	693a      	ldr	r2, [r7, #16]
 800047e:	0092      	lsls	r2, r2, #2
 8000480:	50d1      	str	r1, [r2, r3]
    for(size_t i = 0; i < 0x100; ++i)
 8000482:	693b      	ldr	r3, [r7, #16]
 8000484:	3301      	adds	r3, #1
 8000486:	613b      	str	r3, [r7, #16]
 8000488:	693b      	ldr	r3, [r7, #16]
 800048a:	2bff      	cmp	r3, #255	; 0xff
 800048c:	d9f0      	bls.n	8000470 <crc32+0x1c>
  for(size_t i = 0; i < n_bytes; ++i)
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	e012      	b.n	80004ba <crc32+0x66>
    crc = table[(uint8_t)crc ^ ((uint8_t*)data)[i]] ^ crc >> 8;
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	b2da      	uxtb	r2, r3
 8000498:	6879      	ldr	r1, [r7, #4]
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	18cb      	adds	r3, r1, r3
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	4053      	eors	r3, r2
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	001a      	movs	r2, r3
 80004a6:	4b09      	ldr	r3, [pc, #36]	; (80004cc <crc32+0x78>)
 80004a8:	0092      	lsls	r2, r2, #2
 80004aa:	58d2      	ldr	r2, [r2, r3]
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	0a1b      	lsrs	r3, r3, #8
 80004b0:	4053      	eors	r3, r2
 80004b2:	617b      	str	r3, [r7, #20]
  for(size_t i = 0; i < n_bytes; ++i)
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	3301      	adds	r3, #1
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	68fa      	ldr	r2, [r7, #12]
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	429a      	cmp	r2, r3
 80004c0:	d3e8      	bcc.n	8000494 <crc32+0x40>

  return crc;
 80004c2:	697b      	ldr	r3, [r7, #20]
}
 80004c4:	0018      	movs	r0, r3
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b006      	add	sp, #24
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	2000052c 	.word	0x2000052c

080004d0 <image_get_header>:
#include "image.h"
#include "memoryMap.h"
#include "crc32.h"

const image_hdr_t *image_get_header(image_slot_t slot)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	0002      	movs	r2, r0
 80004d8:	1dfb      	adds	r3, r7, #7
 80004da:	701a      	strb	r2, [r3, #0]
    const image_hdr_t *hdr = NULL;
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]

    switch (slot)
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d002      	beq.n	80004ee <image_get_header+0x1e>
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	d003      	beq.n	80004f4 <image_get_header+0x24>
        break;
    case IMAGE_SLOT_2:
        hdr = (const image_hdr_t *) &__loader_rom_start__;
        break;
    default:
        break;
 80004ec:	e005      	b.n	80004fa <image_get_header+0x2a>
        hdr = (const image_hdr_t *) &__app_rom_start__;
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <image_get_header+0x54>)
 80004f0:	60fb      	str	r3, [r7, #12]
        break;
 80004f2:	e002      	b.n	80004fa <image_get_header+0x2a>
        hdr = (const image_hdr_t *) &__loader_rom_start__;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <image_get_header+0x58>)
 80004f6:	60fb      	str	r3, [r7, #12]
        break;
 80004f8:	46c0      	nop			; (mov r8, r8)
    }

    if (hdr && hdr->image_magic == IMAGE_MAGIC)
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d00b      	beq.n	8000518 <image_get_header+0x48>
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	781a      	ldrb	r2, [r3, #0]
 8000504:	785b      	ldrb	r3, [r3, #1]
 8000506:	021b      	lsls	r3, r3, #8
 8000508:	4313      	orrs	r3, r2
 800050a:	b29a      	uxth	r2, r3
 800050c:	23e7      	movs	r3, #231	; 0xe7
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	429a      	cmp	r2, r3
 8000512:	d101      	bne.n	8000518 <image_get_header+0x48>
    {
        return hdr;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	e000      	b.n	800051a <image_get_header+0x4a>
    }
    else
    {
        return NULL;
 8000518:	2300      	movs	r3, #0
    }
}
 800051a:	0018      	movs	r0, r3
 800051c:	46bd      	mov	sp, r7
 800051e:	b004      	add	sp, #16
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	0800c800 	.word	0x0800c800
 8000528:	08046800 	.word	0x08046800

0800052c <image_validate>:

int image_validate(image_slot_t slot, const image_hdr_t *hdr)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
 8000532:	0002      	movs	r2, r0
 8000534:	6039      	str	r1, [r7, #0]
 8000536:	1dfb      	adds	r3, r7, #7
 8000538:	701a      	strb	r2, [r3, #0]
    // void *addr = (slot == IMAGE_SLOT_1 ? &__apparom_start__ : &__appbrom_start__);
    void *addr = NULL;
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]

    switch (slot)
 800053e:	1dfb      	adds	r3, r7, #7
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d002      	beq.n	800054c <image_validate+0x20>
 8000546:	2b02      	cmp	r3, #2
 8000548:	d003      	beq.n	8000552 <image_validate+0x26>
 800054a:	e005      	b.n	8000558 <image_validate+0x2c>
    {
    case IMAGE_SLOT_1:
        addr = &__app_rom_start__;
 800054c:	4b1c      	ldr	r3, [pc, #112]	; (80005c0 <image_validate+0x94>)
 800054e:	617b      	str	r3, [r7, #20]
        break;
 8000550:	e007      	b.n	8000562 <image_validate+0x36>
    case IMAGE_SLOT_2:
        addr = &__loader_rom_start__;
 8000552:	4b1c      	ldr	r3, [pc, #112]	; (80005c4 <image_validate+0x98>)
 8000554:	617b      	str	r3, [r7, #20]
        break;
 8000556:	e004      	b.n	8000562 <image_validate+0x36>
    default:
        addr = NULL;
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
        return -1;
 800055c:	2301      	movs	r3, #1
 800055e:	425b      	negs	r3, r3
 8000560:	e02a      	b.n	80005b8 <image_validate+0x8c>
    }

    addr += sizeof(image_hdr_t);
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	3320      	adds	r3, #32
 8000566:	617b      	str	r3, [r7, #20]
    uint32_t len = hdr->data_size;
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	7a1a      	ldrb	r2, [r3, #8]
 800056c:	7a59      	ldrb	r1, [r3, #9]
 800056e:	0209      	lsls	r1, r1, #8
 8000570:	430a      	orrs	r2, r1
 8000572:	7a99      	ldrb	r1, [r3, #10]
 8000574:	0409      	lsls	r1, r1, #16
 8000576:	430a      	orrs	r2, r1
 8000578:	7adb      	ldrb	r3, [r3, #11]
 800057a:	061b      	lsls	r3, r3, #24
 800057c:	4313      	orrs	r3, r2
 800057e:	613b      	str	r3, [r7, #16]
    uint32_t crc_calc = crc32(addr, len);
 8000580:	693a      	ldr	r2, [r7, #16]
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	0011      	movs	r1, r2
 8000586:	0018      	movs	r0, r3
 8000588:	f7ff ff64 	bl	8000454 <crc32>
 800058c:	0003      	movs	r3, r0
 800058e:	60fb      	str	r3, [r7, #12]
    uint32_t crc_image = hdr->crc;
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	791a      	ldrb	r2, [r3, #4]
 8000594:	7959      	ldrb	r1, [r3, #5]
 8000596:	0209      	lsls	r1, r1, #8
 8000598:	430a      	orrs	r2, r1
 800059a:	7999      	ldrb	r1, [r3, #6]
 800059c:	0409      	lsls	r1, r1, #16
 800059e:	430a      	orrs	r2, r1
 80005a0:	79db      	ldrb	r3, [r3, #7]
 80005a2:	061b      	lsls	r3, r3, #24
 80005a4:	4313      	orrs	r3, r2
 80005a6:	60bb      	str	r3, [r7, #8]

    if (crc_calc == crc_image) {
 80005a8:	68fa      	ldr	r2, [r7, #12]
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d101      	bne.n	80005b4 <image_validate+0x88>
        //printf("CRC OK: %lx vs %lx\r\n", crc_image, crc_calc);
        return 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	e001      	b.n	80005b8 <image_validate+0x8c>
    }
    else {
        //printf("CRC mismatch: %lx vs %lx\r\n", crc_image, crc_calc);
        return -1;
 80005b4:	2301      	movs	r3, #1
 80005b6:	425b      	negs	r3, r3
    }

}
 80005b8:	0018      	movs	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	b006      	add	sp, #24
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	0800c800 	.word	0x0800c800
 80005c4:	08046800 	.word	0x08046800

080005c8 <HAL_UARTEx_RxEventCallback>:
#define STRINGIFY(x) #x
#define ADD_QUOTES(y) STRINGIFY(y)


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	000a      	movs	r2, r1
 80005d2:	1cbb      	adds	r3, r7, #2
 80005d4:	801a      	strh	r2, [r3, #0]
	  HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx_buff, sizeof rx_buff);
 80005d6:	2382      	movs	r3, #130	; 0x82
 80005d8:	009a      	lsls	r2, r3, #2
 80005da:	4913      	ldr	r1, [pc, #76]	; (8000628 <HAL_UARTEx_RxEventCallback+0x60>)
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <HAL_UARTEx_RxEventCallback+0x64>)
 80005de:	0018      	movs	r0, r3
 80005e0:	f005 fca8 	bl	8005f34 <HAL_UARTEx_ReceiveToIdle_IT>
	  //memcpy(message,rx_buff,4);
	  if(transmit_data == false)
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_UARTEx_RxEventCallback+0x68>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2201      	movs	r2, #1
 80005ea:	4053      	eors	r3, r2
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d002      	beq.n	80005f8 <HAL_UARTEx_RxEventCallback+0x30>
		  dato_recivido = true;
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <HAL_UARTEx_RxEventCallback+0x6c>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]

	  if(Size == 520)
 80005f8:	1cbb      	adds	r3, r7, #2
 80005fa:	881a      	ldrh	r2, [r3, #0]
 80005fc:	2382      	movs	r3, #130	; 0x82
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	429a      	cmp	r2, r3
 8000602:	d102      	bne.n	800060a <HAL_UARTEx_RxEventCallback+0x42>
		  dato_recivido = true;
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000606:	2201      	movs	r2, #1
 8000608:	701a      	strb	r2, [r3, #0]
	  if(Size == (offset+8))
 800060a:	1cbb      	adds	r3, r7, #2
 800060c:	881a      	ldrh	r2, [r3, #0]
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <HAL_UARTEx_RxEventCallback+0x70>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	3308      	adds	r3, #8
 8000614:	429a      	cmp	r2, r3
 8000616:	d102      	bne.n	800061e <HAL_UARTEx_RxEventCallback+0x56>
		  dato_recivido = true;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_UARTEx_RxEventCallback+0x6c>)
 800061a:	2201      	movs	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
	  //counter++;
}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b002      	add	sp, #8
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	20000b58 	.word	0x20000b58
 800062c:	20000a10 	.word	0x20000a10
 8000630:	20000b4a 	.word	0x20000b4a
 8000634:	20000b48 	.word	0x20000b48
 8000638:	20000b50 	.word	0x20000b50

0800063c <CRC16_X25>:
  0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,
  0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78
};

uint16_t CRC16_X25(const void * data, uint16_t sizeOfData, uint16_t startCrc)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	0008      	movs	r0, r1
 8000646:	0011      	movs	r1, r2
 8000648:	1cbb      	adds	r3, r7, #2
 800064a:	1c02      	adds	r2, r0, #0
 800064c:	801a      	strh	r2, [r3, #0]
 800064e:	003b      	movs	r3, r7
 8000650:	1c0a      	adds	r2, r1, #0
 8000652:	801a      	strh	r2, [r3, #0]
	  const uint8_t * dataPtr = (const uint8_t *) data;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	60fb      	str	r3, [r7, #12]

	  startCrc = startCrc ^ 0xffff;
 8000658:	003b      	movs	r3, r7
 800065a:	003a      	movs	r2, r7
 800065c:	8812      	ldrh	r2, [r2, #0]
 800065e:	43d2      	mvns	r2, r2
 8000660:	801a      	strh	r2, [r3, #0]

	  while (sizeOfData--) {
 8000662:	e012      	b.n	800068a <CRC16_X25+0x4e>
	    startCrc = crc16Table[(startCrc ^ *dataPtr++) & 0xFF] ^ (startCrc >> 8);
 8000664:	003b      	movs	r3, r7
 8000666:	881a      	ldrh	r2, [r3, #0]
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	1c59      	adds	r1, r3, #1
 800066c:	60f9      	str	r1, [r7, #12]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4053      	eors	r3, r2
 8000672:	22ff      	movs	r2, #255	; 0xff
 8000674:	401a      	ands	r2, r3
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <CRC16_X25+0x6c>)
 8000678:	0052      	lsls	r2, r2, #1
 800067a:	5ad1      	ldrh	r1, [r2, r3]
 800067c:	003b      	movs	r3, r7
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	b29a      	uxth	r2, r3
 8000684:	003b      	movs	r3, r7
 8000686:	404a      	eors	r2, r1
 8000688:	801a      	strh	r2, [r3, #0]
	  while (sizeOfData--) {
 800068a:	1cbb      	adds	r3, r7, #2
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	1cba      	adds	r2, r7, #2
 8000690:	1e59      	subs	r1, r3, #1
 8000692:	8011      	strh	r1, [r2, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d1e5      	bne.n	8000664 <CRC16_X25+0x28>
	  }

	  return (startCrc ^ 0xffff);
 8000698:	003b      	movs	r3, r7
 800069a:	881b      	ldrh	r3, [r3, #0]
 800069c:	43db      	mvns	r3, r3
 800069e:	b29b      	uxth	r3, r3
}
 80006a0:	0018      	movs	r0, r3
 80006a2:	46bd      	mov	sp, r7
 80006a4:	b004      	add	sp, #16
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	0800714c 	.word	0x0800714c

080006ac <write>:


uint32_t write(uint8_t *data,uint32_t begin)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b087      	sub	sp, #28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	uint32_t end = begin+64;// return the address to next 512 bytes
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	3340      	adds	r3, #64	; 0x40
 80006ba:	60fb      	str	r3, [r7, #12]
	uint32_t _index;
	uint16_t k = 0;
 80006bc:	2316      	movs	r3, #22
 80006be:	18fb      	adds	r3, r7, r3
 80006c0:	2200      	movs	r2, #0
 80006c2:	801a      	strh	r2, [r3, #0]
	HAL_FLASH_Unlock();
 80006c4:	f001 fe2c 	bl	8002320 <HAL_FLASH_Unlock>
	for(uint32_t i = begin; i<end; i++)// 64*8 = 512 bytes
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	e023      	b.n	8000716 <write+0x6a>
	{
	  _index = 8*i;
 80006ce:	693b      	ldr	r3, [r7, #16]
 80006d0:	00db      	lsls	r3, r3, #3
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	4915      	ldr	r1, [pc, #84]	; (800072c <write+0x80>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	4252      	negs	r2, r2
 80006da:	17d3      	asrs	r3, r2, #31
 80006dc:	600a      	str	r2, [r1, #0]
 80006de:	604b      	str	r3, [r1, #4]
	  memset(&double_word,0xFF,8);
	  memcpy(&double_word,&data[k],8);
 80006e0:	2416      	movs	r4, #22
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	18d1      	adds	r1, r2, r3
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <write+0x80>)
 80006ec:	2208      	movs	r2, #8
 80006ee:	0018      	movs	r0, r3
 80006f0:	f005 fd10 	bl	8006114 <memcpy>
	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,loader_rom+_index,double_word);
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	4a0e      	ldr	r2, [pc, #56]	; (8000730 <write+0x84>)
 80006f8:	1899      	adds	r1, r3, r2
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <write+0x80>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	2001      	movs	r0, #1
 8000702:	f001 fdbf 	bl	8002284 <HAL_FLASH_Program>
	  k+=8;
 8000706:	193b      	adds	r3, r7, r4
 8000708:	193a      	adds	r2, r7, r4
 800070a:	8812      	ldrh	r2, [r2, #0]
 800070c:	3208      	adds	r2, #8
 800070e:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = begin; i<end; i++)// 64*8 = 512 bytes
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	3301      	adds	r3, #1
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	693a      	ldr	r2, [r7, #16]
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	429a      	cmp	r2, r3
 800071c:	d3d7      	bcc.n	80006ce <write+0x22>
	}
	HAL_FLASH_Lock();
 800071e:	f001 fe23 	bl	8002368 <HAL_FLASH_Lock>
	return end;
 8000722:	68fb      	ldr	r3, [r7, #12]
}
 8000724:	0018      	movs	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	b007      	add	sp, #28
 800072a:	bd90      	pop	{r4, r7, pc}
 800072c:	20000b40 	.word	0x20000b40
 8000730:	08046800 	.word	0x08046800

08000734 <clear_app_rom>:



void clear_app_rom(void)
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b087      	sub	sp, #28
 8000738:	af00      	add	r7, sp, #0
	//printf("\r Clean APP_Room \r\n");
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]

	HAL_FLASH_Unlock();
 800073e:	f001 fdef 	bl	8002320 <HAL_FLASH_Unlock>
	FLASH->OPTR |= FLASH_OPTR_DUAL_BANK_Msk;
 8000742:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <clear_app_rom+0x90>)
 8000744:	6a1a      	ldr	r2, [r3, #32]
 8000746:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <clear_app_rom+0x90>)
 8000748:	2180      	movs	r1, #128	; 0x80
 800074a:	0389      	lsls	r1, r1, #14
 800074c:	430a      	orrs	r2, r1
 800074e:	621a      	str	r2, [r3, #32]
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000750:	2408      	movs	r4, #8
 8000752:	193b      	adds	r3, r7, r4
 8000754:	2202      	movs	r2, #2
 8000756:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.Page = 25;
 8000758:	193b      	adds	r3, r7, r4
 800075a:	2219      	movs	r2, #25
 800075c:	609a      	str	r2, [r3, #8]
	  EraseInitStruct.Banks = FLASH_BANK_1;
 800075e:	193b      	adds	r3, r7, r4
 8000760:	2204      	movs	r2, #4
 8000762:	605a      	str	r2, [r3, #4]
	  EraseInitStruct.NbPages = 103;
 8000764:	193b      	adds	r3, r7, r4
 8000766:	2267      	movs	r2, #103	; 0x67
 8000768:	60da      	str	r2, [r3, #12]
	  HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800076a:	1d3a      	adds	r2, r7, #4
 800076c:	193b      	adds	r3, r7, r4
 800076e:	0011      	movs	r1, r2
 8000770:	0018      	movs	r0, r3
 8000772:	f001 fe83 	bl	800247c <HAL_FLASHEx_Erase>
	  HAL_FLASH_Lock();
 8000776:	f001 fdf7 	bl	8002368 <HAL_FLASH_Lock>

	  PageError = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
	  HAL_FLASH_Unlock();
 800077e:	f001 fdcf 	bl	8002320 <HAL_FLASH_Unlock>
	  FLASH->OPTR |= FLASH_OPTR_DUAL_BANK_Msk;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <clear_app_rom+0x90>)
 8000784:	6a1a      	ldr	r2, [r3, #32]
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <clear_app_rom+0x90>)
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	0389      	lsls	r1, r1, #14
 800078c:	430a      	orrs	r2, r1
 800078e:	621a      	str	r2, [r3, #32]
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000790:	0021      	movs	r1, r4
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2202      	movs	r2, #2
 8000796:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.Page = 128;
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2280      	movs	r2, #128	; 0x80
 800079c:	609a      	str	r2, [r3, #8]
	  EraseInitStruct.Banks = FLASH_BANK_2;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	0212      	lsls	r2, r2, #8
 80007a4:	605a      	str	r2, [r3, #4]
	  EraseInitStruct.NbPages = 13;
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	220d      	movs	r2, #13
 80007aa:	60da      	str	r2, [r3, #12]
	  HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80007ac:	1d3a      	adds	r2, r7, #4
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	0011      	movs	r1, r2
 80007b2:	0018      	movs	r0, r3
 80007b4:	f001 fe62 	bl	800247c <HAL_FLASHEx_Erase>
	  HAL_FLASH_Lock();
 80007b8:	f001 fdd6 	bl	8002368 <HAL_FLASH_Lock>
}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	b007      	add	sp, #28
 80007c2:	bd90      	pop	{r4, r7, pc}
 80007c4:	40022000 	.word	0x40022000

080007c8 <clear_loader_rom>:

void clear_loader_rom(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
	//printf("\r Clean Loader_Room \r\n");
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
	  PageError = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
	  HAL_FLASH_Unlock();
 80007d6:	f001 fda3 	bl	8002320 <HAL_FLASH_Unlock>
	  FLASH->OPTR |= FLASH_OPTR_DUAL_BANK_Msk;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <clear_loader_rom+0x54>)
 80007dc:	6a1a      	ldr	r2, [r3, #32]
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <clear_loader_rom+0x54>)
 80007e0:	2180      	movs	r1, #128	; 0x80
 80007e2:	0389      	lsls	r1, r1, #14
 80007e4:	430a      	orrs	r2, r1
 80007e6:	621a      	str	r2, [r3, #32]
	  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80007e8:	2108      	movs	r1, #8
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2202      	movs	r2, #2
 80007ee:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.Page = 141;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	228d      	movs	r2, #141	; 0x8d
 80007f4:	609a      	str	r2, [r3, #8]
	  EraseInitStruct.Banks = FLASH_BANK_2;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	0212      	lsls	r2, r2, #8
 80007fc:	605a      	str	r2, [r3, #4]
	  EraseInitStruct.NbPages = 115;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2273      	movs	r2, #115	; 0x73
 8000802:	60da      	str	r2, [r3, #12]
	  HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8000804:	1d3a      	adds	r2, r7, #4
 8000806:	187b      	adds	r3, r7, r1
 8000808:	0011      	movs	r1, r2
 800080a:	0018      	movs	r0, r3
 800080c:	f001 fe36 	bl	800247c <HAL_FLASHEx_Erase>
	  HAL_FLASH_Lock();
 8000810:	f001 fdaa 	bl	8002368 <HAL_FLASH_Lock>
}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	b006      	add	sp, #24
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40022000 	.word	0x40022000

08000820 <clone_rom>:
	  	  }
	  	  //printf("|\r\r\n");
}

uint32_t clone_rom(uint32_t Firmware_zise)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	; 0x28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	uint32_t rows = Firmware_zise/8;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	08db      	lsrs	r3, r3, #3
 800082c:	60fb      	str	r3, [r7, #12]
	uint32_t offset = Firmware_zise%8;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2207      	movs	r2, #7
 8000832:	4013      	ands	r3, r2
 8000834:	60bb      	str	r3, [r7, #8]
	uint32_t _index = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24

	for(int k = 0; k <5; k++)
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
 800083e:	e00f      	b.n	8000860 <clone_rom+0x40>
	{
		//printf("\033\143");
		//printf("Cleaning app rom");
		for(int q = 0; q<=k; q++)
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
 8000844:	e005      	b.n	8000852 <clone_rom+0x32>
		{
			//printf(".");
			HAL_Delay(50);
 8000846:	2032      	movs	r0, #50	; 0x32
 8000848:	f001 fb3c 	bl	8001ec4 <HAL_Delay>
		for(int q = 0; q<=k; q++)
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	3301      	adds	r3, #1
 8000850:	61fb      	str	r3, [r7, #28]
 8000852:	69fa      	ldr	r2, [r7, #28]
 8000854:	6a3b      	ldr	r3, [r7, #32]
 8000856:	429a      	cmp	r2, r3
 8000858:	ddf5      	ble.n	8000846 <clone_rom+0x26>
	for(int k = 0; k <5; k++)
 800085a:	6a3b      	ldr	r3, [r7, #32]
 800085c:	3301      	adds	r3, #1
 800085e:	623b      	str	r3, [r7, #32]
 8000860:	6a3b      	ldr	r3, [r7, #32]
 8000862:	2b04      	cmp	r3, #4
 8000864:	ddec      	ble.n	8000840 <clone_rom+0x20>
		}
		//printf("\r\n");
	}

	clear_app_rom();
 8000866:	f7ff ff65 	bl	8000734 <clear_app_rom>

	/*printf("\r ------ Reday to Clone to slot 1 ---------- \r\n");
	printf("\r rows: %ld \r\n",rows);
	printf("\r offset: %ld \r\n",offset);
	*/
	for(int k = 0; k <5; k++)
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
 800086e:	e00f      	b.n	8000890 <clone_rom+0x70>
	{
		//printf("\033\143");
		//printf(" waiting ");
		for(int q = 0; q<=k; q++)
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	e005      	b.n	8000882 <clone_rom+0x62>
		{
			///printf(".");
			HAL_Delay(50);
 8000876:	2032      	movs	r0, #50	; 0x32
 8000878:	f001 fb24 	bl	8001ec4 <HAL_Delay>
		for(int q = 0; q<=k; q++)
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	3301      	adds	r3, #1
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	697a      	ldr	r2, [r7, #20]
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	429a      	cmp	r2, r3
 8000888:	ddf5      	ble.n	8000876 <clone_rom+0x56>
	for(int k = 0; k <5; k++)
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	3301      	adds	r3, #1
 800088e:	61bb      	str	r3, [r7, #24]
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	2b04      	cmp	r3, #4
 8000894:	ddec      	ble.n	8000870 <clone_rom+0x50>
		}
		//printf("\r\n");
	}

	HAL_FLASH_Unlock();
 8000896:	f001 fd43 	bl	8002320 <HAL_FLASH_Unlock>
    for(uint32_t i = 0; i<=rows-1; i++)// 12288 /8 -1 = =rows,   11532/8 =
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	e02e      	b.n	80008fe <clone_rom+0xde>
    {
    	_index = 8*i;
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	00db      	lsls	r3, r3, #3
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  	  RDAddr = (uint64_t *)(loader_rom + _index);
 80008a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a8:	4a3a      	ldr	r2, [pc, #232]	; (8000994 <clone_rom+0x174>)
 80008aa:	4694      	mov	ip, r2
 80008ac:	4463      	add	r3, ip
 80008ae:	001a      	movs	r2, r3
 80008b0:	4b39      	ldr	r3, [pc, #228]	; (8000998 <clone_rom+0x178>)
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	4939      	ldr	r1, [pc, #228]	; (800099c <clone_rom+0x17c>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	4252      	negs	r2, r2
 80008ba:	17d3      	asrs	r3, r2, #31
 80008bc:	600a      	str	r2, [r1, #0]
 80008be:	604b      	str	r3, [r1, #4]
  	  memset(&double_word,0xFF,8);
  	  memcpy(&double_word,RDAddr,8);
 80008c0:	4b35      	ldr	r3, [pc, #212]	; (8000998 <clone_rom+0x178>)
 80008c2:	6819      	ldr	r1, [r3, #0]
 80008c4:	4b35      	ldr	r3, [pc, #212]	; (800099c <clone_rom+0x17c>)
 80008c6:	2208      	movs	r2, #8
 80008c8:	0018      	movs	r0, r3
 80008ca:	f005 fc23 	bl	8006114 <memcpy>
  	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,app_rom+_index,double_word);
 80008ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d0:	4a33      	ldr	r2, [pc, #204]	; (80009a0 <clone_rom+0x180>)
 80008d2:	1899      	adds	r1, r3, r2
 80008d4:	4b31      	ldr	r3, [pc, #196]	; (800099c <clone_rom+0x17c>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	2001      	movs	r0, #1
 80008dc:	f001 fcd2 	bl	8002284 <HAL_FLASH_Program>
  	  crc_temp = CRC16_X25(RDAddr, 8, crc_temp);
 80008e0:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <clone_rom+0x178>)
 80008e2:	6818      	ldr	r0, [r3, #0]
 80008e4:	4b2f      	ldr	r3, [pc, #188]	; (80009a4 <clone_rom+0x184>)
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	001a      	movs	r2, r3
 80008ea:	2108      	movs	r1, #8
 80008ec:	f7ff fea6 	bl	800063c <CRC16_X25>
 80008f0:	0003      	movs	r3, r0
 80008f2:	001a      	movs	r2, r3
 80008f4:	4b2b      	ldr	r3, [pc, #172]	; (80009a4 <clone_rom+0x184>)
 80008f6:	801a      	strh	r2, [r3, #0]
    for(uint32_t i = 0; i<=rows-1; i++)// 12288 /8 -1 = =rows,   11532/8 =
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	3301      	adds	r3, #1
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	3b01      	subs	r3, #1
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	429a      	cmp	r2, r3
 8000906:	d9cb      	bls.n	80008a0 <clone_rom+0x80>
	  //printf(" \r crc parts_app_rom: %04X \n",crc_temp);
	  //print_double_word(loader_rom+_index,&double_word);
    }
    if(offset!=0)
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d031      	beq.n	8000972 <clone_rom+0x152>
 800090e:	4923      	ldr	r1, [pc, #140]	; (800099c <clone_rom+0x17c>)
 8000910:	2201      	movs	r2, #1
 8000912:	4252      	negs	r2, r2
 8000914:	17d3      	asrs	r3, r2, #31
 8000916:	600a      	str	r2, [r1, #0]
 8000918:	604b      	str	r3, [r1, #4]
    {
    	memset(&double_word,0xFF,8);
		_index+= 8;
 800091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091c:	3308      	adds	r3, #8
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
		RDAddr = (uint64_t *)(loader_rom + _index);
 8000920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000922:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <clone_rom+0x174>)
 8000924:	4694      	mov	ip, r2
 8000926:	4463      	add	r3, ip
 8000928:	001a      	movs	r2, r3
 800092a:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <clone_rom+0x178>)
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	491b      	ldr	r1, [pc, #108]	; (800099c <clone_rom+0x17c>)
 8000930:	2201      	movs	r2, #1
 8000932:	4252      	negs	r2, r2
 8000934:	17d3      	asrs	r3, r2, #31
 8000936:	600a      	str	r2, [r1, #0]
 8000938:	604b      	str	r3, [r1, #4]
		memset(&double_word,0xFF,8);
		memcpy(&double_word,RDAddr,offset);
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <clone_rom+0x178>)
 800093c:	6819      	ldr	r1, [r3, #0]
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <clone_rom+0x17c>)
 8000942:	0018      	movs	r0, r3
 8000944:	f005 fbe6 	bl	8006114 <memcpy>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,app_rom+_index,double_word);
 8000948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094a:	4a15      	ldr	r2, [pc, #84]	; (80009a0 <clone_rom+0x180>)
 800094c:	1899      	adds	r1, r3, r2
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <clone_rom+0x17c>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	2001      	movs	r0, #1
 8000956:	f001 fc95 	bl	8002284 <HAL_FLASH_Program>
		crc_temp = CRC16_X25(&double_word,offset, crc_temp);
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	b299      	uxth	r1, r3
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <clone_rom+0x184>)
 8000960:	881a      	ldrh	r2, [r3, #0]
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <clone_rom+0x17c>)
 8000964:	0018      	movs	r0, r3
 8000966:	f7ff fe69 	bl	800063c <CRC16_X25>
 800096a:	0003      	movs	r3, r0
 800096c:	001a      	movs	r2, r3
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <clone_rom+0x184>)
 8000970:	801a      	strh	r2, [r3, #0]
		//printf(" \r crc parts_app_rom: %04X \n",crc_temp);
		//print_double_word(loader_rom+_index,&double_word);
    }
    HAL_FLASH_Lock();
 8000972:	f001 fcf9 	bl	8002368 <HAL_FLASH_Lock>


    if(crc_temp == CRC_16)
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <clone_rom+0x184>)
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	001a      	movs	r2, r3
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <clone_rom+0x188>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	429a      	cmp	r2, r3
 8000982:	d101      	bne.n	8000988 <clone_rom+0x168>
   		return 0;
 8000984:	2300      	movs	r3, #0
 8000986:	e000      	b.n	800098a <clone_rom+0x16a>
    else
    	return 1;
 8000988:	2301      	movs	r3, #1
}
 800098a:	0018      	movs	r0, r3
 800098c:	46bd      	mov	sp, r7
 800098e:	b00a      	add	sp, #40	; 0x28
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	08046800 	.word	0x08046800
 8000998:	20000b38 	.word	0x20000b38
 800099c:	20000b40 	.word	0x20000b40
 80009a0:	0800c800 	.word	0x0800c800
 80009a4:	20000d6e 	.word	0x20000d6e
 80009a8:	20000d64 	.word	0x20000d64

080009ac <wait>:

void wait(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
	 while(dato_recivido == false)
 80009b2:	e01a      	b.n	80009ea <wait+0x3e>
	 {
			for(int z = 0; z <5; z++)
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	e014      	b.n	80009e4 <wait+0x38>
			{
				//printf("\033\143");
				//printf("\r waiting ");
				for(int q = 0; q<=z; q++)
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	e002      	b.n	80009c6 <wait+0x1a>
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	3301      	adds	r3, #1
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	683a      	ldr	r2, [r7, #0]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	ddf8      	ble.n	80009c0 <wait+0x14>
				{
					//printf(".");
				}
				//printf("\r\n");
				HAL_Delay(10);
 80009ce:	200a      	movs	r0, #10
 80009d0:	f001 fa78 	bl	8001ec4 <HAL_Delay>
				 if(flag_break)
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <wait+0x5c>)
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d000      	beq.n	80009de <wait+0x32>
				 {
					 break;
 80009dc:	e005      	b.n	80009ea <wait+0x3e>
			for(int z = 0; z <5; z++)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	3301      	adds	r3, #1
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	dde7      	ble.n	80009ba <wait+0xe>
	 while(dato_recivido == false)
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <wait+0x60>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2201      	movs	r2, #1
 80009f0:	4053      	eors	r3, r2
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1dd      	bne.n	80009b4 <wait+0x8>
				 }
			}

	 }
	HAL_TIM_Base_Stop_IT(&htim15);
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <wait+0x64>)
 80009fa:	0018      	movs	r0, r3
 80009fc:	f002 fee0 	bl	80037c0 <HAL_TIM_Base_Stop_IT>

}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b002      	add	sp, #8
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000d78 	.word	0x20000d78
 8000a0c:	20000b48 	.word	0x20000b48
 8000a10:	200009c4 	.word	0x200009c4

08000a14 <update_firmware>:

uint32_t update_firmware (void)
{
 8000a14:	b5b0      	push	{r4, r5, r7, lr}
 8000a16:	b08c      	sub	sp, #48	; 0x30
 8000a18:	af00      	add	r7, sp, #0
	 uint32_t err = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
		 //uint8_t len=0;
		 uint8_t buffer[10];
		 uint8_t strnum[10];
		 uint8_t OK[3] = {0x4F,0x4B,0x20};
 8000a1e:	230c      	movs	r3, #12
 8000a20:	18fb      	adds	r3, r7, r3
 8000a22:	4aeb      	ldr	r2, [pc, #940]	; (8000dd0 <update_firmware+0x3bc>)
 8000a24:	8811      	ldrh	r1, [r2, #0]
 8000a26:	8019      	strh	r1, [r3, #0]
 8000a28:	7892      	ldrb	r2, [r2, #2]
 8000a2a:	709a      	strb	r2, [r3, #2]
		 uint8_t ERR[4] = {0x45,0x52,0x52,0x20};
 8000a2c:	2308      	movs	r3, #8
 8000a2e:	18fb      	adds	r3, r7, r3
 8000a30:	4ae8      	ldr	r2, [pc, #928]	; (8000dd4 <update_firmware+0x3c0>)
 8000a32:	601a      	str	r2, [r3, #0]
		 uint32_t cmd7 [2] = {0x00,0x00};
 8000a34:	003b      	movs	r3, r7
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	003b      	movs	r3, r7
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	605a      	str	r2, [r3, #4]
		 clear_loader_rom();
 8000a40:	f7ff fec2 	bl	80007c8 <clear_loader_rom>
		 //CMD 1
		 HAL_UART_Transmit(&huart2,"FZ\n", (sizeof("FZ\n")-1),500);// begin
 8000a44:	23fa      	movs	r3, #250	; 0xfa
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	49e3      	ldr	r1, [pc, #908]	; (8000dd8 <update_firmware+0x3c4>)
 8000a4a:	48e4      	ldr	r0, [pc, #912]	; (8000ddc <update_firmware+0x3c8>)
 8000a4c:	2203      	movs	r2, #3
 8000a4e:	f003 fb07 	bl	8004060 <HAL_UART_Transmit>
		 //printf("\r Send FZ ... \r\n");
		 wait();
 8000a52:	f7ff ffab 	bl	80009ac <wait>
		 if(flag_break)
 8000a56:	4be2      	ldr	r3, [pc, #904]	; (8000de0 <update_firmware+0x3cc>)
 8000a58:	881b      	ldrh	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <update_firmware+0x4e>
		 {
			 return 1;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e239      	b.n	8000ed6 <update_firmware+0x4c2>
		 }
		 dato_recivido = false;
 8000a62:	4be0      	ldr	r3, [pc, #896]	; (8000de4 <update_firmware+0x3d0>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
 8000a68:	4bdf      	ldr	r3, [pc, #892]	; (8000de8 <update_firmware+0x3d4>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
		 //CMD2

		memcpy(&FW_SIZE,&rx_buff[0],4);
 8000a6c:	4bdf      	ldr	r3, [pc, #892]	; (8000dec <update_firmware+0x3d8>)
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	4bdd      	ldr	r3, [pc, #884]	; (8000de8 <update_firmware+0x3d4>)
 8000a72:	685a      	ldr	r2, [r3, #4]
		memcpy(&CRC_16,&rx_buff[4],4);
 8000a74:	4bde      	ldr	r3, [pc, #888]	; (8000df0 <update_firmware+0x3dc>)
 8000a76:	601a      	str	r2, [r3, #0]
		pages = (uint32_t)(FW_SIZE/512);
 8000a78:	4bdc      	ldr	r3, [pc, #880]	; (8000dec <update_firmware+0x3d8>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	0a5a      	lsrs	r2, r3, #9
 8000a7e:	4bdd      	ldr	r3, [pc, #884]	; (8000df4 <update_firmware+0x3e0>)
 8000a80:	601a      	str	r2, [r3, #0]
		n_bytes = 512*pages;
 8000a82:	4bdc      	ldr	r3, [pc, #880]	; (8000df4 <update_firmware+0x3e0>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	025a      	lsls	r2, r3, #9
 8000a88:	4bdb      	ldr	r3, [pc, #876]	; (8000df8 <update_firmware+0x3e4>)
 8000a8a:	601a      	str	r2, [r3, #0]
		offset = FW_SIZE - n_bytes;
 8000a8c:	4bd7      	ldr	r3, [pc, #860]	; (8000dec <update_firmware+0x3d8>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4bd9      	ldr	r3, [pc, #868]	; (8000df8 <update_firmware+0x3e4>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	1ad2      	subs	r2, r2, r3
 8000a96:	4bd9      	ldr	r3, [pc, #868]	; (8000dfc <update_firmware+0x3e8>)
 8000a98:	601a      	str	r2, [r3, #0]
		printf(" \r crc_app: %lX \n",CRC_16);
		printf(" \r pages: %ld \n",pages);
		printf(" \r n_bytes: %ld \n",n_bytes);
		printf(" \r offset: %ld \n",offset);
		*/
		HAL_Delay(1000);
 8000a9a:	23fa      	movs	r3, #250	; 0xfa
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f001 fa10 	bl	8001ec4 <HAL_Delay>

		//printf("Send OK................. \n\r");
		HAL_UART_Transmit(&huart2,"OK\n", (sizeof("OK\n")-1),500);
 8000aa4:	23fa      	movs	r3, #250	; 0xfa
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	49d5      	ldr	r1, [pc, #852]	; (8000e00 <update_firmware+0x3ec>)
 8000aaa:	48cc      	ldr	r0, [pc, #816]	; (8000ddc <update_firmware+0x3c8>)
 8000aac:	2203      	movs	r2, #3
 8000aae:	f003 fad7 	bl	8004060 <HAL_UART_Transmit>
		memset(rx_buff,'\0',sizeof(rx_buff));
 8000ab2:	2382      	movs	r3, #130	; 0x82
 8000ab4:	009a      	lsls	r2, r3, #2
 8000ab6:	4bcc      	ldr	r3, [pc, #816]	; (8000de8 <update_firmware+0x3d4>)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	0018      	movs	r0, r3
 8000abc:	f005 fb33 	bl	8006126 <memset>
		wait();
 8000ac0:	f7ff ff74 	bl	80009ac <wait>
		 dato_recivido = false;
 8000ac4:	4bc7      	ldr	r3, [pc, #796]	; (8000de4 <update_firmware+0x3d0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
	     transmit_data = true;
 8000aca:	4bce      	ldr	r3, [pc, #824]	; (8000e04 <update_firmware+0x3f0>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	701a      	strb	r2, [r3, #0]

		 //printf(" \r Starting loader.......... \r\n");
		while( j<=pages-1)
 8000ad0:	e0a7      	b.n	8000c22 <update_firmware+0x20e>
 8000ad2:	4bc5      	ldr	r3, [pc, #788]	; (8000de8 <update_firmware+0x3d4>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
		{
			memcpy(&index_page,&rx_buff[0],4);
 8000ad6:	4bcc      	ldr	r3, [pc, #816]	; (8000e08 <update_firmware+0x3f4>)
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	4bc3      	ldr	r3, [pc, #780]	; (8000de8 <update_firmware+0x3d4>)
 8000adc:	685a      	ldr	r2, [r3, #4]
			memcpy(&crc_part,&rx_buff[4],4);
 8000ade:	4bcb      	ldr	r3, [pc, #812]	; (8000e0c <update_firmware+0x3f8>)
 8000ae0:	601a      	str	r2, [r3, #0]
			//printf(" \r index: %ld \n",index_page);
			//printf(" \r crc_part: %lX \n",crc_part);
			crc = CRC16_X25(&rx_buff[8], 512, 0);
 8000ae2:	2380      	movs	r3, #128	; 0x80
 8000ae4:	0099      	lsls	r1, r3, #2
 8000ae6:	4bca      	ldr	r3, [pc, #808]	; (8000e10 <update_firmware+0x3fc>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	0018      	movs	r0, r3
 8000aec:	f7ff fda6 	bl	800063c <CRC16_X25>
 8000af0:	0003      	movs	r3, r0
 8000af2:	001a      	movs	r2, r3
 8000af4:	4bc7      	ldr	r3, [pc, #796]	; (8000e14 <update_firmware+0x400>)
 8000af6:	801a      	strh	r2, [r3, #0]
			//printf(" \r crc computed: %X \r\n",crc);

			if((crc == crc_part) && (index_page < pages))
 8000af8:	4bc6      	ldr	r3, [pc, #792]	; (8000e14 <update_firmware+0x400>)
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	001a      	movs	r2, r3
 8000afe:	4bc3      	ldr	r3, [pc, #780]	; (8000e0c <update_firmware+0x3f8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d15c      	bne.n	8000bc0 <update_firmware+0x1ac>
 8000b06:	4bc0      	ldr	r3, [pc, #768]	; (8000e08 <update_firmware+0x3f4>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	4bba      	ldr	r3, [pc, #744]	; (8000df4 <update_firmware+0x3e0>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d256      	bcs.n	8000bc0 <update_firmware+0x1ac>
			{
			  a = write(&rx_buff[8],a);
 8000b12:	4bc1      	ldr	r3, [pc, #772]	; (8000e18 <update_firmware+0x404>)
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	001a      	movs	r2, r3
 8000b18:	4bbd      	ldr	r3, [pc, #756]	; (8000e10 <update_firmware+0x3fc>)
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f7ff fdc5 	bl	80006ac <write>
 8000b22:	0003      	movs	r3, r0
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	4bbc      	ldr	r3, [pc, #752]	; (8000e18 <update_firmware+0x404>)
 8000b28:	801a      	strh	r2, [r3, #0]
			  crc_rec = CRC16_X25(&rx_buff[8], 512, crc_rec);
 8000b2a:	4bbc      	ldr	r3, [pc, #752]	; (8000e1c <update_firmware+0x408>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	0099      	lsls	r1, r3, #2
 8000b34:	4bb6      	ldr	r3, [pc, #728]	; (8000e10 <update_firmware+0x3fc>)
 8000b36:	0018      	movs	r0, r3
 8000b38:	f7ff fd80 	bl	800063c <CRC16_X25>
 8000b3c:	0003      	movs	r3, r0
 8000b3e:	001a      	movs	r2, r3
 8000b40:	4bb6      	ldr	r3, [pc, #728]	; (8000e1c <update_firmware+0x408>)
 8000b42:	601a      	str	r2, [r3, #0]
			  //printf(" \r crc_rec: %lX \r\n",crc_rec);

			  memset(buffer,'\0',sizeof(buffer));
 8000b44:	241c      	movs	r4, #28
 8000b46:	193b      	adds	r3, r7, r4
 8000b48:	220a      	movs	r2, #10
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f005 faea 	bl	8006126 <memset>
			  memset(strnum,'\0',sizeof(strnum));
 8000b52:	2510      	movs	r5, #16
 8000b54:	197b      	adds	r3, r7, r5
 8000b56:	220a      	movs	r2, #10
 8000b58:	2100      	movs	r1, #0
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f005 fae3 	bl	8006126 <memset>
			  snprintf(strnum,sizeof(strnum), "%ld",index_page);
 8000b60:	4ba9      	ldr	r3, [pc, #676]	; (8000e08 <update_firmware+0x3f4>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4aae      	ldr	r2, [pc, #696]	; (8000e20 <update_firmware+0x40c>)
 8000b66:	1978      	adds	r0, r7, r5
 8000b68:	210a      	movs	r1, #10
 8000b6a:	f005 fbad 	bl	80062c8 <sniprintf>
			  memcpy(&buffer[0], OK, sizeof(OK));
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	220c      	movs	r2, #12
 8000b72:	18ba      	adds	r2, r7, r2
 8000b74:	8811      	ldrh	r1, [r2, #0]
 8000b76:	8019      	strh	r1, [r3, #0]
 8000b78:	7892      	ldrb	r2, [r2, #2]
 8000b7a:	709a      	strb	r2, [r3, #2]
			  memcpy(&buffer[sizeof(OK)], strnum,strlen(strnum));
 8000b7c:	197b      	adds	r3, r7, r5
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f7ff fabe 	bl	8000100 <strlen>
 8000b84:	0002      	movs	r2, r0
 8000b86:	1979      	adds	r1, r7, r5
 8000b88:	193b      	adds	r3, r7, r4
 8000b8a:	3303      	adds	r3, #3
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f005 fac1 	bl	8006114 <memcpy>
			  //printf(" %s\n\r",buffer);
			  HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer),500);
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	0018      	movs	r0, r3
 8000b96:	f7ff fab3 	bl	8000100 <strlen>
 8000b9a:	0003      	movs	r3, r0
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	23fa      	movs	r3, #250	; 0xfa
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	1939      	adds	r1, r7, r4
 8000ba4:	488d      	ldr	r0, [pc, #564]	; (8000ddc <update_firmware+0x3c8>)
 8000ba6:	f003 fa5b 	bl	8004060 <HAL_UART_Transmit>
			  wait();
 8000baa:	f7ff feff 	bl	80009ac <wait>
			  dato_recivido = false;
 8000bae:	4b8d      	ldr	r3, [pc, #564]	; (8000de4 <update_firmware+0x3d0>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
			  j++;
 8000bb4:	4b9b      	ldr	r3, [pc, #620]	; (8000e24 <update_firmware+0x410>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	1c5a      	adds	r2, r3, #1
 8000bba:	4b9a      	ldr	r3, [pc, #616]	; (8000e24 <update_firmware+0x410>)
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	e030      	b.n	8000c22 <update_firmware+0x20e>
			  //printf(" j: %d \n\r",j);
			}
			else
			{
				//i = i;
			  memset(buffer,'\0',sizeof(buffer));
 8000bc0:	241c      	movs	r4, #28
 8000bc2:	193b      	adds	r3, r7, r4
 8000bc4:	220a      	movs	r2, #10
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f005 faac 	bl	8006126 <memset>
			  memset(strnum,'\0',sizeof(strnum));
 8000bce:	2510      	movs	r5, #16
 8000bd0:	197b      	adds	r3, r7, r5
 8000bd2:	220a      	movs	r2, #10
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f005 faa5 	bl	8006126 <memset>
			  //snprintf(strnum,sizeof(strnum), "%ld",index_page);
			  snprintf(strnum,sizeof(strnum), "%d",j);
 8000bdc:	4b91      	ldr	r3, [pc, #580]	; (8000e24 <update_firmware+0x410>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a91      	ldr	r2, [pc, #580]	; (8000e28 <update_firmware+0x414>)
 8000be2:	1978      	adds	r0, r7, r5
 8000be4:	210a      	movs	r1, #10
 8000be6:	f005 fb6f 	bl	80062c8 <sniprintf>
			  memcpy(&buffer[0], ERR, sizeof(ERR));
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	2208      	movs	r2, #8
 8000bee:	18ba      	adds	r2, r7, r2
 8000bf0:	6812      	ldr	r2, [r2, #0]
 8000bf2:	601a      	str	r2, [r3, #0]
			  memcpy(&buffer[sizeof(ERR)], strnum,strlen(strnum));
 8000bf4:	197b      	adds	r3, r7, r5
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f7ff fa82 	bl	8000100 <strlen>
 8000bfc:	0002      	movs	r2, r0
 8000bfe:	1979      	adds	r1, r7, r5
 8000c00:	193b      	adds	r3, r7, r4
 8000c02:	3304      	adds	r3, #4
 8000c04:	0018      	movs	r0, r3
 8000c06:	f005 fa85 	bl	8006114 <memcpy>
			  //printf(" \r %s\r\n",buffer);
			  //printf(" j: %d \n\r",j);
			  HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer),500);
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f7ff fa77 	bl	8000100 <strlen>
 8000c12:	0003      	movs	r3, r0
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	23fa      	movs	r3, #250	; 0xfa
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	1939      	adds	r1, r7, r4
 8000c1c:	486f      	ldr	r0, [pc, #444]	; (8000ddc <update_firmware+0x3c8>)
 8000c1e:	f003 fa1f 	bl	8004060 <HAL_UART_Transmit>
		while( j<=pages-1)
 8000c22:	4b74      	ldr	r3, [pc, #464]	; (8000df4 <update_firmware+0x3e0>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	1e5a      	subs	r2, r3, #1
 8000c28:	4b7e      	ldr	r3, [pc, #504]	; (8000e24 <update_firmware+0x410>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d300      	bcc.n	8000c32 <update_firmware+0x21e>
 8000c30:	e74f      	b.n	8000ad2 <update_firmware+0xbe>
			}

		}// end while
	     transmit_data = true;
 8000c32:	4b74      	ldr	r3, [pc, #464]	; (8000e04 <update_firmware+0x3f0>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	701a      	strb	r2, [r3, #0]

		if(offset!=0)
 8000c38:	4b70      	ldr	r3, [pc, #448]	; (8000dfc <update_firmware+0x3e8>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d100      	bne.n	8000c42 <update_firmware+0x22e>
 8000c40:	e09c      	b.n	8000d7c <update_firmware+0x368>
 8000c42:	4b69      	ldr	r3, [pc, #420]	; (8000de8 <update_firmware+0x3d4>)
 8000c44:	681a      	ldr	r2, [r3, #0]
		{
			//printf(" \r --------------Last Page ----------- \n");
			memcpy(&index_page,&rx_buff[0],4);
 8000c46:	4b70      	ldr	r3, [pc, #448]	; (8000e08 <update_firmware+0x3f4>)
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	4b67      	ldr	r3, [pc, #412]	; (8000de8 <update_firmware+0x3d4>)
 8000c4c:	685a      	ldr	r2, [r3, #4]
			memcpy(&crc_part,&rx_buff[4],4);
 8000c4e:	4b6f      	ldr	r3, [pc, #444]	; (8000e0c <update_firmware+0x3f8>)
 8000c50:	601a      	str	r2, [r3, #0]
			//printf(" \r index: %lX \n",index_page);
			//printf(" \r crc_part: %lX \n",crc_part);
			crc = CRC16_X25(&rx_buff[8], offset, 0);//offset
 8000c52:	4b6a      	ldr	r3, [pc, #424]	; (8000dfc <update_firmware+0x3e8>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	b299      	uxth	r1, r3
 8000c58:	4b6d      	ldr	r3, [pc, #436]	; (8000e10 <update_firmware+0x3fc>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f7ff fced 	bl	800063c <CRC16_X25>
 8000c62:	0003      	movs	r3, r0
 8000c64:	001a      	movs	r2, r3
 8000c66:	4b6b      	ldr	r3, [pc, #428]	; (8000e14 <update_firmware+0x400>)
 8000c68:	801a      	strh	r2, [r3, #0]
			//printf(" \r crc computed: %X \r\n",crc);
			//printf(" \r crc_rec: %lX \r\n",crc_rec);


			if(crc == crc_part)
 8000c6a:	4b6a      	ldr	r3, [pc, #424]	; (8000e14 <update_firmware+0x400>)
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	001a      	movs	r2, r3
 8000c70:	4b66      	ldr	r3, [pc, #408]	; (8000e0c <update_firmware+0x3f8>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d150      	bne.n	8000d1a <update_firmware+0x306>
			{
			  a = write(&rx_buff[8],a);
 8000c78:	4b67      	ldr	r3, [pc, #412]	; (8000e18 <update_firmware+0x404>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	001a      	movs	r2, r3
 8000c7e:	4b64      	ldr	r3, [pc, #400]	; (8000e10 <update_firmware+0x3fc>)
 8000c80:	0011      	movs	r1, r2
 8000c82:	0018      	movs	r0, r3
 8000c84:	f7ff fd12 	bl	80006ac <write>
 8000c88:	0003      	movs	r3, r0
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	4b62      	ldr	r3, [pc, #392]	; (8000e18 <update_firmware+0x404>)
 8000c8e:	801a      	strh	r2, [r3, #0]
			  crc_rec = CRC16_X25(&rx_buff[8], offset, crc_rec);
 8000c90:	4b5a      	ldr	r3, [pc, #360]	; (8000dfc <update_firmware+0x3e8>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	b299      	uxth	r1, r3
 8000c96:	4b61      	ldr	r3, [pc, #388]	; (8000e1c <update_firmware+0x408>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	4b5c      	ldr	r3, [pc, #368]	; (8000e10 <update_firmware+0x3fc>)
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f7ff fccc 	bl	800063c <CRC16_X25>
 8000ca4:	0003      	movs	r3, r0
 8000ca6:	001a      	movs	r2, r3
 8000ca8:	4b5c      	ldr	r3, [pc, #368]	; (8000e1c <update_firmware+0x408>)
 8000caa:	601a      	str	r2, [r3, #0]
			  memset(buffer,'\0',sizeof(buffer));
 8000cac:	241c      	movs	r4, #28
 8000cae:	193b      	adds	r3, r7, r4
 8000cb0:	220a      	movs	r2, #10
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f005 fa36 	bl	8006126 <memset>
			  memset(strnum,'\0',sizeof(strnum));
 8000cba:	2510      	movs	r5, #16
 8000cbc:	197b      	adds	r3, r7, r5
 8000cbe:	220a      	movs	r2, #10
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f005 fa2f 	bl	8006126 <memset>
			  snprintf(strnum,sizeof(strnum), "%d",index_page);
 8000cc8:	4b4f      	ldr	r3, [pc, #316]	; (8000e08 <update_firmware+0x3f4>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a56      	ldr	r2, [pc, #344]	; (8000e28 <update_firmware+0x414>)
 8000cce:	1978      	adds	r0, r7, r5
 8000cd0:	210a      	movs	r1, #10
 8000cd2:	f005 faf9 	bl	80062c8 <sniprintf>
			  //printf("strnum: %s, len: %d \n",strnum,strlen(strnum));
			  memcpy(&buffer[0], OK, sizeof(OK));
 8000cd6:	193b      	adds	r3, r7, r4
 8000cd8:	220c      	movs	r2, #12
 8000cda:	18ba      	adds	r2, r7, r2
 8000cdc:	8811      	ldrh	r1, [r2, #0]
 8000cde:	8019      	strh	r1, [r3, #0]
 8000ce0:	7892      	ldrb	r2, [r2, #2]
 8000ce2:	709a      	strb	r2, [r3, #2]
			  memcpy(&buffer[sizeof(OK)], strnum,strlen(strnum));
 8000ce4:	197b      	adds	r3, r7, r5
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f7ff fa0a 	bl	8000100 <strlen>
 8000cec:	0002      	movs	r2, r0
 8000cee:	1979      	adds	r1, r7, r5
 8000cf0:	193b      	adds	r3, r7, r4
 8000cf2:	3303      	adds	r3, #3
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f005 fa0d 	bl	8006114 <memcpy>
			  //printf(" \r buffer: %s\r\n",buffer);
			  HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer),500);
 8000cfa:	193b      	adds	r3, r7, r4
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff f9ff 	bl	8000100 <strlen>
 8000d02:	0003      	movs	r3, r0
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	23fa      	movs	r3, #250	; 0xfa
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	1939      	adds	r1, r7, r4
 8000d0c:	4833      	ldr	r0, [pc, #204]	; (8000ddc <update_firmware+0x3c8>)
 8000d0e:	f003 f9a7 	bl	8004060 <HAL_UART_Transmit>
			  HAL_Delay(200);
			  HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
			  HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
			  HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
			  */
			 dato_recivido = false;
 8000d12:	4b34      	ldr	r3, [pc, #208]	; (8000de4 <update_firmware+0x3d0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
 8000d18:	e030      	b.n	8000d7c <update_firmware+0x368>
			}
			else
			{
			  memset(buffer,'\0',sizeof(buffer));
 8000d1a:	241c      	movs	r4, #28
 8000d1c:	193b      	adds	r3, r7, r4
 8000d1e:	220a      	movs	r2, #10
 8000d20:	2100      	movs	r1, #0
 8000d22:	0018      	movs	r0, r3
 8000d24:	f005 f9ff 	bl	8006126 <memset>
			  memset(strnum,'\0',sizeof(strnum));
 8000d28:	2510      	movs	r5, #16
 8000d2a:	197b      	adds	r3, r7, r5
 8000d2c:	220a      	movs	r2, #10
 8000d2e:	2100      	movs	r1, #0
 8000d30:	0018      	movs	r0, r3
 8000d32:	f005 f9f8 	bl	8006126 <memset>
			  snprintf(strnum,sizeof(strnum), "%d",index_page);
 8000d36:	4b34      	ldr	r3, [pc, #208]	; (8000e08 <update_firmware+0x3f4>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a3b      	ldr	r2, [pc, #236]	; (8000e28 <update_firmware+0x414>)
 8000d3c:	1978      	adds	r0, r7, r5
 8000d3e:	210a      	movs	r1, #10
 8000d40:	f005 fac2 	bl	80062c8 <sniprintf>
			  memcpy(&buffer[0], ERR, sizeof(ERR));
 8000d44:	193b      	adds	r3, r7, r4
 8000d46:	2208      	movs	r2, #8
 8000d48:	18ba      	adds	r2, r7, r2
 8000d4a:	6812      	ldr	r2, [r2, #0]
 8000d4c:	601a      	str	r2, [r3, #0]
			  memcpy(&buffer[sizeof(ERR)], strnum,strlen(strnum));
 8000d4e:	197b      	adds	r3, r7, r5
 8000d50:	0018      	movs	r0, r3
 8000d52:	f7ff f9d5 	bl	8000100 <strlen>
 8000d56:	0002      	movs	r2, r0
 8000d58:	1979      	adds	r1, r7, r5
 8000d5a:	193b      	adds	r3, r7, r4
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f005 f9d8 	bl	8006114 <memcpy>
			  //printf(" \r buffer: %s\r\n",buffer);
			  HAL_UART_Transmit(&huart2,(uint8_t*)buffer, strlen(buffer),500);
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	0018      	movs	r0, r3
 8000d68:	f7ff f9ca 	bl	8000100 <strlen>
 8000d6c:	0003      	movs	r3, r0
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	23fa      	movs	r3, #250	; 0xfa
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	1939      	adds	r1, r7, r4
 8000d76:	4819      	ldr	r0, [pc, #100]	; (8000ddc <update_firmware+0x3c8>)
 8000d78:	f003 f972 	bl	8004060 <HAL_UART_Transmit>
				  //return -1;
			}
		}// offset

	//--------------------- Check Integration -----------------
		if(CRC_16 == crc_rec)
 8000d7c:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <update_firmware+0x3dc>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <update_firmware+0x408>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d151      	bne.n	8000e2c <update_firmware+0x418>
			/*printf("\r ************* CRC OK ****************** \r\n");
			printf(" \r crc rec: %lX \r\n",crc_rec);
			printf(" \r crc_app: %lX \n",CRC_16);
			printf("\r ************************************* \r\n");
			*/
			HAL_Delay(2000);
 8000d88:	23fa      	movs	r3, #250	; 0xfa
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f001 f899 	bl	8001ec4 <HAL_Delay>
			cmd7[0] = crc_rec;
 8000d92:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <update_firmware+0x408>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	003b      	movs	r3, r7
 8000d98:	601a      	str	r2, [r3, #0]
			cmd7[1] = 0xFFFFFFFF;
 8000d9a:	003b      	movs	r3, r7
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	4252      	negs	r2, r2
 8000da0:	605a      	str	r2, [r3, #4]
			HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 8000da2:	23fa      	movs	r3, #250	; 0xfa
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	0039      	movs	r1, r7
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <update_firmware+0x3c8>)
 8000daa:	2208      	movs	r2, #8
 8000dac:	f003 f958 	bl	8004060 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 8000db0:	23fa      	movs	r3, #250	; 0xfa
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	0039      	movs	r1, r7
 8000db6:	4809      	ldr	r0, [pc, #36]	; (8000ddc <update_firmware+0x3c8>)
 8000db8:	2208      	movs	r2, #8
 8000dba:	f003 f951 	bl	8004060 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 8000dbe:	23fa      	movs	r3, #250	; 0xfa
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	0039      	movs	r1, r7
 8000dc4:	4805      	ldr	r0, [pc, #20]	; (8000ddc <update_firmware+0x3c8>)
 8000dc6:	2208      	movs	r2, #8
 8000dc8:	f003 f94a 	bl	8004060 <HAL_UART_Transmit>
 8000dcc:	e050      	b.n	8000e70 <update_firmware+0x45c>
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	08007148 	.word	0x08007148
 8000dd4:	20525245 	.word	0x20525245
 8000dd8:	08007138 	.word	0x08007138
 8000ddc:	20000a10 	.word	0x20000a10
 8000de0:	20000d78 	.word	0x20000d78
 8000de4:	20000b48 	.word	0x20000b48
 8000de8:	20000b58 	.word	0x20000b58
 8000dec:	20000d60 	.word	0x20000d60
 8000df0:	20000d64 	.word	0x20000d64
 8000df4:	20000b4c 	.word	0x20000b4c
 8000df8:	20000b54 	.word	0x20000b54
 8000dfc:	20000b50 	.word	0x20000b50
 8000e00:	0800713c 	.word	0x0800713c
 8000e04:	20000b4a 	.word	0x20000b4a
 8000e08:	20000d68 	.word	0x20000d68
 8000e0c:	20000d7c 	.word	0x20000d7c
 8000e10:	20000b60 	.word	0x20000b60
 8000e14:	20000d6c 	.word	0x20000d6c
 8000e18:	20000d72 	.word	0x20000d72
 8000e1c:	20000d80 	.word	0x20000d80
 8000e20:	08007140 	.word	0x08007140
 8000e24:	20000d84 	.word	0x20000d84
 8000e28:	08007144 	.word	0x08007144
			/*printf("\r ************* CRC FAIL ****************** \r\n");
			printf(" \r crc rec: %lX \r\n",crc_rec);
			printf(" \r crc_app: %lX \n",CRC_16);
			printf("\r ************************************* \r\n");
			*/
			HAL_Delay(2000);
 8000e2c:	23fa      	movs	r3, #250	; 0xfa
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	0018      	movs	r0, r3
 8000e32:	f001 f847 	bl	8001ec4 <HAL_Delay>
			cmd7[0] = 0xFFFFFFFF;
 8000e36:	003b      	movs	r3, r7
 8000e38:	2201      	movs	r2, #1
 8000e3a:	4252      	negs	r2, r2
 8000e3c:	601a      	str	r2, [r3, #0]
			cmd7[1] = 0xFFFFFFFF;
 8000e3e:	003b      	movs	r3, r7
 8000e40:	2201      	movs	r2, #1
 8000e42:	4252      	negs	r2, r2
 8000e44:	605a      	str	r2, [r3, #4]
			HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 8000e46:	23fa      	movs	r3, #250	; 0xfa
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	0039      	movs	r1, r7
 8000e4c:	4824      	ldr	r0, [pc, #144]	; (8000ee0 <update_firmware+0x4cc>)
 8000e4e:	2208      	movs	r2, #8
 8000e50:	f003 f906 	bl	8004060 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 8000e54:	23fa      	movs	r3, #250	; 0xfa
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	0039      	movs	r1, r7
 8000e5a:	4821      	ldr	r0, [pc, #132]	; (8000ee0 <update_firmware+0x4cc>)
 8000e5c:	2208      	movs	r2, #8
 8000e5e:	f003 f8ff 	bl	8004060 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2,(uint8_t*)cmd7, sizeof(cmd7),500);
 8000e62:	23fa      	movs	r3, #250	; 0xfa
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	0039      	movs	r1, r7
 8000e68:	481d      	ldr	r0, [pc, #116]	; (8000ee0 <update_firmware+0x4cc>)
 8000e6a:	2208      	movs	r2, #8
 8000e6c:	f003 f8f8 	bl	8004060 <HAL_UART_Transmit>
			//printf("LOADER FAIL\r\n");
			//return -1;
		}

	//---------------- Validate -------------------------
		const image_hdr_t *hdr = NULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
		hdr = image_get_header(IMAGE_SLOT_2);//magic
 8000e74:	2002      	movs	r0, #2
 8000e76:	f7ff fb2b 	bl	80004d0 <image_get_header>
 8000e7a:	0003      	movs	r3, r0
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (hdr == NULL)
 8000e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d102      	bne.n	8000e8a <update_firmware+0x476>
		{
			//printf("Magic incorrect \r\n");
			err =  -1;
 8000e84:	2301      	movs	r3, #1
 8000e86:	425b      	negs	r3, r3
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		if (image_validate(IMAGE_SLOT_2, hdr) != 0)//crc
 8000e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e8c:	0019      	movs	r1, r3
 8000e8e:	2002      	movs	r0, #2
 8000e90:	f7ff fb4c 	bl	800052c <image_validate>
 8000e94:	1e03      	subs	r3, r0, #0
 8000e96:	d002      	beq.n	8000e9e <update_firmware+0x48a>
		{
			//printf("CRC incorrect \r\n");
			err = -1;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	425b      	negs	r3, r3
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
		}//*/
	// -------------------------- Clone ----------------------------

		if((CRC_16 == crc_rec) && (err == 0))
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <update_firmware+0x4d0>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <update_firmware+0x4d4>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d10e      	bne.n	8000ec8 <update_firmware+0x4b4>
 8000eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d10b      	bne.n	8000ec8 <update_firmware+0x4b4>
		{
			//printf("Ready to write to  Slot 1 \r\n");
			HAL_Delay(2000);
 8000eb0:	23fa      	movs	r3, #250	; 0xfa
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f001 f805 	bl	8001ec4 <HAL_Delay>
			err = clone_rom(FW_SIZE);
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <update_firmware+0x4d8>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f7ff fcae 	bl	8000820 <clone_rom>
 8000ec4:	0003      	movs	r3, r0
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		if ( err == 0)
 8000ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <update_firmware+0x4be>
		{
			//printf("UPDATE SUCCESSFULLY\r\n");
			return 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e001      	b.n	8000ed6 <update_firmware+0x4c2>
		}
		else
		{
			//printf("UPDATE FAIL\r\n");
			return -1;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	425b      	negs	r3, r3
		}//*/


}// get_Firmware()
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b00c      	add	sp, #48	; 0x30
 8000edc:	bdb0      	pop	{r4, r5, r7, pc}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	20000a10 	.word	0x20000a10
 8000ee4:	20000d64 	.word	0x20000d64
 8000ee8:	20000d80 	.word	0x20000d80
 8000eec:	20000d60 	.word	0x20000d60

08000ef0 <BootJumpASM>:

__attribute__( (naked, noreturn) ) static void BootJumpASM(uint32_t PC, uint32_t SP) {
	__asm("           \n\
 8000ef0:	f381 8808 	msr	MSP, r1
 8000ef4:	4700      	bx	r0
			msr msp, r1 /* load r1 into MSP */\n\
			bx r0       /* branch to the address at r0 */\n\
	");
}
 8000ef6:	46c0      	nop			; (mov r8, r8)

08000ef8 <image_start>:

 void image_start(const image_hdr_t *hdr) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8000f00:	200f      	movs	r0, #15
 8000f02:	183b      	adds	r3, r7, r0
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f08:	b672      	cpsid	i
}
 8000f0a:	46c0      	nop			; (mov r8, r8)
	/* Disable interrupts */
	//Disable IRQ
	__disable_irq();

	//Disable the system timer
	SysTick->CTRL = 0;
 8000f0c:	4b28      	ldr	r3, [pc, #160]	; (8000fb0 <image_start+0xb8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]

	//Clear the exception pending bit
	SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk ;
 8000f12:	4b28      	ldr	r3, [pc, #160]	; (8000fb4 <image_start+0xbc>)
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <image_start+0xbc>)
 8000f18:	2180      	movs	r1, #128	; 0x80
 8000f1a:	0489      	lsls	r1, r1, #18
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	605a      	str	r2, [r3, #4]

	//Disable IRQs
    for (i = 0; i < 8; i++) {
 8000f20:	183b      	adds	r3, r7, r0
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]
 8000f26:	e015      	b.n	8000f54 <image_start+0x5c>
        NVIC->ICER[i] = 0xFFFFFFFF; // disable IRQ
 8000f28:	4923      	ldr	r1, [pc, #140]	; (8000fb8 <image_start+0xc0>)
 8000f2a:	200f      	movs	r0, #15
 8000f2c:	183b      	adds	r3, r7, r0
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	3320      	adds	r3, #32
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	2201      	movs	r2, #1
 8000f36:	4252      	negs	r2, r2
 8000f38:	505a      	str	r2, [r3, r1]
        NVIC->ICPR[i] = 0xFFFFFFFF; // clear pending IRQ
 8000f3a:	491f      	ldr	r1, [pc, #124]	; (8000fb8 <image_start+0xc0>)
 8000f3c:	183b      	adds	r3, r7, r0
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	3360      	adds	r3, #96	; 0x60
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	2201      	movs	r2, #1
 8000f46:	4252      	negs	r2, r2
 8000f48:	505a      	str	r2, [r3, r1]
    for (i = 0; i < 8; i++) {
 8000f4a:	183b      	adds	r3, r7, r0
 8000f4c:	781a      	ldrb	r2, [r3, #0]
 8000f4e:	183b      	adds	r3, r7, r0
 8000f50:	3201      	adds	r2, #1
 8000f52:	701a      	strb	r2, [r3, #0]
 8000f54:	230f      	movs	r3, #15
 8000f56:	18fb      	adds	r3, r7, r3
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b07      	cmp	r3, #7
 8000f5c:	d9e4      	bls.n	8000f28 <image_start+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f5e:	f3bf 8f4f 	dsb	sy
}
 8000f62:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8000f64:	f3bf 8f6f 	isb	sy
}
 8000f68:	46c0      	nop			; (mov r8, r8)
	//Barriers
	__DSB();
	__ISB();

	//const DeviceVectors *vectors = (const DeviceVectors *) hdr->vector_addr;
	uint32_t *isr = (uint32_t *)hdr->vector_addr;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	7c1a      	ldrb	r2, [r3, #16]
 8000f6e:	7c59      	ldrb	r1, [r3, #17]
 8000f70:	0209      	lsls	r1, r1, #8
 8000f72:	430a      	orrs	r2, r1
 8000f74:	7c99      	ldrb	r1, [r3, #18]
 8000f76:	0409      	lsls	r1, r1, #16
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	7cdb      	ldrb	r3, [r3, #19]
 8000f7c:	061b      	lsls	r3, r3, #24
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	60bb      	str	r3, [r7, #8]
    SCB->VTOR = (uint32_t)isr & SCB_VTOR_TBLOFF_Msk;
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <image_start+0xbc>)
 8000f86:	21ff      	movs	r1, #255	; 0xff
 8000f88:	438a      	bics	r2, r1
 8000f8a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f8c:	f3bf 8f4f 	dsb	sy
}
 8000f90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8000f92:	f3bf 8f6f 	isb	sy
}
 8000f96:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("cpsie i" : : : "memory");
 8000f98:	b662      	cpsie	i
}
 8000f9a:	46c0      	nop			; (mov r8, r8)
	__ISB();

	/* Enable interrrupts */
	__enable_irq();

    BootJumpASM(isr[1], isr[0]);
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	3304      	adds	r3, #4
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	0019      	movs	r1, r3
 8000fa8:	0010      	movs	r0, r2
 8000faa:	f7ff ffa1 	bl	8000ef0 <BootJumpASM>
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	e000e010 	.word	0xe000e010
 8000fb4:	e000ed00 	.word	0xe000ed00
 8000fb8:	e000e100 	.word	0xe000e100

08000fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc2:	f000 fef9 	bl	8001db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc6:	f000 f90d 	bl	80011e4 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  MX_USART2_UART_Init();
 8000fca:	f000 fa5f 	bl	800148c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000fce:	f000 f951 	bl	8001274 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000fd2:	f000 f9ab 	bl	800132c <MX_TIM3_Init>
  MX_USART5_UART_Init();
 8000fd6:	f000 faa7 	bl	8001528 <MX_USART5_UART_Init>
  MX_TIM15_Init();
 8000fda:	f000 f9fd 	bl	80013d8 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  MX_GPIO_Init_user();
 8000fde:	f000 fb0d 	bl	80015fc <MX_GPIO_Init_user>
   RetargetInit(&huart5);
 8000fe2:	4b74      	ldr	r3, [pc, #464]	; (80011b4 <main+0x1f8>)
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f000 fc49 	bl	800187c <RetargetInit>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);// BOOT/*/

   //printf("\r ------ Start Bootooader ----- \r\n");
   HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx_buff, sizeof rx_buff);
 8000fea:	2382      	movs	r3, #130	; 0x82
 8000fec:	009a      	lsls	r2, r3, #2
 8000fee:	4972      	ldr	r1, [pc, #456]	; (80011b8 <main+0x1fc>)
 8000ff0:	4b72      	ldr	r3, [pc, #456]	; (80011bc <main+0x200>)
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f004 ff9e 	bl	8005f34 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	shared_memory_init();
 8000ff8:	f000 fbc4 	bl	8001784 <shared_memory_init>
	timer_flag = 0;
 8000ffc:	4b70      	ldr	r3, [pc, #448]	; (80011c0 <main+0x204>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim1);
 8001002:	4b70      	ldr	r3, [pc, #448]	; (80011c4 <main+0x208>)
 8001004:	0018      	movs	r0, r3
 8001006:	f002 fb7f 	bl	8003708 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim15);
 800100a:	4b6f      	ldr	r3, [pc, #444]	; (80011c8 <main+0x20c>)
 800100c:	0018      	movs	r0, r3
 800100e:	f002 fb7b 	bl	8003708 <HAL_TIM_Base_Start_IT>


	while (1)
	{
		HAL_Delay(5);
 8001012:	2005      	movs	r0, #5
 8001014:	f000 ff56 	bl	8001ec4 <HAL_Delay>
		boot = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_14);// 1/0
 8001018:	2380      	movs	r3, #128	; 0x80
 800101a:	01da      	lsls	r2, r3, #7
 800101c:	23a0      	movs	r3, #160	; 0xa0
 800101e:	05db      	lsls	r3, r3, #23
 8001020:	0011      	movs	r1, r2
 8001022:	0018      	movs	r0, r3
 8001024:	f001 fc46 	bl	80028b4 <HAL_GPIO_ReadPin>
 8001028:	0003      	movs	r3, r0
 800102a:	b29a      	uxth	r2, r3
 800102c:	4b67      	ldr	r3, [pc, #412]	; (80011cc <main+0x210>)
 800102e:	801a      	strh	r2, [r3, #0]
		//printf("\r boot: %d \r\n",boot);
		bootloader = timer_flag & boot;
 8001030:	4b63      	ldr	r3, [pc, #396]	; (80011c0 <main+0x204>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	4a65      	ldr	r2, [pc, #404]	; (80011cc <main+0x210>)
 8001036:	8812      	ldrh	r2, [r2, #0]
 8001038:	4013      	ands	r3, r2
 800103a:	b29b      	uxth	r3, r3
 800103c:	1e5a      	subs	r2, r3, #1
 800103e:	4193      	sbcs	r3, r2
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4b63      	ldr	r3, [pc, #396]	; (80011d0 <main+0x214>)
 8001044:	701a      	strb	r2, [r3, #0]
		if(bootloader)
 8001046:	4b62      	ldr	r3, [pc, #392]	; (80011d0 <main+0x214>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d006      	beq.n	800105c <main+0xa0>
		{
			//printf(" App \n\r");
			HAL_TIM_Base_Stop_IT(&htim1);
 800104e:	4b5d      	ldr	r3, [pc, #372]	; (80011c4 <main+0x208>)
 8001050:	0018      	movs	r0, r3
 8001052:	f002 fbb5 	bl	80037c0 <HAL_TIM_Base_Stop_IT>
			shared_mem_set_app_update_requested(false);
 8001056:	2000      	movs	r0, #0
 8001058:	f000 fbf6 	bl	8001848 <shared_mem_set_app_update_requested>
		}
		 if(bootloader == 0)
 800105c:	4b5c      	ldr	r3, [pc, #368]	; (80011d0 <main+0x214>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2201      	movs	r2, #1
 8001062:	4053      	eors	r3, r2
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d006      	beq.n	8001078 <main+0xbc>
		{
			//printf(" \r Bootloader \r\n");
			HAL_TIM_Base_Stop_IT(&htim1);
 800106a:	4b56      	ldr	r3, [pc, #344]	; (80011c4 <main+0x208>)
 800106c:	0018      	movs	r0, r3
 800106e:	f002 fba7 	bl	80037c0 <HAL_TIM_Base_Stop_IT>
			shared_mem_set_app_update_requested(true);
 8001072:	2001      	movs	r0, #1
 8001074:	f000 fbe8 	bl	8001848 <shared_mem_set_app_update_requested>
		}

	    if((flag_break == 1) && (bootloader==0))
 8001078:	4b56      	ldr	r3, [pc, #344]	; (80011d4 <main+0x218>)
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d109      	bne.n	8001094 <main+0xd8>
 8001080:	4b53      	ldr	r3, [pc, #332]	; (80011d0 <main+0x214>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2201      	movs	r2, #1
 8001086:	4053      	eors	r3, r2
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d002      	beq.n	8001094 <main+0xd8>
		{
			//printf(" \r App Timer \r\n");
			shared_mem_set_app_update_requested(false);
 800108e:	2000      	movs	r0, #0
 8001090:	f000 fbda 	bl	8001848 <shared_mem_set_app_update_requested>
		}

	if (shared_mem_is_bl_upd_requested()) {//bootloader
 8001094:	f000 fb97 	bl	80017c6 <shared_mem_is_bl_upd_requested>
 8001098:	1e03      	subs	r3, r0, #0
 800109a:	d016      	beq.n	80010ca <main+0x10e>
			hdr = image_get_header(IMAGE_SLOT_2); // get address y magic
 800109c:	2002      	movs	r0, #2
 800109e:	f7ff fa17 	bl	80004d0 <image_get_header>
 80010a2:	0002      	movs	r2, r0
 80010a4:	4b4c      	ldr	r3, [pc, #304]	; (80011d8 <main+0x21c>)
 80010a6:	601a      	str	r2, [r3, #0]

		// Load the updater (apparom)
		if (hdr == NULL)
 80010a8:	4b4b      	ldr	r3, [pc, #300]	; (80011d8 <main+0x21c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d005      	beq.n	80010bc <main+0x100>
		{
			//printf("No image found in slot 2\r\n");
		}
		else
		{
			if (image_validate(IMAGE_SLOT_2, hdr) != 0) {// addr =  &__loader_rom_start__ + sizeof(image_hdr_t), len -> crc(add, len)
 80010b0:	4b49      	ldr	r3, [pc, #292]	; (80011d8 <main+0x21c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	0019      	movs	r1, r3
 80010b6:	2002      	movs	r0, #2
 80010b8:	f7ff fa38 	bl	800052c <image_validate>
		}
		//ioport_set_pin_level(RED_LED, false);
		//ioport_set_pin_level(GREEN_LED, false);
		//ioport_set_pin_level(BLUE_LED, false);
		//printf("Jumping to updater\r\n");
		shared_mem_increment_boot_counter();
 80010bc:	f000 fb8c 	bl	80017d8 <shared_mem_increment_boot_counter>
		//printf("Boot count: %d \r\n",shared_mem_get_boot_counter());
		image_start(hdr);
 80010c0:	4b45      	ldr	r3, [pc, #276]	; (80011d8 <main+0x21c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	0018      	movs	r0, r3
 80010c6:	f7ff ff17 	bl	8000ef8 <image_start>

	}

	if (!shared_mem_is_app_upd_requested()) {//app //boot 1
 80010ca:	f000 fb73 	bl	80017b4 <shared_mem_is_app_upd_requested>
 80010ce:	0003      	movs	r3, r0
 80010d0:	001a      	movs	r2, r3
 80010d2:	2301      	movs	r3, #1
 80010d4:	4053      	eors	r3, r2
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d02a      	beq.n	8001132 <main+0x176>
		// Boot count, maybe not neccessary or implement a better thing to handle this
		const uint8_t max_boot_attemps = 4;
 80010dc:	1dfb      	adds	r3, r7, #7
 80010de:	2204      	movs	r2, #4
 80010e0:	701a      	strb	r2, [r3, #0]
		if (shared_mem_get_boot_counter() >= max_boot_attemps)
 80010e2:	f000 fb91 	bl	8001808 <shared_mem_get_boot_counter>
 80010e6:	0003      	movs	r3, r0
 80010e8:	001a      	movs	r2, r3
 80010ea:	1dfb      	adds	r3, r7, #7
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d805      	bhi.n	80010fe <main+0x142>
		{
			shared_mem_clear_boot_counter();
 80010f2:	f000 fb7f 	bl	80017f4 <shared_mem_clear_boot_counter>
			//printf("App unstable, entering to DFU mode\r\n");
			break;
 80010f6:	46c0      	nop			; (mov r8, r8)

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }//end while
	HAL_NVIC_SystemReset(); //resetea el uC
 80010f8:	f000 ffeb 	bl	80020d2 <HAL_NVIC_SystemReset>
 80010fc:	e058      	b.n	80011b0 <main+0x1f4>
		hdr = image_get_header(IMAGE_SLOT_1);// get address y magic
 80010fe:	2001      	movs	r0, #1
 8001100:	f7ff f9e6 	bl	80004d0 <image_get_header>
 8001104:	0002      	movs	r2, r0
 8001106:	4b34      	ldr	r3, [pc, #208]	; (80011d8 <main+0x21c>)
 8001108:	601a      	str	r2, [r3, #0]
		if (hdr == NULL)
 800110a:	4b33      	ldr	r3, [pc, #204]	; (80011d8 <main+0x21c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d04b      	beq.n	80011aa <main+0x1ee>
		if (image_validate(IMAGE_SLOT_1, hdr) != 0) { // addr =  &__loader_rom_start__ + sizeof(image_hdr_t), len -> crc(add, len)
 8001112:	4b31      	ldr	r3, [pc, #196]	; (80011d8 <main+0x21c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	0019      	movs	r1, r3
 8001118:	2001      	movs	r0, #1
 800111a:	f7ff fa07 	bl	800052c <image_validate>
 800111e:	1e03      	subs	r3, r0, #0
 8001120:	d145      	bne.n	80011ae <main+0x1f2>
		shared_mem_increment_boot_counter();
 8001122:	f000 fb59 	bl	80017d8 <shared_mem_increment_boot_counter>
		image_start(hdr);
 8001126:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <main+0x21c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	0018      	movs	r0, r3
 800112c:	f7ff fee4 	bl	8000ef8 <image_start>
 8001130:	e76f      	b.n	8001012 <main+0x56>
	else if (shared_mem_is_app_upd_requested())
 8001132:	f000 fb3f 	bl	80017b4 <shared_mem_is_app_upd_requested>
 8001136:	1e03      	subs	r3, r0, #0
 8001138:	d100      	bne.n	800113c <main+0x180>
 800113a:	e76a      	b.n	8001012 <main+0x56>
		if (update_firmware() == 0)
 800113c:	f7ff fc6a 	bl	8000a14 <update_firmware>
 8001140:	1e03      	subs	r3, r0, #0
 8001142:	d000      	beq.n	8001146 <main+0x18a>
 8001144:	e765      	b.n	8001012 <main+0x56>
			shared_mem_set_update_completed();
 8001146:	f000 fb69 	bl	800181c <shared_mem_set_update_completed>
			shared_mem_clear_boot_counter();
 800114a:	f000 fb53 	bl	80017f4 <shared_mem_clear_boot_counter>
			shared_mem_clear_ota_info();
 800114e:	f000 fb71 	bl	8001834 <shared_mem_clear_ota_info>
			shared_mem_set_app_update_requested(false);
 8001152:	2000      	movs	r0, #0
 8001154:	f000 fb78 	bl	8001848 <shared_mem_set_app_update_requested>
			shared_mem_set_update();
 8001158:	f000 fb86 	bl	8001868 <shared_mem_set_update>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);//resetea el uC
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	481e      	ldr	r0, [pc, #120]	; (80011dc <main+0x220>)
 8001162:	2200      	movs	r2, #0
 8001164:	0019      	movs	r1, r3
 8001166:	f001 fbc2 	bl	80028ee <HAL_GPIO_WritePin>
			HAL_Delay(2000);
 800116a:	23fa      	movs	r3, #250	; 0xfa
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	0018      	movs	r0, r3
 8001170:	f000 fea8 	bl	8001ec4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	4818      	ldr	r0, [pc, #96]	; (80011dc <main+0x220>)
 800117a:	2201      	movs	r2, #1
 800117c:	0019      	movs	r1, r3
 800117e:	f001 fbb6 	bl	80028ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);//resetea el uC
 8001182:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <main+0x224>)
 8001184:	2200      	movs	r2, #0
 8001186:	2108      	movs	r1, #8
 8001188:	0018      	movs	r0, r3
 800118a:	f001 fbb0 	bl	80028ee <HAL_GPIO_WritePin>
			HAL_Delay(2000);
 800118e:	23fa      	movs	r3, #250	; 0xfa
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	0018      	movs	r0, r3
 8001194:	f000 fe96 	bl	8001ec4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <main+0x224>)
 800119a:	2201      	movs	r2, #1
 800119c:	2108      	movs	r1, #8
 800119e:	0018      	movs	r0, r3
 80011a0:	f001 fba5 	bl	80028ee <HAL_GPIO_WritePin>
			HAL_NVIC_SystemReset();
 80011a4:	f000 ff95 	bl	80020d2 <HAL_NVIC_SystemReset>
		HAL_Delay(5);
 80011a8:	e733      	b.n	8001012 <main+0x56>
			goto invalid;
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	e000      	b.n	80011b0 <main+0x1f4>
			goto invalid;
 80011ae:	46c0      	nop			; (mov r8, r8)

	invalid:
		//printf("\r\nFlash a valid application\r\n");
		while (true)
		{
			__asm__ __volatile__("");
 80011b0:	e7fe      	b.n	80011b0 <main+0x1f4>
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	20000aa4 	.word	0x20000aa4
 80011b8:	20000b58 	.word	0x20000b58
 80011bc:	20000a10 	.word	0x20000a10
 80011c0:	20000d76 	.word	0x20000d76
 80011c4:	2000092c 	.word	0x2000092c
 80011c8:	200009c4 	.word	0x200009c4
 80011cc:	20000d74 	.word	0x20000d74
 80011d0:	20000b49 	.word	0x20000b49
 80011d4:	20000d78 	.word	0x20000d78
 80011d8:	20000d88 	.word	0x20000d88
 80011dc:	50000400 	.word	0x50000400
 80011e0:	50000c00 	.word	0x50000c00

080011e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b093      	sub	sp, #76	; 0x4c
 80011e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	2410      	movs	r4, #16
 80011ec:	193b      	adds	r3, r7, r4
 80011ee:	0018      	movs	r0, r3
 80011f0:	2338      	movs	r3, #56	; 0x38
 80011f2:	001a      	movs	r2, r3
 80011f4:	2100      	movs	r1, #0
 80011f6:	f004 ff96 	bl	8006126 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011fa:	003b      	movs	r3, r7
 80011fc:	0018      	movs	r0, r3
 80011fe:	2310      	movs	r3, #16
 8001200:	001a      	movs	r2, r3
 8001202:	2100      	movs	r1, #0
 8001204:	f004 ff8f 	bl	8006126 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	0018      	movs	r0, r3
 800120e:	f001 fb8b 	bl	8002928 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001212:	193b      	adds	r3, r7, r4
 8001214:	2202      	movs	r2, #2
 8001216:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001218:	193b      	adds	r3, r7, r4
 800121a:	2280      	movs	r2, #128	; 0x80
 800121c:	0052      	lsls	r2, r2, #1
 800121e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001220:	193b      	adds	r3, r7, r4
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001226:	193b      	adds	r3, r7, r4
 8001228:	2240      	movs	r2, #64	; 0x40
 800122a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800122c:	193b      	adds	r3, r7, r4
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001232:	193b      	adds	r3, r7, r4
 8001234:	0018      	movs	r0, r3
 8001236:	f001 fbc3 	bl	80029c0 <HAL_RCC_OscConfig>
 800123a:	1e03      	subs	r3, r0, #0
 800123c:	d001      	beq.n	8001242 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800123e:	f000 fa69 	bl	8001714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001242:	003b      	movs	r3, r7
 8001244:	2207      	movs	r2, #7
 8001246:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001248:	003b      	movs	r3, r7
 800124a:	2200      	movs	r2, #0
 800124c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124e:	003b      	movs	r3, r7
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001254:	003b      	movs	r3, r7
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800125a:	003b      	movs	r3, r7
 800125c:	2100      	movs	r1, #0
 800125e:	0018      	movs	r0, r3
 8001260:	f001 fec8 	bl	8002ff4 <HAL_RCC_ClockConfig>
 8001264:	1e03      	subs	r3, r0, #0
 8001266:	d001      	beq.n	800126c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001268:	f000 fa54 	bl	8001714 <Error_Handler>
  }
}
 800126c:	46c0      	nop			; (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	b013      	add	sp, #76	; 0x4c
 8001272:	bd90      	pop	{r4, r7, pc}

08001274 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127a:	2310      	movs	r3, #16
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	0018      	movs	r0, r3
 8001280:	2310      	movs	r3, #16
 8001282:	001a      	movs	r2, r3
 8001284:	2100      	movs	r1, #0
 8001286:	f004 ff4e 	bl	8006126 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	0018      	movs	r0, r3
 800128e:	230c      	movs	r3, #12
 8001290:	001a      	movs	r2, r3
 8001292:	2100      	movs	r1, #0
 8001294:	f004 ff47 	bl	8006126 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001298:	4b21      	ldr	r3, [pc, #132]	; (8001320 <MX_TIM1_Init+0xac>)
 800129a:	4a22      	ldr	r2, [pc, #136]	; (8001324 <MX_TIM1_Init+0xb0>)
 800129c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16000-1;
 800129e:	4b20      	ldr	r3, [pc, #128]	; (8001320 <MX_TIM1_Init+0xac>)
 80012a0:	4a21      	ldr	r2, [pc, #132]	; (8001328 <MX_TIM1_Init+0xb4>)
 80012a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a4:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <MX_TIM1_Init+0xac>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 80012aa:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <MX_TIM1_Init+0xac>)
 80012ac:	22c8      	movs	r2, #200	; 0xc8
 80012ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b0:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <MX_TIM1_Init+0xac>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012b6:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <MX_TIM1_Init+0xac>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012bc:	4b18      	ldr	r3, [pc, #96]	; (8001320 <MX_TIM1_Init+0xac>)
 80012be:	2200      	movs	r2, #0
 80012c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <MX_TIM1_Init+0xac>)
 80012c4:	0018      	movs	r0, r3
 80012c6:	f002 f9c7 	bl	8003658 <HAL_TIM_Base_Init>
 80012ca:	1e03      	subs	r3, r0, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80012ce:	f000 fa21 	bl	8001714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d2:	2110      	movs	r1, #16
 80012d4:	187b      	adds	r3, r7, r1
 80012d6:	2280      	movs	r2, #128	; 0x80
 80012d8:	0152      	lsls	r2, r2, #5
 80012da:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012dc:	187a      	adds	r2, r7, r1
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <MX_TIM1_Init+0xac>)
 80012e0:	0011      	movs	r1, r2
 80012e2:	0018      	movs	r0, r3
 80012e4:	f002 fbcc 	bl	8003a80 <HAL_TIM_ConfigClockSource>
 80012e8:	1e03      	subs	r3, r0, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80012ec:	f000 fa12 	bl	8001714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2200      	movs	r2, #0
 80012fa:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001302:	1d3a      	adds	r2, r7, #4
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_TIM1_Init+0xac>)
 8001306:	0011      	movs	r1, r2
 8001308:	0018      	movs	r0, r3
 800130a:	f002 fdcb 	bl	8003ea4 <HAL_TIMEx_MasterConfigSynchronization>
 800130e:	1e03      	subs	r3, r0, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001312:	f000 f9ff 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	b008      	add	sp, #32
 800131c:	bd80      	pop	{r7, pc}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	2000092c 	.word	0x2000092c
 8001324:	40012c00 	.word	0x40012c00
 8001328:	00003e7f 	.word	0x00003e7f

0800132c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001332:	2310      	movs	r3, #16
 8001334:	18fb      	adds	r3, r7, r3
 8001336:	0018      	movs	r0, r3
 8001338:	2310      	movs	r3, #16
 800133a:	001a      	movs	r2, r3
 800133c:	2100      	movs	r1, #0
 800133e:	f004 fef2 	bl	8006126 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	0018      	movs	r0, r3
 8001346:	230c      	movs	r3, #12
 8001348:	001a      	movs	r2, r3
 800134a:	2100      	movs	r1, #0
 800134c:	f004 feeb 	bl	8006126 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001350:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <MX_TIM3_Init+0xa0>)
 8001352:	4a1f      	ldr	r2, [pc, #124]	; (80013d0 <MX_TIM3_Init+0xa4>)
 8001354:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000-1;
 8001356:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <MX_TIM3_Init+0xa0>)
 8001358:	4a1e      	ldr	r2, [pc, #120]	; (80013d4 <MX_TIM3_Init+0xa8>)
 800135a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <MX_TIM3_Init+0xa0>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8000;
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <MX_TIM3_Init+0xa0>)
 8001364:	22fa      	movs	r2, #250	; 0xfa
 8001366:	0152      	lsls	r2, r2, #5
 8001368:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <MX_TIM3_Init+0xa0>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001370:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_TIM3_Init+0xa0>)
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <MX_TIM3_Init+0xa0>)
 8001378:	0018      	movs	r0, r3
 800137a:	f002 f96d 	bl	8003658 <HAL_TIM_Base_Init>
 800137e:	1e03      	subs	r3, r0, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001382:	f000 f9c7 	bl	8001714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001386:	2110      	movs	r1, #16
 8001388:	187b      	adds	r3, r7, r1
 800138a:	2280      	movs	r2, #128	; 0x80
 800138c:	0152      	lsls	r2, r2, #5
 800138e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001390:	187a      	adds	r2, r7, r1
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_TIM3_Init+0xa0>)
 8001394:	0011      	movs	r1, r2
 8001396:	0018      	movs	r0, r3
 8001398:	f002 fb72 	bl	8003a80 <HAL_TIM_ConfigClockSource>
 800139c:	1e03      	subs	r3, r0, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80013a0:	f000 f9b8 	bl	8001714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013b0:	1d3a      	adds	r2, r7, #4
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_TIM3_Init+0xa0>)
 80013b4:	0011      	movs	r1, r2
 80013b6:	0018      	movs	r0, r3
 80013b8:	f002 fd74 	bl	8003ea4 <HAL_TIMEx_MasterConfigSynchronization>
 80013bc:	1e03      	subs	r3, r0, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80013c0:	f000 f9a8 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013c4:	46c0      	nop			; (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b008      	add	sp, #32
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000978 	.word	0x20000978
 80013d0:	40000400 	.word	0x40000400
 80013d4:	00003e7f 	.word	0x00003e7f

080013d8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013de:	2310      	movs	r3, #16
 80013e0:	18fb      	adds	r3, r7, r3
 80013e2:	0018      	movs	r0, r3
 80013e4:	2310      	movs	r3, #16
 80013e6:	001a      	movs	r2, r3
 80013e8:	2100      	movs	r1, #0
 80013ea:	f004 fe9c 	bl	8006126 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	0018      	movs	r0, r3
 80013f2:	230c      	movs	r3, #12
 80013f4:	001a      	movs	r2, r3
 80013f6:	2100      	movs	r1, #0
 80013f8:	f004 fe95 	bl	8006126 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80013fc:	4b1f      	ldr	r3, [pc, #124]	; (800147c <MX_TIM15_Init+0xa4>)
 80013fe:	4a20      	ldr	r2, [pc, #128]	; (8001480 <MX_TIM15_Init+0xa8>)
 8001400:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 16000-1;
 8001402:	4b1e      	ldr	r3, [pc, #120]	; (800147c <MX_TIM15_Init+0xa4>)
 8001404:	4a1f      	ldr	r2, [pc, #124]	; (8001484 <MX_TIM15_Init+0xac>)
 8001406:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001408:	4b1c      	ldr	r3, [pc, #112]	; (800147c <MX_TIM15_Init+0xa4>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 15000;
 800140e:	4b1b      	ldr	r3, [pc, #108]	; (800147c <MX_TIM15_Init+0xa4>)
 8001410:	4a1d      	ldr	r2, [pc, #116]	; (8001488 <MX_TIM15_Init+0xb0>)
 8001412:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <MX_TIM15_Init+0xa4>)
 8001416:	2200      	movs	r2, #0
 8001418:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800141a:	4b18      	ldr	r3, [pc, #96]	; (800147c <MX_TIM15_Init+0xa4>)
 800141c:	2200      	movs	r2, #0
 800141e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <MX_TIM15_Init+0xa4>)
 8001422:	2200      	movs	r2, #0
 8001424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <MX_TIM15_Init+0xa4>)
 8001428:	0018      	movs	r0, r3
 800142a:	f002 f915 	bl	8003658 <HAL_TIM_Base_Init>
 800142e:	1e03      	subs	r3, r0, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 8001432:	f000 f96f 	bl	8001714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001436:	2110      	movs	r1, #16
 8001438:	187b      	adds	r3, r7, r1
 800143a:	2280      	movs	r2, #128	; 0x80
 800143c:	0152      	lsls	r2, r2, #5
 800143e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001440:	187a      	adds	r2, r7, r1
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_TIM15_Init+0xa4>)
 8001444:	0011      	movs	r1, r2
 8001446:	0018      	movs	r0, r3
 8001448:	f002 fb1a 	bl	8003a80 <HAL_TIM_ConfigClockSource>
 800144c:	1e03      	subs	r3, r0, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001450:	f000 f960 	bl	8001714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001460:	1d3a      	adds	r2, r7, #4
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_TIM15_Init+0xa4>)
 8001464:	0011      	movs	r1, r2
 8001466:	0018      	movs	r0, r3
 8001468:	f002 fd1c 	bl	8003ea4 <HAL_TIMEx_MasterConfigSynchronization>
 800146c:	1e03      	subs	r3, r0, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8001470:	f000 f950 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001474:	46c0      	nop			; (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	b008      	add	sp, #32
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200009c4 	.word	0x200009c4
 8001480:	40014000 	.word	0x40014000
 8001484:	00003e7f 	.word	0x00003e7f
 8001488:	00003a98 	.word	0x00003a98

0800148c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001490:	4b23      	ldr	r3, [pc, #140]	; (8001520 <MX_USART2_UART_Init+0x94>)
 8001492:	4a24      	ldr	r2, [pc, #144]	; (8001524 <MX_USART2_UART_Init+0x98>)
 8001494:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001496:	4b22      	ldr	r3, [pc, #136]	; (8001520 <MX_USART2_UART_Init+0x94>)
 8001498:	2296      	movs	r2, #150	; 0x96
 800149a:	0192      	lsls	r2, r2, #6
 800149c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <MX_USART2_UART_Init+0x94>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <MX_USART2_UART_Init+0x94>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <MX_USART2_UART_Init+0x94>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <MX_USART2_UART_Init+0x94>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_USART2_UART_Init+0x94>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b18      	ldr	r3, [pc, #96]	; (8001520 <MX_USART2_UART_Init+0x94>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <MX_USART2_UART_Init+0x94>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <MX_USART2_UART_Init+0x94>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <MX_USART2_UART_Init+0x94>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <MX_USART2_UART_Init+0x94>)
 80014d6:	0018      	movs	r0, r3
 80014d8:	f002 fd6c 	bl	8003fb4 <HAL_UART_Init>
 80014dc:	1e03      	subs	r3, r0, #0
 80014de:	d001      	beq.n	80014e4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80014e0:	f000 f918 	bl	8001714 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <MX_USART2_UART_Init+0x94>)
 80014e6:	2100      	movs	r1, #0
 80014e8:	0018      	movs	r0, r3
 80014ea:	f004 fca1 	bl	8005e30 <HAL_UARTEx_SetTxFifoThreshold>
 80014ee:	1e03      	subs	r3, r0, #0
 80014f0:	d001      	beq.n	80014f6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80014f2:	f000 f90f 	bl	8001714 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <MX_USART2_UART_Init+0x94>)
 80014f8:	2100      	movs	r1, #0
 80014fa:	0018      	movs	r0, r3
 80014fc:	f004 fcd8 	bl	8005eb0 <HAL_UARTEx_SetRxFifoThreshold>
 8001500:	1e03      	subs	r3, r0, #0
 8001502:	d001      	beq.n	8001508 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001504:	f000 f906 	bl	8001714 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <MX_USART2_UART_Init+0x94>)
 800150a:	0018      	movs	r0, r3
 800150c:	f004 fc56 	bl	8005dbc <HAL_UARTEx_DisableFifoMode>
 8001510:	1e03      	subs	r3, r0, #0
 8001512:	d001      	beq.n	8001518 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001514:	f000 f8fe 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001518:	46c0      	nop			; (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	20000a10 	.word	0x20000a10
 8001524:	40004400 	.word	0x40004400

08001528 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 800152c:	4b16      	ldr	r3, [pc, #88]	; (8001588 <MX_USART5_UART_Init+0x60>)
 800152e:	4a17      	ldr	r2, [pc, #92]	; (800158c <MX_USART5_UART_Init+0x64>)
 8001530:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <MX_USART5_UART_Init+0x60>)
 8001534:	22e1      	movs	r2, #225	; 0xe1
 8001536:	0252      	lsls	r2, r2, #9
 8001538:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <MX_USART5_UART_Init+0x60>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_USART5_UART_Init+0x60>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <MX_USART5_UART_Init+0x60>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_USART5_UART_Init+0x60>)
 800154e:	220c      	movs	r2, #12
 8001550:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <MX_USART5_UART_Init+0x60>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <MX_USART5_UART_Init+0x60>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <MX_USART5_UART_Init+0x60>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <MX_USART5_UART_Init+0x60>)
 8001566:	2200      	movs	r2, #0
 8001568:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <MX_USART5_UART_Init+0x60>)
 800156c:	2200      	movs	r2, #0
 800156e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <MX_USART5_UART_Init+0x60>)
 8001572:	0018      	movs	r0, r3
 8001574:	f002 fd1e 	bl	8003fb4 <HAL_UART_Init>
 8001578:	1e03      	subs	r3, r0, #0
 800157a:	d001      	beq.n	8001580 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 800157c:	f000 f8ca 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8001580:	46c0      	nop			; (mov r8, r8)
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	20000aa4 	.word	0x20000aa4
 800158c:	40005000 	.word	0x40005000

08001590 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a10      	ldr	r2, [pc, #64]	; (80015e0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d102      	bne.n	80015a8 <HAL_TIM_PeriodElapsedCallback+0x18>
	  {
		timer_flag = 1 ;
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	801a      	strh	r2, [r3, #0]
	  }

   if(htim->Instance == TIM3)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d102      	bne.n	80015b8 <HAL_TIM_PeriodElapsedCallback+0x28>
     {
	   dato_recivido = 1;// offset is 0 or page integers
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	701a      	strb	r2, [r3, #0]
     }

   if(htim->Instance == TIM15)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0c      	ldr	r2, [pc, #48]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d109      	bne.n	80015d6 <HAL_TIM_PeriodElapsedCallback+0x46>
     {
		//printf("TIMER15\r\n\n");
		//printf("flag_timer: %d\r\n\n",flag_timer);
		if(flag_timer)
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d002      	beq.n	80015d0 <HAL_TIM_PeriodElapsedCallback+0x40>
		{
			flag_break = 1;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	801a      	strh	r2, [r3, #0]
			//printf("flag_break: %d\r\n\n",flag_break);
		}
		flag_timer = 1;
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	801a      	strh	r2, [r3, #0]

     }
}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	46bd      	mov	sp, r7
 80015da:	b002      	add	sp, #8
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	40012c00 	.word	0x40012c00
 80015e4:	20000d76 	.word	0x20000d76
 80015e8:	40000400 	.word	0x40000400
 80015ec:	20000b48 	.word	0x20000b48
 80015f0:	40014000 	.word	0x40014000
 80015f4:	20000d70 	.word	0x20000d70
 80015f8:	20000d78 	.word	0x20000d78

080015fc <MX_GPIO_Init_user>:



static void MX_GPIO_Init_user(void)
{
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b08b      	sub	sp, #44	; 0x2c
 8001600:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001602:	2414      	movs	r4, #20
 8001604:	193b      	adds	r3, r7, r4
 8001606:	0018      	movs	r0, r3
 8001608:	2314      	movs	r3, #20
 800160a:	001a      	movs	r2, r3
 800160c:	2100      	movs	r1, #0
 800160e:	f004 fd8a 	bl	8006126 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001612:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <MX_GPIO_Init_user+0x10c>)
 8001614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001616:	4b3c      	ldr	r3, [pc, #240]	; (8001708 <MX_GPIO_Init_user+0x10c>)
 8001618:	2104      	movs	r1, #4
 800161a:	430a      	orrs	r2, r1
 800161c:	635a      	str	r2, [r3, #52]	; 0x34
 800161e:	4b3a      	ldr	r3, [pc, #232]	; (8001708 <MX_GPIO_Init_user+0x10c>)
 8001620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001622:	2204      	movs	r2, #4
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 800162a:	4b37      	ldr	r3, [pc, #220]	; (8001708 <MX_GPIO_Init_user+0x10c>)
 800162c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800162e:	4b36      	ldr	r3, [pc, #216]	; (8001708 <MX_GPIO_Init_user+0x10c>)
 8001630:	2108      	movs	r1, #8
 8001632:	430a      	orrs	r2, r1
 8001634:	635a      	str	r2, [r3, #52]	; 0x34
 8001636:	4b34      	ldr	r3, [pc, #208]	; (8001708 <MX_GPIO_Init_user+0x10c>)
 8001638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800163a:	2208      	movs	r2, #8
 800163c:	4013      	ands	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	4b31      	ldr	r3, [pc, #196]	; (8001708 <MX_GPIO_Init_user+0x10c>)
 8001644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001646:	4b30      	ldr	r3, [pc, #192]	; (8001708 <MX_GPIO_Init_user+0x10c>)
 8001648:	2101      	movs	r1, #1
 800164a:	430a      	orrs	r2, r1
 800164c:	635a      	str	r2, [r3, #52]	; 0x34
 800164e:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <MX_GPIO_Init_user+0x10c>)
 8001650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001652:	2201      	movs	r2, #1
 8001654:	4013      	ands	r3, r2
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800165a:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <MX_GPIO_Init_user+0x10c>)
 800165c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800165e:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <MX_GPIO_Init_user+0x10c>)
 8001660:	2102      	movs	r1, #2
 8001662:	430a      	orrs	r2, r1
 8001664:	635a      	str	r2, [r3, #52]	; 0x34
 8001666:	4b28      	ldr	r3, [pc, #160]	; (8001708 <MX_GPIO_Init_user+0x10c>)
 8001668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800166a:	2202      	movs	r2, #2
 800166c:	4013      	ands	r3, r2
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8001672:	4b26      	ldr	r3, [pc, #152]	; (800170c <MX_GPIO_Init_user+0x110>)
 8001674:	2201      	movs	r2, #1
 8001676:	2108      	movs	r1, #8
 8001678:	0018      	movs	r0, r3
 800167a:	f001 f938 	bl	80028ee <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(RST_COMM_GPIO_Port, RST_COMM_Pin, GPIO_PIN_SET);
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4823      	ldr	r0, [pc, #140]	; (8001710 <MX_GPIO_Init_user+0x114>)
 8001684:	2201      	movs	r2, #1
 8001686:	0019      	movs	r1, r3
 8001688:	f001 f931 	bl	80028ee <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = LTE_ON_Pin;
 800168c:	193b      	adds	r3, r7, r4
 800168e:	2208      	movs	r2, #8
 8001690:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001692:	193b      	adds	r3, r7, r4
 8001694:	2201      	movs	r2, #1
 8001696:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	193b      	adds	r3, r7, r4
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	193b      	adds	r3, r7, r4
 80016a0:	2200      	movs	r2, #0
 80016a2:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(LTE_ON_GPIO_Port, &GPIO_InitStruct);
 80016a4:	193b      	adds	r3, r7, r4
 80016a6:	4a19      	ldr	r2, [pc, #100]	; (800170c <MX_GPIO_Init_user+0x110>)
 80016a8:	0019      	movs	r1, r3
 80016aa:	0010      	movs	r0, r2
 80016ac:	f000 ff96 	bl	80025dc <HAL_GPIO_Init>


	  /*Configure GPIO pin : RST_COMM_Pin */
	  GPIO_InitStruct.Pin = RST_COMM_Pin;
 80016b0:	0021      	movs	r1, r4
 80016b2:	187b      	adds	r3, r7, r1
 80016b4:	2280      	movs	r2, #128	; 0x80
 80016b6:	0052      	lsls	r2, r2, #1
 80016b8:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ba:	000c      	movs	r4, r1
 80016bc:	193b      	adds	r3, r7, r4
 80016be:	2201      	movs	r2, #1
 80016c0:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	193b      	adds	r3, r7, r4
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	193b      	adds	r3, r7, r4
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(RST_COMM_GPIO_Port, &GPIO_InitStruct);
 80016ce:	193b      	adds	r3, r7, r4
 80016d0:	4a0f      	ldr	r2, [pc, #60]	; (8001710 <MX_GPIO_Init_user+0x114>)
 80016d2:	0019      	movs	r1, r3
 80016d4:	0010      	movs	r0, r2
 80016d6:	f000 ff81 	bl	80025dc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
  /*Configure GPIO pin : PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016da:	0021      	movs	r1, r4
 80016dc:	187b      	adds	r3, r7, r1
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	01d2      	lsls	r2, r2, #7
 80016e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e4:	187b      	adds	r3, r7, r1
 80016e6:	2200      	movs	r2, #0
 80016e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016ea:	187b      	adds	r3, r7, r1
 80016ec:	2202      	movs	r2, #2
 80016ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f0:	187a      	adds	r2, r7, r1
 80016f2:	23a0      	movs	r3, #160	; 0xa0
 80016f4:	05db      	lsls	r3, r3, #23
 80016f6:	0011      	movs	r1, r2
 80016f8:	0018      	movs	r0, r3
 80016fa:	f000 ff6f 	bl	80025dc <HAL_GPIO_Init>


}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	46bd      	mov	sp, r7
 8001702:	b00b      	add	sp, #44	; 0x2c
 8001704:	bd90      	pop	{r4, r7, pc}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	40021000 	.word	0x40021000
 800170c:	50000c00 	.word	0x50000c00
 8001710:	50000400 	.word	0x50000400

08001714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001718:	b672      	cpsid	i
}
 800171a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800171c:	e7fe      	b.n	800171c <Error_Handler+0x8>
	...

08001720 <prv_set_flag>:
  BL_UPDATE_REQUEST = 1 << 1,

  FLAG_BG_FAULT = 1 << 2,
};

static void prv_set_flag(uint32_t flag, bool value) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	000a      	movs	r2, r1
 800172a:	1cfb      	adds	r3, r7, #3
 800172c:	701a      	strb	r2, [r3, #0]
    if (value) {
 800172e:	1cfb      	adds	r3, r7, #3
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d006      	beq.n	8001744 <prv_set_flag+0x24>
        shared_data.flags |= flag;
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <prv_set_flag+0x3c>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	431a      	orrs	r2, r3
 800173e:	4b07      	ldr	r3, [pc, #28]	; (800175c <prv_set_flag+0x3c>)
 8001740:	601a      	str	r2, [r3, #0]
    } else {
        shared_data.flags &= ~flag;
    }
}
 8001742:	e006      	b.n	8001752 <prv_set_flag+0x32>
        shared_data.flags &= ~flag;
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <prv_set_flag+0x3c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	43d2      	mvns	r2, r2
 800174c:	401a      	ands	r2, r3
 800174e:	4b03      	ldr	r3, [pc, #12]	; (800175c <prv_set_flag+0x3c>)
 8001750:	601a      	str	r2, [r3, #0]
}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b002      	add	sp, #8
 8001758:	bd80      	pop	{r7, pc}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	200004f8 	.word	0x200004f8

08001760 <prv_get_flag>:

static bool prv_get_flag(uint32_t flag) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
    return shared_data.flags & flag;
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <prv_get_flag+0x20>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	4013      	ands	r3, r2
 8001770:	1e5a      	subs	r2, r3, #1
 8001772:	4193      	sbcs	r3, r2
 8001774:	b2db      	uxtb	r3, r3
}
 8001776:	0018      	movs	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	b002      	add	sp, #8
 800177c:	bd80      	pop	{r7, pc}
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	200004f8 	.word	0x200004f8

08001784 <shared_memory_init>:

void shared_memory_init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  if (shared_data.magic != MAGIC)
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <shared_memory_init+0x2c>)
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	23e7      	movs	r3, #231	; 0xe7
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	429a      	cmp	r2, r3
 8001792:	d009      	beq.n	80017a8 <shared_memory_init+0x24>
  {
   // printf("Shared memory uninitialized, setting MAGIC\r\n");
    memset(&shared_data, 0, sizeof (shared_data_t));
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <shared_memory_init+0x2c>)
 8001796:	2212      	movs	r2, #18
 8001798:	2100      	movs	r1, #0
 800179a:	0018      	movs	r0, r3
 800179c:	f004 fcc3 	bl	8006126 <memset>
    shared_data.magic = MAGIC;
 80017a0:	23e7      	movs	r3, #231	; 0xe7
 80017a2:	005a      	lsls	r2, r3, #1
 80017a4:	4b02      	ldr	r3, [pc, #8]	; (80017b0 <shared_memory_init+0x2c>)
 80017a6:	605a      	str	r2, [r3, #4]
  }
}
 80017a8:	46c0      	nop			; (mov r8, r8)
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	200004f8 	.word	0x200004f8

080017b4 <shared_mem_is_app_upd_requested>:

bool shared_mem_is_app_upd_requested(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  return prv_get_flag(APP_UPDATE_REQUEST);
 80017b8:	2001      	movs	r0, #1
 80017ba:	f7ff ffd1 	bl	8001760 <prv_get_flag>
 80017be:	0003      	movs	r3, r0
}
 80017c0:	0018      	movs	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <shared_mem_is_bl_upd_requested>:

bool shared_mem_is_bl_upd_requested(void)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	af00      	add	r7, sp, #0
  return prv_get_flag(BL_UPDATE_REQUEST);
 80017ca:	2002      	movs	r0, #2
 80017cc:	f7ff ffc8 	bl	8001760 <prv_get_flag>
 80017d0:	0003      	movs	r3, r0
}
 80017d2:	0018      	movs	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <shared_mem_increment_boot_counter>:
{
  return prv_get_flag(FLAG_BG_FAULT);
}

void shared_mem_increment_boot_counter(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  shared_data.boot_count++;
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <shared_mem_increment_boot_counter+0x18>)
 80017de:	7c1b      	ldrb	r3, [r3, #16]
 80017e0:	3301      	adds	r3, #1
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	4b02      	ldr	r3, [pc, #8]	; (80017f0 <shared_mem_increment_boot_counter+0x18>)
 80017e6:	741a      	strb	r2, [r3, #16]
}
 80017e8:	46c0      	nop			; (mov r8, r8)
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	200004f8 	.word	0x200004f8

080017f4 <shared_mem_clear_boot_counter>:

void shared_mem_clear_boot_counter(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  shared_data.boot_count = 0;
 80017f8:	4b02      	ldr	r3, [pc, #8]	; (8001804 <shared_mem_clear_boot_counter+0x10>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	741a      	strb	r2, [r3, #16]
}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200004f8 	.word	0x200004f8

08001808 <shared_mem_get_boot_counter>:

uint8_t shared_mem_get_boot_counter(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  return shared_data.boot_count;
 800180c:	4b02      	ldr	r3, [pc, #8]	; (8001818 <shared_mem_get_boot_counter+0x10>)
 800180e:	7c1b      	ldrb	r3, [r3, #16]
}
 8001810:	0018      	movs	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	200004f8 	.word	0x200004f8

0800181c <shared_mem_set_update_completed>:
{
  return shared_data.update_size;
}

void shared_mem_set_update_completed(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  memcpy(shared_data.fota_status, "DONE", 4);
 8001820:	4b02      	ldr	r3, [pc, #8]	; (800182c <shared_mem_set_update_completed+0x10>)
 8001822:	4a03      	ldr	r2, [pc, #12]	; (8001830 <shared_mem_set_update_completed+0x14>)
 8001824:	60da      	str	r2, [r3, #12]
}
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200004f8 	.word	0x200004f8
 8001830:	454e4f44 	.word	0x454e4f44

08001834 <shared_mem_clear_ota_info>:

void shared_mem_clear_ota_info(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  shared_data.update_size = 0;
 8001838:	4b02      	ldr	r3, [pc, #8]	; (8001844 <shared_mem_clear_ota_info+0x10>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]

}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	200004f8 	.word	0x200004f8

08001848 <shared_mem_set_app_update_requested>:

void shared_mem_set_app_update_requested(bool value)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	0002      	movs	r2, r0
 8001850:	1dfb      	adds	r3, r7, #7
 8001852:	701a      	strb	r2, [r3, #0]
  prv_set_flag(APP_UPDATE_REQUEST, value);
 8001854:	1dfb      	adds	r3, r7, #7
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	0019      	movs	r1, r3
 800185a:	2001      	movs	r0, #1
 800185c:	f7ff ff60 	bl	8001720 <prv_set_flag>
}
 8001860:	46c0      	nop			; (mov r8, r8)
 8001862:	46bd      	mov	sp, r7
 8001864:	b002      	add	sp, #8
 8001866:	bd80      	pop	{r7, pc}

08001868 <shared_mem_set_update>:
  shared_data.update_size = size;
}


void shared_mem_set_update(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	shared_data.update = 1;
 800186c:	4b02      	ldr	r3, [pc, #8]	; (8001878 <shared_mem_set_update+0x10>)
 800186e:	2201      	movs	r2, #1
 8001870:	745a      	strb	r2, [r3, #17]
}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	200004f8 	.word	0x200004f8

0800187c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <RetargetInit+0x28>)
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	601a      	str	r2, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <RetargetInit+0x2c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6898      	ldr	r0, [r3, #8]
 8001890:	2300      	movs	r3, #0
 8001892:	2202      	movs	r2, #2
 8001894:	2100      	movs	r1, #0
 8001896:	f004 fc4f 	bl	8006138 <setvbuf>
}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	46bd      	mov	sp, r7
 800189e:	b002      	add	sp, #8
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	20000d8c 	.word	0x20000d8c
 80018a8:	2000040c 	.word	0x2000040c

080018ac <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 80018ac:	b5b0      	push	{r4, r5, r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d002      	beq.n	80018c4 <_write+0x18>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d114      	bne.n	80018ee <_write+0x42>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <_write+0x58>)
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	2517      	movs	r5, #23
 80018ce:	197c      	adds	r4, r7, r5
 80018d0:	2301      	movs	r3, #1
 80018d2:	425b      	negs	r3, r3
 80018d4:	68b9      	ldr	r1, [r7, #8]
 80018d6:	f002 fbc3 	bl	8004060 <HAL_UART_Transmit>
 80018da:	0003      	movs	r3, r0
 80018dc:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 80018de:	197b      	adds	r3, r7, r5
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <_write+0x3e>
      return len;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	e008      	b.n	80018fc <_write+0x50>
    else
      return EIO;
 80018ea:	2305      	movs	r3, #5
 80018ec:	e006      	b.n	80018fc <_write+0x50>
  }
  errno = EBADF;
 80018ee:	f004 fbe7 	bl	80060c0 <__errno>
 80018f2:	0003      	movs	r3, r0
 80018f4:	2209      	movs	r2, #9
 80018f6:	601a      	str	r2, [r3, #0]
  return -1;
 80018f8:	2301      	movs	r3, #1
 80018fa:	425b      	negs	r3, r3
}
 80018fc:	0018      	movs	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	b006      	add	sp, #24
 8001902:	bdb0      	pop	{r4, r5, r7, pc}
 8001904:	20000d8c 	.word	0x20000d8c

08001908 <_close>:

int _close(int fd) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	db04      	blt.n	8001920 <_close+0x18>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b02      	cmp	r3, #2
 800191a:	dc01      	bgt.n	8001920 <_close+0x18>
    return 0;
 800191c:	2300      	movs	r3, #0
 800191e:	e006      	b.n	800192e <_close+0x26>

  errno = EBADF;
 8001920:	f004 fbce 	bl	80060c0 <__errno>
 8001924:	0003      	movs	r3, r0
 8001926:	2209      	movs	r2, #9
 8001928:	601a      	str	r2, [r3, #0]
  return -1;
 800192a:	2301      	movs	r3, #1
 800192c:	425b      	negs	r3, r3
}
 800192e:	0018      	movs	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	b002      	add	sp, #8
 8001934:	bd80      	pop	{r7, pc}

08001936 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001936:	b580      	push	{r7, lr}
 8001938:	b084      	sub	sp, #16
 800193a:	af00      	add	r7, sp, #0
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001942:	f004 fbbd 	bl	80060c0 <__errno>
 8001946:	0003      	movs	r3, r0
 8001948:	2209      	movs	r2, #9
 800194a:	601a      	str	r2, [r3, #0]
  return -1;
 800194c:	2301      	movs	r3, #1
 800194e:	425b      	negs	r3, r3
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	b004      	add	sp, #16
 8001956:	bd80      	pop	{r7, pc}

08001958 <_read>:

int _read(int fd, char* ptr, int len) {
 8001958:	b5b0      	push	{r4, r5, r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d113      	bne.n	8001992 <_read+0x3a>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800196a:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <_read+0x50>)
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	2517      	movs	r5, #23
 8001970:	197c      	adds	r4, r7, r5
 8001972:	2301      	movs	r3, #1
 8001974:	425b      	negs	r3, r3
 8001976:	68b9      	ldr	r1, [r7, #8]
 8001978:	2201      	movs	r2, #1
 800197a:	f002 fc0d 	bl	8004198 <HAL_UART_Receive>
 800197e:	0003      	movs	r3, r0
 8001980:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 8001982:	197b      	adds	r3, r7, r5
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <_read+0x36>
      return 1;
 800198a:	2301      	movs	r3, #1
 800198c:	e008      	b.n	80019a0 <_read+0x48>
    else
      return EIO;
 800198e:	2305      	movs	r3, #5
 8001990:	e006      	b.n	80019a0 <_read+0x48>
  }
  errno = EBADF;
 8001992:	f004 fb95 	bl	80060c0 <__errno>
 8001996:	0003      	movs	r3, r0
 8001998:	2209      	movs	r2, #9
 800199a:	601a      	str	r2, [r3, #0]
  return -1;
 800199c:	2301      	movs	r3, #1
 800199e:	425b      	negs	r3, r3
}
 80019a0:	0018      	movs	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b006      	add	sp, #24
 80019a6:	bdb0      	pop	{r4, r5, r7, pc}
 80019a8:	20000d8c 	.word	0x20000d8c

080019ac <_fstat>:

int _fstat(int fd, struct stat* st) {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	db08      	blt.n	80019ce <_fstat+0x22>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	dc05      	bgt.n	80019ce <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	2280      	movs	r2, #128	; 0x80
 80019c6:	0192      	lsls	r2, r2, #6
 80019c8:	605a      	str	r2, [r3, #4]
    return 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	e005      	b.n	80019da <_fstat+0x2e>
  }

  errno = EBADF;
 80019ce:	f004 fb77 	bl	80060c0 <__errno>
 80019d2:	0003      	movs	r3, r0
 80019d4:	2209      	movs	r2, #9
 80019d6:	601a      	str	r2, [r3, #0]
  return 0;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	0018      	movs	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	b002      	add	sp, #8
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ea:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <HAL_MspInit+0x44>)
 80019ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <HAL_MspInit+0x44>)
 80019f0:	2101      	movs	r1, #1
 80019f2:	430a      	orrs	r2, r1
 80019f4:	641a      	str	r2, [r3, #64]	; 0x40
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <HAL_MspInit+0x44>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	2201      	movs	r2, #1
 80019fc:	4013      	ands	r3, r2
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_MspInit+0x44>)
 8001a04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_MspInit+0x44>)
 8001a08:	2180      	movs	r1, #128	; 0x80
 8001a0a:	0549      	lsls	r1, r1, #21
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_MspInit+0x44>)
 8001a12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a14:	2380      	movs	r3, #128	; 0x80
 8001a16:	055b      	lsls	r3, r3, #21
 8001a18:	4013      	ands	r3, r2
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b002      	add	sp, #8
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	40021000 	.word	0x40021000

08001a2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a29      	ldr	r2, [pc, #164]	; (8001ae0 <HAL_TIM_Base_MspInit+0xb4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d11e      	bne.n	8001a7c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a3e:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <HAL_TIM_Base_MspInit+0xb8>)
 8001a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a42:	4b28      	ldr	r3, [pc, #160]	; (8001ae4 <HAL_TIM_Base_MspInit+0xb8>)
 8001a44:	2180      	movs	r1, #128	; 0x80
 8001a46:	0109      	lsls	r1, r1, #4
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	641a      	str	r2, [r3, #64]	; 0x40
 8001a4c:	4b25      	ldr	r3, [pc, #148]	; (8001ae4 <HAL_TIM_Base_MspInit+0xb8>)
 8001a4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	011b      	lsls	r3, r3, #4
 8001a54:	4013      	ands	r3, r2
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	200d      	movs	r0, #13
 8001a60:	f000 fb12 	bl	8002088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001a64:	200d      	movs	r0, #13
 8001a66:	f000 fb24 	bl	80020b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	200e      	movs	r0, #14
 8001a70:	f000 fb0a 	bl	8002088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001a74:	200e      	movs	r0, #14
 8001a76:	f000 fb1c 	bl	80020b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001a7a:	e02c      	b.n	8001ad6 <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM3)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a19      	ldr	r2, [pc, #100]	; (8001ae8 <HAL_TIM_Base_MspInit+0xbc>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d10c      	bne.n	8001aa0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a86:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <HAL_TIM_Base_MspInit+0xb8>)
 8001a88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a8a:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <HAL_TIM_Base_MspInit+0xb8>)
 8001a8c:	2102      	movs	r1, #2
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <HAL_TIM_Base_MspInit+0xb8>)
 8001a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a96:	2202      	movs	r2, #2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]
}
 8001a9e:	e01a      	b.n	8001ad6 <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM15)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a11      	ldr	r2, [pc, #68]	; (8001aec <HAL_TIM_Base_MspInit+0xc0>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d115      	bne.n	8001ad6 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <HAL_TIM_Base_MspInit+0xb8>)
 8001aac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aae:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <HAL_TIM_Base_MspInit+0xb8>)
 8001ab0:	2180      	movs	r1, #128	; 0x80
 8001ab2:	0249      	lsls	r1, r1, #9
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_TIM_Base_MspInit+0xb8>)
 8001aba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	025b      	lsls	r3, r3, #9
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2014      	movs	r0, #20
 8001acc:	f000 fadc 	bl	8002088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001ad0:	2014      	movs	r0, #20
 8001ad2:	f000 faee 	bl	80020b2 <HAL_NVIC_EnableIRQ>
}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b006      	add	sp, #24
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	40012c00 	.word	0x40012c00
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40000400 	.word	0x40000400
 8001aec:	40014000 	.word	0x40014000

08001af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b097      	sub	sp, #92	; 0x5c
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	2344      	movs	r3, #68	; 0x44
 8001afa:	18fb      	adds	r3, r7, r3
 8001afc:	0018      	movs	r0, r3
 8001afe:	2314      	movs	r3, #20
 8001b00:	001a      	movs	r2, r3
 8001b02:	2100      	movs	r1, #0
 8001b04:	f004 fb0f 	bl	8006126 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b08:	2418      	movs	r4, #24
 8001b0a:	193b      	adds	r3, r7, r4
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	232c      	movs	r3, #44	; 0x2c
 8001b10:	001a      	movs	r2, r3
 8001b12:	2100      	movs	r1, #0
 8001b14:	f004 fb07 	bl	8006126 <memset>
  if(huart->Instance==USART2)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a45      	ldr	r2, [pc, #276]	; (8001c34 <HAL_UART_MspInit+0x144>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d147      	bne.n	8001bb2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b22:	193b      	adds	r3, r7, r4
 8001b24:	2202      	movs	r2, #2
 8001b26:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b28:	193b      	adds	r3, r7, r4
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b2e:	193b      	adds	r3, r7, r4
 8001b30:	0018      	movs	r0, r3
 8001b32:	f001 fc09 	bl	8003348 <HAL_RCCEx_PeriphCLKConfig>
 8001b36:	1e03      	subs	r3, r0, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b3a:	f7ff fdeb 	bl	8001714 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b3e:	4b3e      	ldr	r3, [pc, #248]	; (8001c38 <HAL_UART_MspInit+0x148>)
 8001b40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b42:	4b3d      	ldr	r3, [pc, #244]	; (8001c38 <HAL_UART_MspInit+0x148>)
 8001b44:	2180      	movs	r1, #128	; 0x80
 8001b46:	0289      	lsls	r1, r1, #10
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b4c:	4b3a      	ldr	r3, [pc, #232]	; (8001c38 <HAL_UART_MspInit+0x148>)
 8001b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	029b      	lsls	r3, r3, #10
 8001b54:	4013      	ands	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	4b37      	ldr	r3, [pc, #220]	; (8001c38 <HAL_UART_MspInit+0x148>)
 8001b5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b5e:	4b36      	ldr	r3, [pc, #216]	; (8001c38 <HAL_UART_MspInit+0x148>)
 8001b60:	2101      	movs	r1, #1
 8001b62:	430a      	orrs	r2, r1
 8001b64:	635a      	str	r2, [r3, #52]	; 0x34
 8001b66:	4b34      	ldr	r3, [pc, #208]	; (8001c38 <HAL_UART_MspInit+0x148>)
 8001b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b72:	2144      	movs	r1, #68	; 0x44
 8001b74:	187b      	adds	r3, r7, r1
 8001b76:	220c      	movs	r2, #12
 8001b78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	187b      	adds	r3, r7, r1
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	187b      	adds	r3, r7, r1
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	187b      	adds	r3, r7, r1
 8001b88:	2200      	movs	r2, #0
 8001b8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001b8c:	187b      	adds	r3, r7, r1
 8001b8e:	2201      	movs	r2, #1
 8001b90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b92:	187a      	adds	r2, r7, r1
 8001b94:	23a0      	movs	r3, #160	; 0xa0
 8001b96:	05db      	lsls	r3, r3, #23
 8001b98:	0011      	movs	r1, r2
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f000 fd1e 	bl	80025dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	201c      	movs	r0, #28
 8001ba6:	f000 fa6f 	bl	8002088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001baa:	201c      	movs	r0, #28
 8001bac:	f000 fa81 	bl	80020b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8001bb0:	e03c      	b.n	8001c2c <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART5)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a21      	ldr	r2, [pc, #132]	; (8001c3c <HAL_UART_MspInit+0x14c>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d137      	bne.n	8001c2c <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART5_CLK_ENABLE();
 8001bbc:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <HAL_UART_MspInit+0x148>)
 8001bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bc0:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <HAL_UART_MspInit+0x148>)
 8001bc2:	2180      	movs	r1, #128	; 0x80
 8001bc4:	0049      	lsls	r1, r1, #1
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bca:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <HAL_UART_MspInit+0x148>)
 8001bcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd8:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <HAL_UART_MspInit+0x148>)
 8001bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bdc:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <HAL_UART_MspInit+0x148>)
 8001bde:	2102      	movs	r1, #2
 8001be0:	430a      	orrs	r2, r1
 8001be2:	635a      	str	r2, [r3, #52]	; 0x34
 8001be4:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <HAL_UART_MspInit+0x148>)
 8001be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be8:	2202      	movs	r2, #2
 8001bea:	4013      	ands	r3, r2
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bf0:	2144      	movs	r1, #68	; 0x44
 8001bf2:	187b      	adds	r3, r7, r1
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf8:	187b      	adds	r3, r7, r1
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	187b      	adds	r3, r7, r1
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART5;
 8001c0a:	187b      	adds	r3, r7, r1
 8001c0c:	2208      	movs	r2, #8
 8001c0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c10:	187b      	adds	r3, r7, r1
 8001c12:	4a0b      	ldr	r2, [pc, #44]	; (8001c40 <HAL_UART_MspInit+0x150>)
 8001c14:	0019      	movs	r1, r3
 8001c16:	0010      	movs	r0, r2
 8001c18:	f000 fce0 	bl	80025dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_5_6_IRQn, 0, 0);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2100      	movs	r1, #0
 8001c20:	201d      	movs	r0, #29
 8001c22:	f000 fa31 	bl	8002088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_IRQn);
 8001c26:	201d      	movs	r0, #29
 8001c28:	f000 fa43 	bl	80020b2 <HAL_NVIC_EnableIRQ>
}
 8001c2c:	46c0      	nop			; (mov r8, r8)
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	b017      	add	sp, #92	; 0x5c
 8001c32:	bd90      	pop	{r4, r7, pc}
 8001c34:	40004400 	.word	0x40004400
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40005000 	.word	0x40005000
 8001c40:	50000400 	.word	0x50000400

08001c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <NMI_Handler+0x4>

08001c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <HardFault_Handler+0x4>

08001c50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c54:	46c0      	nop			; (mov r8, r8)
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c68:	f000 f910 	bl	8001e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c6c:	46c0      	nop			; (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f001 fdce 	bl	800381c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001c80:	46c0      	nop			; (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	2000092c 	.word	0x2000092c

08001c8c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <TIM1_CC_IRQHandler+0x14>)
 8001c92:	0018      	movs	r0, r3
 8001c94:	f001 fdc2 	bl	800381c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001c98:	46c0      	nop			; (mov r8, r8)
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	2000092c 	.word	0x2000092c

08001ca4 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <TIM15_IRQHandler+0x14>)
 8001caa:	0018      	movs	r0, r3
 8001cac:	f001 fdb6 	bl	800381c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8001cb0:	46c0      	nop			; (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	200009c4 	.word	0x200009c4

08001cbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <USART2_IRQHandler+0x14>)
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f002 fb4a 	bl	800435c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cc8:	46c0      	nop			; (mov r8, r8)
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	20000a10 	.word	0x20000a10

08001cd4 <USART3_4_5_6_IRQHandler>:

/**
  * @brief This function handles USART3, USART4, USART5, USART6 globlal Interrupts (combined with EXTI 28).
  */
void USART3_4_5_6_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_5_6_IRQn 0 */

  /* USER CODE END USART3_4_5_6_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <USART3_4_5_6_IRQHandler+0x14>)
 8001cda:	0018      	movs	r0, r3
 8001cdc:	f002 fb3e 	bl	800435c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_5_6_IRQn 1 */

  /* USER CODE END USART3_4_5_6_IRQn 1 */
}
 8001ce0:	46c0      	nop			; (mov r8, r8)
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	20000aa4 	.word	0x20000aa4

08001cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf4:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <_sbrk+0x5c>)
 8001cf6:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <_sbrk+0x60>)
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d00:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <_sbrk+0x64>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <_sbrk+0x64>)
 8001d0a:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <_sbrk+0x68>)
 8001d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	18d3      	adds	r3, r2, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d207      	bcs.n	8001d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d1c:	f004 f9d0 	bl	80060c0 <__errno>
 8001d20:	0003      	movs	r3, r0
 8001d22:	220c      	movs	r2, #12
 8001d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d26:	2301      	movs	r3, #1
 8001d28:	425b      	negs	r3, r3
 8001d2a:	e009      	b.n	8001d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	18d2      	adds	r2, r2, r3
 8001d3a:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <_sbrk+0x64>)
 8001d3c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
}
 8001d40:	0018      	movs	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b006      	add	sp, #24
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20024000 	.word	0x20024000
 8001d4c:	00000400 	.word	0x00000400
 8001d50:	20000d90 	.word	0x20000d90
 8001d54:	20000dc8 	.word	0x20000dc8

08001d58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d5c:	46c0      	nop			; (mov r8, r8)
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d64:	480d      	ldr	r0, [pc, #52]	; (8001d9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d68:	f7ff fff6 	bl	8001d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d6c:	480c      	ldr	r0, [pc, #48]	; (8001da0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d6e:	490d      	ldr	r1, [pc, #52]	; (8001da4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d70:	4a0d      	ldr	r2, [pc, #52]	; (8001da8 <LoopForever+0xe>)
  movs r3, #0
 8001d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d74:	e002      	b.n	8001d7c <LoopCopyDataInit>

08001d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7a:	3304      	adds	r3, #4

08001d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d80:	d3f9      	bcc.n	8001d76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d84:	4c0a      	ldr	r4, [pc, #40]	; (8001db0 <LoopForever+0x16>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d88:	e001      	b.n	8001d8e <LoopFillZerobss>

08001d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d8c:	3204      	adds	r2, #4

08001d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d90:	d3fb      	bcc.n	8001d8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d92:	f004 f99b 	bl	80060cc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001d96:	f7ff f911 	bl	8000fbc <main>

08001d9a <LoopForever>:

LoopForever:
  b LoopForever
 8001d9a:	e7fe      	b.n	8001d9a <LoopForever>
  ldr   r0, =_estack
 8001d9c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001da0:	20000400 	.word	0x20000400
  ldr r1, =_edata
 8001da4:	200004f8 	.word	0x200004f8
  ldr r2, =_sidata
 8001da8:	08007474 	.word	0x08007474
  ldr r2, =_sbss
 8001dac:	20000510 	.word	0x20000510
  ldr r4, =_ebss
 8001db0:	20000dc4 	.word	0x20000dc4

08001db4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001db4:	e7fe      	b.n	8001db4 <ADC1_IRQHandler>
	...

08001db8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dbe:	1dfb      	adds	r3, r7, #7
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_Init+0x3c>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <HAL_Init+0x3c>)
 8001dca:	2180      	movs	r1, #128	; 0x80
 8001dcc:	0049      	lsls	r1, r1, #1
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dd2:	2003      	movs	r0, #3
 8001dd4:	f000 f810 	bl	8001df8 <HAL_InitTick>
 8001dd8:	1e03      	subs	r3, r0, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001ddc:	1dfb      	adds	r3, r7, #7
 8001dde:	2201      	movs	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
 8001de2:	e001      	b.n	8001de8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001de4:	f7ff fdfe 	bl	80019e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001de8:	1dfb      	adds	r3, r7, #7
 8001dea:	781b      	ldrb	r3, [r3, #0]
}
 8001dec:	0018      	movs	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b002      	add	sp, #8
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40022000 	.word	0x40022000

08001df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df8:	b590      	push	{r4, r7, lr}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e00:	230f      	movs	r3, #15
 8001e02:	18fb      	adds	r3, r7, r3
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001e08:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <HAL_InitTick+0x88>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d02b      	beq.n	8001e68 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001e10:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <HAL_InitTick+0x8c>)
 8001e12:	681c      	ldr	r4, [r3, #0]
 8001e14:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <HAL_InitTick+0x88>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	0019      	movs	r1, r3
 8001e1a:	23fa      	movs	r3, #250	; 0xfa
 8001e1c:	0098      	lsls	r0, r3, #2
 8001e1e:	f7fe f981 	bl	8000124 <__udivsi3>
 8001e22:	0003      	movs	r3, r0
 8001e24:	0019      	movs	r1, r3
 8001e26:	0020      	movs	r0, r4
 8001e28:	f7fe f97c 	bl	8000124 <__udivsi3>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f000 f953 	bl	80020da <HAL_SYSTICK_Config>
 8001e34:	1e03      	subs	r3, r0, #0
 8001e36:	d112      	bne.n	8001e5e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d80a      	bhi.n	8001e54 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	2301      	movs	r3, #1
 8001e42:	425b      	negs	r3, r3
 8001e44:	2200      	movs	r2, #0
 8001e46:	0018      	movs	r0, r3
 8001e48:	f000 f91e 	bl	8002088 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <HAL_InitTick+0x90>)
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	e00d      	b.n	8001e70 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001e54:	230f      	movs	r3, #15
 8001e56:	18fb      	adds	r3, r7, r3
 8001e58:	2201      	movs	r2, #1
 8001e5a:	701a      	strb	r2, [r3, #0]
 8001e5c:	e008      	b.n	8001e70 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e5e:	230f      	movs	r3, #15
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]
 8001e66:	e003      	b.n	8001e70 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e68:	230f      	movs	r3, #15
 8001e6a:	18fb      	adds	r3, r7, r3
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001e70:	230f      	movs	r3, #15
 8001e72:	18fb      	adds	r3, r7, r3
 8001e74:	781b      	ldrb	r3, [r3, #0]
}
 8001e76:	0018      	movs	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	b005      	add	sp, #20
 8001e7c:	bd90      	pop	{r4, r7, pc}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	20000408 	.word	0x20000408
 8001e84:	20000400 	.word	0x20000400
 8001e88:	20000404 	.word	0x20000404

08001e8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_IncTick+0x1c>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	001a      	movs	r2, r3
 8001e96:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_IncTick+0x20>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	18d2      	adds	r2, r2, r3
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <HAL_IncTick+0x20>)
 8001e9e:	601a      	str	r2, [r3, #0]
}
 8001ea0:	46c0      	nop			; (mov r8, r8)
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	20000408 	.word	0x20000408
 8001eac:	20000d94 	.word	0x20000d94

08001eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb4:	4b02      	ldr	r3, [pc, #8]	; (8001ec0 <HAL_GetTick+0x10>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	0018      	movs	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	20000d94 	.word	0x20000d94

08001ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ecc:	f7ff fff0 	bl	8001eb0 <HAL_GetTick>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	3301      	adds	r3, #1
 8001edc:	d005      	beq.n	8001eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_Delay+0x44>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	001a      	movs	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	189b      	adds	r3, r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	f7ff ffe0 	bl	8001eb0 <HAL_GetTick>
 8001ef0:	0002      	movs	r2, r0
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d8f7      	bhi.n	8001eec <HAL_Delay+0x28>
  {
  }
}
 8001efc:	46c0      	nop			; (mov r8, r8)
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	46bd      	mov	sp, r7
 8001f02:	b004      	add	sp, #16
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	20000408 	.word	0x20000408

08001f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	0002      	movs	r2, r0
 8001f14:	1dfb      	adds	r3, r7, #7
 8001f16:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f18:	1dfb      	adds	r3, r7, #7
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b7f      	cmp	r3, #127	; 0x7f
 8001f1e:	d809      	bhi.n	8001f34 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f20:	1dfb      	adds	r3, r7, #7
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	001a      	movs	r2, r3
 8001f26:	231f      	movs	r3, #31
 8001f28:	401a      	ands	r2, r3
 8001f2a:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <__NVIC_EnableIRQ+0x30>)
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	4091      	lsls	r1, r2
 8001f30:	000a      	movs	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001f34:	46c0      	nop			; (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b002      	add	sp, #8
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	e000e100 	.word	0xe000e100

08001f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	0002      	movs	r2, r0
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	1dfb      	adds	r3, r7, #7
 8001f4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f4e:	1dfb      	adds	r3, r7, #7
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b7f      	cmp	r3, #127	; 0x7f
 8001f54:	d828      	bhi.n	8001fa8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f56:	4a2f      	ldr	r2, [pc, #188]	; (8002014 <__NVIC_SetPriority+0xd4>)
 8001f58:	1dfb      	adds	r3, r7, #7
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	b25b      	sxtb	r3, r3
 8001f5e:	089b      	lsrs	r3, r3, #2
 8001f60:	33c0      	adds	r3, #192	; 0xc0
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	589b      	ldr	r3, [r3, r2]
 8001f66:	1dfa      	adds	r2, r7, #7
 8001f68:	7812      	ldrb	r2, [r2, #0]
 8001f6a:	0011      	movs	r1, r2
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	400a      	ands	r2, r1
 8001f70:	00d2      	lsls	r2, r2, #3
 8001f72:	21ff      	movs	r1, #255	; 0xff
 8001f74:	4091      	lsls	r1, r2
 8001f76:	000a      	movs	r2, r1
 8001f78:	43d2      	mvns	r2, r2
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	019b      	lsls	r3, r3, #6
 8001f82:	22ff      	movs	r2, #255	; 0xff
 8001f84:	401a      	ands	r2, r3
 8001f86:	1dfb      	adds	r3, r7, #7
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	4003      	ands	r3, r0
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f94:	481f      	ldr	r0, [pc, #124]	; (8002014 <__NVIC_SetPriority+0xd4>)
 8001f96:	1dfb      	adds	r3, r7, #7
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	b25b      	sxtb	r3, r3
 8001f9c:	089b      	lsrs	r3, r3, #2
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	33c0      	adds	r3, #192	; 0xc0
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001fa6:	e031      	b.n	800200c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fa8:	4a1b      	ldr	r2, [pc, #108]	; (8002018 <__NVIC_SetPriority+0xd8>)
 8001faa:	1dfb      	adds	r3, r7, #7
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	0019      	movs	r1, r3
 8001fb0:	230f      	movs	r3, #15
 8001fb2:	400b      	ands	r3, r1
 8001fb4:	3b08      	subs	r3, #8
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	3306      	adds	r3, #6
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	18d3      	adds	r3, r2, r3
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	1dfa      	adds	r2, r7, #7
 8001fc4:	7812      	ldrb	r2, [r2, #0]
 8001fc6:	0011      	movs	r1, r2
 8001fc8:	2203      	movs	r2, #3
 8001fca:	400a      	ands	r2, r1
 8001fcc:	00d2      	lsls	r2, r2, #3
 8001fce:	21ff      	movs	r1, #255	; 0xff
 8001fd0:	4091      	lsls	r1, r2
 8001fd2:	000a      	movs	r2, r1
 8001fd4:	43d2      	mvns	r2, r2
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	019b      	lsls	r3, r3, #6
 8001fde:	22ff      	movs	r2, #255	; 0xff
 8001fe0:	401a      	ands	r2, r3
 8001fe2:	1dfb      	adds	r3, r7, #7
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	2303      	movs	r3, #3
 8001fea:	4003      	ands	r3, r0
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ff0:	4809      	ldr	r0, [pc, #36]	; (8002018 <__NVIC_SetPriority+0xd8>)
 8001ff2:	1dfb      	adds	r3, r7, #7
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	001c      	movs	r4, r3
 8001ff8:	230f      	movs	r3, #15
 8001ffa:	4023      	ands	r3, r4
 8001ffc:	3b08      	subs	r3, #8
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	430a      	orrs	r2, r1
 8002002:	3306      	adds	r3, #6
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	18c3      	adds	r3, r0, r3
 8002008:	3304      	adds	r3, #4
 800200a:	601a      	str	r2, [r3, #0]
}
 800200c:	46c0      	nop			; (mov r8, r8)
 800200e:	46bd      	mov	sp, r7
 8002010:	b003      	add	sp, #12
 8002012:	bd90      	pop	{r4, r7, pc}
 8002014:	e000e100 	.word	0xe000e100
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002020:	f3bf 8f4f 	dsb	sy
}
 8002024:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002026:	4b04      	ldr	r3, [pc, #16]	; (8002038 <__NVIC_SystemReset+0x1c>)
 8002028:	4a04      	ldr	r2, [pc, #16]	; (800203c <__NVIC_SystemReset+0x20>)
 800202a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800202c:	f3bf 8f4f 	dsb	sy
}
 8002030:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	e7fd      	b.n	8002032 <__NVIC_SystemReset+0x16>
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	e000ed00 	.word	0xe000ed00
 800203c:	05fa0004 	.word	0x05fa0004

08002040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	1e5a      	subs	r2, r3, #1
 800204c:	2380      	movs	r3, #128	; 0x80
 800204e:	045b      	lsls	r3, r3, #17
 8002050:	429a      	cmp	r2, r3
 8002052:	d301      	bcc.n	8002058 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002054:	2301      	movs	r3, #1
 8002056:	e010      	b.n	800207a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <SysTick_Config+0x44>)
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	3a01      	subs	r2, #1
 800205e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002060:	2301      	movs	r3, #1
 8002062:	425b      	negs	r3, r3
 8002064:	2103      	movs	r1, #3
 8002066:	0018      	movs	r0, r3
 8002068:	f7ff ff6a 	bl	8001f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <SysTick_Config+0x44>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002072:	4b04      	ldr	r3, [pc, #16]	; (8002084 <SysTick_Config+0x44>)
 8002074:	2207      	movs	r2, #7
 8002076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002078:	2300      	movs	r3, #0
}
 800207a:	0018      	movs	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	b002      	add	sp, #8
 8002080:	bd80      	pop	{r7, pc}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	e000e010 	.word	0xe000e010

08002088 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	210f      	movs	r1, #15
 8002094:	187b      	adds	r3, r7, r1
 8002096:	1c02      	adds	r2, r0, #0
 8002098:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	187b      	adds	r3, r7, r1
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	b25b      	sxtb	r3, r3
 80020a2:	0011      	movs	r1, r2
 80020a4:	0018      	movs	r0, r3
 80020a6:	f7ff ff4b 	bl	8001f40 <__NVIC_SetPriority>
}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	46bd      	mov	sp, r7
 80020ae:	b004      	add	sp, #16
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	0002      	movs	r2, r0
 80020ba:	1dfb      	adds	r3, r7, #7
 80020bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020be:	1dfb      	adds	r3, r7, #7
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	b25b      	sxtb	r3, r3
 80020c4:	0018      	movs	r0, r3
 80020c6:	f7ff ff21 	bl	8001f0c <__NVIC_EnableIRQ>
}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	46bd      	mov	sp, r7
 80020ce:	b002      	add	sp, #8
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80020d6:	f7ff ffa1 	bl	800201c <__NVIC_SystemReset>

080020da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	0018      	movs	r0, r3
 80020e6:	f7ff ffab 	bl	8002040 <SysTick_Config>
 80020ea:	0003      	movs	r3, r0
}
 80020ec:	0018      	movs	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	b002      	add	sp, #8
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e04f      	b.n	80021a6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2225      	movs	r2, #37	; 0x25
 800210a:	5c9b      	ldrb	r3, [r3, r2]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d008      	beq.n	8002124 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2204      	movs	r2, #4
 8002116:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2224      	movs	r2, #36	; 0x24
 800211c:	2100      	movs	r1, #0
 800211e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e040      	b.n	80021a6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	210e      	movs	r1, #14
 8002130:	438a      	bics	r2, r1
 8002132:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800213e:	491c      	ldr	r1, [pc, #112]	; (80021b0 <HAL_DMA_Abort+0xbc>)
 8002140:	400a      	ands	r2, r1
 8002142:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2101      	movs	r1, #1
 8002150:	438a      	bics	r2, r1
 8002152:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002158:	221c      	movs	r2, #28
 800215a:	401a      	ands	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	2101      	movs	r1, #1
 8002162:	4091      	lsls	r1, r2
 8002164:	000a      	movs	r2, r1
 8002166:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002170:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00c      	beq.n	8002194 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002184:	490a      	ldr	r1, [pc, #40]	; (80021b0 <HAL_DMA_Abort+0xbc>)
 8002186:	400a      	ands	r2, r1
 8002188:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002192:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2225      	movs	r2, #37	; 0x25
 8002198:	2101      	movs	r1, #1
 800219a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2224      	movs	r2, #36	; 0x24
 80021a0:	2100      	movs	r1, #0
 80021a2:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	0018      	movs	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	b002      	add	sp, #8
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	fffffeff 	.word	0xfffffeff

080021b4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021bc:	210f      	movs	r1, #15
 80021be:	187b      	adds	r3, r7, r1
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2225      	movs	r2, #37	; 0x25
 80021c8:	5c9b      	ldrb	r3, [r3, r2]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d006      	beq.n	80021de <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2204      	movs	r2, #4
 80021d4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80021d6:	187b      	adds	r3, r7, r1
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
 80021dc:	e048      	b.n	8002270 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	210e      	movs	r1, #14
 80021ea:	438a      	bics	r2, r1
 80021ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2101      	movs	r1, #1
 80021fa:	438a      	bics	r2, r1
 80021fc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002208:	491d      	ldr	r1, [pc, #116]	; (8002280 <HAL_DMA_Abort_IT+0xcc>)
 800220a:	400a      	ands	r2, r1
 800220c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	221c      	movs	r2, #28
 8002214:	401a      	ands	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	2101      	movs	r1, #1
 800221c:	4091      	lsls	r1, r2
 800221e:	000a      	movs	r2, r1
 8002220:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800222a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00c      	beq.n	800224e <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223e:	4910      	ldr	r1, [pc, #64]	; (8002280 <HAL_DMA_Abort_IT+0xcc>)
 8002240:	400a      	ands	r2, r1
 8002242:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800224c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2225      	movs	r2, #37	; 0x25
 8002252:	2101      	movs	r1, #1
 8002254:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2224      	movs	r2, #36	; 0x24
 800225a:	2100      	movs	r1, #0
 800225c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002262:	2b00      	cmp	r3, #0
 8002264:	d004      	beq.n	8002270 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	0010      	movs	r0, r2
 800226e:	4798      	blx	r3
    }
  }
  return status;
 8002270:	230f      	movs	r3, #15
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	781b      	ldrb	r3, [r3, #0]
}
 8002276:	0018      	movs	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	b004      	add	sp, #16
 800227c:	bd80      	pop	{r7, pc}
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	fffffeff 	.word	0xfffffeff

08002284 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002284:	b5b0      	push	{r4, r5, r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	603a      	str	r2, [r7, #0]
 8002290:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002292:	4b21      	ldr	r3, [pc, #132]	; (8002318 <HAL_FLASH_Program+0x94>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <HAL_FLASH_Program+0x1a>
 800229a:	2302      	movs	r3, #2
 800229c:	e038      	b.n	8002310 <HAL_FLASH_Program+0x8c>
 800229e:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <HAL_FLASH_Program+0x94>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80022a4:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <HAL_FLASH_Program+0x94>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80022aa:	2517      	movs	r5, #23
 80022ac:	197c      	adds	r4, r7, r5
 80022ae:	23fa      	movs	r3, #250	; 0xfa
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	0018      	movs	r0, r3
 80022b4:	f000 f874 	bl	80023a0 <FLASH_WaitForLastOperation>
 80022b8:	0003      	movs	r3, r0
 80022ba:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80022bc:	197b      	adds	r3, r7, r5
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d11f      	bne.n	8002304 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d106      	bne.n	80022d8 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68b9      	ldr	r1, [r7, #8]
 80022d0:	0008      	movs	r0, r1
 80022d2:	f000 f8b3 	bl	800243c <FLASH_Program_DoubleWord>
 80022d6:	e005      	b.n	80022e4 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	0011      	movs	r1, r2
 80022de:	0018      	movs	r0, r3
 80022e0:	f004 ff22 	bl	8007128 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80022e4:	2317      	movs	r3, #23
 80022e6:	18fc      	adds	r4, r7, r3
 80022e8:	23fa      	movs	r3, #250	; 0xfa
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	0018      	movs	r0, r3
 80022ee:	f000 f857 	bl	80023a0 <FLASH_WaitForLastOperation>
 80022f2:	0003      	movs	r3, r0
 80022f4:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80022f6:	4b09      	ldr	r3, [pc, #36]	; (800231c <HAL_FLASH_Program+0x98>)
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	43d9      	mvns	r1, r3
 80022fe:	4b07      	ldr	r3, [pc, #28]	; (800231c <HAL_FLASH_Program+0x98>)
 8002300:	400a      	ands	r2, r1
 8002302:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <HAL_FLASH_Program+0x94>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800230a:	2317      	movs	r3, #23
 800230c:	18fb      	adds	r3, r7, r3
 800230e:	781b      	ldrb	r3, [r3, #0]
}
 8002310:	0018      	movs	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	b006      	add	sp, #24
 8002316:	bdb0      	pop	{r4, r5, r7, pc}
 8002318:	20000d98 	.word	0x20000d98
 800231c:	40022000 	.word	0x40022000

08002320 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002326:	1dfb      	adds	r3, r7, #7
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_FLASH_Unlock+0x3c>)
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	2b00      	cmp	r3, #0
 8002332:	da0c      	bge.n	800234e <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002334:	4b09      	ldr	r3, [pc, #36]	; (800235c <HAL_FLASH_Unlock+0x3c>)
 8002336:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <HAL_FLASH_Unlock+0x40>)
 8002338:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <HAL_FLASH_Unlock+0x3c>)
 800233c:	4a09      	ldr	r2, [pc, #36]	; (8002364 <HAL_FLASH_Unlock+0x44>)
 800233e:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_FLASH_Unlock+0x3c>)
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	2b00      	cmp	r3, #0
 8002346:	da02      	bge.n	800234e <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8002348:	1dfb      	adds	r3, r7, #7
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800234e:	1dfb      	adds	r3, r7, #7
 8002350:	781b      	ldrb	r3, [r3, #0]
}
 8002352:	0018      	movs	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	b002      	add	sp, #8
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	40022000 	.word	0x40022000
 8002360:	45670123 	.word	0x45670123
 8002364:	cdef89ab 	.word	0xcdef89ab

08002368 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800236e:	1dfb      	adds	r3, r7, #7
 8002370:	2201      	movs	r2, #1
 8002372:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002374:	4b09      	ldr	r3, [pc, #36]	; (800239c <HAL_FLASH_Lock+0x34>)
 8002376:	695a      	ldr	r2, [r3, #20]
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <HAL_FLASH_Lock+0x34>)
 800237a:	2180      	movs	r1, #128	; 0x80
 800237c:	0609      	lsls	r1, r1, #24
 800237e:	430a      	orrs	r2, r1
 8002380:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_FLASH_Lock+0x34>)
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	2b00      	cmp	r3, #0
 8002388:	da02      	bge.n	8002390 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 800238a:	1dfb      	adds	r3, r7, #7
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002390:	1dfb      	adds	r3, r7, #7
 8002392:	781b      	ldrb	r3, [r3, #0]
}
 8002394:	0018      	movs	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	b002      	add	sp, #8
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40022000 	.word	0x40022000

080023a0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 80023a8:	f7ff fd82 	bl	8001eb0 <HAL_GetTick>
 80023ac:	0002      	movs	r2, r0
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	189b      	adds	r3, r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 80023b4:	23c0      	movs	r3, #192	; 0xc0
 80023b6:	029b      	lsls	r3, r3, #10
 80023b8:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 80023ba:	e007      	b.n	80023cc <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 80023bc:	f7ff fd78 	bl	8001eb0 <HAL_GetTick>
 80023c0:	0002      	movs	r2, r0
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d801      	bhi.n	80023cc <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e02a      	b.n	8002422 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 80023cc:	4b17      	ldr	r3, [pc, #92]	; (800242c <FLASH_WaitForLastOperation+0x8c>)
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	4013      	ands	r3, r2
 80023d4:	d1f2      	bne.n	80023bc <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80023d6:	4b15      	ldr	r3, [pc, #84]	; (800242c <FLASH_WaitForLastOperation+0x8c>)
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	4a15      	ldr	r2, [pc, #84]	; (8002430 <FLASH_WaitForLastOperation+0x90>)
 80023dc:	4013      	ands	r3, r2
 80023de:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 80023e0:	4b12      	ldr	r3, [pc, #72]	; (800242c <FLASH_WaitForLastOperation+0x8c>)
 80023e2:	4a14      	ldr	r2, [pc, #80]	; (8002434 <FLASH_WaitForLastOperation+0x94>)
 80023e4:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d004      	beq.n	80023f6 <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <FLASH_WaitForLastOperation+0x98>)
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e015      	b.n	8002422 <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 80023f6:	f7ff fd5b 	bl	8001eb0 <HAL_GetTick>
 80023fa:	0002      	movs	r2, r0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	189b      	adds	r3, r3, r2
 8002400:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8002402:	e007      	b.n	8002414 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 8002404:	f7ff fd54 	bl	8001eb0 <HAL_GetTick>
 8002408:	0002      	movs	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4293      	cmp	r3, r2
 800240e:	d801      	bhi.n	8002414 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e006      	b.n	8002422 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <FLASH_WaitForLastOperation+0x8c>)
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	02db      	lsls	r3, r3, #11
 800241c:	4013      	ands	r3, r2
 800241e:	d1f1      	bne.n	8002404 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	0018      	movs	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	b004      	add	sp, #16
 8002428:	bd80      	pop	{r7, pc}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	40022000 	.word	0x40022000
 8002430:	000083fa 	.word	0x000083fa
 8002434:	000883fb 	.word	0x000883fb
 8002438:	20000d98 	.word	0x20000d98

0800243c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800243c:	b5b0      	push	{r4, r5, r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	603a      	str	r2, [r7, #0]
 8002446:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <FLASH_Program_DoubleWord+0x3c>)
 800244a:	695a      	ldr	r2, [r3, #20]
 800244c:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <FLASH_Program_DoubleWord+0x3c>)
 800244e:	2101      	movs	r1, #1
 8002450:	430a      	orrs	r2, r1
 8002452:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800245a:	f3bf 8f6f 	isb	sy
}
 800245e:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	001c      	movs	r4, r3
 8002464:	2300      	movs	r3, #0
 8002466:	001d      	movs	r5, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	3304      	adds	r3, #4
 800246c:	0022      	movs	r2, r4
 800246e:	601a      	str	r2, [r3, #0]
}
 8002470:	46c0      	nop			; (mov r8, r8)
 8002472:	46bd      	mov	sp, r7
 8002474:	b004      	add	sp, #16
 8002476:	bdb0      	pop	{r4, r5, r7, pc}
 8002478:	40022000 	.word	0x40022000

0800247c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800247c:	b5b0      	push	{r4, r5, r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002486:	4b33      	ldr	r3, [pc, #204]	; (8002554 <HAL_FLASHEx_Erase+0xd8>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_FLASHEx_Erase+0x16>
 800248e:	2302      	movs	r3, #2
 8002490:	e05c      	b.n	800254c <HAL_FLASHEx_Erase+0xd0>
 8002492:	4b30      	ldr	r3, [pc, #192]	; (8002554 <HAL_FLASHEx_Erase+0xd8>)
 8002494:	2201      	movs	r2, #1
 8002496:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002498:	4b2e      	ldr	r3, [pc, #184]	; (8002554 <HAL_FLASHEx_Erase+0xd8>)
 800249a:	2200      	movs	r2, #0
 800249c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800249e:	250f      	movs	r5, #15
 80024a0:	197c      	adds	r4, r7, r5
 80024a2:	23fa      	movs	r3, #250	; 0xfa
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	0018      	movs	r0, r3
 80024a8:	f7ff ff7a 	bl	80023a0 <FLASH_WaitForLastOperation>
 80024ac:	0003      	movs	r3, r0
 80024ae:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80024b0:	002c      	movs	r4, r5
 80024b2:	193b      	adds	r3, r7, r4
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d142      	bne.n	8002540 <HAL_FLASHEx_Erase+0xc4>
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d10d      	bne.n	80024de <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	0018      	movs	r0, r3
 80024c8:	f000 f848 	bl	800255c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80024cc:	193c      	adds	r4, r7, r4
 80024ce:	23fa      	movs	r3, #250	; 0xfa
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	0018      	movs	r0, r3
 80024d4:	f7ff ff64 	bl	80023a0 <FLASH_WaitForLastOperation>
 80024d8:	0003      	movs	r3, r0
 80024da:	7023      	strb	r3, [r4, #0]
 80024dc:	e030      	b.n	8002540 <HAL_FLASHEx_Erase+0xc4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2201      	movs	r2, #1
 80024e2:	4252      	negs	r2, r2
 80024e4:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	e01a      	b.n	8002524 <HAL_FLASHEx_Erase+0xa8>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	0011      	movs	r1, r2
 80024f6:	0018      	movs	r0, r3
 80024f8:	f000 f844 	bl	8002584 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80024fc:	250f      	movs	r5, #15
 80024fe:	197c      	adds	r4, r7, r5
 8002500:	23fa      	movs	r3, #250	; 0xfa
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	0018      	movs	r0, r3
 8002506:	f7ff ff4b 	bl	80023a0 <FLASH_WaitForLastOperation>
 800250a:	0003      	movs	r3, r0
 800250c:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 800250e:	197b      	adds	r3, r7, r5
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_FLASHEx_Erase+0xa2>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	601a      	str	r2, [r3, #0]
          break;
 800251c:	e00a      	b.n	8002534 <HAL_FLASHEx_Erase+0xb8>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	3301      	adds	r3, #1
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	18d3      	adds	r3, r2, r3
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	429a      	cmp	r2, r3
 8002532:	d3dc      	bcc.n	80024ee <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002534:	4b08      	ldr	r3, [pc, #32]	; (8002558 <HAL_FLASHEx_Erase+0xdc>)
 8002536:	695a      	ldr	r2, [r3, #20]
 8002538:	4b07      	ldr	r3, [pc, #28]	; (8002558 <HAL_FLASHEx_Erase+0xdc>)
 800253a:	2102      	movs	r1, #2
 800253c:	438a      	bics	r2, r1
 800253e:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002540:	4b04      	ldr	r3, [pc, #16]	; (8002554 <HAL_FLASHEx_Erase+0xd8>)
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8002546:	230f      	movs	r3, #15
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	781b      	ldrb	r3, [r3, #0]
}
 800254c:	0018      	movs	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	b004      	add	sp, #16
 8002552:	bdb0      	pop	{r4, r5, r7, pc}
 8002554:	20000d98 	.word	0x20000d98
 8002558:	40022000 	.word	0x40022000

0800255c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <FLASH_MassErase+0x24>)
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	431a      	orrs	r2, r3
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <FLASH_MassErase+0x24>)
 800256e:	2180      	movs	r1, #128	; 0x80
 8002570:	0249      	lsls	r1, r1, #9
 8002572:	430a      	orrs	r2, r1
 8002574:	615a      	str	r2, [r3, #20]
}
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	46bd      	mov	sp, r7
 800257a:	b002      	add	sp, #8
 800257c:	bd80      	pop	{r7, pc}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	40022000 	.word	0x40022000

08002584 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800258e:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <FLASH_PageErase+0x48>)
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	4a0f      	ldr	r2, [pc, #60]	; (80025d0 <FLASH_PageErase+0x4c>)
 8002594:	4013      	ands	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b04      	cmp	r3, #4
 800259c:	d005      	beq.n	80025aa <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2280      	movs	r2, #128	; 0x80
 80025a2:	0192      	lsls	r2, r2, #6
 80025a4:	4313      	orrs	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	e003      	b.n	80025b2 <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4a09      	ldr	r2, [pc, #36]	; (80025d4 <FLASH_PageErase+0x50>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
  }
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	00da      	lsls	r2, r3, #3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	431a      	orrs	r2, r3
 80025ba:	4b04      	ldr	r3, [pc, #16]	; (80025cc <FLASH_PageErase+0x48>)
 80025bc:	4906      	ldr	r1, [pc, #24]	; (80025d8 <FLASH_PageErase+0x54>)
 80025be:	430a      	orrs	r2, r1
 80025c0:	615a      	str	r2, [r3, #20]
}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	46bd      	mov	sp, r7
 80025c6:	b004      	add	sp, #16
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	40022000 	.word	0x40022000
 80025d0:	ffffe007 	.word	0xffffe007
 80025d4:	ffffdfff 	.word	0xffffdfff
 80025d8:	00010002 	.word	0x00010002

080025dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ea:	e14d      	b.n	8002888 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2101      	movs	r1, #1
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	4091      	lsls	r1, r2
 80025f6:	000a      	movs	r2, r1
 80025f8:	4013      	ands	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d100      	bne.n	8002604 <HAL_GPIO_Init+0x28>
 8002602:	e13e      	b.n	8002882 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2203      	movs	r2, #3
 800260a:	4013      	ands	r3, r2
 800260c:	2b01      	cmp	r3, #1
 800260e:	d005      	beq.n	800261c <HAL_GPIO_Init+0x40>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2203      	movs	r2, #3
 8002616:	4013      	ands	r3, r2
 8002618:	2b02      	cmp	r3, #2
 800261a:	d130      	bne.n	800267e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	2203      	movs	r2, #3
 8002628:	409a      	lsls	r2, r3
 800262a:	0013      	movs	r3, r2
 800262c:	43da      	mvns	r2, r3
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	409a      	lsls	r2, r3
 800263e:	0013      	movs	r3, r2
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002652:	2201      	movs	r2, #1
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	409a      	lsls	r2, r3
 8002658:	0013      	movs	r3, r2
 800265a:	43da      	mvns	r2, r3
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4013      	ands	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	091b      	lsrs	r3, r3, #4
 8002668:	2201      	movs	r2, #1
 800266a:	401a      	ands	r2, r3
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	409a      	lsls	r2, r3
 8002670:	0013      	movs	r3, r2
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2203      	movs	r2, #3
 8002684:	4013      	ands	r3, r2
 8002686:	2b03      	cmp	r3, #3
 8002688:	d017      	beq.n	80026ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	2203      	movs	r2, #3
 8002696:	409a      	lsls	r2, r3
 8002698:	0013      	movs	r3, r2
 800269a:	43da      	mvns	r2, r3
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4013      	ands	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	409a      	lsls	r2, r3
 80026ac:	0013      	movs	r3, r2
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2203      	movs	r2, #3
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d123      	bne.n	800270e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	08da      	lsrs	r2, r3, #3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3208      	adds	r2, #8
 80026ce:	0092      	lsls	r2, r2, #2
 80026d0:	58d3      	ldr	r3, [r2, r3]
 80026d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2207      	movs	r2, #7
 80026d8:	4013      	ands	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	220f      	movs	r2, #15
 80026de:	409a      	lsls	r2, r3
 80026e0:	0013      	movs	r3, r2
 80026e2:	43da      	mvns	r2, r3
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4013      	ands	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2107      	movs	r1, #7
 80026f2:	400b      	ands	r3, r1
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	409a      	lsls	r2, r3
 80026f8:	0013      	movs	r3, r2
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	08da      	lsrs	r2, r3, #3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3208      	adds	r2, #8
 8002708:	0092      	lsls	r2, r2, #2
 800270a:	6939      	ldr	r1, [r7, #16]
 800270c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	2203      	movs	r2, #3
 800271a:	409a      	lsls	r2, r3
 800271c:	0013      	movs	r3, r2
 800271e:	43da      	mvns	r2, r3
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2203      	movs	r2, #3
 800272c:	401a      	ands	r2, r3
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	409a      	lsls	r2, r3
 8002734:	0013      	movs	r3, r2
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	23c0      	movs	r3, #192	; 0xc0
 8002748:	029b      	lsls	r3, r3, #10
 800274a:	4013      	ands	r3, r2
 800274c:	d100      	bne.n	8002750 <HAL_GPIO_Init+0x174>
 800274e:	e098      	b.n	8002882 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002750:	4a53      	ldr	r2, [pc, #332]	; (80028a0 <HAL_GPIO_Init+0x2c4>)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	089b      	lsrs	r3, r3, #2
 8002756:	3318      	adds	r3, #24
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	589b      	ldr	r3, [r3, r2]
 800275c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	2203      	movs	r2, #3
 8002762:	4013      	ands	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	220f      	movs	r2, #15
 8002768:	409a      	lsls	r2, r3
 800276a:	0013      	movs	r3, r2
 800276c:	43da      	mvns	r2, r3
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	23a0      	movs	r3, #160	; 0xa0
 8002778:	05db      	lsls	r3, r3, #23
 800277a:	429a      	cmp	r2, r3
 800277c:	d019      	beq.n	80027b2 <HAL_GPIO_Init+0x1d6>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a48      	ldr	r2, [pc, #288]	; (80028a4 <HAL_GPIO_Init+0x2c8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d013      	beq.n	80027ae <HAL_GPIO_Init+0x1d2>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a47      	ldr	r2, [pc, #284]	; (80028a8 <HAL_GPIO_Init+0x2cc>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d00d      	beq.n	80027aa <HAL_GPIO_Init+0x1ce>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a46      	ldr	r2, [pc, #280]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d007      	beq.n	80027a6 <HAL_GPIO_Init+0x1ca>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a45      	ldr	r2, [pc, #276]	; (80028b0 <HAL_GPIO_Init+0x2d4>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d101      	bne.n	80027a2 <HAL_GPIO_Init+0x1c6>
 800279e:	2304      	movs	r3, #4
 80027a0:	e008      	b.n	80027b4 <HAL_GPIO_Init+0x1d8>
 80027a2:	2305      	movs	r3, #5
 80027a4:	e006      	b.n	80027b4 <HAL_GPIO_Init+0x1d8>
 80027a6:	2303      	movs	r3, #3
 80027a8:	e004      	b.n	80027b4 <HAL_GPIO_Init+0x1d8>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e002      	b.n	80027b4 <HAL_GPIO_Init+0x1d8>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_GPIO_Init+0x1d8>
 80027b2:	2300      	movs	r3, #0
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	2103      	movs	r1, #3
 80027b8:	400a      	ands	r2, r1
 80027ba:	00d2      	lsls	r2, r2, #3
 80027bc:	4093      	lsls	r3, r2
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80027c4:	4936      	ldr	r1, [pc, #216]	; (80028a0 <HAL_GPIO_Init+0x2c4>)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	089b      	lsrs	r3, r3, #2
 80027ca:	3318      	adds	r3, #24
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027d2:	4b33      	ldr	r3, [pc, #204]	; (80028a0 <HAL_GPIO_Init+0x2c4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	43da      	mvns	r2, r3
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4013      	ands	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	2380      	movs	r3, #128	; 0x80
 80027e8:	035b      	lsls	r3, r3, #13
 80027ea:	4013      	ands	r3, r2
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027f6:	4b2a      	ldr	r3, [pc, #168]	; (80028a0 <HAL_GPIO_Init+0x2c4>)
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80027fc:	4b28      	ldr	r3, [pc, #160]	; (80028a0 <HAL_GPIO_Init+0x2c4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	43da      	mvns	r2, r3
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4013      	ands	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	039b      	lsls	r3, r3, #14
 8002814:	4013      	ands	r3, r2
 8002816:	d003      	beq.n	8002820 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002820:	4b1f      	ldr	r3, [pc, #124]	; (80028a0 <HAL_GPIO_Init+0x2c4>)
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002826:	4a1e      	ldr	r2, [pc, #120]	; (80028a0 <HAL_GPIO_Init+0x2c4>)
 8002828:	2384      	movs	r3, #132	; 0x84
 800282a:	58d3      	ldr	r3, [r2, r3]
 800282c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	43da      	mvns	r2, r3
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4013      	ands	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	2380      	movs	r3, #128	; 0x80
 800283e:	029b      	lsls	r3, r3, #10
 8002840:	4013      	ands	r3, r2
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4313      	orrs	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800284c:	4914      	ldr	r1, [pc, #80]	; (80028a0 <HAL_GPIO_Init+0x2c4>)
 800284e:	2284      	movs	r2, #132	; 0x84
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002854:	4a12      	ldr	r2, [pc, #72]	; (80028a0 <HAL_GPIO_Init+0x2c4>)
 8002856:	2380      	movs	r3, #128	; 0x80
 8002858:	58d3      	ldr	r3, [r2, r3]
 800285a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	43da      	mvns	r2, r3
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4013      	ands	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	025b      	lsls	r3, r3, #9
 800286e:	4013      	ands	r3, r2
 8002870:	d003      	beq.n	800287a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4313      	orrs	r3, r2
 8002878:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800287a:	4909      	ldr	r1, [pc, #36]	; (80028a0 <HAL_GPIO_Init+0x2c4>)
 800287c:	2280      	movs	r2, #128	; 0x80
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	3301      	adds	r3, #1
 8002886:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	40da      	lsrs	r2, r3
 8002890:	1e13      	subs	r3, r2, #0
 8002892:	d000      	beq.n	8002896 <HAL_GPIO_Init+0x2ba>
 8002894:	e6aa      	b.n	80025ec <HAL_GPIO_Init+0x10>
  }
}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	46c0      	nop			; (mov r8, r8)
 800289a:	46bd      	mov	sp, r7
 800289c:	b006      	add	sp, #24
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40021800 	.word	0x40021800
 80028a4:	50000400 	.word	0x50000400
 80028a8:	50000800 	.word	0x50000800
 80028ac:	50000c00 	.word	0x50000c00
 80028b0:	50001000 	.word	0x50001000

080028b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	000a      	movs	r2, r1
 80028be:	1cbb      	adds	r3, r7, #2
 80028c0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	1cba      	adds	r2, r7, #2
 80028c8:	8812      	ldrh	r2, [r2, #0]
 80028ca:	4013      	ands	r3, r2
 80028cc:	d004      	beq.n	80028d8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80028ce:	230f      	movs	r3, #15
 80028d0:	18fb      	adds	r3, r7, r3
 80028d2:	2201      	movs	r2, #1
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	e003      	b.n	80028e0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028d8:	230f      	movs	r3, #15
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80028e0:	230f      	movs	r3, #15
 80028e2:	18fb      	adds	r3, r7, r3
 80028e4:	781b      	ldrb	r3, [r3, #0]
}
 80028e6:	0018      	movs	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b004      	add	sp, #16
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	0008      	movs	r0, r1
 80028f8:	0011      	movs	r1, r2
 80028fa:	1cbb      	adds	r3, r7, #2
 80028fc:	1c02      	adds	r2, r0, #0
 80028fe:	801a      	strh	r2, [r3, #0]
 8002900:	1c7b      	adds	r3, r7, #1
 8002902:	1c0a      	adds	r2, r1, #0
 8002904:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002906:	1c7b      	adds	r3, r7, #1
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d004      	beq.n	8002918 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800290e:	1cbb      	adds	r3, r7, #2
 8002910:	881a      	ldrh	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002916:	e003      	b.n	8002920 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002918:	1cbb      	adds	r3, r7, #2
 800291a:	881a      	ldrh	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002920:	46c0      	nop			; (mov r8, r8)
 8002922:	46bd      	mov	sp, r7
 8002924:	b002      	add	sp, #8
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002930:	4b19      	ldr	r3, [pc, #100]	; (8002998 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a19      	ldr	r2, [pc, #100]	; (800299c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002936:	4013      	ands	r3, r2
 8002938:	0019      	movs	r1, r3
 800293a:	4b17      	ldr	r3, [pc, #92]	; (8002998 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	430a      	orrs	r2, r1
 8002940:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	429a      	cmp	r2, r3
 800294a:	d11f      	bne.n	800298c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800294c:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	0013      	movs	r3, r2
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	189b      	adds	r3, r3, r2
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	4912      	ldr	r1, [pc, #72]	; (80029a4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800295a:	0018      	movs	r0, r3
 800295c:	f7fd fbe2 	bl	8000124 <__udivsi3>
 8002960:	0003      	movs	r3, r0
 8002962:	3301      	adds	r3, #1
 8002964:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002966:	e008      	b.n	800297a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	3b01      	subs	r3, #1
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	e001      	b.n	800297a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e009      	b.n	800298e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800297a:	4b07      	ldr	r3, [pc, #28]	; (8002998 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	401a      	ands	r2, r3
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	429a      	cmp	r2, r3
 800298a:	d0ed      	beq.n	8002968 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	0018      	movs	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	b004      	add	sp, #16
 8002994:	bd80      	pop	{r7, pc}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	40007000 	.word	0x40007000
 800299c:	fffff9ff 	.word	0xfffff9ff
 80029a0:	20000400 	.word	0x20000400
 80029a4:	000f4240 	.word	0x000f4240

080029a8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80029ac:	4b03      	ldr	r3, [pc, #12]	; (80029bc <LL_RCC_GetAPB1Prescaler+0x14>)
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	23e0      	movs	r3, #224	; 0xe0
 80029b2:	01db      	lsls	r3, r3, #7
 80029b4:	4013      	ands	r3, r2
}
 80029b6:	0018      	movs	r0, r3
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40021000 	.word	0x40021000

080029c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e2fe      	b.n	8002fd0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2201      	movs	r2, #1
 80029d8:	4013      	ands	r3, r2
 80029da:	d100      	bne.n	80029de <HAL_RCC_OscConfig+0x1e>
 80029dc:	e07c      	b.n	8002ad8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029de:	4bc3      	ldr	r3, [pc, #780]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2238      	movs	r2, #56	; 0x38
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029e8:	4bc0      	ldr	r3, [pc, #768]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	2203      	movs	r2, #3
 80029ee:	4013      	ands	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	2b10      	cmp	r3, #16
 80029f6:	d102      	bne.n	80029fe <HAL_RCC_OscConfig+0x3e>
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d002      	beq.n	8002a04 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d10b      	bne.n	8002a1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a04:	4bb9      	ldr	r3, [pc, #740]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	2380      	movs	r3, #128	; 0x80
 8002a0a:	029b      	lsls	r3, r3, #10
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d062      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x116>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d15e      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e2d9      	b.n	8002fd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	2380      	movs	r3, #128	; 0x80
 8002a22:	025b      	lsls	r3, r3, #9
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d107      	bne.n	8002a38 <HAL_RCC_OscConfig+0x78>
 8002a28:	4bb0      	ldr	r3, [pc, #704]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4baf      	ldr	r3, [pc, #700]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002a2e:	2180      	movs	r1, #128	; 0x80
 8002a30:	0249      	lsls	r1, r1, #9
 8002a32:	430a      	orrs	r2, r1
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	e020      	b.n	8002a7a <HAL_RCC_OscConfig+0xba>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	23a0      	movs	r3, #160	; 0xa0
 8002a3e:	02db      	lsls	r3, r3, #11
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d10e      	bne.n	8002a62 <HAL_RCC_OscConfig+0xa2>
 8002a44:	4ba9      	ldr	r3, [pc, #676]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4ba8      	ldr	r3, [pc, #672]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002a4a:	2180      	movs	r1, #128	; 0x80
 8002a4c:	02c9      	lsls	r1, r1, #11
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	4ba6      	ldr	r3, [pc, #664]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	4ba5      	ldr	r3, [pc, #660]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002a58:	2180      	movs	r1, #128	; 0x80
 8002a5a:	0249      	lsls	r1, r1, #9
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	e00b      	b.n	8002a7a <HAL_RCC_OscConfig+0xba>
 8002a62:	4ba2      	ldr	r3, [pc, #648]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	4ba1      	ldr	r3, [pc, #644]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002a68:	49a1      	ldr	r1, [pc, #644]	; (8002cf0 <HAL_RCC_OscConfig+0x330>)
 8002a6a:	400a      	ands	r2, r1
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	4b9f      	ldr	r3, [pc, #636]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	4b9e      	ldr	r3, [pc, #632]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002a74:	499f      	ldr	r1, [pc, #636]	; (8002cf4 <HAL_RCC_OscConfig+0x334>)
 8002a76:	400a      	ands	r2, r1
 8002a78:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d014      	beq.n	8002aac <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a82:	f7ff fa15 	bl	8001eb0 <HAL_GetTick>
 8002a86:	0003      	movs	r3, r0
 8002a88:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a8c:	f7ff fa10 	bl	8001eb0 <HAL_GetTick>
 8002a90:	0002      	movs	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	; 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e298      	b.n	8002fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a9e:	4b93      	ldr	r3, [pc, #588]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	029b      	lsls	r3, r3, #10
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0xcc>
 8002aaa:	e015      	b.n	8002ad8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aac:	f7ff fa00 	bl	8001eb0 <HAL_GetTick>
 8002ab0:	0003      	movs	r3, r0
 8002ab2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab6:	f7ff f9fb 	bl	8001eb0 <HAL_GetTick>
 8002aba:	0002      	movs	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b64      	cmp	r3, #100	; 0x64
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e283      	b.n	8002fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ac8:	4b88      	ldr	r3, [pc, #544]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	2380      	movs	r3, #128	; 0x80
 8002ace:	029b      	lsls	r3, r3, #10
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d1f0      	bne.n	8002ab6 <HAL_RCC_OscConfig+0xf6>
 8002ad4:	e000      	b.n	8002ad8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2202      	movs	r2, #2
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d100      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x124>
 8002ae2:	e099      	b.n	8002c18 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ae4:	4b81      	ldr	r3, [pc, #516]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2238      	movs	r2, #56	; 0x38
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aee:	4b7f      	ldr	r3, [pc, #508]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2203      	movs	r2, #3
 8002af4:	4013      	ands	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	2b10      	cmp	r3, #16
 8002afc:	d102      	bne.n	8002b04 <HAL_RCC_OscConfig+0x144>
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d002      	beq.n	8002b0a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d135      	bne.n	8002b76 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b0a:	4b78      	ldr	r3, [pc, #480]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	2380      	movs	r3, #128	; 0x80
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4013      	ands	r3, r2
 8002b14:	d005      	beq.n	8002b22 <HAL_RCC_OscConfig+0x162>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e256      	b.n	8002fd0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b22:	4b72      	ldr	r3, [pc, #456]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	4a74      	ldr	r2, [pc, #464]	; (8002cf8 <HAL_RCC_OscConfig+0x338>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	0019      	movs	r1, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	021a      	lsls	r2, r3, #8
 8002b32:	4b6e      	ldr	r3, [pc, #440]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002b34:	430a      	orrs	r2, r1
 8002b36:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d112      	bne.n	8002b64 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b3e:	4b6b      	ldr	r3, [pc, #428]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a6e      	ldr	r2, [pc, #440]	; (8002cfc <HAL_RCC_OscConfig+0x33c>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	0019      	movs	r1, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	4b67      	ldr	r3, [pc, #412]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002b52:	4b66      	ldr	r3, [pc, #408]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	0adb      	lsrs	r3, r3, #11
 8002b58:	2207      	movs	r2, #7
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	4a68      	ldr	r2, [pc, #416]	; (8002d00 <HAL_RCC_OscConfig+0x340>)
 8002b5e:	40da      	lsrs	r2, r3
 8002b60:	4b68      	ldr	r3, [pc, #416]	; (8002d04 <HAL_RCC_OscConfig+0x344>)
 8002b62:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b64:	4b68      	ldr	r3, [pc, #416]	; (8002d08 <HAL_RCC_OscConfig+0x348>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f7ff f945 	bl	8001df8 <HAL_InitTick>
 8002b6e:	1e03      	subs	r3, r0, #0
 8002b70:	d051      	beq.n	8002c16 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e22c      	b.n	8002fd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d030      	beq.n	8002be0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b7e:	4b5b      	ldr	r3, [pc, #364]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a5e      	ldr	r2, [pc, #376]	; (8002cfc <HAL_RCC_OscConfig+0x33c>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	0019      	movs	r1, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691a      	ldr	r2, [r3, #16]
 8002b8c:	4b57      	ldr	r3, [pc, #348]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002b92:	4b56      	ldr	r3, [pc, #344]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	4b55      	ldr	r3, [pc, #340]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002b98:	2180      	movs	r1, #128	; 0x80
 8002b9a:	0049      	lsls	r1, r1, #1
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7ff f986 	bl	8001eb0 <HAL_GetTick>
 8002ba4:	0003      	movs	r3, r0
 8002ba6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002baa:	f7ff f981 	bl	8001eb0 <HAL_GetTick>
 8002bae:	0002      	movs	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e209      	b.n	8002fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bbc:	4b4b      	ldr	r3, [pc, #300]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	2380      	movs	r3, #128	; 0x80
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc8:	4b48      	ldr	r3, [pc, #288]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4a4a      	ldr	r2, [pc, #296]	; (8002cf8 <HAL_RCC_OscConfig+0x338>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	0019      	movs	r1, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	021a      	lsls	r2, r3, #8
 8002bd8:	4b44      	ldr	r3, [pc, #272]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	e01b      	b.n	8002c18 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002be0:	4b42      	ldr	r3, [pc, #264]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	4b41      	ldr	r3, [pc, #260]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002be6:	4949      	ldr	r1, [pc, #292]	; (8002d0c <HAL_RCC_OscConfig+0x34c>)
 8002be8:	400a      	ands	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bec:	f7ff f960 	bl	8001eb0 <HAL_GetTick>
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf6:	f7ff f95b 	bl	8001eb0 <HAL_GetTick>
 8002bfa:	0002      	movs	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e1e3      	b.n	8002fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c08:	4b38      	ldr	r3, [pc, #224]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4013      	ands	r3, r2
 8002c12:	d1f0      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x236>
 8002c14:	e000      	b.n	8002c18 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c16:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2208      	movs	r2, #8
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d047      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c22:	4b32      	ldr	r3, [pc, #200]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2238      	movs	r2, #56	; 0x38
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b18      	cmp	r3, #24
 8002c2c:	d10a      	bne.n	8002c44 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002c2e:	4b2f      	ldr	r3, [pc, #188]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c32:	2202      	movs	r2, #2
 8002c34:	4013      	ands	r3, r2
 8002c36:	d03c      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x2f2>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d138      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e1c5      	b.n	8002fd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d019      	beq.n	8002c80 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002c4c:	4b27      	ldr	r3, [pc, #156]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002c4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c50:	4b26      	ldr	r3, [pc, #152]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002c52:	2101      	movs	r1, #1
 8002c54:	430a      	orrs	r2, r1
 8002c56:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7ff f92a 	bl	8001eb0 <HAL_GetTick>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c62:	f7ff f925 	bl	8001eb0 <HAL_GetTick>
 8002c66:	0002      	movs	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e1ad      	b.n	8002fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c74:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c78:	2202      	movs	r2, #2
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d0f1      	beq.n	8002c62 <HAL_RCC_OscConfig+0x2a2>
 8002c7e:	e018      	b.n	8002cb2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002c80:	4b1a      	ldr	r3, [pc, #104]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002c82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c84:	4b19      	ldr	r3, [pc, #100]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002c86:	2101      	movs	r1, #1
 8002c88:	438a      	bics	r2, r1
 8002c8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7ff f910 	bl	8001eb0 <HAL_GetTick>
 8002c90:	0003      	movs	r3, r0
 8002c92:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c96:	f7ff f90b 	bl	8001eb0 <HAL_GetTick>
 8002c9a:	0002      	movs	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e193      	b.n	8002fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ca8:	4b10      	ldr	r3, [pc, #64]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cac:	2202      	movs	r2, #2
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d1f1      	bne.n	8002c96 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2204      	movs	r2, #4
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d100      	bne.n	8002cbe <HAL_RCC_OscConfig+0x2fe>
 8002cbc:	e0c6      	b.n	8002e4c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cbe:	231f      	movs	r3, #31
 8002cc0:	18fb      	adds	r3, r7, r3
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002cc6:	4b09      	ldr	r3, [pc, #36]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2238      	movs	r2, #56	; 0x38
 8002ccc:	4013      	ands	r3, r2
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	d11e      	bne.n	8002d10 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002cd2:	4b06      	ldr	r3, [pc, #24]	; (8002cec <HAL_RCC_OscConfig+0x32c>)
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d100      	bne.n	8002cde <HAL_RCC_OscConfig+0x31e>
 8002cdc:	e0b6      	b.n	8002e4c <HAL_RCC_OscConfig+0x48c>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d000      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x328>
 8002ce6:	e0b1      	b.n	8002e4c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e171      	b.n	8002fd0 <HAL_RCC_OscConfig+0x610>
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	fffeffff 	.word	0xfffeffff
 8002cf4:	fffbffff 	.word	0xfffbffff
 8002cf8:	ffff80ff 	.word	0xffff80ff
 8002cfc:	ffffc7ff 	.word	0xffffc7ff
 8002d00:	00f42400 	.word	0x00f42400
 8002d04:	20000400 	.word	0x20000400
 8002d08:	20000404 	.word	0x20000404
 8002d0c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d10:	4bb1      	ldr	r3, [pc, #708]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d14:	2380      	movs	r3, #128	; 0x80
 8002d16:	055b      	lsls	r3, r3, #21
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d101      	bne.n	8002d20 <HAL_RCC_OscConfig+0x360>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <HAL_RCC_OscConfig+0x362>
 8002d20:	2300      	movs	r3, #0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d011      	beq.n	8002d4a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002d26:	4bac      	ldr	r3, [pc, #688]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002d28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d2a:	4bab      	ldr	r3, [pc, #684]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002d2c:	2180      	movs	r1, #128	; 0x80
 8002d2e:	0549      	lsls	r1, r1, #21
 8002d30:	430a      	orrs	r2, r1
 8002d32:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d34:	4ba8      	ldr	r3, [pc, #672]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d38:	2380      	movs	r3, #128	; 0x80
 8002d3a:	055b      	lsls	r3, r3, #21
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002d42:	231f      	movs	r3, #31
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	2201      	movs	r2, #1
 8002d48:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d4a:	4ba4      	ldr	r3, [pc, #656]	; (8002fdc <HAL_RCC_OscConfig+0x61c>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	2380      	movs	r3, #128	; 0x80
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	4013      	ands	r3, r2
 8002d54:	d11a      	bne.n	8002d8c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d56:	4ba1      	ldr	r3, [pc, #644]	; (8002fdc <HAL_RCC_OscConfig+0x61c>)
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	4ba0      	ldr	r3, [pc, #640]	; (8002fdc <HAL_RCC_OscConfig+0x61c>)
 8002d5c:	2180      	movs	r1, #128	; 0x80
 8002d5e:	0049      	lsls	r1, r1, #1
 8002d60:	430a      	orrs	r2, r1
 8002d62:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002d64:	f7ff f8a4 	bl	8001eb0 <HAL_GetTick>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6e:	f7ff f89f 	bl	8001eb0 <HAL_GetTick>
 8002d72:	0002      	movs	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e127      	b.n	8002fd0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d80:	4b96      	ldr	r3, [pc, #600]	; (8002fdc <HAL_RCC_OscConfig+0x61c>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d0f0      	beq.n	8002d6e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d106      	bne.n	8002da2 <HAL_RCC_OscConfig+0x3e2>
 8002d94:	4b90      	ldr	r3, [pc, #576]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002d96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d98:	4b8f      	ldr	r3, [pc, #572]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002da0:	e01c      	b.n	8002ddc <HAL_RCC_OscConfig+0x41c>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b05      	cmp	r3, #5
 8002da8:	d10c      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x404>
 8002daa:	4b8b      	ldr	r3, [pc, #556]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002dac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dae:	4b8a      	ldr	r3, [pc, #552]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002db0:	2104      	movs	r1, #4
 8002db2:	430a      	orrs	r2, r1
 8002db4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002db6:	4b88      	ldr	r3, [pc, #544]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002db8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dba:	4b87      	ldr	r3, [pc, #540]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002dc2:	e00b      	b.n	8002ddc <HAL_RCC_OscConfig+0x41c>
 8002dc4:	4b84      	ldr	r3, [pc, #528]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002dc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dc8:	4b83      	ldr	r3, [pc, #524]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002dca:	2101      	movs	r1, #1
 8002dcc:	438a      	bics	r2, r1
 8002dce:	65da      	str	r2, [r3, #92]	; 0x5c
 8002dd0:	4b81      	ldr	r3, [pc, #516]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002dd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dd4:	4b80      	ldr	r3, [pc, #512]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002dd6:	2104      	movs	r1, #4
 8002dd8:	438a      	bics	r2, r1
 8002dda:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d014      	beq.n	8002e0e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7ff f864 	bl	8001eb0 <HAL_GetTick>
 8002de8:	0003      	movs	r3, r0
 8002dea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dec:	e009      	b.n	8002e02 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dee:	f7ff f85f 	bl	8001eb0 <HAL_GetTick>
 8002df2:	0002      	movs	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	4a79      	ldr	r2, [pc, #484]	; (8002fe0 <HAL_RCC_OscConfig+0x620>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e0e6      	b.n	8002fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e02:	4b75      	ldr	r3, [pc, #468]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e06:	2202      	movs	r2, #2
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCC_OscConfig+0x42e>
 8002e0c:	e013      	b.n	8002e36 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0e:	f7ff f84f 	bl	8001eb0 <HAL_GetTick>
 8002e12:	0003      	movs	r3, r0
 8002e14:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e16:	e009      	b.n	8002e2c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e18:	f7ff f84a 	bl	8001eb0 <HAL_GetTick>
 8002e1c:	0002      	movs	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	4a6f      	ldr	r2, [pc, #444]	; (8002fe0 <HAL_RCC_OscConfig+0x620>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e0d1      	b.n	8002fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e2c:	4b6a      	ldr	r3, [pc, #424]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e30:	2202      	movs	r2, #2
 8002e32:	4013      	ands	r3, r2
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002e36:	231f      	movs	r3, #31
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d105      	bne.n	8002e4c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002e40:	4b65      	ldr	r3, [pc, #404]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002e42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e44:	4b64      	ldr	r3, [pc, #400]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002e46:	4967      	ldr	r1, [pc, #412]	; (8002fe4 <HAL_RCC_OscConfig+0x624>)
 8002e48:	400a      	ands	r2, r1
 8002e4a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d100      	bne.n	8002e56 <HAL_RCC_OscConfig+0x496>
 8002e54:	e0bb      	b.n	8002fce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e56:	4b60      	ldr	r3, [pc, #384]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2238      	movs	r2, #56	; 0x38
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b10      	cmp	r3, #16
 8002e60:	d100      	bne.n	8002e64 <HAL_RCC_OscConfig+0x4a4>
 8002e62:	e07b      	b.n	8002f5c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d156      	bne.n	8002f1a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e6c:	4b5a      	ldr	r3, [pc, #360]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	4b59      	ldr	r3, [pc, #356]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002e72:	495d      	ldr	r1, [pc, #372]	; (8002fe8 <HAL_RCC_OscConfig+0x628>)
 8002e74:	400a      	ands	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e78:	f7ff f81a 	bl	8001eb0 <HAL_GetTick>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e82:	f7ff f815 	bl	8001eb0 <HAL_GetTick>
 8002e86:	0002      	movs	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e09d      	b.n	8002fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e94:	4b50      	ldr	r3, [pc, #320]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	049b      	lsls	r3, r3, #18
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d1f0      	bne.n	8002e82 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ea0:	4b4d      	ldr	r3, [pc, #308]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4a51      	ldr	r2, [pc, #324]	; (8002fec <HAL_RCC_OscConfig+0x62c>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	0019      	movs	r1, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1a      	ldr	r2, [r3, #32]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb8:	021b      	lsls	r3, r3, #8
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	4b42      	ldr	r3, [pc, #264]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ed4:	4b40      	ldr	r3, [pc, #256]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4b3f      	ldr	r3, [pc, #252]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002eda:	2180      	movs	r1, #128	; 0x80
 8002edc:	0449      	lsls	r1, r1, #17
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002ee2:	4b3d      	ldr	r3, [pc, #244]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002ee4:	68da      	ldr	r2, [r3, #12]
 8002ee6:	4b3c      	ldr	r3, [pc, #240]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002ee8:	2180      	movs	r1, #128	; 0x80
 8002eea:	0549      	lsls	r1, r1, #21
 8002eec:	430a      	orrs	r2, r1
 8002eee:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7fe ffde 	bl	8001eb0 <HAL_GetTick>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efa:	f7fe ffd9 	bl	8001eb0 <HAL_GetTick>
 8002efe:	0002      	movs	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e061      	b.n	8002fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0c:	4b32      	ldr	r3, [pc, #200]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	2380      	movs	r3, #128	; 0x80
 8002f12:	049b      	lsls	r3, r3, #18
 8002f14:	4013      	ands	r3, r2
 8002f16:	d0f0      	beq.n	8002efa <HAL_RCC_OscConfig+0x53a>
 8002f18:	e059      	b.n	8002fce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1a:	4b2f      	ldr	r3, [pc, #188]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	4b2e      	ldr	r3, [pc, #184]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002f20:	4931      	ldr	r1, [pc, #196]	; (8002fe8 <HAL_RCC_OscConfig+0x628>)
 8002f22:	400a      	ands	r2, r1
 8002f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f26:	f7fe ffc3 	bl	8001eb0 <HAL_GetTick>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f30:	f7fe ffbe 	bl	8001eb0 <HAL_GetTick>
 8002f34:	0002      	movs	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e046      	b.n	8002fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f42:	4b25      	ldr	r3, [pc, #148]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	2380      	movs	r3, #128	; 0x80
 8002f48:	049b      	lsls	r3, r3, #18
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002f4e:	4b22      	ldr	r3, [pc, #136]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	4b21      	ldr	r3, [pc, #132]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002f54:	4926      	ldr	r1, [pc, #152]	; (8002ff0 <HAL_RCC_OscConfig+0x630>)
 8002f56:	400a      	ands	r2, r1
 8002f58:	60da      	str	r2, [r3, #12]
 8002f5a:	e038      	b.n	8002fce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e033      	b.n	8002fd0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002f68:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <HAL_RCC_OscConfig+0x618>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2203      	movs	r2, #3
 8002f72:	401a      	ands	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d126      	bne.n	8002fca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	2270      	movs	r2, #112	; 0x70
 8002f80:	401a      	ands	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d11f      	bne.n	8002fca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	23fe      	movs	r3, #254	; 0xfe
 8002f8e:	01db      	lsls	r3, r3, #7
 8002f90:	401a      	ands	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f96:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d116      	bne.n	8002fca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	23f8      	movs	r3, #248	; 0xf8
 8002fa0:	039b      	lsls	r3, r3, #14
 8002fa2:	401a      	ands	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d10e      	bne.n	8002fca <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	23e0      	movs	r3, #224	; 0xe0
 8002fb0:	051b      	lsls	r3, r3, #20
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d106      	bne.n	8002fca <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	0f5b      	lsrs	r3, r3, #29
 8002fc0:	075a      	lsls	r2, r3, #29
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d001      	beq.n	8002fce <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b008      	add	sp, #32
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	40007000 	.word	0x40007000
 8002fe0:	00001388 	.word	0x00001388
 8002fe4:	efffffff 	.word	0xefffffff
 8002fe8:	feffffff 	.word	0xfeffffff
 8002fec:	11c1808c 	.word	0x11c1808c
 8002ff0:	eefefffc 	.word	0xeefefffc

08002ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0e9      	b.n	80031dc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003008:	4b76      	ldr	r3, [pc, #472]	; (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2207      	movs	r2, #7
 800300e:	4013      	ands	r3, r2
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d91e      	bls.n	8003054 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003016:	4b73      	ldr	r3, [pc, #460]	; (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2207      	movs	r2, #7
 800301c:	4393      	bics	r3, r2
 800301e:	0019      	movs	r1, r3
 8003020:	4b70      	ldr	r3, [pc, #448]	; (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003028:	f7fe ff42 	bl	8001eb0 <HAL_GetTick>
 800302c:	0003      	movs	r3, r0
 800302e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003030:	e009      	b.n	8003046 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003032:	f7fe ff3d 	bl	8001eb0 <HAL_GetTick>
 8003036:	0002      	movs	r2, r0
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	4a6a      	ldr	r2, [pc, #424]	; (80031e8 <HAL_RCC_ClockConfig+0x1f4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e0ca      	b.n	80031dc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003046:	4b67      	ldr	r3, [pc, #412]	; (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2207      	movs	r2, #7
 800304c:	4013      	ands	r3, r2
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d1ee      	bne.n	8003032 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2202      	movs	r2, #2
 800305a:	4013      	ands	r3, r2
 800305c:	d015      	beq.n	800308a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2204      	movs	r2, #4
 8003064:	4013      	ands	r3, r2
 8003066:	d006      	beq.n	8003076 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003068:	4b60      	ldr	r3, [pc, #384]	; (80031ec <HAL_RCC_ClockConfig+0x1f8>)
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	4b5f      	ldr	r3, [pc, #380]	; (80031ec <HAL_RCC_ClockConfig+0x1f8>)
 800306e:	21e0      	movs	r1, #224	; 0xe0
 8003070:	01c9      	lsls	r1, r1, #7
 8003072:	430a      	orrs	r2, r1
 8003074:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003076:	4b5d      	ldr	r3, [pc, #372]	; (80031ec <HAL_RCC_ClockConfig+0x1f8>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	4a5d      	ldr	r2, [pc, #372]	; (80031f0 <HAL_RCC_ClockConfig+0x1fc>)
 800307c:	4013      	ands	r3, r2
 800307e:	0019      	movs	r1, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	4b59      	ldr	r3, [pc, #356]	; (80031ec <HAL_RCC_ClockConfig+0x1f8>)
 8003086:	430a      	orrs	r2, r1
 8003088:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2201      	movs	r2, #1
 8003090:	4013      	ands	r3, r2
 8003092:	d057      	beq.n	8003144 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d107      	bne.n	80030ac <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800309c:	4b53      	ldr	r3, [pc, #332]	; (80031ec <HAL_RCC_ClockConfig+0x1f8>)
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	2380      	movs	r3, #128	; 0x80
 80030a2:	029b      	lsls	r3, r3, #10
 80030a4:	4013      	ands	r3, r2
 80030a6:	d12b      	bne.n	8003100 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e097      	b.n	80031dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d107      	bne.n	80030c4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b4:	4b4d      	ldr	r3, [pc, #308]	; (80031ec <HAL_RCC_ClockConfig+0x1f8>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	2380      	movs	r3, #128	; 0x80
 80030ba:	049b      	lsls	r3, r3, #18
 80030bc:	4013      	ands	r3, r2
 80030be:	d11f      	bne.n	8003100 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e08b      	b.n	80031dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d107      	bne.n	80030dc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030cc:	4b47      	ldr	r3, [pc, #284]	; (80031ec <HAL_RCC_ClockConfig+0x1f8>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	4013      	ands	r3, r2
 80030d6:	d113      	bne.n	8003100 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e07f      	b.n	80031dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d106      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030e4:	4b41      	ldr	r3, [pc, #260]	; (80031ec <HAL_RCC_ClockConfig+0x1f8>)
 80030e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e8:	2202      	movs	r2, #2
 80030ea:	4013      	ands	r3, r2
 80030ec:	d108      	bne.n	8003100 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e074      	b.n	80031dc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030f2:	4b3e      	ldr	r3, [pc, #248]	; (80031ec <HAL_RCC_ClockConfig+0x1f8>)
 80030f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f6:	2202      	movs	r2, #2
 80030f8:	4013      	ands	r3, r2
 80030fa:	d101      	bne.n	8003100 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e06d      	b.n	80031dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003100:	4b3a      	ldr	r3, [pc, #232]	; (80031ec <HAL_RCC_ClockConfig+0x1f8>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2207      	movs	r2, #7
 8003106:	4393      	bics	r3, r2
 8003108:	0019      	movs	r1, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	4b37      	ldr	r3, [pc, #220]	; (80031ec <HAL_RCC_ClockConfig+0x1f8>)
 8003110:	430a      	orrs	r2, r1
 8003112:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003114:	f7fe fecc 	bl	8001eb0 <HAL_GetTick>
 8003118:	0003      	movs	r3, r0
 800311a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311c:	e009      	b.n	8003132 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800311e:	f7fe fec7 	bl	8001eb0 <HAL_GetTick>
 8003122:	0002      	movs	r2, r0
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	4a2f      	ldr	r2, [pc, #188]	; (80031e8 <HAL_RCC_ClockConfig+0x1f4>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e054      	b.n	80031dc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003132:	4b2e      	ldr	r3, [pc, #184]	; (80031ec <HAL_RCC_ClockConfig+0x1f8>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2238      	movs	r2, #56	; 0x38
 8003138:	401a      	ands	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	429a      	cmp	r2, r3
 8003142:	d1ec      	bne.n	800311e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003144:	4b27      	ldr	r3, [pc, #156]	; (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2207      	movs	r2, #7
 800314a:	4013      	ands	r3, r2
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d21e      	bcs.n	8003190 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003152:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2207      	movs	r2, #7
 8003158:	4393      	bics	r3, r2
 800315a:	0019      	movs	r1, r3
 800315c:	4b21      	ldr	r3, [pc, #132]	; (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003164:	f7fe fea4 	bl	8001eb0 <HAL_GetTick>
 8003168:	0003      	movs	r3, r0
 800316a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800316c:	e009      	b.n	8003182 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800316e:	f7fe fe9f 	bl	8001eb0 <HAL_GetTick>
 8003172:	0002      	movs	r2, r0
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	4a1b      	ldr	r2, [pc, #108]	; (80031e8 <HAL_RCC_ClockConfig+0x1f4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e02c      	b.n	80031dc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003182:	4b18      	ldr	r3, [pc, #96]	; (80031e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2207      	movs	r2, #7
 8003188:	4013      	ands	r3, r2
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d1ee      	bne.n	800316e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2204      	movs	r2, #4
 8003196:	4013      	ands	r3, r2
 8003198:	d009      	beq.n	80031ae <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800319a:	4b14      	ldr	r3, [pc, #80]	; (80031ec <HAL_RCC_ClockConfig+0x1f8>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	4a15      	ldr	r2, [pc, #84]	; (80031f4 <HAL_RCC_ClockConfig+0x200>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	0019      	movs	r1, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	4b10      	ldr	r3, [pc, #64]	; (80031ec <HAL_RCC_ClockConfig+0x1f8>)
 80031aa:	430a      	orrs	r2, r1
 80031ac:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80031ae:	f000 f829 	bl	8003204 <HAL_RCC_GetSysClockFreq>
 80031b2:	0001      	movs	r1, r0
 80031b4:	4b0d      	ldr	r3, [pc, #52]	; (80031ec <HAL_RCC_ClockConfig+0x1f8>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	0a1b      	lsrs	r3, r3, #8
 80031ba:	220f      	movs	r2, #15
 80031bc:	401a      	ands	r2, r3
 80031be:	4b0e      	ldr	r3, [pc, #56]	; (80031f8 <HAL_RCC_ClockConfig+0x204>)
 80031c0:	0092      	lsls	r2, r2, #2
 80031c2:	58d3      	ldr	r3, [r2, r3]
 80031c4:	221f      	movs	r2, #31
 80031c6:	4013      	ands	r3, r2
 80031c8:	000a      	movs	r2, r1
 80031ca:	40da      	lsrs	r2, r3
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_RCC_ClockConfig+0x208>)
 80031ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <HAL_RCC_ClockConfig+0x20c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	0018      	movs	r0, r3
 80031d6:	f7fe fe0f 	bl	8001df8 <HAL_InitTick>
 80031da:	0003      	movs	r3, r0
}
 80031dc:	0018      	movs	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	b004      	add	sp, #16
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40022000 	.word	0x40022000
 80031e8:	00001388 	.word	0x00001388
 80031ec:	40021000 	.word	0x40021000
 80031f0:	fffff0ff 	.word	0xfffff0ff
 80031f4:	ffff8fff 	.word	0xffff8fff
 80031f8:	0800734c 	.word	0x0800734c
 80031fc:	20000400 	.word	0x20000400
 8003200:	20000404 	.word	0x20000404

08003204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800320a:	4b3c      	ldr	r3, [pc, #240]	; (80032fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2238      	movs	r2, #56	; 0x38
 8003210:	4013      	ands	r3, r2
 8003212:	d10f      	bne.n	8003234 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003214:	4b39      	ldr	r3, [pc, #228]	; (80032fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	0adb      	lsrs	r3, r3, #11
 800321a:	2207      	movs	r2, #7
 800321c:	4013      	ands	r3, r2
 800321e:	2201      	movs	r2, #1
 8003220:	409a      	lsls	r2, r3
 8003222:	0013      	movs	r3, r2
 8003224:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003226:	6839      	ldr	r1, [r7, #0]
 8003228:	4835      	ldr	r0, [pc, #212]	; (8003300 <HAL_RCC_GetSysClockFreq+0xfc>)
 800322a:	f7fc ff7b 	bl	8000124 <__udivsi3>
 800322e:	0003      	movs	r3, r0
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	e05d      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003234:	4b31      	ldr	r3, [pc, #196]	; (80032fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2238      	movs	r2, #56	; 0x38
 800323a:	4013      	ands	r3, r2
 800323c:	2b08      	cmp	r3, #8
 800323e:	d102      	bne.n	8003246 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003240:	4b30      	ldr	r3, [pc, #192]	; (8003304 <HAL_RCC_GetSysClockFreq+0x100>)
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	e054      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003246:	4b2d      	ldr	r3, [pc, #180]	; (80032fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2238      	movs	r2, #56	; 0x38
 800324c:	4013      	ands	r3, r2
 800324e:	2b10      	cmp	r3, #16
 8003250:	d138      	bne.n	80032c4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003252:	4b2a      	ldr	r3, [pc, #168]	; (80032fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	2203      	movs	r2, #3
 8003258:	4013      	ands	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800325c:	4b27      	ldr	r3, [pc, #156]	; (80032fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	091b      	lsrs	r3, r3, #4
 8003262:	2207      	movs	r2, #7
 8003264:	4013      	ands	r3, r2
 8003266:	3301      	adds	r3, #1
 8003268:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2b03      	cmp	r3, #3
 800326e:	d10d      	bne.n	800328c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	4824      	ldr	r0, [pc, #144]	; (8003304 <HAL_RCC_GetSysClockFreq+0x100>)
 8003274:	f7fc ff56 	bl	8000124 <__udivsi3>
 8003278:	0003      	movs	r3, r0
 800327a:	0019      	movs	r1, r3
 800327c:	4b1f      	ldr	r3, [pc, #124]	; (80032fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	0a1b      	lsrs	r3, r3, #8
 8003282:	227f      	movs	r2, #127	; 0x7f
 8003284:	4013      	ands	r3, r2
 8003286:	434b      	muls	r3, r1
 8003288:	617b      	str	r3, [r7, #20]
        break;
 800328a:	e00d      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800328c:	68b9      	ldr	r1, [r7, #8]
 800328e:	481c      	ldr	r0, [pc, #112]	; (8003300 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003290:	f7fc ff48 	bl	8000124 <__udivsi3>
 8003294:	0003      	movs	r3, r0
 8003296:	0019      	movs	r1, r3
 8003298:	4b18      	ldr	r3, [pc, #96]	; (80032fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	0a1b      	lsrs	r3, r3, #8
 800329e:	227f      	movs	r2, #127	; 0x7f
 80032a0:	4013      	ands	r3, r2
 80032a2:	434b      	muls	r3, r1
 80032a4:	617b      	str	r3, [r7, #20]
        break;
 80032a6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80032a8:	4b14      	ldr	r3, [pc, #80]	; (80032fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	0f5b      	lsrs	r3, r3, #29
 80032ae:	2207      	movs	r2, #7
 80032b0:	4013      	ands	r3, r2
 80032b2:	3301      	adds	r3, #1
 80032b4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	6978      	ldr	r0, [r7, #20]
 80032ba:	f7fc ff33 	bl	8000124 <__udivsi3>
 80032be:	0003      	movs	r3, r0
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	e015      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80032c4:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2238      	movs	r2, #56	; 0x38
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	d103      	bne.n	80032d8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80032d0:	2380      	movs	r3, #128	; 0x80
 80032d2:	021b      	lsls	r3, r3, #8
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	e00b      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80032d8:	4b08      	ldr	r3, [pc, #32]	; (80032fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2238      	movs	r2, #56	; 0x38
 80032de:	4013      	ands	r3, r2
 80032e0:	2b18      	cmp	r3, #24
 80032e2:	d103      	bne.n	80032ec <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80032e4:	23fa      	movs	r3, #250	; 0xfa
 80032e6:	01db      	lsls	r3, r3, #7
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	e001      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80032f0:	693b      	ldr	r3, [r7, #16]
}
 80032f2:	0018      	movs	r0, r3
 80032f4:	46bd      	mov	sp, r7
 80032f6:	b006      	add	sp, #24
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	40021000 	.word	0x40021000
 8003300:	00f42400 	.word	0x00f42400
 8003304:	007a1200 	.word	0x007a1200

08003308 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800330c:	4b02      	ldr	r3, [pc, #8]	; (8003318 <HAL_RCC_GetHCLKFreq+0x10>)
 800330e:	681b      	ldr	r3, [r3, #0]
}
 8003310:	0018      	movs	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	20000400 	.word	0x20000400

0800331c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800331c:	b5b0      	push	{r4, r5, r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003320:	f7ff fff2 	bl	8003308 <HAL_RCC_GetHCLKFreq>
 8003324:	0004      	movs	r4, r0
 8003326:	f7ff fb3f 	bl	80029a8 <LL_RCC_GetAPB1Prescaler>
 800332a:	0003      	movs	r3, r0
 800332c:	0b1a      	lsrs	r2, r3, #12
 800332e:	4b05      	ldr	r3, [pc, #20]	; (8003344 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003330:	0092      	lsls	r2, r2, #2
 8003332:	58d3      	ldr	r3, [r2, r3]
 8003334:	221f      	movs	r2, #31
 8003336:	4013      	ands	r3, r2
 8003338:	40dc      	lsrs	r4, r3
 800333a:	0023      	movs	r3, r4
}
 800333c:	0018      	movs	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	bdb0      	pop	{r4, r5, r7, pc}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	0800738c 	.word	0x0800738c

08003348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003350:	2313      	movs	r3, #19
 8003352:	18fb      	adds	r3, r7, r3
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003358:	2312      	movs	r3, #18
 800335a:	18fb      	adds	r3, r7, r3
 800335c:	2200      	movs	r2, #0
 800335e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	2380      	movs	r3, #128	; 0x80
 8003366:	029b      	lsls	r3, r3, #10
 8003368:	4013      	ands	r3, r2
 800336a:	d100      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800336c:	e0a3      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800336e:	2011      	movs	r0, #17
 8003370:	183b      	adds	r3, r7, r0
 8003372:	2200      	movs	r2, #0
 8003374:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003376:	4bb0      	ldr	r3, [pc, #704]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003378:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	055b      	lsls	r3, r3, #21
 800337e:	4013      	ands	r3, r2
 8003380:	d110      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003382:	4bad      	ldr	r3, [pc, #692]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003384:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003386:	4bac      	ldr	r3, [pc, #688]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003388:	2180      	movs	r1, #128	; 0x80
 800338a:	0549      	lsls	r1, r1, #21
 800338c:	430a      	orrs	r2, r1
 800338e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003390:	4ba9      	ldr	r3, [pc, #676]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003392:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003394:	2380      	movs	r3, #128	; 0x80
 8003396:	055b      	lsls	r3, r3, #21
 8003398:	4013      	ands	r3, r2
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800339e:	183b      	adds	r3, r7, r0
 80033a0:	2201      	movs	r2, #1
 80033a2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033a4:	4ba5      	ldr	r3, [pc, #660]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	4ba4      	ldr	r3, [pc, #656]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033aa:	2180      	movs	r1, #128	; 0x80
 80033ac:	0049      	lsls	r1, r1, #1
 80033ae:	430a      	orrs	r2, r1
 80033b0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033b2:	f7fe fd7d 	bl	8001eb0 <HAL_GetTick>
 80033b6:	0003      	movs	r3, r0
 80033b8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033ba:	e00b      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033bc:	f7fe fd78 	bl	8001eb0 <HAL_GetTick>
 80033c0:	0002      	movs	r2, r0
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d904      	bls.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80033ca:	2313      	movs	r3, #19
 80033cc:	18fb      	adds	r3, r7, r3
 80033ce:	2203      	movs	r2, #3
 80033d0:	701a      	strb	r2, [r3, #0]
        break;
 80033d2:	e005      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033d4:	4b99      	ldr	r3, [pc, #612]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	2380      	movs	r3, #128	; 0x80
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	4013      	ands	r3, r2
 80033de:	d0ed      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80033e0:	2313      	movs	r3, #19
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d154      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033ea:	4b93      	ldr	r3, [pc, #588]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033ee:	23c0      	movs	r3, #192	; 0xc0
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4013      	ands	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d019      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	429a      	cmp	r2, r3
 8003404:	d014      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003406:	4b8c      	ldr	r3, [pc, #560]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340a:	4a8d      	ldr	r2, [pc, #564]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800340c:	4013      	ands	r3, r2
 800340e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003410:	4b89      	ldr	r3, [pc, #548]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003412:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003414:	4b88      	ldr	r3, [pc, #544]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003416:	2180      	movs	r1, #128	; 0x80
 8003418:	0249      	lsls	r1, r1, #9
 800341a:	430a      	orrs	r2, r1
 800341c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800341e:	4b86      	ldr	r3, [pc, #536]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003420:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003422:	4b85      	ldr	r3, [pc, #532]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003424:	4987      	ldr	r1, [pc, #540]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003426:	400a      	ands	r2, r1
 8003428:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800342a:	4b83      	ldr	r3, [pc, #524]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2201      	movs	r2, #1
 8003434:	4013      	ands	r3, r2
 8003436:	d016      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7fe fd3a 	bl	8001eb0 <HAL_GetTick>
 800343c:	0003      	movs	r3, r0
 800343e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003440:	e00c      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003442:	f7fe fd35 	bl	8001eb0 <HAL_GetTick>
 8003446:	0002      	movs	r2, r0
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	4a7e      	ldr	r2, [pc, #504]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d904      	bls.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003452:	2313      	movs	r3, #19
 8003454:	18fb      	adds	r3, r7, r3
 8003456:	2203      	movs	r2, #3
 8003458:	701a      	strb	r2, [r3, #0]
            break;
 800345a:	e004      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800345c:	4b76      	ldr	r3, [pc, #472]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800345e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003460:	2202      	movs	r2, #2
 8003462:	4013      	ands	r3, r2
 8003464:	d0ed      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003466:	2313      	movs	r3, #19
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10a      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003470:	4b71      	ldr	r3, [pc, #452]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003474:	4a72      	ldr	r2, [pc, #456]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003476:	4013      	ands	r3, r2
 8003478:	0019      	movs	r1, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800347e:	4b6e      	ldr	r3, [pc, #440]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003480:	430a      	orrs	r2, r1
 8003482:	65da      	str	r2, [r3, #92]	; 0x5c
 8003484:	e00c      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003486:	2312      	movs	r3, #18
 8003488:	18fb      	adds	r3, r7, r3
 800348a:	2213      	movs	r2, #19
 800348c:	18ba      	adds	r2, r7, r2
 800348e:	7812      	ldrb	r2, [r2, #0]
 8003490:	701a      	strb	r2, [r3, #0]
 8003492:	e005      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003494:	2312      	movs	r3, #18
 8003496:	18fb      	adds	r3, r7, r3
 8003498:	2213      	movs	r2, #19
 800349a:	18ba      	adds	r2, r7, r2
 800349c:	7812      	ldrb	r2, [r2, #0]
 800349e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034a0:	2311      	movs	r3, #17
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d105      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034aa:	4b63      	ldr	r3, [pc, #396]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ae:	4b62      	ldr	r3, [pc, #392]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034b0:	4966      	ldr	r1, [pc, #408]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034b2:	400a      	ands	r2, r1
 80034b4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2201      	movs	r2, #1
 80034bc:	4013      	ands	r3, r2
 80034be:	d009      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034c0:	4b5d      	ldr	r3, [pc, #372]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c4:	2203      	movs	r2, #3
 80034c6:	4393      	bics	r3, r2
 80034c8:	0019      	movs	r1, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	4b5a      	ldr	r3, [pc, #360]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034d0:	430a      	orrs	r2, r1
 80034d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2202      	movs	r2, #2
 80034da:	4013      	ands	r3, r2
 80034dc:	d009      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034de:	4b56      	ldr	r3, [pc, #344]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e2:	220c      	movs	r2, #12
 80034e4:	4393      	bics	r3, r2
 80034e6:	0019      	movs	r1, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	4b52      	ldr	r3, [pc, #328]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034ee:	430a      	orrs	r2, r1
 80034f0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2204      	movs	r2, #4
 80034f8:	4013      	ands	r3, r2
 80034fa:	d009      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034fc:	4b4e      	ldr	r3, [pc, #312]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003500:	2230      	movs	r2, #48	; 0x30
 8003502:	4393      	bics	r3, r2
 8003504:	0019      	movs	r1, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	4b4b      	ldr	r3, [pc, #300]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800350c:	430a      	orrs	r2, r1
 800350e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2220      	movs	r2, #32
 8003516:	4013      	ands	r3, r2
 8003518:	d009      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800351a:	4b47      	ldr	r3, [pc, #284]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800351c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351e:	4a4c      	ldr	r2, [pc, #304]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003520:	4013      	ands	r3, r2
 8003522:	0019      	movs	r1, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	4b43      	ldr	r3, [pc, #268]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800352a:	430a      	orrs	r2, r1
 800352c:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2240      	movs	r2, #64	; 0x40
 8003534:	4013      	ands	r3, r2
 8003536:	d009      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003538:	4b3f      	ldr	r3, [pc, #252]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800353a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353c:	4a45      	ldr	r2, [pc, #276]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800353e:	4013      	ands	r3, r2
 8003540:	0019      	movs	r1, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	4b3c      	ldr	r3, [pc, #240]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003548:	430a      	orrs	r2, r1
 800354a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	2380      	movs	r3, #128	; 0x80
 8003552:	01db      	lsls	r3, r3, #7
 8003554:	4013      	ands	r3, r2
 8003556:	d015      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003558:	4b37      	ldr	r3, [pc, #220]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800355a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	0899      	lsrs	r1, r3, #2
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1a      	ldr	r2, [r3, #32]
 8003564:	4b34      	ldr	r3, [pc, #208]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003566:	430a      	orrs	r2, r1
 8003568:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1a      	ldr	r2, [r3, #32]
 800356e:	2380      	movs	r3, #128	; 0x80
 8003570:	05db      	lsls	r3, r3, #23
 8003572:	429a      	cmp	r2, r3
 8003574:	d106      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003576:	4b30      	ldr	r3, [pc, #192]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	4b2f      	ldr	r3, [pc, #188]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800357c:	2180      	movs	r1, #128	; 0x80
 800357e:	0249      	lsls	r1, r1, #9
 8003580:	430a      	orrs	r2, r1
 8003582:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	2380      	movs	r3, #128	; 0x80
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	4013      	ands	r3, r2
 800358e:	d014      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003590:	4b29      	ldr	r3, [pc, #164]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003594:	2203      	movs	r2, #3
 8003596:	4393      	bics	r3, r2
 8003598:	0019      	movs	r1, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699a      	ldr	r2, [r3, #24]
 800359e:	4b26      	ldr	r3, [pc, #152]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035a0:	430a      	orrs	r2, r1
 80035a2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d106      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80035ac:	4b22      	ldr	r3, [pc, #136]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	4b21      	ldr	r3, [pc, #132]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035b2:	2180      	movs	r1, #128	; 0x80
 80035b4:	0249      	lsls	r1, r1, #9
 80035b6:	430a      	orrs	r2, r1
 80035b8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	2380      	movs	r3, #128	; 0x80
 80035c0:	019b      	lsls	r3, r3, #6
 80035c2:	4013      	ands	r3, r2
 80035c4:	d014      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80035c6:	4b1c      	ldr	r3, [pc, #112]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ca:	220c      	movs	r2, #12
 80035cc:	4393      	bics	r3, r2
 80035ce:	0019      	movs	r1, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	69da      	ldr	r2, [r3, #28]
 80035d4:	4b18      	ldr	r3, [pc, #96]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035d6:	430a      	orrs	r2, r1
 80035d8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d106      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80035e2:	4b15      	ldr	r3, [pc, #84]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	4b14      	ldr	r3, [pc, #80]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035e8:	2180      	movs	r1, #128	; 0x80
 80035ea:	0249      	lsls	r1, r1, #9
 80035ec:	430a      	orrs	r2, r1
 80035ee:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	2380      	movs	r3, #128	; 0x80
 80035f6:	045b      	lsls	r3, r3, #17
 80035f8:	4013      	ands	r3, r2
 80035fa:	d016      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035fc:	4b0e      	ldr	r3, [pc, #56]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003600:	4a13      	ldr	r2, [pc, #76]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003602:	4013      	ands	r3, r2
 8003604:	0019      	movs	r1, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800360a:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800360c:	430a      	orrs	r2, r1
 800360e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003614:	2380      	movs	r3, #128	; 0x80
 8003616:	019b      	lsls	r3, r3, #6
 8003618:	429a      	cmp	r2, r3
 800361a:	d106      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800361c:	4b06      	ldr	r3, [pc, #24]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	4b05      	ldr	r3, [pc, #20]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003622:	2180      	movs	r1, #128	; 0x80
 8003624:	0449      	lsls	r1, r1, #17
 8003626:	430a      	orrs	r2, r1
 8003628:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800362a:	2312      	movs	r3, #18
 800362c:	18fb      	adds	r3, r7, r3
 800362e:	781b      	ldrb	r3, [r3, #0]
}
 8003630:	0018      	movs	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	b006      	add	sp, #24
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40021000 	.word	0x40021000
 800363c:	40007000 	.word	0x40007000
 8003640:	fffffcff 	.word	0xfffffcff
 8003644:	fffeffff 	.word	0xfffeffff
 8003648:	00001388 	.word	0x00001388
 800364c:	efffffff 	.word	0xefffffff
 8003650:	ffffcfff 	.word	0xffffcfff
 8003654:	ffff3fff 	.word	0xffff3fff

08003658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e04a      	b.n	8003700 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	223d      	movs	r2, #61	; 0x3d
 800366e:	5c9b      	ldrb	r3, [r3, r2]
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d107      	bne.n	8003686 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	223c      	movs	r2, #60	; 0x3c
 800367a:	2100      	movs	r1, #0
 800367c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	0018      	movs	r0, r3
 8003682:	f7fe f9d3 	bl	8001a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	223d      	movs	r2, #61	; 0x3d
 800368a:	2102      	movs	r1, #2
 800368c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3304      	adds	r3, #4
 8003696:	0019      	movs	r1, r3
 8003698:	0010      	movs	r0, r2
 800369a:	f000 fae7 	bl	8003c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2248      	movs	r2, #72	; 0x48
 80036a2:	2101      	movs	r1, #1
 80036a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	223e      	movs	r2, #62	; 0x3e
 80036aa:	2101      	movs	r1, #1
 80036ac:	5499      	strb	r1, [r3, r2]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	223f      	movs	r2, #63	; 0x3f
 80036b2:	2101      	movs	r1, #1
 80036b4:	5499      	strb	r1, [r3, r2]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2240      	movs	r2, #64	; 0x40
 80036ba:	2101      	movs	r1, #1
 80036bc:	5499      	strb	r1, [r3, r2]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2241      	movs	r2, #65	; 0x41
 80036c2:	2101      	movs	r1, #1
 80036c4:	5499      	strb	r1, [r3, r2]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2242      	movs	r2, #66	; 0x42
 80036ca:	2101      	movs	r1, #1
 80036cc:	5499      	strb	r1, [r3, r2]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2243      	movs	r2, #67	; 0x43
 80036d2:	2101      	movs	r1, #1
 80036d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2244      	movs	r2, #68	; 0x44
 80036da:	2101      	movs	r1, #1
 80036dc:	5499      	strb	r1, [r3, r2]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2245      	movs	r2, #69	; 0x45
 80036e2:	2101      	movs	r1, #1
 80036e4:	5499      	strb	r1, [r3, r2]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2246      	movs	r2, #70	; 0x46
 80036ea:	2101      	movs	r1, #1
 80036ec:	5499      	strb	r1, [r3, r2]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2247      	movs	r2, #71	; 0x47
 80036f2:	2101      	movs	r1, #1
 80036f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	223d      	movs	r2, #61	; 0x3d
 80036fa:	2101      	movs	r1, #1
 80036fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	0018      	movs	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	b002      	add	sp, #8
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	223d      	movs	r2, #61	; 0x3d
 8003714:	5c9b      	ldrb	r3, [r3, r2]
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b01      	cmp	r3, #1
 800371a:	d001      	beq.n	8003720 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e041      	b.n	80037a4 <HAL_TIM_Base_Start_IT+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	223d      	movs	r2, #61	; 0x3d
 8003724:	2102      	movs	r1, #2
 8003726:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2101      	movs	r1, #1
 8003734:	430a      	orrs	r2, r1
 8003736:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a1b      	ldr	r2, [pc, #108]	; (80037ac <HAL_TIM_Base_Start_IT+0xa4>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d00e      	beq.n	8003760 <HAL_TIM_Base_Start_IT+0x58>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1a      	ldr	r2, [pc, #104]	; (80037b0 <HAL_TIM_Base_Start_IT+0xa8>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d009      	beq.n	8003760 <HAL_TIM_Base_Start_IT+0x58>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a18      	ldr	r2, [pc, #96]	; (80037b4 <HAL_TIM_Base_Start_IT+0xac>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d004      	beq.n	8003760 <HAL_TIM_Base_Start_IT+0x58>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a17      	ldr	r2, [pc, #92]	; (80037b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d116      	bne.n	800378e <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	4a15      	ldr	r2, [pc, #84]	; (80037bc <HAL_TIM_Base_Start_IT+0xb4>)
 8003768:	4013      	ands	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2b06      	cmp	r3, #6
 8003770:	d016      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x98>
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	2380      	movs	r3, #128	; 0x80
 8003776:	025b      	lsls	r3, r3, #9
 8003778:	429a      	cmp	r2, r3
 800377a:	d011      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x98>
    {
      __HAL_TIM_ENABLE(htim);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2101      	movs	r1, #1
 8003788:	430a      	orrs	r2, r1
 800378a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800378c:	e008      	b.n	80037a0 <HAL_TIM_Base_Start_IT+0x98>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2101      	movs	r1, #1
 800379a:	430a      	orrs	r2, r1
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	e000      	b.n	80037a2 <HAL_TIM_Base_Start_IT+0x9a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	0018      	movs	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	b004      	add	sp, #16
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40012c00 	.word	0x40012c00
 80037b0:	40000400 	.word	0x40000400
 80037b4:	40000800 	.word	0x40000800
 80037b8:	40014000 	.word	0x40014000
 80037bc:	00010007 	.word	0x00010007

080037c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2101      	movs	r1, #1
 80037d4:	438a      	bics	r2, r1
 80037d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	4a0d      	ldr	r2, [pc, #52]	; (8003814 <HAL_TIM_Base_Stop_IT+0x54>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	d10d      	bne.n	8003800 <HAL_TIM_Base_Stop_IT+0x40>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	4a0b      	ldr	r2, [pc, #44]	; (8003818 <HAL_TIM_Base_Stop_IT+0x58>)
 80037ec:	4013      	ands	r3, r2
 80037ee:	d107      	bne.n	8003800 <HAL_TIM_Base_Stop_IT+0x40>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2101      	movs	r1, #1
 80037fc:	438a      	bics	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	223d      	movs	r2, #61	; 0x3d
 8003804:	2101      	movs	r1, #1
 8003806:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	0018      	movs	r0, r3
 800380c:	46bd      	mov	sp, r7
 800380e:	b002      	add	sp, #8
 8003810:	bd80      	pop	{r7, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	00001111 	.word	0x00001111
 8003818:	00000444 	.word	0x00000444

0800381c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	2202      	movs	r2, #2
 800382c:	4013      	ands	r3, r2
 800382e:	2b02      	cmp	r3, #2
 8003830:	d124      	bne.n	800387c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	2202      	movs	r2, #2
 800383a:	4013      	ands	r3, r2
 800383c:	2b02      	cmp	r3, #2
 800383e:	d11d      	bne.n	800387c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2203      	movs	r2, #3
 8003846:	4252      	negs	r2, r2
 8003848:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2203      	movs	r2, #3
 8003858:	4013      	ands	r3, r2
 800385a:	d004      	beq.n	8003866 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	0018      	movs	r0, r3
 8003860:	f000 f9ec 	bl	8003c3c <HAL_TIM_IC_CaptureCallback>
 8003864:	e007      	b.n	8003876 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	0018      	movs	r0, r3
 800386a:	f000 f9df 	bl	8003c2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	0018      	movs	r0, r3
 8003872:	f000 f9eb 	bl	8003c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	2204      	movs	r2, #4
 8003884:	4013      	ands	r3, r2
 8003886:	2b04      	cmp	r3, #4
 8003888:	d125      	bne.n	80038d6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	2204      	movs	r2, #4
 8003892:	4013      	ands	r3, r2
 8003894:	2b04      	cmp	r3, #4
 8003896:	d11e      	bne.n	80038d6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2205      	movs	r2, #5
 800389e:	4252      	negs	r2, r2
 80038a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2202      	movs	r2, #2
 80038a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699a      	ldr	r2, [r3, #24]
 80038ae:	23c0      	movs	r3, #192	; 0xc0
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4013      	ands	r3, r2
 80038b4:	d004      	beq.n	80038c0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	0018      	movs	r0, r3
 80038ba:	f000 f9bf 	bl	8003c3c <HAL_TIM_IC_CaptureCallback>
 80038be:	e007      	b.n	80038d0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	0018      	movs	r0, r3
 80038c4:	f000 f9b2 	bl	8003c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	0018      	movs	r0, r3
 80038cc:	f000 f9be 	bl	8003c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	2208      	movs	r2, #8
 80038de:	4013      	ands	r3, r2
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d124      	bne.n	800392e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	2208      	movs	r2, #8
 80038ec:	4013      	ands	r3, r2
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d11d      	bne.n	800392e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2209      	movs	r2, #9
 80038f8:	4252      	negs	r2, r2
 80038fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2204      	movs	r2, #4
 8003900:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	2203      	movs	r2, #3
 800390a:	4013      	ands	r3, r2
 800390c:	d004      	beq.n	8003918 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	0018      	movs	r0, r3
 8003912:	f000 f993 	bl	8003c3c <HAL_TIM_IC_CaptureCallback>
 8003916:	e007      	b.n	8003928 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	0018      	movs	r0, r3
 800391c:	f000 f986 	bl	8003c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	0018      	movs	r0, r3
 8003924:	f000 f992 	bl	8003c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	2210      	movs	r2, #16
 8003936:	4013      	ands	r3, r2
 8003938:	2b10      	cmp	r3, #16
 800393a:	d125      	bne.n	8003988 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	2210      	movs	r2, #16
 8003944:	4013      	ands	r3, r2
 8003946:	2b10      	cmp	r3, #16
 8003948:	d11e      	bne.n	8003988 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2211      	movs	r2, #17
 8003950:	4252      	negs	r2, r2
 8003952:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2208      	movs	r2, #8
 8003958:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69da      	ldr	r2, [r3, #28]
 8003960:	23c0      	movs	r3, #192	; 0xc0
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4013      	ands	r3, r2
 8003966:	d004      	beq.n	8003972 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	0018      	movs	r0, r3
 800396c:	f000 f966 	bl	8003c3c <HAL_TIM_IC_CaptureCallback>
 8003970:	e007      	b.n	8003982 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	0018      	movs	r0, r3
 8003976:	f000 f959 	bl	8003c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	0018      	movs	r0, r3
 800397e:	f000 f965 	bl	8003c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	2201      	movs	r2, #1
 8003990:	4013      	ands	r3, r2
 8003992:	2b01      	cmp	r3, #1
 8003994:	d10f      	bne.n	80039b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	2201      	movs	r2, #1
 800399e:	4013      	ands	r3, r2
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d108      	bne.n	80039b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2202      	movs	r2, #2
 80039aa:	4252      	negs	r2, r2
 80039ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	0018      	movs	r0, r3
 80039b2:	f7fd fded 	bl	8001590 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	2280      	movs	r2, #128	; 0x80
 80039be:	4013      	ands	r3, r2
 80039c0:	2b80      	cmp	r3, #128	; 0x80
 80039c2:	d10f      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	2280      	movs	r2, #128	; 0x80
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b80      	cmp	r3, #128	; 0x80
 80039d0:	d108      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2281      	movs	r2, #129	; 0x81
 80039d8:	4252      	negs	r2, r2
 80039da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	0018      	movs	r0, r3
 80039e0:	f000 fad8 	bl	8003f94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691a      	ldr	r2, [r3, #16]
 80039ea:	2380      	movs	r3, #128	; 0x80
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	401a      	ands	r2, r3
 80039f0:	2380      	movs	r3, #128	; 0x80
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d10e      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	2280      	movs	r2, #128	; 0x80
 8003a00:	4013      	ands	r3, r2
 8003a02:	2b80      	cmp	r3, #128	; 0x80
 8003a04:	d107      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a1c      	ldr	r2, [pc, #112]	; (8003a7c <HAL_TIM_IRQHandler+0x260>)
 8003a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	0018      	movs	r0, r3
 8003a12:	f000 fac7 	bl	8003fa4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	2240      	movs	r2, #64	; 0x40
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b40      	cmp	r3, #64	; 0x40
 8003a22:	d10f      	bne.n	8003a44 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	2240      	movs	r2, #64	; 0x40
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b40      	cmp	r3, #64	; 0x40
 8003a30:	d108      	bne.n	8003a44 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2241      	movs	r2, #65	; 0x41
 8003a38:	4252      	negs	r2, r2
 8003a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f000 f90c 	bl	8003c5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b20      	cmp	r3, #32
 8003a50:	d10f      	bne.n	8003a72 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d108      	bne.n	8003a72 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2221      	movs	r2, #33	; 0x21
 8003a66:	4252      	negs	r2, r2
 8003a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f000 fa89 	bl	8003f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	46bd      	mov	sp, r7
 8003a76:	b002      	add	sp, #8
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	fffffeff 	.word	0xfffffeff

08003a80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a8a:	230f      	movs	r3, #15
 8003a8c:	18fb      	adds	r3, r7, r3
 8003a8e:	2200      	movs	r2, #0
 8003a90:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	223c      	movs	r2, #60	; 0x3c
 8003a96:	5c9b      	ldrb	r3, [r3, r2]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_TIM_ConfigClockSource+0x20>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e0bc      	b.n	8003c1a <HAL_TIM_ConfigClockSource+0x19a>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	223c      	movs	r2, #60	; 0x3c
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	223d      	movs	r2, #61	; 0x3d
 8003aac:	2102      	movs	r1, #2
 8003aae:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4a5a      	ldr	r2, [pc, #360]	; (8003c24 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	4a59      	ldr	r2, [pc, #356]	; (8003c28 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2280      	movs	r2, #128	; 0x80
 8003ad6:	0192      	lsls	r2, r2, #6
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d040      	beq.n	8003b5e <HAL_TIM_ConfigClockSource+0xde>
 8003adc:	2280      	movs	r2, #128	; 0x80
 8003ade:	0192      	lsls	r2, r2, #6
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d900      	bls.n	8003ae6 <HAL_TIM_ConfigClockSource+0x66>
 8003ae4:	e088      	b.n	8003bf8 <HAL_TIM_ConfigClockSource+0x178>
 8003ae6:	2280      	movs	r2, #128	; 0x80
 8003ae8:	0152      	lsls	r2, r2, #5
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d100      	bne.n	8003af0 <HAL_TIM_ConfigClockSource+0x70>
 8003aee:	e088      	b.n	8003c02 <HAL_TIM_ConfigClockSource+0x182>
 8003af0:	2280      	movs	r2, #128	; 0x80
 8003af2:	0152      	lsls	r2, r2, #5
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d900      	bls.n	8003afa <HAL_TIM_ConfigClockSource+0x7a>
 8003af8:	e07e      	b.n	8003bf8 <HAL_TIM_ConfigClockSource+0x178>
 8003afa:	2b70      	cmp	r3, #112	; 0x70
 8003afc:	d018      	beq.n	8003b30 <HAL_TIM_ConfigClockSource+0xb0>
 8003afe:	d900      	bls.n	8003b02 <HAL_TIM_ConfigClockSource+0x82>
 8003b00:	e07a      	b.n	8003bf8 <HAL_TIM_ConfigClockSource+0x178>
 8003b02:	2b60      	cmp	r3, #96	; 0x60
 8003b04:	d04f      	beq.n	8003ba6 <HAL_TIM_ConfigClockSource+0x126>
 8003b06:	d900      	bls.n	8003b0a <HAL_TIM_ConfigClockSource+0x8a>
 8003b08:	e076      	b.n	8003bf8 <HAL_TIM_ConfigClockSource+0x178>
 8003b0a:	2b50      	cmp	r3, #80	; 0x50
 8003b0c:	d03b      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0x106>
 8003b0e:	d900      	bls.n	8003b12 <HAL_TIM_ConfigClockSource+0x92>
 8003b10:	e072      	b.n	8003bf8 <HAL_TIM_ConfigClockSource+0x178>
 8003b12:	2b40      	cmp	r3, #64	; 0x40
 8003b14:	d057      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0x146>
 8003b16:	d900      	bls.n	8003b1a <HAL_TIM_ConfigClockSource+0x9a>
 8003b18:	e06e      	b.n	8003bf8 <HAL_TIM_ConfigClockSource+0x178>
 8003b1a:	2b30      	cmp	r3, #48	; 0x30
 8003b1c:	d063      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0x166>
 8003b1e:	d86b      	bhi.n	8003bf8 <HAL_TIM_ConfigClockSource+0x178>
 8003b20:	2b20      	cmp	r3, #32
 8003b22:	d060      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0x166>
 8003b24:	d868      	bhi.n	8003bf8 <HAL_TIM_ConfigClockSource+0x178>
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d05d      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0x166>
 8003b2a:	2b10      	cmp	r3, #16
 8003b2c:	d05b      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0x166>
 8003b2e:	e063      	b.n	8003bf8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	6899      	ldr	r1, [r3, #8]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f000 f990 	bl	8003e64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2277      	movs	r2, #119	; 0x77
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	609a      	str	r2, [r3, #8]
      break;
 8003b5c:	e052      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6818      	ldr	r0, [r3, #0]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	6899      	ldr	r1, [r3, #8]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f000 f979 	bl	8003e64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2180      	movs	r1, #128	; 0x80
 8003b7e:	01c9      	lsls	r1, r1, #7
 8003b80:	430a      	orrs	r2, r1
 8003b82:	609a      	str	r2, [r3, #8]
      break;
 8003b84:	e03e      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6859      	ldr	r1, [r3, #4]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	001a      	movs	r2, r3
 8003b94:	f000 f8ea 	bl	8003d6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2150      	movs	r1, #80	; 0x50
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f000 f944 	bl	8003e2c <TIM_ITRx_SetConfig>
      break;
 8003ba4:	e02e      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6818      	ldr	r0, [r3, #0]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	6859      	ldr	r1, [r3, #4]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	001a      	movs	r2, r3
 8003bb4:	f000 f908 	bl	8003dc8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2160      	movs	r1, #96	; 0x60
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f000 f934 	bl	8003e2c <TIM_ITRx_SetConfig>
      break;
 8003bc4:	e01e      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6818      	ldr	r0, [r3, #0]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	6859      	ldr	r1, [r3, #4]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	001a      	movs	r2, r3
 8003bd4:	f000 f8ca 	bl	8003d6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2140      	movs	r1, #64	; 0x40
 8003bde:	0018      	movs	r0, r3
 8003be0:	f000 f924 	bl	8003e2c <TIM_ITRx_SetConfig>
      break;
 8003be4:	e00e      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	0019      	movs	r1, r3
 8003bf0:	0010      	movs	r0, r2
 8003bf2:	f000 f91b 	bl	8003e2c <TIM_ITRx_SetConfig>
      break;
 8003bf6:	e005      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003bf8:	230f      	movs	r3, #15
 8003bfa:	18fb      	adds	r3, r7, r3
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	701a      	strb	r2, [r3, #0]
      break;
 8003c00:	e000      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003c02:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	223d      	movs	r2, #61	; 0x3d
 8003c08:	2101      	movs	r1, #1
 8003c0a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	223c      	movs	r2, #60	; 0x3c
 8003c10:	2100      	movs	r1, #0
 8003c12:	5499      	strb	r1, [r3, r2]

  return status;
 8003c14:	230f      	movs	r3, #15
 8003c16:	18fb      	adds	r3, r7, r3
 8003c18:	781b      	ldrb	r3, [r3, #0]
}
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	b004      	add	sp, #16
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	ffceff88 	.word	0xffceff88
 8003c28:	ffff00ff 	.word	0xffff00ff

08003c2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c34:	46c0      	nop			; (mov r8, r8)
 8003c36:	46bd      	mov	sp, r7
 8003c38:	b002      	add	sp, #8
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c44:	46c0      	nop			; (mov r8, r8)
 8003c46:	46bd      	mov	sp, r7
 8003c48:	b002      	add	sp, #8
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c54:	46c0      	nop			; (mov r8, r8)
 8003c56:	46bd      	mov	sp, r7
 8003c58:	b002      	add	sp, #8
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c64:	46c0      	nop			; (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b002      	add	sp, #8
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a33      	ldr	r2, [pc, #204]	; (8003d4c <TIM_Base_SetConfig+0xe0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d007      	beq.n	8003c94 <TIM_Base_SetConfig+0x28>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a32      	ldr	r2, [pc, #200]	; (8003d50 <TIM_Base_SetConfig+0xe4>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d003      	beq.n	8003c94 <TIM_Base_SetConfig+0x28>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a31      	ldr	r2, [pc, #196]	; (8003d54 <TIM_Base_SetConfig+0xe8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d108      	bne.n	8003ca6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2270      	movs	r2, #112	; 0x70
 8003c98:	4393      	bics	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a28      	ldr	r2, [pc, #160]	; (8003d4c <TIM_Base_SetConfig+0xe0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d017      	beq.n	8003cde <TIM_Base_SetConfig+0x72>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a27      	ldr	r2, [pc, #156]	; (8003d50 <TIM_Base_SetConfig+0xe4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d013      	beq.n	8003cde <TIM_Base_SetConfig+0x72>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a26      	ldr	r2, [pc, #152]	; (8003d54 <TIM_Base_SetConfig+0xe8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00f      	beq.n	8003cde <TIM_Base_SetConfig+0x72>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a25      	ldr	r2, [pc, #148]	; (8003d58 <TIM_Base_SetConfig+0xec>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00b      	beq.n	8003cde <TIM_Base_SetConfig+0x72>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a24      	ldr	r2, [pc, #144]	; (8003d5c <TIM_Base_SetConfig+0xf0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d007      	beq.n	8003cde <TIM_Base_SetConfig+0x72>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a23      	ldr	r2, [pc, #140]	; (8003d60 <TIM_Base_SetConfig+0xf4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d003      	beq.n	8003cde <TIM_Base_SetConfig+0x72>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a22      	ldr	r2, [pc, #136]	; (8003d64 <TIM_Base_SetConfig+0xf8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d108      	bne.n	8003cf0 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4a21      	ldr	r2, [pc, #132]	; (8003d68 <TIM_Base_SetConfig+0xfc>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2280      	movs	r2, #128	; 0x80
 8003cf4:	4393      	bics	r3, r2
 8003cf6:	001a      	movs	r2, r3
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a0c      	ldr	r2, [pc, #48]	; (8003d4c <TIM_Base_SetConfig+0xe0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00b      	beq.n	8003d36 <TIM_Base_SetConfig+0xca>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a0e      	ldr	r2, [pc, #56]	; (8003d5c <TIM_Base_SetConfig+0xf0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d007      	beq.n	8003d36 <TIM_Base_SetConfig+0xca>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a0d      	ldr	r2, [pc, #52]	; (8003d60 <TIM_Base_SetConfig+0xf4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d003      	beq.n	8003d36 <TIM_Base_SetConfig+0xca>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a0c      	ldr	r2, [pc, #48]	; (8003d64 <TIM_Base_SetConfig+0xf8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d103      	bne.n	8003d3e <TIM_Base_SetConfig+0xd2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	691a      	ldr	r2, [r3, #16]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	615a      	str	r2, [r3, #20]
}
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b004      	add	sp, #16
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40012c00 	.word	0x40012c00
 8003d50:	40000400 	.word	0x40000400
 8003d54:	40000800 	.word	0x40000800
 8003d58:	40002000 	.word	0x40002000
 8003d5c:	40014000 	.word	0x40014000
 8003d60:	40014400 	.word	0x40014400
 8003d64:	40014800 	.word	0x40014800
 8003d68:	fffffcff 	.word	0xfffffcff

08003d6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	2201      	movs	r2, #1
 8003d84:	4393      	bics	r3, r2
 8003d86:	001a      	movs	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	22f0      	movs	r2, #240	; 0xf0
 8003d96:	4393      	bics	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	220a      	movs	r2, #10
 8003da8:	4393      	bics	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	621a      	str	r2, [r3, #32]
}
 8003dc0:	46c0      	nop			; (mov r8, r8)
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b006      	add	sp, #24
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	2210      	movs	r2, #16
 8003dda:	4393      	bics	r3, r2
 8003ddc:	001a      	movs	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	4a0d      	ldr	r2, [pc, #52]	; (8003e28 <TIM_TI2_ConfigInputStage+0x60>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	031b      	lsls	r3, r3, #12
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	22a0      	movs	r2, #160	; 0xa0
 8003e04:	4393      	bics	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	621a      	str	r2, [r3, #32]
}
 8003e1e:	46c0      	nop			; (mov r8, r8)
 8003e20:	46bd      	mov	sp, r7
 8003e22:	b006      	add	sp, #24
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	46c0      	nop			; (mov r8, r8)
 8003e28:	ffff0fff 	.word	0xffff0fff

08003e2c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4a08      	ldr	r2, [pc, #32]	; (8003e60 <TIM_ITRx_SetConfig+0x34>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	2207      	movs	r2, #7
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	609a      	str	r2, [r3, #8]
}
 8003e56:	46c0      	nop			; (mov r8, r8)
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	b004      	add	sp, #16
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	46c0      	nop			; (mov r8, r8)
 8003e60:	ffcfff8f 	.word	0xffcfff8f

08003e64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	4a09      	ldr	r2, [pc, #36]	; (8003ea0 <TIM_ETR_SetConfig+0x3c>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	021a      	lsls	r2, r3, #8
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	431a      	orrs	r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	609a      	str	r2, [r3, #8]
}
 8003e98:	46c0      	nop			; (mov r8, r8)
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b006      	add	sp, #24
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	ffff00ff 	.word	0xffff00ff

08003ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	223c      	movs	r2, #60	; 0x3c
 8003eb2:	5c9b      	ldrb	r3, [r3, r2]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e054      	b.n	8003f66 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	223c      	movs	r2, #60	; 0x3c
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	223d      	movs	r2, #61	; 0x3d
 8003ec8:	2102      	movs	r1, #2
 8003eca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a23      	ldr	r2, [pc, #140]	; (8003f70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d108      	bne.n	8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4a22      	ldr	r2, [pc, #136]	; (8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003eea:	4013      	ands	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2270      	movs	r2, #112	; 0x70
 8003efc:	4393      	bics	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a16      	ldr	r2, [pc, #88]	; (8003f70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00e      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a15      	ldr	r2, [pc, #84]	; (8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d009      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a14      	ldr	r2, [pc, #80]	; (8003f7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d004      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a12      	ldr	r2, [pc, #72]	; (8003f80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d10c      	bne.n	8003f54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2280      	movs	r2, #128	; 0x80
 8003f3e:	4393      	bics	r3, r2
 8003f40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	223d      	movs	r2, #61	; 0x3d
 8003f58:	2101      	movs	r1, #1
 8003f5a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	223c      	movs	r2, #60	; 0x3c
 8003f60:	2100      	movs	r1, #0
 8003f62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	0018      	movs	r0, r3
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	b004      	add	sp, #16
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	46c0      	nop			; (mov r8, r8)
 8003f70:	40012c00 	.word	0x40012c00
 8003f74:	ff0fffff 	.word	0xff0fffff
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40000800 	.word	0x40000800
 8003f80:	40014000 	.word	0x40014000

08003f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f8c:	46c0      	nop			; (mov r8, r8)
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b002      	add	sp, #8
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f9c:	46c0      	nop			; (mov r8, r8)
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b002      	add	sp, #8
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003fac:	46c0      	nop			; (mov r8, r8)
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	b002      	add	sp, #8
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e046      	b.n	8004054 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2288      	movs	r2, #136	; 0x88
 8003fca:	589b      	ldr	r3, [r3, r2]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d107      	bne.n	8003fe0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2284      	movs	r2, #132	; 0x84
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f7fd fd88 	bl	8001af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2288      	movs	r2, #136	; 0x88
 8003fe4:	2124      	movs	r1, #36	; 0x24
 8003fe6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	438a      	bics	r2, r1
 8003ff6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f000 fcec 	bl	80049d8 <UART_SetConfig>
 8004000:	0003      	movs	r3, r0
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e024      	b.n	8004054 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	0018      	movs	r0, r3
 8004016:	f000 fec1 	bl	8004d9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	490d      	ldr	r1, [pc, #52]	; (800405c <HAL_UART_Init+0xa8>)
 8004026:	400a      	ands	r2, r1
 8004028:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	212a      	movs	r1, #42	; 0x2a
 8004036:	438a      	bics	r2, r1
 8004038:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2101      	movs	r1, #1
 8004046:	430a      	orrs	r2, r1
 8004048:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	0018      	movs	r0, r3
 800404e:	f000 ff59 	bl	8004f04 <UART_CheckIdleState>
 8004052:	0003      	movs	r3, r0
}
 8004054:	0018      	movs	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	b002      	add	sp, #8
 800405a:	bd80      	pop	{r7, pc}
 800405c:	ffffb7ff 	.word	0xffffb7ff

08004060 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08a      	sub	sp, #40	; 0x28
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	1dbb      	adds	r3, r7, #6
 800406e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2288      	movs	r2, #136	; 0x88
 8004074:	589b      	ldr	r3, [r3, r2]
 8004076:	2b20      	cmp	r3, #32
 8004078:	d000      	beq.n	800407c <HAL_UART_Transmit+0x1c>
 800407a:	e088      	b.n	800418e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_UART_Transmit+0x2a>
 8004082:	1dbb      	adds	r3, r7, #6
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e080      	b.n	8004190 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	2380      	movs	r3, #128	; 0x80
 8004094:	015b      	lsls	r3, r3, #5
 8004096:	429a      	cmp	r2, r3
 8004098:	d109      	bne.n	80040ae <HAL_UART_Transmit+0x4e>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d105      	bne.n	80040ae <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2201      	movs	r2, #1
 80040a6:	4013      	ands	r3, r2
 80040a8:	d001      	beq.n	80040ae <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e070      	b.n	8004190 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2290      	movs	r2, #144	; 0x90
 80040b2:	2100      	movs	r1, #0
 80040b4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2288      	movs	r2, #136	; 0x88
 80040ba:	2121      	movs	r1, #33	; 0x21
 80040bc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040be:	f7fd fef7 	bl	8001eb0 <HAL_GetTick>
 80040c2:	0003      	movs	r3, r0
 80040c4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	1dba      	adds	r2, r7, #6
 80040ca:	2154      	movs	r1, #84	; 0x54
 80040cc:	8812      	ldrh	r2, [r2, #0]
 80040ce:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	1dba      	adds	r2, r7, #6
 80040d4:	2156      	movs	r1, #86	; 0x56
 80040d6:	8812      	ldrh	r2, [r2, #0]
 80040d8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	2380      	movs	r3, #128	; 0x80
 80040e0:	015b      	lsls	r3, r3, #5
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d108      	bne.n	80040f8 <HAL_UART_Transmit+0x98>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d104      	bne.n	80040f8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	61bb      	str	r3, [r7, #24]
 80040f6:	e003      	b.n	8004100 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040fc:	2300      	movs	r3, #0
 80040fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004100:	e02c      	b.n	800415c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	0013      	movs	r3, r2
 800410c:	2200      	movs	r2, #0
 800410e:	2180      	movs	r1, #128	; 0x80
 8004110:	f000 ff46 	bl	8004fa0 <UART_WaitOnFlagUntilTimeout>
 8004114:	1e03      	subs	r3, r0, #0
 8004116:	d001      	beq.n	800411c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e039      	b.n	8004190 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10b      	bne.n	800413a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	001a      	movs	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	05d2      	lsls	r2, r2, #23
 800412e:	0dd2      	lsrs	r2, r2, #23
 8004130:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	3302      	adds	r3, #2
 8004136:	61bb      	str	r3, [r7, #24]
 8004138:	e007      	b.n	800414a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	781a      	ldrb	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	3301      	adds	r3, #1
 8004148:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2256      	movs	r2, #86	; 0x56
 800414e:	5a9b      	ldrh	r3, [r3, r2]
 8004150:	b29b      	uxth	r3, r3
 8004152:	3b01      	subs	r3, #1
 8004154:	b299      	uxth	r1, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2256      	movs	r2, #86	; 0x56
 800415a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2256      	movs	r2, #86	; 0x56
 8004160:	5a9b      	ldrh	r3, [r3, r2]
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1cc      	bne.n	8004102 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	0013      	movs	r3, r2
 8004172:	2200      	movs	r2, #0
 8004174:	2140      	movs	r1, #64	; 0x40
 8004176:	f000 ff13 	bl	8004fa0 <UART_WaitOnFlagUntilTimeout>
 800417a:	1e03      	subs	r3, r0, #0
 800417c:	d001      	beq.n	8004182 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e006      	b.n	8004190 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2288      	movs	r2, #136	; 0x88
 8004186:	2120      	movs	r1, #32
 8004188:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	e000      	b.n	8004190 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800418e:	2302      	movs	r3, #2
  }
}
 8004190:	0018      	movs	r0, r3
 8004192:	46bd      	mov	sp, r7
 8004194:	b008      	add	sp, #32
 8004196:	bd80      	pop	{r7, pc}

08004198 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	; 0x28
 800419c:	af02      	add	r7, sp, #8
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	1dbb      	adds	r3, r7, #6
 80041a6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	228c      	movs	r2, #140	; 0x8c
 80041ac:	589b      	ldr	r3, [r3, r2]
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	d000      	beq.n	80041b4 <HAL_UART_Receive+0x1c>
 80041b2:	e0cc      	b.n	800434e <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_UART_Receive+0x2a>
 80041ba:	1dbb      	adds	r3, r7, #6
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e0c4      	b.n	8004350 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	2380      	movs	r3, #128	; 0x80
 80041cc:	015b      	lsls	r3, r3, #5
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d109      	bne.n	80041e6 <HAL_UART_Receive+0x4e>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d105      	bne.n	80041e6 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2201      	movs	r2, #1
 80041de:	4013      	ands	r3, r2
 80041e0:	d001      	beq.n	80041e6 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e0b4      	b.n	8004350 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2290      	movs	r2, #144	; 0x90
 80041ea:	2100      	movs	r1, #0
 80041ec:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	228c      	movs	r2, #140	; 0x8c
 80041f2:	2122      	movs	r1, #34	; 0x22
 80041f4:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041fc:	f7fd fe58 	bl	8001eb0 <HAL_GetTick>
 8004200:	0003      	movs	r3, r0
 8004202:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	1dba      	adds	r2, r7, #6
 8004208:	215c      	movs	r1, #92	; 0x5c
 800420a:	8812      	ldrh	r2, [r2, #0]
 800420c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	1dba      	adds	r2, r7, #6
 8004212:	215e      	movs	r1, #94	; 0x5e
 8004214:	8812      	ldrh	r2, [r2, #0]
 8004216:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	2380      	movs	r3, #128	; 0x80
 800421e:	015b      	lsls	r3, r3, #5
 8004220:	429a      	cmp	r2, r3
 8004222:	d10d      	bne.n	8004240 <HAL_UART_Receive+0xa8>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d104      	bne.n	8004236 <HAL_UART_Receive+0x9e>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2260      	movs	r2, #96	; 0x60
 8004230:	4949      	ldr	r1, [pc, #292]	; (8004358 <HAL_UART_Receive+0x1c0>)
 8004232:	5299      	strh	r1, [r3, r2]
 8004234:	e02e      	b.n	8004294 <HAL_UART_Receive+0xfc>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2260      	movs	r2, #96	; 0x60
 800423a:	21ff      	movs	r1, #255	; 0xff
 800423c:	5299      	strh	r1, [r3, r2]
 800423e:	e029      	b.n	8004294 <HAL_UART_Receive+0xfc>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10d      	bne.n	8004264 <HAL_UART_Receive+0xcc>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d104      	bne.n	800425a <HAL_UART_Receive+0xc2>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2260      	movs	r2, #96	; 0x60
 8004254:	21ff      	movs	r1, #255	; 0xff
 8004256:	5299      	strh	r1, [r3, r2]
 8004258:	e01c      	b.n	8004294 <HAL_UART_Receive+0xfc>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2260      	movs	r2, #96	; 0x60
 800425e:	217f      	movs	r1, #127	; 0x7f
 8004260:	5299      	strh	r1, [r3, r2]
 8004262:	e017      	b.n	8004294 <HAL_UART_Receive+0xfc>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	2380      	movs	r3, #128	; 0x80
 800426a:	055b      	lsls	r3, r3, #21
 800426c:	429a      	cmp	r2, r3
 800426e:	d10d      	bne.n	800428c <HAL_UART_Receive+0xf4>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d104      	bne.n	8004282 <HAL_UART_Receive+0xea>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2260      	movs	r2, #96	; 0x60
 800427c:	217f      	movs	r1, #127	; 0x7f
 800427e:	5299      	strh	r1, [r3, r2]
 8004280:	e008      	b.n	8004294 <HAL_UART_Receive+0xfc>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2260      	movs	r2, #96	; 0x60
 8004286:	213f      	movs	r1, #63	; 0x3f
 8004288:	5299      	strh	r1, [r3, r2]
 800428a:	e003      	b.n	8004294 <HAL_UART_Receive+0xfc>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2260      	movs	r2, #96	; 0x60
 8004290:	2100      	movs	r1, #0
 8004292:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004294:	2312      	movs	r3, #18
 8004296:	18fb      	adds	r3, r7, r3
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	2160      	movs	r1, #96	; 0x60
 800429c:	5a52      	ldrh	r2, [r2, r1]
 800429e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	2380      	movs	r3, #128	; 0x80
 80042a6:	015b      	lsls	r3, r3, #5
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d108      	bne.n	80042be <HAL_UART_Receive+0x126>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d104      	bne.n	80042be <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	61bb      	str	r3, [r7, #24]
 80042bc:	e003      	b.n	80042c6 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80042c6:	e036      	b.n	8004336 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	0013      	movs	r3, r2
 80042d2:	2200      	movs	r2, #0
 80042d4:	2120      	movs	r1, #32
 80042d6:	f000 fe63 	bl	8004fa0 <UART_WaitOnFlagUntilTimeout>
 80042da:	1e03      	subs	r3, r0, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e036      	b.n	8004350 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10e      	bne.n	8004306 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	2212      	movs	r2, #18
 80042f2:	18ba      	adds	r2, r7, r2
 80042f4:	8812      	ldrh	r2, [r2, #0]
 80042f6:	4013      	ands	r3, r2
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	3302      	adds	r3, #2
 8004302:	61bb      	str	r3, [r7, #24]
 8004304:	e00e      	b.n	8004324 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2212      	movs	r2, #18
 8004310:	18ba      	adds	r2, r7, r2
 8004312:	8812      	ldrh	r2, [r2, #0]
 8004314:	b2d2      	uxtb	r2, r2
 8004316:	4013      	ands	r3, r2
 8004318:	b2da      	uxtb	r2, r3
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	3301      	adds	r3, #1
 8004322:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	225e      	movs	r2, #94	; 0x5e
 8004328:	5a9b      	ldrh	r3, [r3, r2]
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	b299      	uxth	r1, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	225e      	movs	r2, #94	; 0x5e
 8004334:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	225e      	movs	r2, #94	; 0x5e
 800433a:	5a9b      	ldrh	r3, [r3, r2]
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1c2      	bne.n	80042c8 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	228c      	movs	r2, #140	; 0x8c
 8004346:	2120      	movs	r1, #32
 8004348:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	e000      	b.n	8004350 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 800434e:	2302      	movs	r3, #2
  }
}
 8004350:	0018      	movs	r0, r3
 8004352:	46bd      	mov	sp, r7
 8004354:	b008      	add	sp, #32
 8004356:	bd80      	pop	{r7, pc}
 8004358:	000001ff 	.word	0x000001ff

0800435c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800435c:	b5b0      	push	{r4, r5, r7, lr}
 800435e:	b0aa      	sub	sp, #168	; 0xa8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	22a4      	movs	r2, #164	; 0xa4
 800436c:	18b9      	adds	r1, r7, r2
 800436e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	20a0      	movs	r0, #160	; 0xa0
 8004378:	1839      	adds	r1, r7, r0
 800437a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	249c      	movs	r4, #156	; 0x9c
 8004384:	1939      	adds	r1, r7, r4
 8004386:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004388:	0011      	movs	r1, r2
 800438a:	18bb      	adds	r3, r7, r2
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4aa2      	ldr	r2, [pc, #648]	; (8004618 <HAL_UART_IRQHandler+0x2bc>)
 8004390:	4013      	ands	r3, r2
 8004392:	2298      	movs	r2, #152	; 0x98
 8004394:	18bd      	adds	r5, r7, r2
 8004396:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004398:	18bb      	adds	r3, r7, r2
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d11a      	bne.n	80043d6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80043a0:	187b      	adds	r3, r7, r1
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2220      	movs	r2, #32
 80043a6:	4013      	ands	r3, r2
 80043a8:	d015      	beq.n	80043d6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80043aa:	183b      	adds	r3, r7, r0
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2220      	movs	r2, #32
 80043b0:	4013      	ands	r3, r2
 80043b2:	d105      	bne.n	80043c0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80043b4:	193b      	adds	r3, r7, r4
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	2380      	movs	r3, #128	; 0x80
 80043ba:	055b      	lsls	r3, r3, #21
 80043bc:	4013      	ands	r3, r2
 80043be:	d00a      	beq.n	80043d6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d100      	bne.n	80043ca <HAL_UART_IRQHandler+0x6e>
 80043c8:	e2dc      	b.n	8004984 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	0010      	movs	r0, r2
 80043d2:	4798      	blx	r3
      }
      return;
 80043d4:	e2d6      	b.n	8004984 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80043d6:	2398      	movs	r3, #152	; 0x98
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d100      	bne.n	80043e2 <HAL_UART_IRQHandler+0x86>
 80043e0:	e122      	b.n	8004628 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80043e2:	239c      	movs	r3, #156	; 0x9c
 80043e4:	18fb      	adds	r3, r7, r3
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a8c      	ldr	r2, [pc, #560]	; (800461c <HAL_UART_IRQHandler+0x2c0>)
 80043ea:	4013      	ands	r3, r2
 80043ec:	d106      	bne.n	80043fc <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80043ee:	23a0      	movs	r3, #160	; 0xa0
 80043f0:	18fb      	adds	r3, r7, r3
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a8a      	ldr	r2, [pc, #552]	; (8004620 <HAL_UART_IRQHandler+0x2c4>)
 80043f6:	4013      	ands	r3, r2
 80043f8:	d100      	bne.n	80043fc <HAL_UART_IRQHandler+0xa0>
 80043fa:	e115      	b.n	8004628 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80043fc:	23a4      	movs	r3, #164	; 0xa4
 80043fe:	18fb      	adds	r3, r7, r3
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2201      	movs	r2, #1
 8004404:	4013      	ands	r3, r2
 8004406:	d012      	beq.n	800442e <HAL_UART_IRQHandler+0xd2>
 8004408:	23a0      	movs	r3, #160	; 0xa0
 800440a:	18fb      	adds	r3, r7, r3
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	2380      	movs	r3, #128	; 0x80
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	4013      	ands	r3, r2
 8004414:	d00b      	beq.n	800442e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2201      	movs	r2, #1
 800441c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2290      	movs	r2, #144	; 0x90
 8004422:	589b      	ldr	r3, [r3, r2]
 8004424:	2201      	movs	r2, #1
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2190      	movs	r1, #144	; 0x90
 800442c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800442e:	23a4      	movs	r3, #164	; 0xa4
 8004430:	18fb      	adds	r3, r7, r3
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2202      	movs	r2, #2
 8004436:	4013      	ands	r3, r2
 8004438:	d011      	beq.n	800445e <HAL_UART_IRQHandler+0x102>
 800443a:	239c      	movs	r3, #156	; 0x9c
 800443c:	18fb      	adds	r3, r7, r3
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2201      	movs	r2, #1
 8004442:	4013      	ands	r3, r2
 8004444:	d00b      	beq.n	800445e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2202      	movs	r2, #2
 800444c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2290      	movs	r2, #144	; 0x90
 8004452:	589b      	ldr	r3, [r3, r2]
 8004454:	2204      	movs	r2, #4
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2190      	movs	r1, #144	; 0x90
 800445c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800445e:	23a4      	movs	r3, #164	; 0xa4
 8004460:	18fb      	adds	r3, r7, r3
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2204      	movs	r2, #4
 8004466:	4013      	ands	r3, r2
 8004468:	d011      	beq.n	800448e <HAL_UART_IRQHandler+0x132>
 800446a:	239c      	movs	r3, #156	; 0x9c
 800446c:	18fb      	adds	r3, r7, r3
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2201      	movs	r2, #1
 8004472:	4013      	ands	r3, r2
 8004474:	d00b      	beq.n	800448e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2204      	movs	r2, #4
 800447c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2290      	movs	r2, #144	; 0x90
 8004482:	589b      	ldr	r3, [r3, r2]
 8004484:	2202      	movs	r2, #2
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2190      	movs	r1, #144	; 0x90
 800448c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800448e:	23a4      	movs	r3, #164	; 0xa4
 8004490:	18fb      	adds	r3, r7, r3
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2208      	movs	r2, #8
 8004496:	4013      	ands	r3, r2
 8004498:	d017      	beq.n	80044ca <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800449a:	23a0      	movs	r3, #160	; 0xa0
 800449c:	18fb      	adds	r3, r7, r3
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2220      	movs	r2, #32
 80044a2:	4013      	ands	r3, r2
 80044a4:	d105      	bne.n	80044b2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80044a6:	239c      	movs	r3, #156	; 0x9c
 80044a8:	18fb      	adds	r3, r7, r3
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a5b      	ldr	r2, [pc, #364]	; (800461c <HAL_UART_IRQHandler+0x2c0>)
 80044ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80044b0:	d00b      	beq.n	80044ca <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2208      	movs	r2, #8
 80044b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2290      	movs	r2, #144	; 0x90
 80044be:	589b      	ldr	r3, [r3, r2]
 80044c0:	2208      	movs	r2, #8
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2190      	movs	r1, #144	; 0x90
 80044c8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80044ca:	23a4      	movs	r3, #164	; 0xa4
 80044cc:	18fb      	adds	r3, r7, r3
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	2380      	movs	r3, #128	; 0x80
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	4013      	ands	r3, r2
 80044d6:	d013      	beq.n	8004500 <HAL_UART_IRQHandler+0x1a4>
 80044d8:	23a0      	movs	r3, #160	; 0xa0
 80044da:	18fb      	adds	r3, r7, r3
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	2380      	movs	r3, #128	; 0x80
 80044e0:	04db      	lsls	r3, r3, #19
 80044e2:	4013      	ands	r3, r2
 80044e4:	d00c      	beq.n	8004500 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2280      	movs	r2, #128	; 0x80
 80044ec:	0112      	lsls	r2, r2, #4
 80044ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2290      	movs	r2, #144	; 0x90
 80044f4:	589b      	ldr	r3, [r3, r2]
 80044f6:	2220      	movs	r2, #32
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2190      	movs	r1, #144	; 0x90
 80044fe:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2290      	movs	r2, #144	; 0x90
 8004504:	589b      	ldr	r3, [r3, r2]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d100      	bne.n	800450c <HAL_UART_IRQHandler+0x1b0>
 800450a:	e23d      	b.n	8004988 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800450c:	23a4      	movs	r3, #164	; 0xa4
 800450e:	18fb      	adds	r3, r7, r3
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2220      	movs	r2, #32
 8004514:	4013      	ands	r3, r2
 8004516:	d015      	beq.n	8004544 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004518:	23a0      	movs	r3, #160	; 0xa0
 800451a:	18fb      	adds	r3, r7, r3
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2220      	movs	r2, #32
 8004520:	4013      	ands	r3, r2
 8004522:	d106      	bne.n	8004532 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004524:	239c      	movs	r3, #156	; 0x9c
 8004526:	18fb      	adds	r3, r7, r3
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	2380      	movs	r3, #128	; 0x80
 800452c:	055b      	lsls	r3, r3, #21
 800452e:	4013      	ands	r3, r2
 8004530:	d008      	beq.n	8004544 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004536:	2b00      	cmp	r3, #0
 8004538:	d004      	beq.n	8004544 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	0010      	movs	r0, r2
 8004542:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2290      	movs	r2, #144	; 0x90
 8004548:	589b      	ldr	r3, [r3, r2]
 800454a:	2194      	movs	r1, #148	; 0x94
 800454c:	187a      	adds	r2, r7, r1
 800454e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	2240      	movs	r2, #64	; 0x40
 8004558:	4013      	ands	r3, r2
 800455a:	2b40      	cmp	r3, #64	; 0x40
 800455c:	d004      	beq.n	8004568 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800455e:	187b      	adds	r3, r7, r1
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2228      	movs	r2, #40	; 0x28
 8004564:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004566:	d04c      	beq.n	8004602 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	0018      	movs	r0, r3
 800456c:	f000 ff04 	bl	8005378 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	2240      	movs	r2, #64	; 0x40
 8004578:	4013      	ands	r3, r2
 800457a:	2b40      	cmp	r3, #64	; 0x40
 800457c:	d13c      	bne.n	80045f8 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800457e:	f3ef 8310 	mrs	r3, PRIMASK
 8004582:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004584:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004586:	2090      	movs	r0, #144	; 0x90
 8004588:	183a      	adds	r2, r7, r0
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	2301      	movs	r3, #1
 800458e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004592:	f383 8810 	msr	PRIMASK, r3
}
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2140      	movs	r1, #64	; 0x40
 80045a4:	438a      	bics	r2, r1
 80045a6:	609a      	str	r2, [r3, #8]
 80045a8:	183b      	adds	r3, r7, r0
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045b0:	f383 8810 	msr	PRIMASK, r3
}
 80045b4:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2280      	movs	r2, #128	; 0x80
 80045ba:	589b      	ldr	r3, [r3, r2]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d016      	beq.n	80045ee <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2280      	movs	r2, #128	; 0x80
 80045c4:	589b      	ldr	r3, [r3, r2]
 80045c6:	4a17      	ldr	r2, [pc, #92]	; (8004624 <HAL_UART_IRQHandler+0x2c8>)
 80045c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2280      	movs	r2, #128	; 0x80
 80045ce:	589b      	ldr	r3, [r3, r2]
 80045d0:	0018      	movs	r0, r3
 80045d2:	f7fd fdef 	bl	80021b4 <HAL_DMA_Abort_IT>
 80045d6:	1e03      	subs	r3, r0, #0
 80045d8:	d01c      	beq.n	8004614 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2280      	movs	r2, #128	; 0x80
 80045de:	589b      	ldr	r3, [r3, r2]
 80045e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	2180      	movs	r1, #128	; 0x80
 80045e6:	5852      	ldr	r2, [r2, r1]
 80045e8:	0010      	movs	r0, r2
 80045ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ec:	e012      	b.n	8004614 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	0018      	movs	r0, r3
 80045f2:	f000 f9e9 	bl	80049c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f6:	e00d      	b.n	8004614 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	0018      	movs	r0, r3
 80045fc:	f000 f9e4 	bl	80049c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004600:	e008      	b.n	8004614 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	0018      	movs	r0, r3
 8004606:	f000 f9df 	bl	80049c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2290      	movs	r2, #144	; 0x90
 800460e:	2100      	movs	r1, #0
 8004610:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004612:	e1b9      	b.n	8004988 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004614:	46c0      	nop			; (mov r8, r8)
    return;
 8004616:	e1b7      	b.n	8004988 <HAL_UART_IRQHandler+0x62c>
 8004618:	0000080f 	.word	0x0000080f
 800461c:	10000001 	.word	0x10000001
 8004620:	04000120 	.word	0x04000120
 8004624:	08005445 	.word	0x08005445

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800462c:	2b01      	cmp	r3, #1
 800462e:	d000      	beq.n	8004632 <HAL_UART_IRQHandler+0x2d6>
 8004630:	e13e      	b.n	80048b0 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004632:	23a4      	movs	r3, #164	; 0xa4
 8004634:	18fb      	adds	r3, r7, r3
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2210      	movs	r2, #16
 800463a:	4013      	ands	r3, r2
 800463c:	d100      	bne.n	8004640 <HAL_UART_IRQHandler+0x2e4>
 800463e:	e137      	b.n	80048b0 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004640:	23a0      	movs	r3, #160	; 0xa0
 8004642:	18fb      	adds	r3, r7, r3
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2210      	movs	r2, #16
 8004648:	4013      	ands	r3, r2
 800464a:	d100      	bne.n	800464e <HAL_UART_IRQHandler+0x2f2>
 800464c:	e130      	b.n	80048b0 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2210      	movs	r2, #16
 8004654:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	2240      	movs	r2, #64	; 0x40
 800465e:	4013      	ands	r3, r2
 8004660:	2b40      	cmp	r3, #64	; 0x40
 8004662:	d000      	beq.n	8004666 <HAL_UART_IRQHandler+0x30a>
 8004664:	e0a4      	b.n	80047b0 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2280      	movs	r2, #128	; 0x80
 800466a:	589b      	ldr	r3, [r3, r2]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	217e      	movs	r1, #126	; 0x7e
 8004672:	187b      	adds	r3, r7, r1
 8004674:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004676:	187b      	adds	r3, r7, r1
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d100      	bne.n	8004680 <HAL_UART_IRQHandler+0x324>
 800467e:	e185      	b.n	800498c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	225c      	movs	r2, #92	; 0x5c
 8004684:	5a9b      	ldrh	r3, [r3, r2]
 8004686:	187a      	adds	r2, r7, r1
 8004688:	8812      	ldrh	r2, [r2, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d300      	bcc.n	8004690 <HAL_UART_IRQHandler+0x334>
 800468e:	e17d      	b.n	800498c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	187a      	adds	r2, r7, r1
 8004694:	215e      	movs	r1, #94	; 0x5e
 8004696:	8812      	ldrh	r2, [r2, #0]
 8004698:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2280      	movs	r2, #128	; 0x80
 800469e:	589b      	ldr	r3, [r3, r2]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2220      	movs	r2, #32
 80046a6:	4013      	ands	r3, r2
 80046a8:	d170      	bne.n	800478c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046aa:	f3ef 8310 	mrs	r3, PRIMASK
 80046ae:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80046b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80046b4:	2301      	movs	r3, #1
 80046b6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ba:	f383 8810 	msr	PRIMASK, r3
}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	49b4      	ldr	r1, [pc, #720]	; (800499c <HAL_UART_IRQHandler+0x640>)
 80046cc:	400a      	ands	r2, r1
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046d2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d6:	f383 8810 	msr	PRIMASK, r3
}
 80046da:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046dc:	f3ef 8310 	mrs	r3, PRIMASK
 80046e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80046e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e4:	677b      	str	r3, [r7, #116]	; 0x74
 80046e6:	2301      	movs	r3, #1
 80046e8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ec:	f383 8810 	msr	PRIMASK, r3
}
 80046f0:	46c0      	nop			; (mov r8, r8)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2101      	movs	r1, #1
 80046fe:	438a      	bics	r2, r1
 8004700:	609a      	str	r2, [r3, #8]
 8004702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004704:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004708:	f383 8810 	msr	PRIMASK, r3
}
 800470c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800470e:	f3ef 8310 	mrs	r3, PRIMASK
 8004712:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004714:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004716:	673b      	str	r3, [r7, #112]	; 0x70
 8004718:	2301      	movs	r3, #1
 800471a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800471e:	f383 8810 	msr	PRIMASK, r3
}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2140      	movs	r1, #64	; 0x40
 8004730:	438a      	bics	r2, r1
 8004732:	609a      	str	r2, [r3, #8]
 8004734:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004736:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800473a:	f383 8810 	msr	PRIMASK, r3
}
 800473e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	228c      	movs	r2, #140	; 0x8c
 8004744:	2120      	movs	r1, #32
 8004746:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800474e:	f3ef 8310 	mrs	r3, PRIMASK
 8004752:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004754:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004756:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004758:	2301      	movs	r3, #1
 800475a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800475c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800475e:	f383 8810 	msr	PRIMASK, r3
}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2110      	movs	r1, #16
 8004770:	438a      	bics	r2, r1
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004776:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800477a:	f383 8810 	msr	PRIMASK, r3
}
 800477e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2280      	movs	r2, #128	; 0x80
 8004784:	589b      	ldr	r3, [r3, r2]
 8004786:	0018      	movs	r0, r3
 8004788:	f7fd fcb4 	bl	80020f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	225c      	movs	r2, #92	; 0x5c
 8004796:	5a9a      	ldrh	r2, [r3, r2]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	215e      	movs	r1, #94	; 0x5e
 800479c:	5a5b      	ldrh	r3, [r3, r1]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	0011      	movs	r1, r2
 80047a8:	0018      	movs	r0, r3
 80047aa:	f7fb ff0d 	bl	80005c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80047ae:	e0ed      	b.n	800498c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	225c      	movs	r2, #92	; 0x5c
 80047b4:	5a99      	ldrh	r1, [r3, r2]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	225e      	movs	r2, #94	; 0x5e
 80047ba:	5a9b      	ldrh	r3, [r3, r2]
 80047bc:	b29a      	uxth	r2, r3
 80047be:	208e      	movs	r0, #142	; 0x8e
 80047c0:	183b      	adds	r3, r7, r0
 80047c2:	1a8a      	subs	r2, r1, r2
 80047c4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	225e      	movs	r2, #94	; 0x5e
 80047ca:	5a9b      	ldrh	r3, [r3, r2]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d100      	bne.n	80047d4 <HAL_UART_IRQHandler+0x478>
 80047d2:	e0dd      	b.n	8004990 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80047d4:	183b      	adds	r3, r7, r0
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d100      	bne.n	80047de <HAL_UART_IRQHandler+0x482>
 80047dc:	e0d8      	b.n	8004990 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047de:	f3ef 8310 	mrs	r3, PRIMASK
 80047e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80047e4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047e6:	2488      	movs	r4, #136	; 0x88
 80047e8:	193a      	adds	r2, r7, r4
 80047ea:	6013      	str	r3, [r2, #0]
 80047ec:	2301      	movs	r3, #1
 80047ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f383 8810 	msr	PRIMASK, r3
}
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4967      	ldr	r1, [pc, #412]	; (80049a0 <HAL_UART_IRQHandler+0x644>)
 8004804:	400a      	ands	r2, r1
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	193b      	adds	r3, r7, r4
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f383 8810 	msr	PRIMASK, r3
}
 8004814:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004816:	f3ef 8310 	mrs	r3, PRIMASK
 800481a:	61bb      	str	r3, [r7, #24]
  return(result);
 800481c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800481e:	2484      	movs	r4, #132	; 0x84
 8004820:	193a      	adds	r2, r7, r4
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	2301      	movs	r3, #1
 8004826:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	f383 8810 	msr	PRIMASK, r3
}
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	495a      	ldr	r1, [pc, #360]	; (80049a4 <HAL_UART_IRQHandler+0x648>)
 800483c:	400a      	ands	r2, r1
 800483e:	609a      	str	r2, [r3, #8]
 8004840:	193b      	adds	r3, r7, r4
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	f383 8810 	msr	PRIMASK, r3
}
 800484c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	228c      	movs	r2, #140	; 0x8c
 8004852:	2120      	movs	r1, #32
 8004854:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004862:	f3ef 8310 	mrs	r3, PRIMASK
 8004866:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800486a:	2480      	movs	r4, #128	; 0x80
 800486c:	193a      	adds	r2, r7, r4
 800486e:	6013      	str	r3, [r2, #0]
 8004870:	2301      	movs	r3, #1
 8004872:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	f383 8810 	msr	PRIMASK, r3
}
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2110      	movs	r1, #16
 8004888:	438a      	bics	r2, r1
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	193b      	adds	r3, r7, r4
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004894:	f383 8810 	msr	PRIMASK, r3
}
 8004898:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2202      	movs	r2, #2
 800489e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048a0:	183b      	adds	r3, r7, r0
 80048a2:	881a      	ldrh	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	0011      	movs	r1, r2
 80048a8:	0018      	movs	r0, r3
 80048aa:	f7fb fe8d 	bl	80005c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80048ae:	e06f      	b.n	8004990 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80048b0:	23a4      	movs	r3, #164	; 0xa4
 80048b2:	18fb      	adds	r3, r7, r3
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	2380      	movs	r3, #128	; 0x80
 80048b8:	035b      	lsls	r3, r3, #13
 80048ba:	4013      	ands	r3, r2
 80048bc:	d010      	beq.n	80048e0 <HAL_UART_IRQHandler+0x584>
 80048be:	239c      	movs	r3, #156	; 0x9c
 80048c0:	18fb      	adds	r3, r7, r3
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	2380      	movs	r3, #128	; 0x80
 80048c6:	03db      	lsls	r3, r3, #15
 80048c8:	4013      	ands	r3, r2
 80048ca:	d009      	beq.n	80048e0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2280      	movs	r2, #128	; 0x80
 80048d2:	0352      	lsls	r2, r2, #13
 80048d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	0018      	movs	r0, r3
 80048da:	f001 fa57 	bl	8005d8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80048de:	e05a      	b.n	8004996 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80048e0:	23a4      	movs	r3, #164	; 0xa4
 80048e2:	18fb      	adds	r3, r7, r3
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2280      	movs	r2, #128	; 0x80
 80048e8:	4013      	ands	r3, r2
 80048ea:	d016      	beq.n	800491a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80048ec:	23a0      	movs	r3, #160	; 0xa0
 80048ee:	18fb      	adds	r3, r7, r3
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2280      	movs	r2, #128	; 0x80
 80048f4:	4013      	ands	r3, r2
 80048f6:	d106      	bne.n	8004906 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80048f8:	239c      	movs	r3, #156	; 0x9c
 80048fa:	18fb      	adds	r3, r7, r3
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	2380      	movs	r3, #128	; 0x80
 8004900:	041b      	lsls	r3, r3, #16
 8004902:	4013      	ands	r3, r2
 8004904:	d009      	beq.n	800491a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800490a:	2b00      	cmp	r3, #0
 800490c:	d042      	beq.n	8004994 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	0010      	movs	r0, r2
 8004916:	4798      	blx	r3
    }
    return;
 8004918:	e03c      	b.n	8004994 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800491a:	23a4      	movs	r3, #164	; 0xa4
 800491c:	18fb      	adds	r3, r7, r3
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2240      	movs	r2, #64	; 0x40
 8004922:	4013      	ands	r3, r2
 8004924:	d00a      	beq.n	800493c <HAL_UART_IRQHandler+0x5e0>
 8004926:	23a0      	movs	r3, #160	; 0xa0
 8004928:	18fb      	adds	r3, r7, r3
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2240      	movs	r2, #64	; 0x40
 800492e:	4013      	ands	r3, r2
 8004930:	d004      	beq.n	800493c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	0018      	movs	r0, r3
 8004936:	f000 fd9c 	bl	8005472 <UART_EndTransmit_IT>
    return;
 800493a:	e02c      	b.n	8004996 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800493c:	23a4      	movs	r3, #164	; 0xa4
 800493e:	18fb      	adds	r3, r7, r3
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	2380      	movs	r3, #128	; 0x80
 8004944:	041b      	lsls	r3, r3, #16
 8004946:	4013      	ands	r3, r2
 8004948:	d00b      	beq.n	8004962 <HAL_UART_IRQHandler+0x606>
 800494a:	23a0      	movs	r3, #160	; 0xa0
 800494c:	18fb      	adds	r3, r7, r3
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	2380      	movs	r3, #128	; 0x80
 8004952:	05db      	lsls	r3, r3, #23
 8004954:	4013      	ands	r3, r2
 8004956:	d004      	beq.n	8004962 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	0018      	movs	r0, r3
 800495c:	f001 fa26 	bl	8005dac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004960:	e019      	b.n	8004996 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004962:	23a4      	movs	r3, #164	; 0xa4
 8004964:	18fb      	adds	r3, r7, r3
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	2380      	movs	r3, #128	; 0x80
 800496a:	045b      	lsls	r3, r3, #17
 800496c:	4013      	ands	r3, r2
 800496e:	d012      	beq.n	8004996 <HAL_UART_IRQHandler+0x63a>
 8004970:	23a0      	movs	r3, #160	; 0xa0
 8004972:	18fb      	adds	r3, r7, r3
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	da0d      	bge.n	8004996 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	0018      	movs	r0, r3
 800497e:	f001 fa0d 	bl	8005d9c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004982:	e008      	b.n	8004996 <HAL_UART_IRQHandler+0x63a>
      return;
 8004984:	46c0      	nop			; (mov r8, r8)
 8004986:	e006      	b.n	8004996 <HAL_UART_IRQHandler+0x63a>
    return;
 8004988:	46c0      	nop			; (mov r8, r8)
 800498a:	e004      	b.n	8004996 <HAL_UART_IRQHandler+0x63a>
      return;
 800498c:	46c0      	nop			; (mov r8, r8)
 800498e:	e002      	b.n	8004996 <HAL_UART_IRQHandler+0x63a>
      return;
 8004990:	46c0      	nop			; (mov r8, r8)
 8004992:	e000      	b.n	8004996 <HAL_UART_IRQHandler+0x63a>
    return;
 8004994:	46c0      	nop			; (mov r8, r8)
  }
}
 8004996:	46bd      	mov	sp, r7
 8004998:	b02a      	add	sp, #168	; 0xa8
 800499a:	bdb0      	pop	{r4, r5, r7, pc}
 800499c:	fffffeff 	.word	0xfffffeff
 80049a0:	fffffedf 	.word	0xfffffedf
 80049a4:	effffffe 	.word	0xeffffffe

080049a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80049b0:	46c0      	nop			; (mov r8, r8)
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b002      	add	sp, #8
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80049c0:	46c0      	nop			; (mov r8, r8)
 80049c2:	46bd      	mov	sp, r7
 80049c4:	b002      	add	sp, #8
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80049d0:	46c0      	nop			; (mov r8, r8)
 80049d2:	46bd      	mov	sp, r7
 80049d4:	b002      	add	sp, #8
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b088      	sub	sp, #32
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049e0:	231b      	movs	r3, #27
 80049e2:	18fb      	adds	r3, r7, r3
 80049e4:	2200      	movs	r2, #0
 80049e6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	69db      	ldr	r3, [r3, #28]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4ab4      	ldr	r2, [pc, #720]	; (8004cd8 <UART_SetConfig+0x300>)
 8004a08:	4013      	ands	r3, r2
 8004a0a:	0019      	movs	r1, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	69fa      	ldr	r2, [r7, #28]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	4aaf      	ldr	r2, [pc, #700]	; (8004cdc <UART_SetConfig+0x304>)
 8004a1e:	4013      	ands	r3, r2
 8004a20:	0019      	movs	r1, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	69fa      	ldr	r2, [r7, #28]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	4aa6      	ldr	r2, [pc, #664]	; (8004ce0 <UART_SetConfig+0x308>)
 8004a46:	4013      	ands	r3, r2
 8004a48:	0019      	movs	r1, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69fa      	ldr	r2, [r7, #28]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5a:	220f      	movs	r2, #15
 8004a5c:	4393      	bics	r3, r2
 8004a5e:	0019      	movs	r1, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a9c      	ldr	r2, [pc, #624]	; (8004ce4 <UART_SetConfig+0x30c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d127      	bne.n	8004ac6 <UART_SetConfig+0xee>
 8004a76:	4b9c      	ldr	r3, [pc, #624]	; (8004ce8 <UART_SetConfig+0x310>)
 8004a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7a:	2203      	movs	r2, #3
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	d017      	beq.n	8004ab2 <UART_SetConfig+0xda>
 8004a82:	d81b      	bhi.n	8004abc <UART_SetConfig+0xe4>
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d00a      	beq.n	8004a9e <UART_SetConfig+0xc6>
 8004a88:	d818      	bhi.n	8004abc <UART_SetConfig+0xe4>
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <UART_SetConfig+0xbc>
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d00a      	beq.n	8004aa8 <UART_SetConfig+0xd0>
 8004a92:	e013      	b.n	8004abc <UART_SetConfig+0xe4>
 8004a94:	231a      	movs	r3, #26
 8004a96:	18fb      	adds	r3, r7, r3
 8004a98:	2200      	movs	r2, #0
 8004a9a:	701a      	strb	r2, [r3, #0]
 8004a9c:	e08f      	b.n	8004bbe <UART_SetConfig+0x1e6>
 8004a9e:	231a      	movs	r3, #26
 8004aa0:	18fb      	adds	r3, r7, r3
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	701a      	strb	r2, [r3, #0]
 8004aa6:	e08a      	b.n	8004bbe <UART_SetConfig+0x1e6>
 8004aa8:	231a      	movs	r3, #26
 8004aaa:	18fb      	adds	r3, r7, r3
 8004aac:	2204      	movs	r2, #4
 8004aae:	701a      	strb	r2, [r3, #0]
 8004ab0:	e085      	b.n	8004bbe <UART_SetConfig+0x1e6>
 8004ab2:	231a      	movs	r3, #26
 8004ab4:	18fb      	adds	r3, r7, r3
 8004ab6:	2208      	movs	r2, #8
 8004ab8:	701a      	strb	r2, [r3, #0]
 8004aba:	e080      	b.n	8004bbe <UART_SetConfig+0x1e6>
 8004abc:	231a      	movs	r3, #26
 8004abe:	18fb      	adds	r3, r7, r3
 8004ac0:	2210      	movs	r2, #16
 8004ac2:	701a      	strb	r2, [r3, #0]
 8004ac4:	e07b      	b.n	8004bbe <UART_SetConfig+0x1e6>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a88      	ldr	r2, [pc, #544]	; (8004cec <UART_SetConfig+0x314>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d127      	bne.n	8004b20 <UART_SetConfig+0x148>
 8004ad0:	4b85      	ldr	r3, [pc, #532]	; (8004ce8 <UART_SetConfig+0x310>)
 8004ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad4:	220c      	movs	r2, #12
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	2b0c      	cmp	r3, #12
 8004ada:	d017      	beq.n	8004b0c <UART_SetConfig+0x134>
 8004adc:	d81b      	bhi.n	8004b16 <UART_SetConfig+0x13e>
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d00a      	beq.n	8004af8 <UART_SetConfig+0x120>
 8004ae2:	d818      	bhi.n	8004b16 <UART_SetConfig+0x13e>
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <UART_SetConfig+0x116>
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	d00a      	beq.n	8004b02 <UART_SetConfig+0x12a>
 8004aec:	e013      	b.n	8004b16 <UART_SetConfig+0x13e>
 8004aee:	231a      	movs	r3, #26
 8004af0:	18fb      	adds	r3, r7, r3
 8004af2:	2200      	movs	r2, #0
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	e062      	b.n	8004bbe <UART_SetConfig+0x1e6>
 8004af8:	231a      	movs	r3, #26
 8004afa:	18fb      	adds	r3, r7, r3
 8004afc:	2202      	movs	r2, #2
 8004afe:	701a      	strb	r2, [r3, #0]
 8004b00:	e05d      	b.n	8004bbe <UART_SetConfig+0x1e6>
 8004b02:	231a      	movs	r3, #26
 8004b04:	18fb      	adds	r3, r7, r3
 8004b06:	2204      	movs	r2, #4
 8004b08:	701a      	strb	r2, [r3, #0]
 8004b0a:	e058      	b.n	8004bbe <UART_SetConfig+0x1e6>
 8004b0c:	231a      	movs	r3, #26
 8004b0e:	18fb      	adds	r3, r7, r3
 8004b10:	2208      	movs	r2, #8
 8004b12:	701a      	strb	r2, [r3, #0]
 8004b14:	e053      	b.n	8004bbe <UART_SetConfig+0x1e6>
 8004b16:	231a      	movs	r3, #26
 8004b18:	18fb      	adds	r3, r7, r3
 8004b1a:	2210      	movs	r2, #16
 8004b1c:	701a      	strb	r2, [r3, #0]
 8004b1e:	e04e      	b.n	8004bbe <UART_SetConfig+0x1e6>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a72      	ldr	r2, [pc, #456]	; (8004cf0 <UART_SetConfig+0x318>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d127      	bne.n	8004b7a <UART_SetConfig+0x1a2>
 8004b2a:	4b6f      	ldr	r3, [pc, #444]	; (8004ce8 <UART_SetConfig+0x310>)
 8004b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2e:	2230      	movs	r2, #48	; 0x30
 8004b30:	4013      	ands	r3, r2
 8004b32:	2b30      	cmp	r3, #48	; 0x30
 8004b34:	d017      	beq.n	8004b66 <UART_SetConfig+0x18e>
 8004b36:	d81b      	bhi.n	8004b70 <UART_SetConfig+0x198>
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d00a      	beq.n	8004b52 <UART_SetConfig+0x17a>
 8004b3c:	d818      	bhi.n	8004b70 <UART_SetConfig+0x198>
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <UART_SetConfig+0x170>
 8004b42:	2b10      	cmp	r3, #16
 8004b44:	d00a      	beq.n	8004b5c <UART_SetConfig+0x184>
 8004b46:	e013      	b.n	8004b70 <UART_SetConfig+0x198>
 8004b48:	231a      	movs	r3, #26
 8004b4a:	18fb      	adds	r3, r7, r3
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	701a      	strb	r2, [r3, #0]
 8004b50:	e035      	b.n	8004bbe <UART_SetConfig+0x1e6>
 8004b52:	231a      	movs	r3, #26
 8004b54:	18fb      	adds	r3, r7, r3
 8004b56:	2202      	movs	r2, #2
 8004b58:	701a      	strb	r2, [r3, #0]
 8004b5a:	e030      	b.n	8004bbe <UART_SetConfig+0x1e6>
 8004b5c:	231a      	movs	r3, #26
 8004b5e:	18fb      	adds	r3, r7, r3
 8004b60:	2204      	movs	r2, #4
 8004b62:	701a      	strb	r2, [r3, #0]
 8004b64:	e02b      	b.n	8004bbe <UART_SetConfig+0x1e6>
 8004b66:	231a      	movs	r3, #26
 8004b68:	18fb      	adds	r3, r7, r3
 8004b6a:	2208      	movs	r2, #8
 8004b6c:	701a      	strb	r2, [r3, #0]
 8004b6e:	e026      	b.n	8004bbe <UART_SetConfig+0x1e6>
 8004b70:	231a      	movs	r3, #26
 8004b72:	18fb      	adds	r3, r7, r3
 8004b74:	2210      	movs	r2, #16
 8004b76:	701a      	strb	r2, [r3, #0]
 8004b78:	e021      	b.n	8004bbe <UART_SetConfig+0x1e6>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a5d      	ldr	r2, [pc, #372]	; (8004cf4 <UART_SetConfig+0x31c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d104      	bne.n	8004b8e <UART_SetConfig+0x1b6>
 8004b84:	231a      	movs	r3, #26
 8004b86:	18fb      	adds	r3, r7, r3
 8004b88:	2200      	movs	r2, #0
 8004b8a:	701a      	strb	r2, [r3, #0]
 8004b8c:	e017      	b.n	8004bbe <UART_SetConfig+0x1e6>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a59      	ldr	r2, [pc, #356]	; (8004cf8 <UART_SetConfig+0x320>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d104      	bne.n	8004ba2 <UART_SetConfig+0x1ca>
 8004b98:	231a      	movs	r3, #26
 8004b9a:	18fb      	adds	r3, r7, r3
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	701a      	strb	r2, [r3, #0]
 8004ba0:	e00d      	b.n	8004bbe <UART_SetConfig+0x1e6>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a55      	ldr	r2, [pc, #340]	; (8004cfc <UART_SetConfig+0x324>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d104      	bne.n	8004bb6 <UART_SetConfig+0x1de>
 8004bac:	231a      	movs	r3, #26
 8004bae:	18fb      	adds	r3, r7, r3
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
 8004bb4:	e003      	b.n	8004bbe <UART_SetConfig+0x1e6>
 8004bb6:	231a      	movs	r3, #26
 8004bb8:	18fb      	adds	r3, r7, r3
 8004bba:	2210      	movs	r2, #16
 8004bbc:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	69da      	ldr	r2, [r3, #28]
 8004bc2:	2380      	movs	r3, #128	; 0x80
 8004bc4:	021b      	lsls	r3, r3, #8
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d000      	beq.n	8004bcc <UART_SetConfig+0x1f4>
 8004bca:	e065      	b.n	8004c98 <UART_SetConfig+0x2c0>
  {
    switch (clocksource)
 8004bcc:	231a      	movs	r3, #26
 8004bce:	18fb      	adds	r3, r7, r3
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	2b08      	cmp	r3, #8
 8004bd4:	d015      	beq.n	8004c02 <UART_SetConfig+0x22a>
 8004bd6:	dc18      	bgt.n	8004c0a <UART_SetConfig+0x232>
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d00d      	beq.n	8004bf8 <UART_SetConfig+0x220>
 8004bdc:	dc15      	bgt.n	8004c0a <UART_SetConfig+0x232>
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <UART_SetConfig+0x210>
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d005      	beq.n	8004bf2 <UART_SetConfig+0x21a>
 8004be6:	e010      	b.n	8004c0a <UART_SetConfig+0x232>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004be8:	f7fe fb98 	bl	800331c <HAL_RCC_GetPCLK1Freq>
 8004bec:	0003      	movs	r3, r0
 8004bee:	617b      	str	r3, [r7, #20]
        break;
 8004bf0:	e012      	b.n	8004c18 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bf2:	4b43      	ldr	r3, [pc, #268]	; (8004d00 <UART_SetConfig+0x328>)
 8004bf4:	617b      	str	r3, [r7, #20]
        break;
 8004bf6:	e00f      	b.n	8004c18 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bf8:	f7fe fb04 	bl	8003204 <HAL_RCC_GetSysClockFreq>
 8004bfc:	0003      	movs	r3, r0
 8004bfe:	617b      	str	r3, [r7, #20]
        break;
 8004c00:	e00a      	b.n	8004c18 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c02:	2380      	movs	r3, #128	; 0x80
 8004c04:	021b      	lsls	r3, r3, #8
 8004c06:	617b      	str	r3, [r7, #20]
        break;
 8004c08:	e006      	b.n	8004c18 <UART_SetConfig+0x240>
      default:
        pclk = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c0e:	231b      	movs	r3, #27
 8004c10:	18fb      	adds	r3, r7, r3
 8004c12:	2201      	movs	r2, #1
 8004c14:	701a      	strb	r2, [r3, #0]
        break;
 8004c16:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d100      	bne.n	8004c20 <UART_SetConfig+0x248>
 8004c1e:	e0a6      	b.n	8004d6e <UART_SetConfig+0x396>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c24:	4b37      	ldr	r3, [pc, #220]	; (8004d04 <UART_SetConfig+0x32c>)
 8004c26:	0052      	lsls	r2, r2, #1
 8004c28:	5ad3      	ldrh	r3, [r2, r3]
 8004c2a:	0019      	movs	r1, r3
 8004c2c:	6978      	ldr	r0, [r7, #20]
 8004c2e:	f7fb fa79 	bl	8000124 <__udivsi3>
 8004c32:	0003      	movs	r3, r0
 8004c34:	005a      	lsls	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	085b      	lsrs	r3, r3, #1
 8004c3c:	18d2      	adds	r2, r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	0019      	movs	r1, r3
 8004c44:	0010      	movs	r0, r2
 8004c46:	f7fb fa6d 	bl	8000124 <__udivsi3>
 8004c4a:	0003      	movs	r3, r0
 8004c4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	2b0f      	cmp	r3, #15
 8004c52:	d91c      	bls.n	8004c8e <UART_SetConfig+0x2b6>
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	2380      	movs	r3, #128	; 0x80
 8004c58:	025b      	lsls	r3, r3, #9
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d217      	bcs.n	8004c8e <UART_SetConfig+0x2b6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	200e      	movs	r0, #14
 8004c64:	183b      	adds	r3, r7, r0
 8004c66:	210f      	movs	r1, #15
 8004c68:	438a      	bics	r2, r1
 8004c6a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	085b      	lsrs	r3, r3, #1
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2207      	movs	r2, #7
 8004c74:	4013      	ands	r3, r2
 8004c76:	b299      	uxth	r1, r3
 8004c78:	183b      	adds	r3, r7, r0
 8004c7a:	183a      	adds	r2, r7, r0
 8004c7c:	8812      	ldrh	r2, [r2, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	183a      	adds	r2, r7, r0
 8004c88:	8812      	ldrh	r2, [r2, #0]
 8004c8a:	60da      	str	r2, [r3, #12]
 8004c8c:	e06f      	b.n	8004d6e <UART_SetConfig+0x396>
      }
      else
      {
        ret = HAL_ERROR;
 8004c8e:	231b      	movs	r3, #27
 8004c90:	18fb      	adds	r3, r7, r3
 8004c92:	2201      	movs	r2, #1
 8004c94:	701a      	strb	r2, [r3, #0]
 8004c96:	e06a      	b.n	8004d6e <UART_SetConfig+0x396>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c98:	231a      	movs	r3, #26
 8004c9a:	18fb      	adds	r3, r7, r3
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b08      	cmp	r3, #8
 8004ca0:	d015      	beq.n	8004cce <UART_SetConfig+0x2f6>
 8004ca2:	dc31      	bgt.n	8004d08 <UART_SetConfig+0x330>
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	d00d      	beq.n	8004cc4 <UART_SetConfig+0x2ec>
 8004ca8:	dc2e      	bgt.n	8004d08 <UART_SetConfig+0x330>
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <UART_SetConfig+0x2dc>
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d005      	beq.n	8004cbe <UART_SetConfig+0x2e6>
 8004cb2:	e029      	b.n	8004d08 <UART_SetConfig+0x330>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cb4:	f7fe fb32 	bl	800331c <HAL_RCC_GetPCLK1Freq>
 8004cb8:	0003      	movs	r3, r0
 8004cba:	617b      	str	r3, [r7, #20]
        break;
 8004cbc:	e02b      	b.n	8004d16 <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cbe:	4b10      	ldr	r3, [pc, #64]	; (8004d00 <UART_SetConfig+0x328>)
 8004cc0:	617b      	str	r3, [r7, #20]
        break;
 8004cc2:	e028      	b.n	8004d16 <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cc4:	f7fe fa9e 	bl	8003204 <HAL_RCC_GetSysClockFreq>
 8004cc8:	0003      	movs	r3, r0
 8004cca:	617b      	str	r3, [r7, #20]
        break;
 8004ccc:	e023      	b.n	8004d16 <UART_SetConfig+0x33e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cce:	2380      	movs	r3, #128	; 0x80
 8004cd0:	021b      	lsls	r3, r3, #8
 8004cd2:	617b      	str	r3, [r7, #20]
        break;
 8004cd4:	e01f      	b.n	8004d16 <UART_SetConfig+0x33e>
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	cfff69f3 	.word	0xcfff69f3
 8004cdc:	ffffcfff 	.word	0xffffcfff
 8004ce0:	11fff4ff 	.word	0x11fff4ff
 8004ce4:	40013800 	.word	0x40013800
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	40004400 	.word	0x40004400
 8004cf0:	40004800 	.word	0x40004800
 8004cf4:	40004c00 	.word	0x40004c00
 8004cf8:	40005000 	.word	0x40005000
 8004cfc:	40013c00 	.word	0x40013c00
 8004d00:	00f42400 	.word	0x00f42400
 8004d04:	080073ac 	.word	0x080073ac
      default:
        pclk = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d0c:	231b      	movs	r3, #27
 8004d0e:	18fb      	adds	r3, r7, r3
 8004d10:	2201      	movs	r2, #1
 8004d12:	701a      	strb	r2, [r3, #0]
        break;
 8004d14:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d028      	beq.n	8004d6e <UART_SetConfig+0x396>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d20:	4b1d      	ldr	r3, [pc, #116]	; (8004d98 <UART_SetConfig+0x3c0>)
 8004d22:	0052      	lsls	r2, r2, #1
 8004d24:	5ad3      	ldrh	r3, [r2, r3]
 8004d26:	0019      	movs	r1, r3
 8004d28:	6978      	ldr	r0, [r7, #20]
 8004d2a:	f7fb f9fb 	bl	8000124 <__udivsi3>
 8004d2e:	0003      	movs	r3, r0
 8004d30:	001a      	movs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	085b      	lsrs	r3, r3, #1
 8004d38:	18d2      	adds	r2, r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	0019      	movs	r1, r3
 8004d40:	0010      	movs	r0, r2
 8004d42:	f7fb f9ef 	bl	8000124 <__udivsi3>
 8004d46:	0003      	movs	r3, r0
 8004d48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	2b0f      	cmp	r3, #15
 8004d4e:	d90a      	bls.n	8004d66 <UART_SetConfig+0x38e>
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	2380      	movs	r3, #128	; 0x80
 8004d54:	025b      	lsls	r3, r3, #9
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d205      	bcs.n	8004d66 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	60da      	str	r2, [r3, #12]
 8004d64:	e003      	b.n	8004d6e <UART_SetConfig+0x396>
      }
      else
      {
        ret = HAL_ERROR;
 8004d66:	231b      	movs	r3, #27
 8004d68:	18fb      	adds	r3, r7, r3
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	226a      	movs	r2, #106	; 0x6a
 8004d72:	2101      	movs	r1, #1
 8004d74:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2268      	movs	r2, #104	; 0x68
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004d8a:	231b      	movs	r3, #27
 8004d8c:	18fb      	adds	r3, r7, r3
 8004d8e:	781b      	ldrb	r3, [r3, #0]
}
 8004d90:	0018      	movs	r0, r3
 8004d92:	46bd      	mov	sp, r7
 8004d94:	b008      	add	sp, #32
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	080073ac 	.word	0x080073ac

08004d9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da8:	2201      	movs	r2, #1
 8004daa:	4013      	ands	r3, r2
 8004dac:	d00b      	beq.n	8004dc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	4a4a      	ldr	r2, [pc, #296]	; (8004ee0 <UART_AdvFeatureConfig+0x144>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	0019      	movs	r1, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dca:	2202      	movs	r2, #2
 8004dcc:	4013      	ands	r3, r2
 8004dce:	d00b      	beq.n	8004de8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	4a43      	ldr	r2, [pc, #268]	; (8004ee4 <UART_AdvFeatureConfig+0x148>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	0019      	movs	r1, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dec:	2204      	movs	r2, #4
 8004dee:	4013      	ands	r3, r2
 8004df0:	d00b      	beq.n	8004e0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	4a3b      	ldr	r2, [pc, #236]	; (8004ee8 <UART_AdvFeatureConfig+0x14c>)
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	0019      	movs	r1, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0e:	2208      	movs	r2, #8
 8004e10:	4013      	ands	r3, r2
 8004e12:	d00b      	beq.n	8004e2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	4a34      	ldr	r2, [pc, #208]	; (8004eec <UART_AdvFeatureConfig+0x150>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	0019      	movs	r1, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e30:	2210      	movs	r2, #16
 8004e32:	4013      	ands	r3, r2
 8004e34:	d00b      	beq.n	8004e4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	4a2c      	ldr	r2, [pc, #176]	; (8004ef0 <UART_AdvFeatureConfig+0x154>)
 8004e3e:	4013      	ands	r3, r2
 8004e40:	0019      	movs	r1, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e52:	2220      	movs	r2, #32
 8004e54:	4013      	ands	r3, r2
 8004e56:	d00b      	beq.n	8004e70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	4a25      	ldr	r2, [pc, #148]	; (8004ef4 <UART_AdvFeatureConfig+0x158>)
 8004e60:	4013      	ands	r3, r2
 8004e62:	0019      	movs	r1, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e74:	2240      	movs	r2, #64	; 0x40
 8004e76:	4013      	ands	r3, r2
 8004e78:	d01d      	beq.n	8004eb6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	4a1d      	ldr	r2, [pc, #116]	; (8004ef8 <UART_AdvFeatureConfig+0x15c>)
 8004e82:	4013      	ands	r3, r2
 8004e84:	0019      	movs	r1, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e96:	2380      	movs	r3, #128	; 0x80
 8004e98:	035b      	lsls	r3, r3, #13
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d10b      	bne.n	8004eb6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	4a15      	ldr	r2, [pc, #84]	; (8004efc <UART_AdvFeatureConfig+0x160>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	0019      	movs	r1, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eba:	2280      	movs	r2, #128	; 0x80
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	d00b      	beq.n	8004ed8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	4a0e      	ldr	r2, [pc, #56]	; (8004f00 <UART_AdvFeatureConfig+0x164>)
 8004ec8:	4013      	ands	r3, r2
 8004eca:	0019      	movs	r1, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	605a      	str	r2, [r3, #4]
  }
}
 8004ed8:	46c0      	nop			; (mov r8, r8)
 8004eda:	46bd      	mov	sp, r7
 8004edc:	b002      	add	sp, #8
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	fffdffff 	.word	0xfffdffff
 8004ee4:	fffeffff 	.word	0xfffeffff
 8004ee8:	fffbffff 	.word	0xfffbffff
 8004eec:	ffff7fff 	.word	0xffff7fff
 8004ef0:	ffffefff 	.word	0xffffefff
 8004ef4:	ffffdfff 	.word	0xffffdfff
 8004ef8:	ffefffff 	.word	0xffefffff
 8004efc:	ff9fffff 	.word	0xff9fffff
 8004f00:	fff7ffff 	.word	0xfff7ffff

08004f04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af02      	add	r7, sp, #8
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2290      	movs	r2, #144	; 0x90
 8004f10:	2100      	movs	r1, #0
 8004f12:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f14:	f7fc ffcc 	bl	8001eb0 <HAL_GetTick>
 8004f18:	0003      	movs	r3, r0
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2208      	movs	r2, #8
 8004f24:	4013      	ands	r3, r2
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d10c      	bne.n	8004f44 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2280      	movs	r2, #128	; 0x80
 8004f2e:	0391      	lsls	r1, r2, #14
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	4a1a      	ldr	r2, [pc, #104]	; (8004f9c <UART_CheckIdleState+0x98>)
 8004f34:	9200      	str	r2, [sp, #0]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f000 f832 	bl	8004fa0 <UART_WaitOnFlagUntilTimeout>
 8004f3c:	1e03      	subs	r3, r0, #0
 8004f3e:	d001      	beq.n	8004f44 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e026      	b.n	8004f92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2204      	movs	r2, #4
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d10c      	bne.n	8004f6c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2280      	movs	r2, #128	; 0x80
 8004f56:	03d1      	lsls	r1, r2, #15
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	4a10      	ldr	r2, [pc, #64]	; (8004f9c <UART_CheckIdleState+0x98>)
 8004f5c:	9200      	str	r2, [sp, #0]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f000 f81e 	bl	8004fa0 <UART_WaitOnFlagUntilTimeout>
 8004f64:	1e03      	subs	r3, r0, #0
 8004f66:	d001      	beq.n	8004f6c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e012      	b.n	8004f92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2288      	movs	r2, #136	; 0x88
 8004f70:	2120      	movs	r1, #32
 8004f72:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	228c      	movs	r2, #140	; 0x8c
 8004f78:	2120      	movs	r1, #32
 8004f7a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2284      	movs	r2, #132	; 0x84
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	0018      	movs	r0, r3
 8004f94:	46bd      	mov	sp, r7
 8004f96:	b004      	add	sp, #16
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	46c0      	nop			; (mov r8, r8)
 8004f9c:	01ffffff 	.word	0x01ffffff

08004fa0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b094      	sub	sp, #80	; 0x50
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	1dfb      	adds	r3, r7, #7
 8004fae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb0:	e0a7      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	d100      	bne.n	8004fba <UART_WaitOnFlagUntilTimeout+0x1a>
 8004fb8:	e0a3      	b.n	8005102 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fba:	f7fc ff79 	bl	8001eb0 <HAL_GetTick>
 8004fbe:	0002      	movs	r2, r0
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d302      	bcc.n	8004fd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d13f      	bne.n	8005050 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004fd8:	647b      	str	r3, [r7, #68]	; 0x44
 8004fda:	2301      	movs	r3, #1
 8004fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe0:	f383 8810 	msr	PRIMASK, r3
}
 8004fe4:	46c0      	nop			; (mov r8, r8)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	494e      	ldr	r1, [pc, #312]	; (800512c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004ff2:	400a      	ands	r2, r1
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ff8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	f383 8810 	msr	PRIMASK, r3
}
 8005000:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005002:	f3ef 8310 	mrs	r3, PRIMASK
 8005006:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800500a:	643b      	str	r3, [r7, #64]	; 0x40
 800500c:	2301      	movs	r3, #1
 800500e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005012:	f383 8810 	msr	PRIMASK, r3
}
 8005016:	46c0      	nop			; (mov r8, r8)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2101      	movs	r1, #1
 8005024:	438a      	bics	r2, r1
 8005026:	609a      	str	r2, [r3, #8]
 8005028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800502a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800502c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800502e:	f383 8810 	msr	PRIMASK, r3
}
 8005032:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2288      	movs	r2, #136	; 0x88
 8005038:	2120      	movs	r1, #32
 800503a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	228c      	movs	r2, #140	; 0x8c
 8005040:	2120      	movs	r1, #32
 8005042:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2284      	movs	r2, #132	; 0x84
 8005048:	2100      	movs	r1, #0
 800504a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e069      	b.n	8005124 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2204      	movs	r2, #4
 8005058:	4013      	ands	r3, r2
 800505a:	d052      	beq.n	8005102 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	69da      	ldr	r2, [r3, #28]
 8005062:	2380      	movs	r3, #128	; 0x80
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	401a      	ands	r2, r3
 8005068:	2380      	movs	r3, #128	; 0x80
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	429a      	cmp	r2, r3
 800506e:	d148      	bne.n	8005102 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2280      	movs	r2, #128	; 0x80
 8005076:	0112      	lsls	r2, r2, #4
 8005078:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800507a:	f3ef 8310 	mrs	r3, PRIMASK
 800507e:	613b      	str	r3, [r7, #16]
  return(result);
 8005080:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005084:	2301      	movs	r3, #1
 8005086:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f383 8810 	msr	PRIMASK, r3
}
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4924      	ldr	r1, [pc, #144]	; (800512c <UART_WaitOnFlagUntilTimeout+0x18c>)
 800509c:	400a      	ands	r2, r1
 800509e:	601a      	str	r2, [r3, #0]
 80050a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	f383 8810 	msr	PRIMASK, r3
}
 80050aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ac:	f3ef 8310 	mrs	r3, PRIMASK
 80050b0:	61fb      	str	r3, [r7, #28]
  return(result);
 80050b2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80050b6:	2301      	movs	r3, #1
 80050b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	f383 8810 	msr	PRIMASK, r3
}
 80050c0:	46c0      	nop			; (mov r8, r8)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2101      	movs	r1, #1
 80050ce:	438a      	bics	r2, r1
 80050d0:	609a      	str	r2, [r3, #8]
 80050d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	f383 8810 	msr	PRIMASK, r3
}
 80050dc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2288      	movs	r2, #136	; 0x88
 80050e2:	2120      	movs	r1, #32
 80050e4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	228c      	movs	r2, #140	; 0x8c
 80050ea:	2120      	movs	r1, #32
 80050ec:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2290      	movs	r2, #144	; 0x90
 80050f2:	2120      	movs	r1, #32
 80050f4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2284      	movs	r2, #132	; 0x84
 80050fa:	2100      	movs	r1, #0
 80050fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e010      	b.n	8005124 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	69db      	ldr	r3, [r3, #28]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	4013      	ands	r3, r2
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	425a      	negs	r2, r3
 8005112:	4153      	adcs	r3, r2
 8005114:	b2db      	uxtb	r3, r3
 8005116:	001a      	movs	r2, r3
 8005118:	1dfb      	adds	r3, r7, #7
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d100      	bne.n	8005122 <UART_WaitOnFlagUntilTimeout+0x182>
 8005120:	e747      	b.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	0018      	movs	r0, r3
 8005126:	46bd      	mov	sp, r7
 8005128:	b014      	add	sp, #80	; 0x50
 800512a:	bd80      	pop	{r7, pc}
 800512c:	fffffe5f 	.word	0xfffffe5f

08005130 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b098      	sub	sp, #96	; 0x60
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	1dbb      	adds	r3, r7, #6
 800513c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	1dba      	adds	r2, r7, #6
 8005148:	215c      	movs	r1, #92	; 0x5c
 800514a:	8812      	ldrh	r2, [r2, #0]
 800514c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	1dba      	adds	r2, r7, #6
 8005152:	215e      	movs	r1, #94	; 0x5e
 8005154:	8812      	ldrh	r2, [r2, #0]
 8005156:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	689a      	ldr	r2, [r3, #8]
 8005162:	2380      	movs	r3, #128	; 0x80
 8005164:	015b      	lsls	r3, r3, #5
 8005166:	429a      	cmp	r2, r3
 8005168:	d10d      	bne.n	8005186 <UART_Start_Receive_IT+0x56>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d104      	bne.n	800517c <UART_Start_Receive_IT+0x4c>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2260      	movs	r2, #96	; 0x60
 8005176:	497b      	ldr	r1, [pc, #492]	; (8005364 <UART_Start_Receive_IT+0x234>)
 8005178:	5299      	strh	r1, [r3, r2]
 800517a:	e02e      	b.n	80051da <UART_Start_Receive_IT+0xaa>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2260      	movs	r2, #96	; 0x60
 8005180:	21ff      	movs	r1, #255	; 0xff
 8005182:	5299      	strh	r1, [r3, r2]
 8005184:	e029      	b.n	80051da <UART_Start_Receive_IT+0xaa>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10d      	bne.n	80051aa <UART_Start_Receive_IT+0x7a>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d104      	bne.n	80051a0 <UART_Start_Receive_IT+0x70>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2260      	movs	r2, #96	; 0x60
 800519a:	21ff      	movs	r1, #255	; 0xff
 800519c:	5299      	strh	r1, [r3, r2]
 800519e:	e01c      	b.n	80051da <UART_Start_Receive_IT+0xaa>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2260      	movs	r2, #96	; 0x60
 80051a4:	217f      	movs	r1, #127	; 0x7f
 80051a6:	5299      	strh	r1, [r3, r2]
 80051a8:	e017      	b.n	80051da <UART_Start_Receive_IT+0xaa>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	2380      	movs	r3, #128	; 0x80
 80051b0:	055b      	lsls	r3, r3, #21
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d10d      	bne.n	80051d2 <UART_Start_Receive_IT+0xa2>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d104      	bne.n	80051c8 <UART_Start_Receive_IT+0x98>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2260      	movs	r2, #96	; 0x60
 80051c2:	217f      	movs	r1, #127	; 0x7f
 80051c4:	5299      	strh	r1, [r3, r2]
 80051c6:	e008      	b.n	80051da <UART_Start_Receive_IT+0xaa>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2260      	movs	r2, #96	; 0x60
 80051cc:	213f      	movs	r1, #63	; 0x3f
 80051ce:	5299      	strh	r1, [r3, r2]
 80051d0:	e003      	b.n	80051da <UART_Start_Receive_IT+0xaa>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2260      	movs	r2, #96	; 0x60
 80051d6:	2100      	movs	r1, #0
 80051d8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2290      	movs	r2, #144	; 0x90
 80051de:	2100      	movs	r1, #0
 80051e0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	228c      	movs	r2, #140	; 0x8c
 80051e6:	2122      	movs	r1, #34	; 0x22
 80051e8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051ea:	f3ef 8310 	mrs	r3, PRIMASK
 80051ee:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80051f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051f4:	2301      	movs	r3, #1
 80051f6:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051fa:	f383 8810 	msr	PRIMASK, r3
}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2101      	movs	r1, #1
 800520c:	430a      	orrs	r2, r1
 800520e:	609a      	str	r2, [r3, #8]
 8005210:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005212:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005216:	f383 8810 	msr	PRIMASK, r3
}
 800521a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005220:	2380      	movs	r3, #128	; 0x80
 8005222:	059b      	lsls	r3, r3, #22
 8005224:	429a      	cmp	r2, r3
 8005226:	d150      	bne.n	80052ca <UART_Start_Receive_IT+0x19a>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2268      	movs	r2, #104	; 0x68
 800522c:	5a9b      	ldrh	r3, [r3, r2]
 800522e:	1dba      	adds	r2, r7, #6
 8005230:	8812      	ldrh	r2, [r2, #0]
 8005232:	429a      	cmp	r2, r3
 8005234:	d349      	bcc.n	80052ca <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	2380      	movs	r3, #128	; 0x80
 800523c:	015b      	lsls	r3, r3, #5
 800523e:	429a      	cmp	r2, r3
 8005240:	d107      	bne.n	8005252 <UART_Start_Receive_IT+0x122>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d103      	bne.n	8005252 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4a46      	ldr	r2, [pc, #280]	; (8005368 <UART_Start_Receive_IT+0x238>)
 800524e:	675a      	str	r2, [r3, #116]	; 0x74
 8005250:	e002      	b.n	8005258 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4a45      	ldr	r2, [pc, #276]	; (800536c <UART_Start_Receive_IT+0x23c>)
 8005256:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d019      	beq.n	8005294 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005260:	f3ef 8310 	mrs	r3, PRIMASK
 8005264:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005268:	65bb      	str	r3, [r7, #88]	; 0x58
 800526a:	2301      	movs	r3, #1
 800526c:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800526e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005270:	f383 8810 	msr	PRIMASK, r3
}
 8005274:	46c0      	nop			; (mov r8, r8)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2180      	movs	r1, #128	; 0x80
 8005282:	0049      	lsls	r1, r1, #1
 8005284:	430a      	orrs	r2, r1
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800528a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800528c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800528e:	f383 8810 	msr	PRIMASK, r3
}
 8005292:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005294:	f3ef 8310 	mrs	r3, PRIMASK
 8005298:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800529a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800529c:	657b      	str	r3, [r7, #84]	; 0x54
 800529e:	2301      	movs	r3, #1
 80052a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a4:	f383 8810 	msr	PRIMASK, r3
}
 80052a8:	46c0      	nop			; (mov r8, r8)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2180      	movs	r1, #128	; 0x80
 80052b6:	0549      	lsls	r1, r1, #21
 80052b8:	430a      	orrs	r2, r1
 80052ba:	609a      	str	r2, [r3, #8]
 80052bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052be:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c2:	f383 8810 	msr	PRIMASK, r3
}
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	e047      	b.n	800535a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	2380      	movs	r3, #128	; 0x80
 80052d0:	015b      	lsls	r3, r3, #5
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d107      	bne.n	80052e6 <UART_Start_Receive_IT+0x1b6>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d103      	bne.n	80052e6 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4a23      	ldr	r2, [pc, #140]	; (8005370 <UART_Start_Receive_IT+0x240>)
 80052e2:	675a      	str	r2, [r3, #116]	; 0x74
 80052e4:	e002      	b.n	80052ec <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4a22      	ldr	r2, [pc, #136]	; (8005374 <UART_Start_Receive_IT+0x244>)
 80052ea:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d019      	beq.n	8005328 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052f4:	f3ef 8310 	mrs	r3, PRIMASK
 80052f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80052fa:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80052fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052fe:	2301      	movs	r3, #1
 8005300:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	f383 8810 	msr	PRIMASK, r3
}
 8005308:	46c0      	nop			; (mov r8, r8)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2190      	movs	r1, #144	; 0x90
 8005316:	0049      	lsls	r1, r1, #1
 8005318:	430a      	orrs	r2, r1
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800531e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	f383 8810 	msr	PRIMASK, r3
}
 8005326:	e018      	b.n	800535a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005328:	f3ef 8310 	mrs	r3, PRIMASK
 800532c:	613b      	str	r3, [r7, #16]
  return(result);
 800532e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005330:	653b      	str	r3, [r7, #80]	; 0x50
 8005332:	2301      	movs	r3, #1
 8005334:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f383 8810 	msr	PRIMASK, r3
}
 800533c:	46c0      	nop			; (mov r8, r8)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2120      	movs	r1, #32
 800534a:	430a      	orrs	r2, r1
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005350:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	f383 8810 	msr	PRIMASK, r3
}
 8005358:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	0018      	movs	r0, r3
 800535e:	46bd      	mov	sp, r7
 8005360:	b018      	add	sp, #96	; 0x60
 8005362:	bd80      	pop	{r7, pc}
 8005364:	000001ff 	.word	0x000001ff
 8005368:	08005aa1 	.word	0x08005aa1
 800536c:	080057b5 	.word	0x080057b5
 8005370:	08005641 	.word	0x08005641
 8005374:	080054cd 	.word	0x080054cd

08005378 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08e      	sub	sp, #56	; 0x38
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005380:	f3ef 8310 	mrs	r3, PRIMASK
 8005384:	617b      	str	r3, [r7, #20]
  return(result);
 8005386:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005388:	637b      	str	r3, [r7, #52]	; 0x34
 800538a:	2301      	movs	r3, #1
 800538c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	f383 8810 	msr	PRIMASK, r3
}
 8005394:	46c0      	nop			; (mov r8, r8)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4926      	ldr	r1, [pc, #152]	; (800543c <UART_EndRxTransfer+0xc4>)
 80053a2:	400a      	ands	r2, r1
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	f383 8810 	msr	PRIMASK, r3
}
 80053b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053b2:	f3ef 8310 	mrs	r3, PRIMASK
 80053b6:	623b      	str	r3, [r7, #32]
  return(result);
 80053b8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053ba:	633b      	str	r3, [r7, #48]	; 0x30
 80053bc:	2301      	movs	r3, #1
 80053be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	f383 8810 	msr	PRIMASK, r3
}
 80053c6:	46c0      	nop			; (mov r8, r8)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	491b      	ldr	r1, [pc, #108]	; (8005440 <UART_EndRxTransfer+0xc8>)
 80053d4:	400a      	ands	r2, r1
 80053d6:	609a      	str	r2, [r3, #8]
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053de:	f383 8810 	msr	PRIMASK, r3
}
 80053e2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d118      	bne.n	800541e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ec:	f3ef 8310 	mrs	r3, PRIMASK
 80053f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80053f2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053f6:	2301      	movs	r3, #1
 80053f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f383 8810 	msr	PRIMASK, r3
}
 8005400:	46c0      	nop			; (mov r8, r8)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2110      	movs	r1, #16
 800540e:	438a      	bics	r2, r1
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005414:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f383 8810 	msr	PRIMASK, r3
}
 800541c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	228c      	movs	r2, #140	; 0x8c
 8005422:	2120      	movs	r1, #32
 8005424:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005432:	46c0      	nop			; (mov r8, r8)
 8005434:	46bd      	mov	sp, r7
 8005436:	b00e      	add	sp, #56	; 0x38
 8005438:	bd80      	pop	{r7, pc}
 800543a:	46c0      	nop			; (mov r8, r8)
 800543c:	fffffedf 	.word	0xfffffedf
 8005440:	effffffe 	.word	0xeffffffe

08005444 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005450:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	225e      	movs	r2, #94	; 0x5e
 8005456:	2100      	movs	r1, #0
 8005458:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2256      	movs	r2, #86	; 0x56
 800545e:	2100      	movs	r1, #0
 8005460:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	0018      	movs	r0, r3
 8005466:	f7ff faaf 	bl	80049c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800546a:	46c0      	nop			; (mov r8, r8)
 800546c:	46bd      	mov	sp, r7
 800546e:	b004      	add	sp, #16
 8005470:	bd80      	pop	{r7, pc}

08005472 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b086      	sub	sp, #24
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800547a:	f3ef 8310 	mrs	r3, PRIMASK
 800547e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005480:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	2301      	movs	r3, #1
 8005486:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f383 8810 	msr	PRIMASK, r3
}
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2140      	movs	r1, #64	; 0x40
 800549c:	438a      	bics	r2, r1
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f383 8810 	msr	PRIMASK, r3
}
 80054aa:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2288      	movs	r2, #136	; 0x88
 80054b0:	2120      	movs	r1, #32
 80054b2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	0018      	movs	r0, r3
 80054be:	f7ff fa73 	bl	80049a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	46bd      	mov	sp, r7
 80054c6:	b006      	add	sp, #24
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b090      	sub	sp, #64	; 0x40
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80054d4:	203e      	movs	r0, #62	; 0x3e
 80054d6:	183b      	adds	r3, r7, r0
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	2160      	movs	r1, #96	; 0x60
 80054dc:	5a52      	ldrh	r2, [r2, r1]
 80054de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	228c      	movs	r2, #140	; 0x8c
 80054e4:	589b      	ldr	r3, [r3, r2]
 80054e6:	2b22      	cmp	r3, #34	; 0x22
 80054e8:	d000      	beq.n	80054ec <UART_RxISR_8BIT+0x20>
 80054ea:	e09a      	b.n	8005622 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054f2:	213c      	movs	r1, #60	; 0x3c
 80054f4:	187b      	adds	r3, r7, r1
 80054f6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80054f8:	187b      	adds	r3, r7, r1
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	183b      	adds	r3, r7, r0
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	b2d9      	uxtb	r1, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005508:	400a      	ands	r2, r1
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	225e      	movs	r2, #94	; 0x5e
 800551c:	5a9b      	ldrh	r3, [r3, r2]
 800551e:	b29b      	uxth	r3, r3
 8005520:	3b01      	subs	r3, #1
 8005522:	b299      	uxth	r1, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	225e      	movs	r2, #94	; 0x5e
 8005528:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	225e      	movs	r2, #94	; 0x5e
 800552e:	5a9b      	ldrh	r3, [r3, r2]
 8005530:	b29b      	uxth	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d000      	beq.n	8005538 <UART_RxISR_8BIT+0x6c>
 8005536:	e07c      	b.n	8005632 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005538:	f3ef 8310 	mrs	r3, PRIMASK
 800553c:	61bb      	str	r3, [r7, #24]
  return(result);
 800553e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005540:	63bb      	str	r3, [r7, #56]	; 0x38
 8005542:	2301      	movs	r3, #1
 8005544:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	f383 8810 	msr	PRIMASK, r3
}
 800554c:	46c0      	nop			; (mov r8, r8)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4938      	ldr	r1, [pc, #224]	; (800563c <UART_RxISR_8BIT+0x170>)
 800555a:	400a      	ands	r2, r1
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005560:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	f383 8810 	msr	PRIMASK, r3
}
 8005568:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800556a:	f3ef 8310 	mrs	r3, PRIMASK
 800556e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005572:	637b      	str	r3, [r7, #52]	; 0x34
 8005574:	2301      	movs	r3, #1
 8005576:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557a:	f383 8810 	msr	PRIMASK, r3
}
 800557e:	46c0      	nop			; (mov r8, r8)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2101      	movs	r1, #1
 800558c:	438a      	bics	r2, r1
 800558e:	609a      	str	r2, [r3, #8]
 8005590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005592:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005596:	f383 8810 	msr	PRIMASK, r3
}
 800559a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	228c      	movs	r2, #140	; 0x8c
 80055a0:	2120      	movs	r1, #32
 80055a2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d12f      	bne.n	8005618 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055be:	f3ef 8310 	mrs	r3, PRIMASK
 80055c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80055c4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c6:	633b      	str	r3, [r7, #48]	; 0x30
 80055c8:	2301      	movs	r3, #1
 80055ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f383 8810 	msr	PRIMASK, r3
}
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2110      	movs	r1, #16
 80055e0:	438a      	bics	r2, r1
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f383 8810 	msr	PRIMASK, r3
}
 80055ee:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	2210      	movs	r2, #16
 80055f8:	4013      	ands	r3, r2
 80055fa:	2b10      	cmp	r3, #16
 80055fc:	d103      	bne.n	8005606 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2210      	movs	r2, #16
 8005604:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	225c      	movs	r2, #92	; 0x5c
 800560a:	5a9a      	ldrh	r2, [r3, r2]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	0011      	movs	r1, r2
 8005610:	0018      	movs	r0, r3
 8005612:	f7fa ffd9 	bl	80005c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005616:	e00c      	b.n	8005632 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	0018      	movs	r0, r3
 800561c:	f7ff f9cc 	bl	80049b8 <HAL_UART_RxCpltCallback>
}
 8005620:	e007      	b.n	8005632 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	699a      	ldr	r2, [r3, #24]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2108      	movs	r1, #8
 800562e:	430a      	orrs	r2, r1
 8005630:	619a      	str	r2, [r3, #24]
}
 8005632:	46c0      	nop			; (mov r8, r8)
 8005634:	46bd      	mov	sp, r7
 8005636:	b010      	add	sp, #64	; 0x40
 8005638:	bd80      	pop	{r7, pc}
 800563a:	46c0      	nop			; (mov r8, r8)
 800563c:	fffffedf 	.word	0xfffffedf

08005640 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b090      	sub	sp, #64	; 0x40
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005648:	203e      	movs	r0, #62	; 0x3e
 800564a:	183b      	adds	r3, r7, r0
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	2160      	movs	r1, #96	; 0x60
 8005650:	5a52      	ldrh	r2, [r2, r1]
 8005652:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	228c      	movs	r2, #140	; 0x8c
 8005658:	589b      	ldr	r3, [r3, r2]
 800565a:	2b22      	cmp	r3, #34	; 0x22
 800565c:	d000      	beq.n	8005660 <UART_RxISR_16BIT+0x20>
 800565e:	e09a      	b.n	8005796 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005666:	213c      	movs	r1, #60	; 0x3c
 8005668:	187b      	adds	r3, r7, r1
 800566a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005670:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8005672:	187b      	adds	r3, r7, r1
 8005674:	183a      	adds	r2, r7, r0
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	8812      	ldrh	r2, [r2, #0]
 800567a:	4013      	ands	r3, r2
 800567c:	b29a      	uxth	r2, r3
 800567e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005680:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005686:	1c9a      	adds	r2, r3, #2
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	225e      	movs	r2, #94	; 0x5e
 8005690:	5a9b      	ldrh	r3, [r3, r2]
 8005692:	b29b      	uxth	r3, r3
 8005694:	3b01      	subs	r3, #1
 8005696:	b299      	uxth	r1, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	225e      	movs	r2, #94	; 0x5e
 800569c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	225e      	movs	r2, #94	; 0x5e
 80056a2:	5a9b      	ldrh	r3, [r3, r2]
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d000      	beq.n	80056ac <UART_RxISR_16BIT+0x6c>
 80056aa:	e07c      	b.n	80057a6 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ac:	f3ef 8310 	mrs	r3, PRIMASK
 80056b0:	617b      	str	r3, [r7, #20]
  return(result);
 80056b2:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056b4:	637b      	str	r3, [r7, #52]	; 0x34
 80056b6:	2301      	movs	r3, #1
 80056b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	f383 8810 	msr	PRIMASK, r3
}
 80056c0:	46c0      	nop			; (mov r8, r8)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4938      	ldr	r1, [pc, #224]	; (80057b0 <UART_RxISR_16BIT+0x170>)
 80056ce:	400a      	ands	r2, r1
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	f383 8810 	msr	PRIMASK, r3
}
 80056dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056de:	f3ef 8310 	mrs	r3, PRIMASK
 80056e2:	623b      	str	r3, [r7, #32]
  return(result);
 80056e4:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e6:	633b      	str	r3, [r7, #48]	; 0x30
 80056e8:	2301      	movs	r3, #1
 80056ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	f383 8810 	msr	PRIMASK, r3
}
 80056f2:	46c0      	nop			; (mov r8, r8)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689a      	ldr	r2, [r3, #8]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2101      	movs	r1, #1
 8005700:	438a      	bics	r2, r1
 8005702:	609a      	str	r2, [r3, #8]
 8005704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005706:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	f383 8810 	msr	PRIMASK, r3
}
 800570e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	228c      	movs	r2, #140	; 0x8c
 8005714:	2120      	movs	r1, #32
 8005716:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005728:	2b01      	cmp	r3, #1
 800572a:	d12f      	bne.n	800578c <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005732:	f3ef 8310 	mrs	r3, PRIMASK
 8005736:	60bb      	str	r3, [r7, #8]
  return(result);
 8005738:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800573a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800573c:	2301      	movs	r3, #1
 800573e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f383 8810 	msr	PRIMASK, r3
}
 8005746:	46c0      	nop			; (mov r8, r8)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2110      	movs	r1, #16
 8005754:	438a      	bics	r2, r1
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	f383 8810 	msr	PRIMASK, r3
}
 8005762:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	2210      	movs	r2, #16
 800576c:	4013      	ands	r3, r2
 800576e:	2b10      	cmp	r3, #16
 8005770:	d103      	bne.n	800577a <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2210      	movs	r2, #16
 8005778:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	225c      	movs	r2, #92	; 0x5c
 800577e:	5a9a      	ldrh	r2, [r3, r2]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	0011      	movs	r1, r2
 8005784:	0018      	movs	r0, r3
 8005786:	f7fa ff1f 	bl	80005c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800578a:	e00c      	b.n	80057a6 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	0018      	movs	r0, r3
 8005790:	f7ff f912 	bl	80049b8 <HAL_UART_RxCpltCallback>
}
 8005794:	e007      	b.n	80057a6 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	699a      	ldr	r2, [r3, #24]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2108      	movs	r1, #8
 80057a2:	430a      	orrs	r2, r1
 80057a4:	619a      	str	r2, [r3, #24]
}
 80057a6:	46c0      	nop			; (mov r8, r8)
 80057a8:	46bd      	mov	sp, r7
 80057aa:	b010      	add	sp, #64	; 0x40
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	46c0      	nop			; (mov r8, r8)
 80057b0:	fffffedf 	.word	0xfffffedf

080057b4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b09c      	sub	sp, #112	; 0x70
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80057bc:	236a      	movs	r3, #106	; 0x6a
 80057be:	18fb      	adds	r3, r7, r3
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	2160      	movs	r1, #96	; 0x60
 80057c4:	5a52      	ldrh	r2, [r2, r1]
 80057c6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	228c      	movs	r2, #140	; 0x8c
 80057e4:	589b      	ldr	r3, [r3, r2]
 80057e6:	2b22      	cmp	r3, #34	; 0x22
 80057e8:	d000      	beq.n	80057ec <UART_RxISR_8BIT_FIFOEN+0x38>
 80057ea:	e144      	b.n	8005a76 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80057ec:	235e      	movs	r3, #94	; 0x5e
 80057ee:	18fb      	adds	r3, r7, r3
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	2168      	movs	r1, #104	; 0x68
 80057f4:	5a52      	ldrh	r2, [r2, r1]
 80057f6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80057f8:	e0eb      	b.n	80059d2 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005800:	215c      	movs	r1, #92	; 0x5c
 8005802:	187b      	adds	r3, r7, r1
 8005804:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005806:	187b      	adds	r3, r7, r1
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	b2da      	uxtb	r2, r3
 800580c:	236a      	movs	r3, #106	; 0x6a
 800580e:	18fb      	adds	r3, r7, r3
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	b2d9      	uxtb	r1, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005818:	400a      	ands	r2, r1
 800581a:	b2d2      	uxtb	r2, r2
 800581c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	225e      	movs	r2, #94	; 0x5e
 800582c:	5a9b      	ldrh	r3, [r3, r2]
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b01      	subs	r3, #1
 8005832:	b299      	uxth	r1, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	225e      	movs	r2, #94	; 0x5e
 8005838:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005844:	2207      	movs	r2, #7
 8005846:	4013      	ands	r3, r2
 8005848:	d049      	beq.n	80058de <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800584a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800584c:	2201      	movs	r2, #1
 800584e:	4013      	ands	r3, r2
 8005850:	d010      	beq.n	8005874 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005852:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005854:	2380      	movs	r3, #128	; 0x80
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	4013      	ands	r3, r2
 800585a:	d00b      	beq.n	8005874 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2201      	movs	r2, #1
 8005862:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2290      	movs	r2, #144	; 0x90
 8005868:	589b      	ldr	r3, [r3, r2]
 800586a:	2201      	movs	r2, #1
 800586c:	431a      	orrs	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2190      	movs	r1, #144	; 0x90
 8005872:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005876:	2202      	movs	r2, #2
 8005878:	4013      	ands	r3, r2
 800587a:	d00f      	beq.n	800589c <UART_RxISR_8BIT_FIFOEN+0xe8>
 800587c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800587e:	2201      	movs	r2, #1
 8005880:	4013      	ands	r3, r2
 8005882:	d00b      	beq.n	800589c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2202      	movs	r2, #2
 800588a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2290      	movs	r2, #144	; 0x90
 8005890:	589b      	ldr	r3, [r3, r2]
 8005892:	2204      	movs	r2, #4
 8005894:	431a      	orrs	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2190      	movs	r1, #144	; 0x90
 800589a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800589c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800589e:	2204      	movs	r2, #4
 80058a0:	4013      	ands	r3, r2
 80058a2:	d00f      	beq.n	80058c4 <UART_RxISR_8BIT_FIFOEN+0x110>
 80058a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058a6:	2201      	movs	r2, #1
 80058a8:	4013      	ands	r3, r2
 80058aa:	d00b      	beq.n	80058c4 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2204      	movs	r2, #4
 80058b2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2290      	movs	r2, #144	; 0x90
 80058b8:	589b      	ldr	r3, [r3, r2]
 80058ba:	2202      	movs	r2, #2
 80058bc:	431a      	orrs	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2190      	movs	r1, #144	; 0x90
 80058c2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2290      	movs	r2, #144	; 0x90
 80058c8:	589b      	ldr	r3, [r3, r2]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d007      	beq.n	80058de <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	0018      	movs	r0, r3
 80058d2:	f7ff f879 	bl	80049c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2290      	movs	r2, #144	; 0x90
 80058da:	2100      	movs	r1, #0
 80058dc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	225e      	movs	r2, #94	; 0x5e
 80058e2:	5a9b      	ldrh	r3, [r3, r2]
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d173      	bne.n	80059d2 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ea:	f3ef 8310 	mrs	r3, PRIMASK
 80058ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80058f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80058f4:	2301      	movs	r3, #1
 80058f6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	f383 8810 	msr	PRIMASK, r3
}
 80058fe:	46c0      	nop			; (mov r8, r8)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4961      	ldr	r1, [pc, #388]	; (8005a90 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800590c:	400a      	ands	r2, r1
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005912:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005916:	f383 8810 	msr	PRIMASK, r3
}
 800591a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800591c:	f3ef 8310 	mrs	r3, PRIMASK
 8005920:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8005922:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005924:	657b      	str	r3, [r7, #84]	; 0x54
 8005926:	2301      	movs	r3, #1
 8005928:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800592a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800592c:	f383 8810 	msr	PRIMASK, r3
}
 8005930:	46c0      	nop			; (mov r8, r8)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4955      	ldr	r1, [pc, #340]	; (8005a94 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800593e:	400a      	ands	r2, r1
 8005940:	609a      	str	r2, [r3, #8]
 8005942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005944:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005948:	f383 8810 	msr	PRIMASK, r3
}
 800594c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	228c      	movs	r2, #140	; 0x8c
 8005952:	2120      	movs	r1, #32
 8005954:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005966:	2b01      	cmp	r3, #1
 8005968:	d12f      	bne.n	80059ca <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005970:	f3ef 8310 	mrs	r3, PRIMASK
 8005974:	623b      	str	r3, [r7, #32]
  return(result);
 8005976:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005978:	653b      	str	r3, [r7, #80]	; 0x50
 800597a:	2301      	movs	r3, #1
 800597c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005980:	f383 8810 	msr	PRIMASK, r3
}
 8005984:	46c0      	nop			; (mov r8, r8)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2110      	movs	r1, #16
 8005992:	438a      	bics	r2, r1
 8005994:	601a      	str	r2, [r3, #0]
 8005996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005998:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800599a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599c:	f383 8810 	msr	PRIMASK, r3
}
 80059a0:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	2210      	movs	r2, #16
 80059aa:	4013      	ands	r3, r2
 80059ac:	2b10      	cmp	r3, #16
 80059ae:	d103      	bne.n	80059b8 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2210      	movs	r2, #16
 80059b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	225c      	movs	r2, #92	; 0x5c
 80059bc:	5a9a      	ldrh	r2, [r3, r2]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	0011      	movs	r1, r2
 80059c2:	0018      	movs	r0, r3
 80059c4:	f7fa fe00 	bl	80005c8 <HAL_UARTEx_RxEventCallback>
 80059c8:	e003      	b.n	80059d2 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	0018      	movs	r0, r3
 80059ce:	f7fe fff3 	bl	80049b8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80059d2:	235e      	movs	r3, #94	; 0x5e
 80059d4:	18fb      	adds	r3, r7, r3
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d004      	beq.n	80059e6 <UART_RxISR_8BIT_FIFOEN+0x232>
 80059dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059de:	2220      	movs	r2, #32
 80059e0:	4013      	ands	r3, r2
 80059e2:	d000      	beq.n	80059e6 <UART_RxISR_8BIT_FIFOEN+0x232>
 80059e4:	e709      	b.n	80057fa <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80059e6:	204e      	movs	r0, #78	; 0x4e
 80059e8:	183b      	adds	r3, r7, r0
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	215e      	movs	r1, #94	; 0x5e
 80059ee:	5a52      	ldrh	r2, [r2, r1]
 80059f0:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80059f2:	0001      	movs	r1, r0
 80059f4:	187b      	adds	r3, r7, r1
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d044      	beq.n	8005a86 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2268      	movs	r2, #104	; 0x68
 8005a00:	5a9b      	ldrh	r3, [r3, r2]
 8005a02:	187a      	adds	r2, r7, r1
 8005a04:	8812      	ldrh	r2, [r2, #0]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d23d      	bcs.n	8005a86 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a10:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005a12:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a14:	2301      	movs	r3, #1
 8005a16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f383 8810 	msr	PRIMASK, r3
}
 8005a1e:	46c0      	nop			; (mov r8, r8)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689a      	ldr	r2, [r3, #8]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	491b      	ldr	r1, [pc, #108]	; (8005a98 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8005a2c:	400a      	ands	r2, r1
 8005a2e:	609a      	str	r2, [r3, #8]
 8005a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	f383 8810 	msr	PRIMASK, r3
}
 8005a3a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a17      	ldr	r2, [pc, #92]	; (8005a9c <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8005a40:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a42:	f3ef 8310 	mrs	r3, PRIMASK
 8005a46:	617b      	str	r3, [r7, #20]
  return(result);
 8005a48:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005a4a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	f383 8810 	msr	PRIMASK, r3
}
 8005a56:	46c0      	nop			; (mov r8, r8)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2120      	movs	r1, #32
 8005a64:	430a      	orrs	r2, r1
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	f383 8810 	msr	PRIMASK, r3
}
 8005a72:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a74:	e007      	b.n	8005a86 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	699a      	ldr	r2, [r3, #24]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2108      	movs	r1, #8
 8005a82:	430a      	orrs	r2, r1
 8005a84:	619a      	str	r2, [r3, #24]
}
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	b01c      	add	sp, #112	; 0x70
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	46c0      	nop			; (mov r8, r8)
 8005a90:	fffffeff 	.word	0xfffffeff
 8005a94:	effffffe 	.word	0xeffffffe
 8005a98:	efffffff 	.word	0xefffffff
 8005a9c:	080054cd 	.word	0x080054cd

08005aa0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b09e      	sub	sp, #120	; 0x78
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005aa8:	2372      	movs	r3, #114	; 0x72
 8005aaa:	18fb      	adds	r3, r7, r3
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	2160      	movs	r1, #96	; 0x60
 8005ab0:	5a52      	ldrh	r2, [r2, r1]
 8005ab2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	228c      	movs	r2, #140	; 0x8c
 8005ad0:	589b      	ldr	r3, [r3, r2]
 8005ad2:	2b22      	cmp	r3, #34	; 0x22
 8005ad4:	d000      	beq.n	8005ad8 <UART_RxISR_16BIT_FIFOEN+0x38>
 8005ad6:	e144      	b.n	8005d62 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005ad8:	2366      	movs	r3, #102	; 0x66
 8005ada:	18fb      	adds	r3, r7, r3
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	2168      	movs	r1, #104	; 0x68
 8005ae0:	5a52      	ldrh	r2, [r2, r1]
 8005ae2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ae4:	e0eb      	b.n	8005cbe <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aec:	2164      	movs	r1, #100	; 0x64
 8005aee:	187b      	adds	r3, r7, r1
 8005af0:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af6:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8005af8:	187b      	adds	r3, r7, r1
 8005afa:	2272      	movs	r2, #114	; 0x72
 8005afc:	18ba      	adds	r2, r7, r2
 8005afe:	881b      	ldrh	r3, [r3, #0]
 8005b00:	8812      	ldrh	r2, [r2, #0]
 8005b02:	4013      	ands	r3, r2
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b0e:	1c9a      	adds	r2, r3, #2
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	225e      	movs	r2, #94	; 0x5e
 8005b18:	5a9b      	ldrh	r3, [r3, r2]
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	b299      	uxth	r1, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	225e      	movs	r2, #94	; 0x5e
 8005b24:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69db      	ldr	r3, [r3, #28]
 8005b2c:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b30:	2207      	movs	r2, #7
 8005b32:	4013      	ands	r3, r2
 8005b34:	d049      	beq.n	8005bca <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b38:	2201      	movs	r2, #1
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	d010      	beq.n	8005b60 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8005b3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b40:	2380      	movs	r3, #128	; 0x80
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	4013      	ands	r3, r2
 8005b46:	d00b      	beq.n	8005b60 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2290      	movs	r2, #144	; 0x90
 8005b54:	589b      	ldr	r3, [r3, r2]
 8005b56:	2201      	movs	r2, #1
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2190      	movs	r1, #144	; 0x90
 8005b5e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b62:	2202      	movs	r2, #2
 8005b64:	4013      	ands	r3, r2
 8005b66:	d00f      	beq.n	8005b88 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8005b68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	d00b      	beq.n	8005b88 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2202      	movs	r2, #2
 8005b76:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2290      	movs	r2, #144	; 0x90
 8005b7c:	589b      	ldr	r3, [r3, r2]
 8005b7e:	2204      	movs	r2, #4
 8005b80:	431a      	orrs	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2190      	movs	r1, #144	; 0x90
 8005b86:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b8a:	2204      	movs	r2, #4
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	d00f      	beq.n	8005bb0 <UART_RxISR_16BIT_FIFOEN+0x110>
 8005b90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b92:	2201      	movs	r2, #1
 8005b94:	4013      	ands	r3, r2
 8005b96:	d00b      	beq.n	8005bb0 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2204      	movs	r2, #4
 8005b9e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2290      	movs	r2, #144	; 0x90
 8005ba4:	589b      	ldr	r3, [r3, r2]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2190      	movs	r1, #144	; 0x90
 8005bae:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2290      	movs	r2, #144	; 0x90
 8005bb4:	589b      	ldr	r3, [r3, r2]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d007      	beq.n	8005bca <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f7fe ff03 	bl	80049c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2290      	movs	r2, #144	; 0x90
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	225e      	movs	r2, #94	; 0x5e
 8005bce:	5a9b      	ldrh	r3, [r3, r2]
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d173      	bne.n	8005cbe <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8005bda:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005be0:	2301      	movs	r3, #1
 8005be2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be6:	f383 8810 	msr	PRIMASK, r3
}
 8005bea:	46c0      	nop			; (mov r8, r8)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4961      	ldr	r1, [pc, #388]	; (8005d7c <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8005bf8:	400a      	ands	r2, r1
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c02:	f383 8810 	msr	PRIMASK, r3
}
 8005c06:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c08:	f3ef 8310 	mrs	r3, PRIMASK
 8005c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c10:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c12:	2301      	movs	r3, #1
 8005c14:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c18:	f383 8810 	msr	PRIMASK, r3
}
 8005c1c:	46c0      	nop			; (mov r8, r8)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4955      	ldr	r1, [pc, #340]	; (8005d80 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8005c2a:	400a      	ands	r2, r1
 8005c2c:	609a      	str	r2, [r3, #8]
 8005c2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c30:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c34:	f383 8810 	msr	PRIMASK, r3
}
 8005c38:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	228c      	movs	r2, #140	; 0x8c
 8005c3e:	2120      	movs	r1, #32
 8005c40:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d12f      	bne.n	8005cb6 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8005c60:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c64:	657b      	str	r3, [r7, #84]	; 0x54
 8005c66:	2301      	movs	r3, #1
 8005c68:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6c:	f383 8810 	msr	PRIMASK, r3
}
 8005c70:	46c0      	nop			; (mov r8, r8)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2110      	movs	r1, #16
 8005c7e:	438a      	bics	r2, r1
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c88:	f383 8810 	msr	PRIMASK, r3
}
 8005c8c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	2210      	movs	r2, #16
 8005c96:	4013      	ands	r3, r2
 8005c98:	2b10      	cmp	r3, #16
 8005c9a:	d103      	bne.n	8005ca4 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2210      	movs	r2, #16
 8005ca2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	225c      	movs	r2, #92	; 0x5c
 8005ca8:	5a9a      	ldrh	r2, [r3, r2]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	0011      	movs	r1, r2
 8005cae:	0018      	movs	r0, r3
 8005cb0:	f7fa fc8a 	bl	80005c8 <HAL_UARTEx_RxEventCallback>
 8005cb4:	e003      	b.n	8005cbe <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	0018      	movs	r0, r3
 8005cba:	f7fe fe7d 	bl	80049b8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005cbe:	2366      	movs	r3, #102	; 0x66
 8005cc0:	18fb      	adds	r3, r7, r3
 8005cc2:	881b      	ldrh	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d004      	beq.n	8005cd2 <UART_RxISR_16BIT_FIFOEN+0x232>
 8005cc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cca:	2220      	movs	r2, #32
 8005ccc:	4013      	ands	r3, r2
 8005cce:	d000      	beq.n	8005cd2 <UART_RxISR_16BIT_FIFOEN+0x232>
 8005cd0:	e709      	b.n	8005ae6 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005cd2:	2052      	movs	r0, #82	; 0x52
 8005cd4:	183b      	adds	r3, r7, r0
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	215e      	movs	r1, #94	; 0x5e
 8005cda:	5a52      	ldrh	r2, [r2, r1]
 8005cdc:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005cde:	0001      	movs	r1, r0
 8005ce0:	187b      	adds	r3, r7, r1
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d044      	beq.n	8005d72 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2268      	movs	r2, #104	; 0x68
 8005cec:	5a9b      	ldrh	r3, [r3, r2]
 8005cee:	187a      	adds	r2, r7, r1
 8005cf0:	8812      	ldrh	r2, [r2, #0]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d23d      	bcs.n	8005d72 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8005cfa:	60fb      	str	r3, [r7, #12]
  return(result);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d00:	2301      	movs	r3, #1
 8005d02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f383 8810 	msr	PRIMASK, r3
}
 8005d0a:	46c0      	nop			; (mov r8, r8)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689a      	ldr	r2, [r3, #8]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	491b      	ldr	r1, [pc, #108]	; (8005d84 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8005d18:	400a      	ands	r2, r1
 8005d1a:	609a      	str	r2, [r3, #8]
 8005d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f383 8810 	msr	PRIMASK, r3
}
 8005d26:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a17      	ldr	r2, [pc, #92]	; (8005d88 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8005d2c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d32:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d34:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005d36:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d38:	2301      	movs	r3, #1
 8005d3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	f383 8810 	msr	PRIMASK, r3
}
 8005d42:	46c0      	nop			; (mov r8, r8)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2120      	movs	r1, #32
 8005d50:	430a      	orrs	r2, r1
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	f383 8810 	msr	PRIMASK, r3
}
 8005d5e:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d60:	e007      	b.n	8005d72 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	699a      	ldr	r2, [r3, #24]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2108      	movs	r1, #8
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	619a      	str	r2, [r3, #24]
}
 8005d72:	46c0      	nop			; (mov r8, r8)
 8005d74:	46bd      	mov	sp, r7
 8005d76:	b01e      	add	sp, #120	; 0x78
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	46c0      	nop			; (mov r8, r8)
 8005d7c:	fffffeff 	.word	0xfffffeff
 8005d80:	effffffe 	.word	0xeffffffe
 8005d84:	efffffff 	.word	0xefffffff
 8005d88:	08005641 	.word	0x08005641

08005d8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d94:	46c0      	nop			; (mov r8, r8)
 8005d96:	46bd      	mov	sp, r7
 8005d98:	b002      	add	sp, #8
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005da4:	46c0      	nop			; (mov r8, r8)
 8005da6:	46bd      	mov	sp, r7
 8005da8:	b002      	add	sp, #8
 8005daa:	bd80      	pop	{r7, pc}

08005dac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005db4:	46c0      	nop			; (mov r8, r8)
 8005db6:	46bd      	mov	sp, r7
 8005db8:	b002      	add	sp, #8
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2284      	movs	r2, #132	; 0x84
 8005dc8:	5c9b      	ldrb	r3, [r3, r2]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d101      	bne.n	8005dd2 <HAL_UARTEx_DisableFifoMode+0x16>
 8005dce:	2302      	movs	r3, #2
 8005dd0:	e027      	b.n	8005e22 <HAL_UARTEx_DisableFifoMode+0x66>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2284      	movs	r2, #132	; 0x84
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2288      	movs	r2, #136	; 0x88
 8005dde:	2124      	movs	r1, #36	; 0x24
 8005de0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2101      	movs	r1, #1
 8005df6:	438a      	bics	r2, r1
 8005df8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4a0b      	ldr	r2, [pc, #44]	; (8005e2c <HAL_UARTEx_DisableFifoMode+0x70>)
 8005dfe:	4013      	ands	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2288      	movs	r2, #136	; 0x88
 8005e14:	2120      	movs	r1, #32
 8005e16:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2284      	movs	r2, #132	; 0x84
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	0018      	movs	r0, r3
 8005e24:	46bd      	mov	sp, r7
 8005e26:	b004      	add	sp, #16
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	46c0      	nop			; (mov r8, r8)
 8005e2c:	dfffffff 	.word	0xdfffffff

08005e30 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2284      	movs	r2, #132	; 0x84
 8005e3e:	5c9b      	ldrb	r3, [r3, r2]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e02e      	b.n	8005ea6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2284      	movs	r2, #132	; 0x84
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2288      	movs	r2, #136	; 0x88
 8005e54:	2124      	movs	r1, #36	; 0x24
 8005e56:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	438a      	bics	r2, r1
 8005e6e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	08d9      	lsrs	r1, r3, #3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	0018      	movs	r0, r3
 8005e88:	f000 f8bc 	bl	8006004 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2288      	movs	r2, #136	; 0x88
 8005e98:	2120      	movs	r1, #32
 8005e9a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2284      	movs	r2, #132	; 0x84
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	b004      	add	sp, #16
 8005eac:	bd80      	pop	{r7, pc}
	...

08005eb0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2284      	movs	r2, #132	; 0x84
 8005ebe:	5c9b      	ldrb	r3, [r3, r2]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	e02f      	b.n	8005f28 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2284      	movs	r2, #132	; 0x84
 8005ecc:	2101      	movs	r1, #1
 8005ece:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2288      	movs	r2, #136	; 0x88
 8005ed4:	2124      	movs	r1, #36	; 0x24
 8005ed6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2101      	movs	r1, #1
 8005eec:	438a      	bics	r2, r1
 8005eee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	4a0e      	ldr	r2, [pc, #56]	; (8005f30 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005ef8:	4013      	ands	r3, r2
 8005efa:	0019      	movs	r1, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	0018      	movs	r0, r3
 8005f0a:	f000 f87b 	bl	8006004 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2288      	movs	r2, #136	; 0x88
 8005f1a:	2120      	movs	r1, #32
 8005f1c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2284      	movs	r2, #132	; 0x84
 8005f22:	2100      	movs	r1, #0
 8005f24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	0018      	movs	r0, r3
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	b004      	add	sp, #16
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	f1ffffff 	.word	0xf1ffffff

08005f34 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f34:	b5b0      	push	{r4, r5, r7, lr}
 8005f36:	b08a      	sub	sp, #40	; 0x28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	1dbb      	adds	r3, r7, #6
 8005f40:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	228c      	movs	r2, #140	; 0x8c
 8005f46:	589b      	ldr	r3, [r3, r2]
 8005f48:	2b20      	cmp	r3, #32
 8005f4a:	d156      	bne.n	8005ffa <HAL_UARTEx_ReceiveToIdle_IT+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8005f52:	1dbb      	adds	r3, r7, #6
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e04e      	b.n	8005ffc <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	689a      	ldr	r2, [r3, #8]
 8005f62:	2380      	movs	r3, #128	; 0x80
 8005f64:	015b      	lsls	r3, r3, #5
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d109      	bne.n	8005f7e <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d105      	bne.n	8005f7e <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2201      	movs	r2, #1
 8005f76:	4013      	ands	r3, r2
 8005f78:	d001      	beq.n	8005f7e <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
      {
        return  HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e03e      	b.n	8005ffc <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2201      	movs	r2, #1
 8005f82:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8005f8a:	2527      	movs	r5, #39	; 0x27
 8005f8c:	197c      	adds	r4, r7, r5
 8005f8e:	1dbb      	adds	r3, r7, #6
 8005f90:	881a      	ldrh	r2, [r3, #0]
 8005f92:	68b9      	ldr	r1, [r7, #8]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	0018      	movs	r0, r3
 8005f98:	f7ff f8ca 	bl	8005130 <UART_Start_Receive_IT>
 8005f9c:	0003      	movs	r3, r0
 8005f9e:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005fa0:	197b      	adds	r3, r7, r5
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d124      	bne.n	8005ff2 <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d11c      	bne.n	8005fea <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2210      	movs	r2, #16
 8005fb6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8005fbc:	617b      	str	r3, [r7, #20]
  return(result);
 8005fbe:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fc0:	623b      	str	r3, [r7, #32]
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	f383 8810 	msr	PRIMASK, r3
}
 8005fcc:	46c0      	nop			; (mov r8, r8)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2110      	movs	r1, #16
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	f383 8810 	msr	PRIMASK, r3
}
 8005fe8:	e003      	b.n	8005ff2 <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005fea:	2327      	movs	r3, #39	; 0x27
 8005fec:	18fb      	adds	r3, r7, r3
 8005fee:	2201      	movs	r2, #1
 8005ff0:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8005ff2:	2327      	movs	r3, #39	; 0x27
 8005ff4:	18fb      	adds	r3, r7, r3
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	e000      	b.n	8005ffc <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8005ffa:	2302      	movs	r3, #2
  }
}
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	46bd      	mov	sp, r7
 8006000:	b00a      	add	sp, #40	; 0x28
 8006002:	bdb0      	pop	{r4, r5, r7, pc}

08006004 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006010:	2b00      	cmp	r3, #0
 8006012:	d108      	bne.n	8006026 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	226a      	movs	r2, #106	; 0x6a
 8006018:	2101      	movs	r1, #1
 800601a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2268      	movs	r2, #104	; 0x68
 8006020:	2101      	movs	r1, #1
 8006022:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006024:	e043      	b.n	80060ae <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006026:	260f      	movs	r6, #15
 8006028:	19bb      	adds	r3, r7, r6
 800602a:	2208      	movs	r2, #8
 800602c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800602e:	200e      	movs	r0, #14
 8006030:	183b      	adds	r3, r7, r0
 8006032:	2208      	movs	r2, #8
 8006034:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	0e5b      	lsrs	r3, r3, #25
 800603e:	b2da      	uxtb	r2, r3
 8006040:	240d      	movs	r4, #13
 8006042:	193b      	adds	r3, r7, r4
 8006044:	2107      	movs	r1, #7
 8006046:	400a      	ands	r2, r1
 8006048:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	0f5b      	lsrs	r3, r3, #29
 8006052:	b2da      	uxtb	r2, r3
 8006054:	250c      	movs	r5, #12
 8006056:	197b      	adds	r3, r7, r5
 8006058:	2107      	movs	r1, #7
 800605a:	400a      	ands	r2, r1
 800605c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800605e:	183b      	adds	r3, r7, r0
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	197a      	adds	r2, r7, r5
 8006064:	7812      	ldrb	r2, [r2, #0]
 8006066:	4914      	ldr	r1, [pc, #80]	; (80060b8 <UARTEx_SetNbDataToProcess+0xb4>)
 8006068:	5c8a      	ldrb	r2, [r1, r2]
 800606a:	435a      	muls	r2, r3
 800606c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800606e:	197b      	adds	r3, r7, r5
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	4a12      	ldr	r2, [pc, #72]	; (80060bc <UARTEx_SetNbDataToProcess+0xb8>)
 8006074:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006076:	0019      	movs	r1, r3
 8006078:	f7fa f8de 	bl	8000238 <__divsi3>
 800607c:	0003      	movs	r3, r0
 800607e:	b299      	uxth	r1, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	226a      	movs	r2, #106	; 0x6a
 8006084:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006086:	19bb      	adds	r3, r7, r6
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	193a      	adds	r2, r7, r4
 800608c:	7812      	ldrb	r2, [r2, #0]
 800608e:	490a      	ldr	r1, [pc, #40]	; (80060b8 <UARTEx_SetNbDataToProcess+0xb4>)
 8006090:	5c8a      	ldrb	r2, [r1, r2]
 8006092:	435a      	muls	r2, r3
 8006094:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006096:	193b      	adds	r3, r7, r4
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	4a08      	ldr	r2, [pc, #32]	; (80060bc <UARTEx_SetNbDataToProcess+0xb8>)
 800609c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800609e:	0019      	movs	r1, r3
 80060a0:	f7fa f8ca 	bl	8000238 <__divsi3>
 80060a4:	0003      	movs	r3, r0
 80060a6:	b299      	uxth	r1, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2268      	movs	r2, #104	; 0x68
 80060ac:	5299      	strh	r1, [r3, r2]
}
 80060ae:	46c0      	nop			; (mov r8, r8)
 80060b0:	46bd      	mov	sp, r7
 80060b2:	b005      	add	sp, #20
 80060b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060b6:	46c0      	nop			; (mov r8, r8)
 80060b8:	080073c4 	.word	0x080073c4
 80060bc:	080073cc 	.word	0x080073cc

080060c0 <__errno>:
 80060c0:	4b01      	ldr	r3, [pc, #4]	; (80060c8 <__errno+0x8>)
 80060c2:	6818      	ldr	r0, [r3, #0]
 80060c4:	4770      	bx	lr
 80060c6:	46c0      	nop			; (mov r8, r8)
 80060c8:	2000040c 	.word	0x2000040c

080060cc <__libc_init_array>:
 80060cc:	b570      	push	{r4, r5, r6, lr}
 80060ce:	2600      	movs	r6, #0
 80060d0:	4d0c      	ldr	r5, [pc, #48]	; (8006104 <__libc_init_array+0x38>)
 80060d2:	4c0d      	ldr	r4, [pc, #52]	; (8006108 <__libc_init_array+0x3c>)
 80060d4:	1b64      	subs	r4, r4, r5
 80060d6:	10a4      	asrs	r4, r4, #2
 80060d8:	42a6      	cmp	r6, r4
 80060da:	d109      	bne.n	80060f0 <__libc_init_array+0x24>
 80060dc:	2600      	movs	r6, #0
 80060de:	f001 f815 	bl	800710c <_init>
 80060e2:	4d0a      	ldr	r5, [pc, #40]	; (800610c <__libc_init_array+0x40>)
 80060e4:	4c0a      	ldr	r4, [pc, #40]	; (8006110 <__libc_init_array+0x44>)
 80060e6:	1b64      	subs	r4, r4, r5
 80060e8:	10a4      	asrs	r4, r4, #2
 80060ea:	42a6      	cmp	r6, r4
 80060ec:	d105      	bne.n	80060fa <__libc_init_array+0x2e>
 80060ee:	bd70      	pop	{r4, r5, r6, pc}
 80060f0:	00b3      	lsls	r3, r6, #2
 80060f2:	58eb      	ldr	r3, [r5, r3]
 80060f4:	4798      	blx	r3
 80060f6:	3601      	adds	r6, #1
 80060f8:	e7ee      	b.n	80060d8 <__libc_init_array+0xc>
 80060fa:	00b3      	lsls	r3, r6, #2
 80060fc:	58eb      	ldr	r3, [r5, r3]
 80060fe:	4798      	blx	r3
 8006100:	3601      	adds	r6, #1
 8006102:	e7f2      	b.n	80060ea <__libc_init_array+0x1e>
 8006104:	0800746c 	.word	0x0800746c
 8006108:	0800746c 	.word	0x0800746c
 800610c:	0800746c 	.word	0x0800746c
 8006110:	08007470 	.word	0x08007470

08006114 <memcpy>:
 8006114:	2300      	movs	r3, #0
 8006116:	b510      	push	{r4, lr}
 8006118:	429a      	cmp	r2, r3
 800611a:	d100      	bne.n	800611e <memcpy+0xa>
 800611c:	bd10      	pop	{r4, pc}
 800611e:	5ccc      	ldrb	r4, [r1, r3]
 8006120:	54c4      	strb	r4, [r0, r3]
 8006122:	3301      	adds	r3, #1
 8006124:	e7f8      	b.n	8006118 <memcpy+0x4>

08006126 <memset>:
 8006126:	0003      	movs	r3, r0
 8006128:	1882      	adds	r2, r0, r2
 800612a:	4293      	cmp	r3, r2
 800612c:	d100      	bne.n	8006130 <memset+0xa>
 800612e:	4770      	bx	lr
 8006130:	7019      	strb	r1, [r3, #0]
 8006132:	3301      	adds	r3, #1
 8006134:	e7f9      	b.n	800612a <memset+0x4>
	...

08006138 <setvbuf>:
 8006138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800613a:	001d      	movs	r5, r3
 800613c:	4b5d      	ldr	r3, [pc, #372]	; (80062b4 <setvbuf+0x17c>)
 800613e:	b085      	sub	sp, #20
 8006140:	681e      	ldr	r6, [r3, #0]
 8006142:	0004      	movs	r4, r0
 8006144:	000f      	movs	r7, r1
 8006146:	9200      	str	r2, [sp, #0]
 8006148:	2e00      	cmp	r6, #0
 800614a:	d005      	beq.n	8006158 <setvbuf+0x20>
 800614c:	69b3      	ldr	r3, [r6, #24]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d102      	bne.n	8006158 <setvbuf+0x20>
 8006152:	0030      	movs	r0, r6
 8006154:	f000 fa1a 	bl	800658c <__sinit>
 8006158:	4b57      	ldr	r3, [pc, #348]	; (80062b8 <setvbuf+0x180>)
 800615a:	429c      	cmp	r4, r3
 800615c:	d161      	bne.n	8006222 <setvbuf+0xea>
 800615e:	6874      	ldr	r4, [r6, #4]
 8006160:	9b00      	ldr	r3, [sp, #0]
 8006162:	2b02      	cmp	r3, #2
 8006164:	d005      	beq.n	8006172 <setvbuf+0x3a>
 8006166:	2b01      	cmp	r3, #1
 8006168:	d900      	bls.n	800616c <setvbuf+0x34>
 800616a:	e09d      	b.n	80062a8 <setvbuf+0x170>
 800616c:	2d00      	cmp	r5, #0
 800616e:	da00      	bge.n	8006172 <setvbuf+0x3a>
 8006170:	e09a      	b.n	80062a8 <setvbuf+0x170>
 8006172:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006174:	07db      	lsls	r3, r3, #31
 8006176:	d405      	bmi.n	8006184 <setvbuf+0x4c>
 8006178:	89a3      	ldrh	r3, [r4, #12]
 800617a:	059b      	lsls	r3, r3, #22
 800617c:	d402      	bmi.n	8006184 <setvbuf+0x4c>
 800617e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006180:	f000 faa5 	bl	80066ce <__retarget_lock_acquire_recursive>
 8006184:	0021      	movs	r1, r4
 8006186:	0030      	movs	r0, r6
 8006188:	f000 f95e 	bl	8006448 <_fflush_r>
 800618c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800618e:	2900      	cmp	r1, #0
 8006190:	d008      	beq.n	80061a4 <setvbuf+0x6c>
 8006192:	0023      	movs	r3, r4
 8006194:	3344      	adds	r3, #68	; 0x44
 8006196:	4299      	cmp	r1, r3
 8006198:	d002      	beq.n	80061a0 <setvbuf+0x68>
 800619a:	0030      	movs	r0, r6
 800619c:	f000 facc 	bl	8006738 <_free_r>
 80061a0:	2300      	movs	r3, #0
 80061a2:	6363      	str	r3, [r4, #52]	; 0x34
 80061a4:	2300      	movs	r3, #0
 80061a6:	61a3      	str	r3, [r4, #24]
 80061a8:	6063      	str	r3, [r4, #4]
 80061aa:	89a3      	ldrh	r3, [r4, #12]
 80061ac:	061b      	lsls	r3, r3, #24
 80061ae:	d503      	bpl.n	80061b8 <setvbuf+0x80>
 80061b0:	0030      	movs	r0, r6
 80061b2:	6921      	ldr	r1, [r4, #16]
 80061b4:	f000 fac0 	bl	8006738 <_free_r>
 80061b8:	89a3      	ldrh	r3, [r4, #12]
 80061ba:	4a40      	ldr	r2, [pc, #256]	; (80062bc <setvbuf+0x184>)
 80061bc:	4013      	ands	r3, r2
 80061be:	81a3      	strh	r3, [r4, #12]
 80061c0:	9b00      	ldr	r3, [sp, #0]
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d100      	bne.n	80061c8 <setvbuf+0x90>
 80061c6:	e069      	b.n	800629c <setvbuf+0x164>
 80061c8:	ab03      	add	r3, sp, #12
 80061ca:	0021      	movs	r1, r4
 80061cc:	0030      	movs	r0, r6
 80061ce:	aa02      	add	r2, sp, #8
 80061d0:	f000 fa80 	bl	80066d4 <__swhatbuf_r>
 80061d4:	89a3      	ldrh	r3, [r4, #12]
 80061d6:	4303      	orrs	r3, r0
 80061d8:	81a3      	strh	r3, [r4, #12]
 80061da:	2d00      	cmp	r5, #0
 80061dc:	d12b      	bne.n	8006236 <setvbuf+0xfe>
 80061de:	9d02      	ldr	r5, [sp, #8]
 80061e0:	0028      	movs	r0, r5
 80061e2:	f000 fa9f 	bl	8006724 <malloc>
 80061e6:	1e07      	subs	r7, r0, #0
 80061e8:	d153      	bne.n	8006292 <setvbuf+0x15a>
 80061ea:	9b02      	ldr	r3, [sp, #8]
 80061ec:	9301      	str	r3, [sp, #4]
 80061ee:	42ab      	cmp	r3, r5
 80061f0:	d149      	bne.n	8006286 <setvbuf+0x14e>
 80061f2:	2501      	movs	r5, #1
 80061f4:	426d      	negs	r5, r5
 80061f6:	2302      	movs	r3, #2
 80061f8:	89a2      	ldrh	r2, [r4, #12]
 80061fa:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80061fc:	4313      	orrs	r3, r2
 80061fe:	2200      	movs	r2, #0
 8006200:	60a2      	str	r2, [r4, #8]
 8006202:	0022      	movs	r2, r4
 8006204:	3247      	adds	r2, #71	; 0x47
 8006206:	6022      	str	r2, [r4, #0]
 8006208:	6122      	str	r2, [r4, #16]
 800620a:	2201      	movs	r2, #1
 800620c:	b21b      	sxth	r3, r3
 800620e:	81a3      	strh	r3, [r4, #12]
 8006210:	6162      	str	r2, [r4, #20]
 8006212:	4211      	tst	r1, r2
 8006214:	d134      	bne.n	8006280 <setvbuf+0x148>
 8006216:	059b      	lsls	r3, r3, #22
 8006218:	d432      	bmi.n	8006280 <setvbuf+0x148>
 800621a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800621c:	f000 fa58 	bl	80066d0 <__retarget_lock_release_recursive>
 8006220:	e02e      	b.n	8006280 <setvbuf+0x148>
 8006222:	4b27      	ldr	r3, [pc, #156]	; (80062c0 <setvbuf+0x188>)
 8006224:	429c      	cmp	r4, r3
 8006226:	d101      	bne.n	800622c <setvbuf+0xf4>
 8006228:	68b4      	ldr	r4, [r6, #8]
 800622a:	e799      	b.n	8006160 <setvbuf+0x28>
 800622c:	4b25      	ldr	r3, [pc, #148]	; (80062c4 <setvbuf+0x18c>)
 800622e:	429c      	cmp	r4, r3
 8006230:	d196      	bne.n	8006160 <setvbuf+0x28>
 8006232:	68f4      	ldr	r4, [r6, #12]
 8006234:	e794      	b.n	8006160 <setvbuf+0x28>
 8006236:	2f00      	cmp	r7, #0
 8006238:	d0d2      	beq.n	80061e0 <setvbuf+0xa8>
 800623a:	69b3      	ldr	r3, [r6, #24]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d102      	bne.n	8006246 <setvbuf+0x10e>
 8006240:	0030      	movs	r0, r6
 8006242:	f000 f9a3 	bl	800658c <__sinit>
 8006246:	9b00      	ldr	r3, [sp, #0]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d102      	bne.n	8006252 <setvbuf+0x11a>
 800624c:	89a2      	ldrh	r2, [r4, #12]
 800624e:	4313      	orrs	r3, r2
 8006250:	81a3      	strh	r3, [r4, #12]
 8006252:	89a2      	ldrh	r2, [r4, #12]
 8006254:	2308      	movs	r3, #8
 8006256:	0011      	movs	r1, r2
 8006258:	6027      	str	r7, [r4, #0]
 800625a:	6127      	str	r7, [r4, #16]
 800625c:	6165      	str	r5, [r4, #20]
 800625e:	4019      	ands	r1, r3
 8006260:	421a      	tst	r2, r3
 8006262:	d01f      	beq.n	80062a4 <setvbuf+0x16c>
 8006264:	07d3      	lsls	r3, r2, #31
 8006266:	d51b      	bpl.n	80062a0 <setvbuf+0x168>
 8006268:	2300      	movs	r3, #0
 800626a:	426d      	negs	r5, r5
 800626c:	60a3      	str	r3, [r4, #8]
 800626e:	61a5      	str	r5, [r4, #24]
 8006270:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006272:	2301      	movs	r3, #1
 8006274:	000d      	movs	r5, r1
 8006276:	401d      	ands	r5, r3
 8006278:	4219      	tst	r1, r3
 800627a:	d118      	bne.n	80062ae <setvbuf+0x176>
 800627c:	0593      	lsls	r3, r2, #22
 800627e:	d5cc      	bpl.n	800621a <setvbuf+0xe2>
 8006280:	0028      	movs	r0, r5
 8006282:	b005      	add	sp, #20
 8006284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006286:	9801      	ldr	r0, [sp, #4]
 8006288:	f000 fa4c 	bl	8006724 <malloc>
 800628c:	9d01      	ldr	r5, [sp, #4]
 800628e:	1e07      	subs	r7, r0, #0
 8006290:	d0af      	beq.n	80061f2 <setvbuf+0xba>
 8006292:	2380      	movs	r3, #128	; 0x80
 8006294:	89a2      	ldrh	r2, [r4, #12]
 8006296:	4313      	orrs	r3, r2
 8006298:	81a3      	strh	r3, [r4, #12]
 800629a:	e7ce      	b.n	800623a <setvbuf+0x102>
 800629c:	2500      	movs	r5, #0
 800629e:	e7aa      	b.n	80061f6 <setvbuf+0xbe>
 80062a0:	60a5      	str	r5, [r4, #8]
 80062a2:	e7e5      	b.n	8006270 <setvbuf+0x138>
 80062a4:	60a1      	str	r1, [r4, #8]
 80062a6:	e7e3      	b.n	8006270 <setvbuf+0x138>
 80062a8:	2501      	movs	r5, #1
 80062aa:	426d      	negs	r5, r5
 80062ac:	e7e8      	b.n	8006280 <setvbuf+0x148>
 80062ae:	2500      	movs	r5, #0
 80062b0:	e7e6      	b.n	8006280 <setvbuf+0x148>
 80062b2:	46c0      	nop			; (mov r8, r8)
 80062b4:	2000040c 	.word	0x2000040c
 80062b8:	080073f8 	.word	0x080073f8
 80062bc:	fffff35c 	.word	0xfffff35c
 80062c0:	08007418 	.word	0x08007418
 80062c4:	080073d8 	.word	0x080073d8

080062c8 <sniprintf>:
 80062c8:	b40c      	push	{r2, r3}
 80062ca:	b530      	push	{r4, r5, lr}
 80062cc:	4b17      	ldr	r3, [pc, #92]	; (800632c <sniprintf+0x64>)
 80062ce:	000c      	movs	r4, r1
 80062d0:	681d      	ldr	r5, [r3, #0]
 80062d2:	b09d      	sub	sp, #116	; 0x74
 80062d4:	2900      	cmp	r1, #0
 80062d6:	da08      	bge.n	80062ea <sniprintf+0x22>
 80062d8:	238b      	movs	r3, #139	; 0x8b
 80062da:	2001      	movs	r0, #1
 80062dc:	602b      	str	r3, [r5, #0]
 80062de:	4240      	negs	r0, r0
 80062e0:	b01d      	add	sp, #116	; 0x74
 80062e2:	bc30      	pop	{r4, r5}
 80062e4:	bc08      	pop	{r3}
 80062e6:	b002      	add	sp, #8
 80062e8:	4718      	bx	r3
 80062ea:	2382      	movs	r3, #130	; 0x82
 80062ec:	466a      	mov	r2, sp
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	8293      	strh	r3, [r2, #20]
 80062f2:	2300      	movs	r3, #0
 80062f4:	9002      	str	r0, [sp, #8]
 80062f6:	9006      	str	r0, [sp, #24]
 80062f8:	4299      	cmp	r1, r3
 80062fa:	d000      	beq.n	80062fe <sniprintf+0x36>
 80062fc:	1e4b      	subs	r3, r1, #1
 80062fe:	9304      	str	r3, [sp, #16]
 8006300:	9307      	str	r3, [sp, #28]
 8006302:	2301      	movs	r3, #1
 8006304:	466a      	mov	r2, sp
 8006306:	425b      	negs	r3, r3
 8006308:	82d3      	strh	r3, [r2, #22]
 800630a:	0028      	movs	r0, r5
 800630c:	ab21      	add	r3, sp, #132	; 0x84
 800630e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006310:	a902      	add	r1, sp, #8
 8006312:	9301      	str	r3, [sp, #4]
 8006314:	f000 fb54 	bl	80069c0 <_svfiprintf_r>
 8006318:	1c43      	adds	r3, r0, #1
 800631a:	da01      	bge.n	8006320 <sniprintf+0x58>
 800631c:	238b      	movs	r3, #139	; 0x8b
 800631e:	602b      	str	r3, [r5, #0]
 8006320:	2c00      	cmp	r4, #0
 8006322:	d0dd      	beq.n	80062e0 <sniprintf+0x18>
 8006324:	2300      	movs	r3, #0
 8006326:	9a02      	ldr	r2, [sp, #8]
 8006328:	7013      	strb	r3, [r2, #0]
 800632a:	e7d9      	b.n	80062e0 <sniprintf+0x18>
 800632c:	2000040c 	.word	0x2000040c

08006330 <__sflush_r>:
 8006330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006332:	898b      	ldrh	r3, [r1, #12]
 8006334:	0005      	movs	r5, r0
 8006336:	000c      	movs	r4, r1
 8006338:	071a      	lsls	r2, r3, #28
 800633a:	d45f      	bmi.n	80063fc <__sflush_r+0xcc>
 800633c:	684a      	ldr	r2, [r1, #4]
 800633e:	2a00      	cmp	r2, #0
 8006340:	dc04      	bgt.n	800634c <__sflush_r+0x1c>
 8006342:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006344:	2a00      	cmp	r2, #0
 8006346:	dc01      	bgt.n	800634c <__sflush_r+0x1c>
 8006348:	2000      	movs	r0, #0
 800634a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800634c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800634e:	2f00      	cmp	r7, #0
 8006350:	d0fa      	beq.n	8006348 <__sflush_r+0x18>
 8006352:	2200      	movs	r2, #0
 8006354:	2180      	movs	r1, #128	; 0x80
 8006356:	682e      	ldr	r6, [r5, #0]
 8006358:	602a      	str	r2, [r5, #0]
 800635a:	001a      	movs	r2, r3
 800635c:	0149      	lsls	r1, r1, #5
 800635e:	400a      	ands	r2, r1
 8006360:	420b      	tst	r3, r1
 8006362:	d034      	beq.n	80063ce <__sflush_r+0x9e>
 8006364:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006366:	89a3      	ldrh	r3, [r4, #12]
 8006368:	075b      	lsls	r3, r3, #29
 800636a:	d506      	bpl.n	800637a <__sflush_r+0x4a>
 800636c:	6863      	ldr	r3, [r4, #4]
 800636e:	1ac0      	subs	r0, r0, r3
 8006370:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <__sflush_r+0x4a>
 8006376:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006378:	1ac0      	subs	r0, r0, r3
 800637a:	0002      	movs	r2, r0
 800637c:	6a21      	ldr	r1, [r4, #32]
 800637e:	2300      	movs	r3, #0
 8006380:	0028      	movs	r0, r5
 8006382:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006384:	47b8      	blx	r7
 8006386:	89a1      	ldrh	r1, [r4, #12]
 8006388:	1c43      	adds	r3, r0, #1
 800638a:	d106      	bne.n	800639a <__sflush_r+0x6a>
 800638c:	682b      	ldr	r3, [r5, #0]
 800638e:	2b1d      	cmp	r3, #29
 8006390:	d831      	bhi.n	80063f6 <__sflush_r+0xc6>
 8006392:	4a2c      	ldr	r2, [pc, #176]	; (8006444 <__sflush_r+0x114>)
 8006394:	40da      	lsrs	r2, r3
 8006396:	07d3      	lsls	r3, r2, #31
 8006398:	d52d      	bpl.n	80063f6 <__sflush_r+0xc6>
 800639a:	2300      	movs	r3, #0
 800639c:	6063      	str	r3, [r4, #4]
 800639e:	6923      	ldr	r3, [r4, #16]
 80063a0:	6023      	str	r3, [r4, #0]
 80063a2:	04cb      	lsls	r3, r1, #19
 80063a4:	d505      	bpl.n	80063b2 <__sflush_r+0x82>
 80063a6:	1c43      	adds	r3, r0, #1
 80063a8:	d102      	bne.n	80063b0 <__sflush_r+0x80>
 80063aa:	682b      	ldr	r3, [r5, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d100      	bne.n	80063b2 <__sflush_r+0x82>
 80063b0:	6560      	str	r0, [r4, #84]	; 0x54
 80063b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063b4:	602e      	str	r6, [r5, #0]
 80063b6:	2900      	cmp	r1, #0
 80063b8:	d0c6      	beq.n	8006348 <__sflush_r+0x18>
 80063ba:	0023      	movs	r3, r4
 80063bc:	3344      	adds	r3, #68	; 0x44
 80063be:	4299      	cmp	r1, r3
 80063c0:	d002      	beq.n	80063c8 <__sflush_r+0x98>
 80063c2:	0028      	movs	r0, r5
 80063c4:	f000 f9b8 	bl	8006738 <_free_r>
 80063c8:	2000      	movs	r0, #0
 80063ca:	6360      	str	r0, [r4, #52]	; 0x34
 80063cc:	e7bd      	b.n	800634a <__sflush_r+0x1a>
 80063ce:	2301      	movs	r3, #1
 80063d0:	0028      	movs	r0, r5
 80063d2:	6a21      	ldr	r1, [r4, #32]
 80063d4:	47b8      	blx	r7
 80063d6:	1c43      	adds	r3, r0, #1
 80063d8:	d1c5      	bne.n	8006366 <__sflush_r+0x36>
 80063da:	682b      	ldr	r3, [r5, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0c2      	beq.n	8006366 <__sflush_r+0x36>
 80063e0:	2b1d      	cmp	r3, #29
 80063e2:	d001      	beq.n	80063e8 <__sflush_r+0xb8>
 80063e4:	2b16      	cmp	r3, #22
 80063e6:	d101      	bne.n	80063ec <__sflush_r+0xbc>
 80063e8:	602e      	str	r6, [r5, #0]
 80063ea:	e7ad      	b.n	8006348 <__sflush_r+0x18>
 80063ec:	2340      	movs	r3, #64	; 0x40
 80063ee:	89a2      	ldrh	r2, [r4, #12]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	81a3      	strh	r3, [r4, #12]
 80063f4:	e7a9      	b.n	800634a <__sflush_r+0x1a>
 80063f6:	2340      	movs	r3, #64	; 0x40
 80063f8:	430b      	orrs	r3, r1
 80063fa:	e7fa      	b.n	80063f2 <__sflush_r+0xc2>
 80063fc:	690f      	ldr	r7, [r1, #16]
 80063fe:	2f00      	cmp	r7, #0
 8006400:	d0a2      	beq.n	8006348 <__sflush_r+0x18>
 8006402:	680a      	ldr	r2, [r1, #0]
 8006404:	600f      	str	r7, [r1, #0]
 8006406:	1bd2      	subs	r2, r2, r7
 8006408:	9201      	str	r2, [sp, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	079b      	lsls	r3, r3, #30
 800640e:	d100      	bne.n	8006412 <__sflush_r+0xe2>
 8006410:	694a      	ldr	r2, [r1, #20]
 8006412:	60a2      	str	r2, [r4, #8]
 8006414:	9b01      	ldr	r3, [sp, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	dc00      	bgt.n	800641c <__sflush_r+0xec>
 800641a:	e795      	b.n	8006348 <__sflush_r+0x18>
 800641c:	003a      	movs	r2, r7
 800641e:	0028      	movs	r0, r5
 8006420:	9b01      	ldr	r3, [sp, #4]
 8006422:	6a21      	ldr	r1, [r4, #32]
 8006424:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006426:	47b0      	blx	r6
 8006428:	2800      	cmp	r0, #0
 800642a:	dc06      	bgt.n	800643a <__sflush_r+0x10a>
 800642c:	2340      	movs	r3, #64	; 0x40
 800642e:	2001      	movs	r0, #1
 8006430:	89a2      	ldrh	r2, [r4, #12]
 8006432:	4240      	negs	r0, r0
 8006434:	4313      	orrs	r3, r2
 8006436:	81a3      	strh	r3, [r4, #12]
 8006438:	e787      	b.n	800634a <__sflush_r+0x1a>
 800643a:	9b01      	ldr	r3, [sp, #4]
 800643c:	183f      	adds	r7, r7, r0
 800643e:	1a1b      	subs	r3, r3, r0
 8006440:	9301      	str	r3, [sp, #4]
 8006442:	e7e7      	b.n	8006414 <__sflush_r+0xe4>
 8006444:	20400001 	.word	0x20400001

08006448 <_fflush_r>:
 8006448:	690b      	ldr	r3, [r1, #16]
 800644a:	b570      	push	{r4, r5, r6, lr}
 800644c:	0005      	movs	r5, r0
 800644e:	000c      	movs	r4, r1
 8006450:	2b00      	cmp	r3, #0
 8006452:	d102      	bne.n	800645a <_fflush_r+0x12>
 8006454:	2500      	movs	r5, #0
 8006456:	0028      	movs	r0, r5
 8006458:	bd70      	pop	{r4, r5, r6, pc}
 800645a:	2800      	cmp	r0, #0
 800645c:	d004      	beq.n	8006468 <_fflush_r+0x20>
 800645e:	6983      	ldr	r3, [r0, #24]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <_fflush_r+0x20>
 8006464:	f000 f892 	bl	800658c <__sinit>
 8006468:	4b14      	ldr	r3, [pc, #80]	; (80064bc <_fflush_r+0x74>)
 800646a:	429c      	cmp	r4, r3
 800646c:	d11b      	bne.n	80064a6 <_fflush_r+0x5e>
 800646e:	686c      	ldr	r4, [r5, #4]
 8006470:	220c      	movs	r2, #12
 8006472:	5ea3      	ldrsh	r3, [r4, r2]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d0ed      	beq.n	8006454 <_fflush_r+0xc>
 8006478:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800647a:	07d2      	lsls	r2, r2, #31
 800647c:	d404      	bmi.n	8006488 <_fflush_r+0x40>
 800647e:	059b      	lsls	r3, r3, #22
 8006480:	d402      	bmi.n	8006488 <_fflush_r+0x40>
 8006482:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006484:	f000 f923 	bl	80066ce <__retarget_lock_acquire_recursive>
 8006488:	0028      	movs	r0, r5
 800648a:	0021      	movs	r1, r4
 800648c:	f7ff ff50 	bl	8006330 <__sflush_r>
 8006490:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006492:	0005      	movs	r5, r0
 8006494:	07db      	lsls	r3, r3, #31
 8006496:	d4de      	bmi.n	8006456 <_fflush_r+0xe>
 8006498:	89a3      	ldrh	r3, [r4, #12]
 800649a:	059b      	lsls	r3, r3, #22
 800649c:	d4db      	bmi.n	8006456 <_fflush_r+0xe>
 800649e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064a0:	f000 f916 	bl	80066d0 <__retarget_lock_release_recursive>
 80064a4:	e7d7      	b.n	8006456 <_fflush_r+0xe>
 80064a6:	4b06      	ldr	r3, [pc, #24]	; (80064c0 <_fflush_r+0x78>)
 80064a8:	429c      	cmp	r4, r3
 80064aa:	d101      	bne.n	80064b0 <_fflush_r+0x68>
 80064ac:	68ac      	ldr	r4, [r5, #8]
 80064ae:	e7df      	b.n	8006470 <_fflush_r+0x28>
 80064b0:	4b04      	ldr	r3, [pc, #16]	; (80064c4 <_fflush_r+0x7c>)
 80064b2:	429c      	cmp	r4, r3
 80064b4:	d1dc      	bne.n	8006470 <_fflush_r+0x28>
 80064b6:	68ec      	ldr	r4, [r5, #12]
 80064b8:	e7da      	b.n	8006470 <_fflush_r+0x28>
 80064ba:	46c0      	nop			; (mov r8, r8)
 80064bc:	080073f8 	.word	0x080073f8
 80064c0:	08007418 	.word	0x08007418
 80064c4:	080073d8 	.word	0x080073d8

080064c8 <std>:
 80064c8:	2300      	movs	r3, #0
 80064ca:	b510      	push	{r4, lr}
 80064cc:	0004      	movs	r4, r0
 80064ce:	6003      	str	r3, [r0, #0]
 80064d0:	6043      	str	r3, [r0, #4]
 80064d2:	6083      	str	r3, [r0, #8]
 80064d4:	8181      	strh	r1, [r0, #12]
 80064d6:	6643      	str	r3, [r0, #100]	; 0x64
 80064d8:	0019      	movs	r1, r3
 80064da:	81c2      	strh	r2, [r0, #14]
 80064dc:	6103      	str	r3, [r0, #16]
 80064de:	6143      	str	r3, [r0, #20]
 80064e0:	6183      	str	r3, [r0, #24]
 80064e2:	2208      	movs	r2, #8
 80064e4:	305c      	adds	r0, #92	; 0x5c
 80064e6:	f7ff fe1e 	bl	8006126 <memset>
 80064ea:	4b05      	ldr	r3, [pc, #20]	; (8006500 <std+0x38>)
 80064ec:	6224      	str	r4, [r4, #32]
 80064ee:	6263      	str	r3, [r4, #36]	; 0x24
 80064f0:	4b04      	ldr	r3, [pc, #16]	; (8006504 <std+0x3c>)
 80064f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80064f4:	4b04      	ldr	r3, [pc, #16]	; (8006508 <std+0x40>)
 80064f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064f8:	4b04      	ldr	r3, [pc, #16]	; (800650c <std+0x44>)
 80064fa:	6323      	str	r3, [r4, #48]	; 0x30
 80064fc:	bd10      	pop	{r4, pc}
 80064fe:	46c0      	nop			; (mov r8, r8)
 8006500:	08006ee9 	.word	0x08006ee9
 8006504:	08006f11 	.word	0x08006f11
 8006508:	08006f49 	.word	0x08006f49
 800650c:	08006f75 	.word	0x08006f75

08006510 <_cleanup_r>:
 8006510:	b510      	push	{r4, lr}
 8006512:	4902      	ldr	r1, [pc, #8]	; (800651c <_cleanup_r+0xc>)
 8006514:	f000 f8ba 	bl	800668c <_fwalk_reent>
 8006518:	bd10      	pop	{r4, pc}
 800651a:	46c0      	nop			; (mov r8, r8)
 800651c:	08006449 	.word	0x08006449

08006520 <__sfmoreglue>:
 8006520:	b570      	push	{r4, r5, r6, lr}
 8006522:	2568      	movs	r5, #104	; 0x68
 8006524:	1e4a      	subs	r2, r1, #1
 8006526:	4355      	muls	r5, r2
 8006528:	000e      	movs	r6, r1
 800652a:	0029      	movs	r1, r5
 800652c:	3174      	adds	r1, #116	; 0x74
 800652e:	f000 f96f 	bl	8006810 <_malloc_r>
 8006532:	1e04      	subs	r4, r0, #0
 8006534:	d008      	beq.n	8006548 <__sfmoreglue+0x28>
 8006536:	2100      	movs	r1, #0
 8006538:	002a      	movs	r2, r5
 800653a:	6001      	str	r1, [r0, #0]
 800653c:	6046      	str	r6, [r0, #4]
 800653e:	300c      	adds	r0, #12
 8006540:	60a0      	str	r0, [r4, #8]
 8006542:	3268      	adds	r2, #104	; 0x68
 8006544:	f7ff fdef 	bl	8006126 <memset>
 8006548:	0020      	movs	r0, r4
 800654a:	bd70      	pop	{r4, r5, r6, pc}

0800654c <__sfp_lock_acquire>:
 800654c:	b510      	push	{r4, lr}
 800654e:	4802      	ldr	r0, [pc, #8]	; (8006558 <__sfp_lock_acquire+0xc>)
 8006550:	f000 f8bd 	bl	80066ce <__retarget_lock_acquire_recursive>
 8006554:	bd10      	pop	{r4, pc}
 8006556:	46c0      	nop			; (mov r8, r8)
 8006558:	20000db5 	.word	0x20000db5

0800655c <__sfp_lock_release>:
 800655c:	b510      	push	{r4, lr}
 800655e:	4802      	ldr	r0, [pc, #8]	; (8006568 <__sfp_lock_release+0xc>)
 8006560:	f000 f8b6 	bl	80066d0 <__retarget_lock_release_recursive>
 8006564:	bd10      	pop	{r4, pc}
 8006566:	46c0      	nop			; (mov r8, r8)
 8006568:	20000db5 	.word	0x20000db5

0800656c <__sinit_lock_acquire>:
 800656c:	b510      	push	{r4, lr}
 800656e:	4802      	ldr	r0, [pc, #8]	; (8006578 <__sinit_lock_acquire+0xc>)
 8006570:	f000 f8ad 	bl	80066ce <__retarget_lock_acquire_recursive>
 8006574:	bd10      	pop	{r4, pc}
 8006576:	46c0      	nop			; (mov r8, r8)
 8006578:	20000db6 	.word	0x20000db6

0800657c <__sinit_lock_release>:
 800657c:	b510      	push	{r4, lr}
 800657e:	4802      	ldr	r0, [pc, #8]	; (8006588 <__sinit_lock_release+0xc>)
 8006580:	f000 f8a6 	bl	80066d0 <__retarget_lock_release_recursive>
 8006584:	bd10      	pop	{r4, pc}
 8006586:	46c0      	nop			; (mov r8, r8)
 8006588:	20000db6 	.word	0x20000db6

0800658c <__sinit>:
 800658c:	b513      	push	{r0, r1, r4, lr}
 800658e:	0004      	movs	r4, r0
 8006590:	f7ff ffec 	bl	800656c <__sinit_lock_acquire>
 8006594:	69a3      	ldr	r3, [r4, #24]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d002      	beq.n	80065a0 <__sinit+0x14>
 800659a:	f7ff ffef 	bl	800657c <__sinit_lock_release>
 800659e:	bd13      	pop	{r0, r1, r4, pc}
 80065a0:	64a3      	str	r3, [r4, #72]	; 0x48
 80065a2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80065a4:	6523      	str	r3, [r4, #80]	; 0x50
 80065a6:	4b13      	ldr	r3, [pc, #76]	; (80065f4 <__sinit+0x68>)
 80065a8:	4a13      	ldr	r2, [pc, #76]	; (80065f8 <__sinit+0x6c>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80065ae:	9301      	str	r3, [sp, #4]
 80065b0:	42a3      	cmp	r3, r4
 80065b2:	d101      	bne.n	80065b8 <__sinit+0x2c>
 80065b4:	2301      	movs	r3, #1
 80065b6:	61a3      	str	r3, [r4, #24]
 80065b8:	0020      	movs	r0, r4
 80065ba:	f000 f81f 	bl	80065fc <__sfp>
 80065be:	6060      	str	r0, [r4, #4]
 80065c0:	0020      	movs	r0, r4
 80065c2:	f000 f81b 	bl	80065fc <__sfp>
 80065c6:	60a0      	str	r0, [r4, #8]
 80065c8:	0020      	movs	r0, r4
 80065ca:	f000 f817 	bl	80065fc <__sfp>
 80065ce:	2200      	movs	r2, #0
 80065d0:	2104      	movs	r1, #4
 80065d2:	60e0      	str	r0, [r4, #12]
 80065d4:	6860      	ldr	r0, [r4, #4]
 80065d6:	f7ff ff77 	bl	80064c8 <std>
 80065da:	2201      	movs	r2, #1
 80065dc:	2109      	movs	r1, #9
 80065de:	68a0      	ldr	r0, [r4, #8]
 80065e0:	f7ff ff72 	bl	80064c8 <std>
 80065e4:	2202      	movs	r2, #2
 80065e6:	2112      	movs	r1, #18
 80065e8:	68e0      	ldr	r0, [r4, #12]
 80065ea:	f7ff ff6d 	bl	80064c8 <std>
 80065ee:	2301      	movs	r3, #1
 80065f0:	61a3      	str	r3, [r4, #24]
 80065f2:	e7d2      	b.n	800659a <__sinit+0xe>
 80065f4:	080073d4 	.word	0x080073d4
 80065f8:	08006511 	.word	0x08006511

080065fc <__sfp>:
 80065fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fe:	0007      	movs	r7, r0
 8006600:	f7ff ffa4 	bl	800654c <__sfp_lock_acquire>
 8006604:	4b1f      	ldr	r3, [pc, #124]	; (8006684 <__sfp+0x88>)
 8006606:	681e      	ldr	r6, [r3, #0]
 8006608:	69b3      	ldr	r3, [r6, #24]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d102      	bne.n	8006614 <__sfp+0x18>
 800660e:	0030      	movs	r0, r6
 8006610:	f7ff ffbc 	bl	800658c <__sinit>
 8006614:	3648      	adds	r6, #72	; 0x48
 8006616:	68b4      	ldr	r4, [r6, #8]
 8006618:	6873      	ldr	r3, [r6, #4]
 800661a:	3b01      	subs	r3, #1
 800661c:	d504      	bpl.n	8006628 <__sfp+0x2c>
 800661e:	6833      	ldr	r3, [r6, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d022      	beq.n	800666a <__sfp+0x6e>
 8006624:	6836      	ldr	r6, [r6, #0]
 8006626:	e7f6      	b.n	8006616 <__sfp+0x1a>
 8006628:	220c      	movs	r2, #12
 800662a:	5ea5      	ldrsh	r5, [r4, r2]
 800662c:	2d00      	cmp	r5, #0
 800662e:	d11a      	bne.n	8006666 <__sfp+0x6a>
 8006630:	0020      	movs	r0, r4
 8006632:	4b15      	ldr	r3, [pc, #84]	; (8006688 <__sfp+0x8c>)
 8006634:	3058      	adds	r0, #88	; 0x58
 8006636:	60e3      	str	r3, [r4, #12]
 8006638:	6665      	str	r5, [r4, #100]	; 0x64
 800663a:	f000 f847 	bl	80066cc <__retarget_lock_init_recursive>
 800663e:	f7ff ff8d 	bl	800655c <__sfp_lock_release>
 8006642:	0020      	movs	r0, r4
 8006644:	2208      	movs	r2, #8
 8006646:	0029      	movs	r1, r5
 8006648:	6025      	str	r5, [r4, #0]
 800664a:	60a5      	str	r5, [r4, #8]
 800664c:	6065      	str	r5, [r4, #4]
 800664e:	6125      	str	r5, [r4, #16]
 8006650:	6165      	str	r5, [r4, #20]
 8006652:	61a5      	str	r5, [r4, #24]
 8006654:	305c      	adds	r0, #92	; 0x5c
 8006656:	f7ff fd66 	bl	8006126 <memset>
 800665a:	6365      	str	r5, [r4, #52]	; 0x34
 800665c:	63a5      	str	r5, [r4, #56]	; 0x38
 800665e:	64a5      	str	r5, [r4, #72]	; 0x48
 8006660:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006662:	0020      	movs	r0, r4
 8006664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006666:	3468      	adds	r4, #104	; 0x68
 8006668:	e7d7      	b.n	800661a <__sfp+0x1e>
 800666a:	2104      	movs	r1, #4
 800666c:	0038      	movs	r0, r7
 800666e:	f7ff ff57 	bl	8006520 <__sfmoreglue>
 8006672:	1e04      	subs	r4, r0, #0
 8006674:	6030      	str	r0, [r6, #0]
 8006676:	d1d5      	bne.n	8006624 <__sfp+0x28>
 8006678:	f7ff ff70 	bl	800655c <__sfp_lock_release>
 800667c:	230c      	movs	r3, #12
 800667e:	603b      	str	r3, [r7, #0]
 8006680:	e7ef      	b.n	8006662 <__sfp+0x66>
 8006682:	46c0      	nop			; (mov r8, r8)
 8006684:	080073d4 	.word	0x080073d4
 8006688:	ffff0001 	.word	0xffff0001

0800668c <_fwalk_reent>:
 800668c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800668e:	0004      	movs	r4, r0
 8006690:	0006      	movs	r6, r0
 8006692:	2700      	movs	r7, #0
 8006694:	9101      	str	r1, [sp, #4]
 8006696:	3448      	adds	r4, #72	; 0x48
 8006698:	6863      	ldr	r3, [r4, #4]
 800669a:	68a5      	ldr	r5, [r4, #8]
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	9b00      	ldr	r3, [sp, #0]
 80066a0:	3b01      	subs	r3, #1
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	d504      	bpl.n	80066b0 <_fwalk_reent+0x24>
 80066a6:	6824      	ldr	r4, [r4, #0]
 80066a8:	2c00      	cmp	r4, #0
 80066aa:	d1f5      	bne.n	8006698 <_fwalk_reent+0xc>
 80066ac:	0038      	movs	r0, r7
 80066ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80066b0:	89ab      	ldrh	r3, [r5, #12]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d908      	bls.n	80066c8 <_fwalk_reent+0x3c>
 80066b6:	220e      	movs	r2, #14
 80066b8:	5eab      	ldrsh	r3, [r5, r2]
 80066ba:	3301      	adds	r3, #1
 80066bc:	d004      	beq.n	80066c8 <_fwalk_reent+0x3c>
 80066be:	0029      	movs	r1, r5
 80066c0:	0030      	movs	r0, r6
 80066c2:	9b01      	ldr	r3, [sp, #4]
 80066c4:	4798      	blx	r3
 80066c6:	4307      	orrs	r7, r0
 80066c8:	3568      	adds	r5, #104	; 0x68
 80066ca:	e7e8      	b.n	800669e <_fwalk_reent+0x12>

080066cc <__retarget_lock_init_recursive>:
 80066cc:	4770      	bx	lr

080066ce <__retarget_lock_acquire_recursive>:
 80066ce:	4770      	bx	lr

080066d0 <__retarget_lock_release_recursive>:
 80066d0:	4770      	bx	lr
	...

080066d4 <__swhatbuf_r>:
 80066d4:	b570      	push	{r4, r5, r6, lr}
 80066d6:	000e      	movs	r6, r1
 80066d8:	001d      	movs	r5, r3
 80066da:	230e      	movs	r3, #14
 80066dc:	5ec9      	ldrsh	r1, [r1, r3]
 80066de:	0014      	movs	r4, r2
 80066e0:	b096      	sub	sp, #88	; 0x58
 80066e2:	2900      	cmp	r1, #0
 80066e4:	da08      	bge.n	80066f8 <__swhatbuf_r+0x24>
 80066e6:	220c      	movs	r2, #12
 80066e8:	5eb3      	ldrsh	r3, [r6, r2]
 80066ea:	2200      	movs	r2, #0
 80066ec:	602a      	str	r2, [r5, #0]
 80066ee:	061b      	lsls	r3, r3, #24
 80066f0:	d411      	bmi.n	8006716 <__swhatbuf_r+0x42>
 80066f2:	2380      	movs	r3, #128	; 0x80
 80066f4:	00db      	lsls	r3, r3, #3
 80066f6:	e00f      	b.n	8006718 <__swhatbuf_r+0x44>
 80066f8:	466a      	mov	r2, sp
 80066fa:	f000 fc67 	bl	8006fcc <_fstat_r>
 80066fe:	2800      	cmp	r0, #0
 8006700:	dbf1      	blt.n	80066e6 <__swhatbuf_r+0x12>
 8006702:	23f0      	movs	r3, #240	; 0xf0
 8006704:	9901      	ldr	r1, [sp, #4]
 8006706:	021b      	lsls	r3, r3, #8
 8006708:	4019      	ands	r1, r3
 800670a:	4b05      	ldr	r3, [pc, #20]	; (8006720 <__swhatbuf_r+0x4c>)
 800670c:	18c9      	adds	r1, r1, r3
 800670e:	424b      	negs	r3, r1
 8006710:	4159      	adcs	r1, r3
 8006712:	6029      	str	r1, [r5, #0]
 8006714:	e7ed      	b.n	80066f2 <__swhatbuf_r+0x1e>
 8006716:	2340      	movs	r3, #64	; 0x40
 8006718:	2000      	movs	r0, #0
 800671a:	6023      	str	r3, [r4, #0]
 800671c:	b016      	add	sp, #88	; 0x58
 800671e:	bd70      	pop	{r4, r5, r6, pc}
 8006720:	ffffe000 	.word	0xffffe000

08006724 <malloc>:
 8006724:	b510      	push	{r4, lr}
 8006726:	4b03      	ldr	r3, [pc, #12]	; (8006734 <malloc+0x10>)
 8006728:	0001      	movs	r1, r0
 800672a:	6818      	ldr	r0, [r3, #0]
 800672c:	f000 f870 	bl	8006810 <_malloc_r>
 8006730:	bd10      	pop	{r4, pc}
 8006732:	46c0      	nop			; (mov r8, r8)
 8006734:	2000040c 	.word	0x2000040c

08006738 <_free_r>:
 8006738:	b570      	push	{r4, r5, r6, lr}
 800673a:	0005      	movs	r5, r0
 800673c:	2900      	cmp	r1, #0
 800673e:	d010      	beq.n	8006762 <_free_r+0x2a>
 8006740:	1f0c      	subs	r4, r1, #4
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	da00      	bge.n	800674a <_free_r+0x12>
 8006748:	18e4      	adds	r4, r4, r3
 800674a:	0028      	movs	r0, r5
 800674c:	f000 fc82 	bl	8007054 <__malloc_lock>
 8006750:	4a1d      	ldr	r2, [pc, #116]	; (80067c8 <_free_r+0x90>)
 8006752:	6813      	ldr	r3, [r2, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d105      	bne.n	8006764 <_free_r+0x2c>
 8006758:	6063      	str	r3, [r4, #4]
 800675a:	6014      	str	r4, [r2, #0]
 800675c:	0028      	movs	r0, r5
 800675e:	f000 fc81 	bl	8007064 <__malloc_unlock>
 8006762:	bd70      	pop	{r4, r5, r6, pc}
 8006764:	42a3      	cmp	r3, r4
 8006766:	d908      	bls.n	800677a <_free_r+0x42>
 8006768:	6821      	ldr	r1, [r4, #0]
 800676a:	1860      	adds	r0, r4, r1
 800676c:	4283      	cmp	r3, r0
 800676e:	d1f3      	bne.n	8006758 <_free_r+0x20>
 8006770:	6818      	ldr	r0, [r3, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	1841      	adds	r1, r0, r1
 8006776:	6021      	str	r1, [r4, #0]
 8006778:	e7ee      	b.n	8006758 <_free_r+0x20>
 800677a:	001a      	movs	r2, r3
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <_free_r+0x4e>
 8006782:	42a3      	cmp	r3, r4
 8006784:	d9f9      	bls.n	800677a <_free_r+0x42>
 8006786:	6811      	ldr	r1, [r2, #0]
 8006788:	1850      	adds	r0, r2, r1
 800678a:	42a0      	cmp	r0, r4
 800678c:	d10b      	bne.n	80067a6 <_free_r+0x6e>
 800678e:	6820      	ldr	r0, [r4, #0]
 8006790:	1809      	adds	r1, r1, r0
 8006792:	1850      	adds	r0, r2, r1
 8006794:	6011      	str	r1, [r2, #0]
 8006796:	4283      	cmp	r3, r0
 8006798:	d1e0      	bne.n	800675c <_free_r+0x24>
 800679a:	6818      	ldr	r0, [r3, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	1841      	adds	r1, r0, r1
 80067a0:	6011      	str	r1, [r2, #0]
 80067a2:	6053      	str	r3, [r2, #4]
 80067a4:	e7da      	b.n	800675c <_free_r+0x24>
 80067a6:	42a0      	cmp	r0, r4
 80067a8:	d902      	bls.n	80067b0 <_free_r+0x78>
 80067aa:	230c      	movs	r3, #12
 80067ac:	602b      	str	r3, [r5, #0]
 80067ae:	e7d5      	b.n	800675c <_free_r+0x24>
 80067b0:	6821      	ldr	r1, [r4, #0]
 80067b2:	1860      	adds	r0, r4, r1
 80067b4:	4283      	cmp	r3, r0
 80067b6:	d103      	bne.n	80067c0 <_free_r+0x88>
 80067b8:	6818      	ldr	r0, [r3, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	1841      	adds	r1, r0, r1
 80067be:	6021      	str	r1, [r4, #0]
 80067c0:	6063      	str	r3, [r4, #4]
 80067c2:	6054      	str	r4, [r2, #4]
 80067c4:	e7ca      	b.n	800675c <_free_r+0x24>
 80067c6:	46c0      	nop			; (mov r8, r8)
 80067c8:	20000db8 	.word	0x20000db8

080067cc <sbrk_aligned>:
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	4e0f      	ldr	r6, [pc, #60]	; (800680c <sbrk_aligned+0x40>)
 80067d0:	000d      	movs	r5, r1
 80067d2:	6831      	ldr	r1, [r6, #0]
 80067d4:	0004      	movs	r4, r0
 80067d6:	2900      	cmp	r1, #0
 80067d8:	d102      	bne.n	80067e0 <sbrk_aligned+0x14>
 80067da:	f000 fb73 	bl	8006ec4 <_sbrk_r>
 80067de:	6030      	str	r0, [r6, #0]
 80067e0:	0029      	movs	r1, r5
 80067e2:	0020      	movs	r0, r4
 80067e4:	f000 fb6e 	bl	8006ec4 <_sbrk_r>
 80067e8:	1c43      	adds	r3, r0, #1
 80067ea:	d00a      	beq.n	8006802 <sbrk_aligned+0x36>
 80067ec:	2303      	movs	r3, #3
 80067ee:	1cc5      	adds	r5, r0, #3
 80067f0:	439d      	bics	r5, r3
 80067f2:	42a8      	cmp	r0, r5
 80067f4:	d007      	beq.n	8006806 <sbrk_aligned+0x3a>
 80067f6:	1a29      	subs	r1, r5, r0
 80067f8:	0020      	movs	r0, r4
 80067fa:	f000 fb63 	bl	8006ec4 <_sbrk_r>
 80067fe:	1c43      	adds	r3, r0, #1
 8006800:	d101      	bne.n	8006806 <sbrk_aligned+0x3a>
 8006802:	2501      	movs	r5, #1
 8006804:	426d      	negs	r5, r5
 8006806:	0028      	movs	r0, r5
 8006808:	bd70      	pop	{r4, r5, r6, pc}
 800680a:	46c0      	nop			; (mov r8, r8)
 800680c:	20000dbc 	.word	0x20000dbc

08006810 <_malloc_r>:
 8006810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006812:	2203      	movs	r2, #3
 8006814:	1ccb      	adds	r3, r1, #3
 8006816:	4393      	bics	r3, r2
 8006818:	3308      	adds	r3, #8
 800681a:	0006      	movs	r6, r0
 800681c:	001f      	movs	r7, r3
 800681e:	2b0c      	cmp	r3, #12
 8006820:	d232      	bcs.n	8006888 <_malloc_r+0x78>
 8006822:	270c      	movs	r7, #12
 8006824:	42b9      	cmp	r1, r7
 8006826:	d831      	bhi.n	800688c <_malloc_r+0x7c>
 8006828:	0030      	movs	r0, r6
 800682a:	f000 fc13 	bl	8007054 <__malloc_lock>
 800682e:	4d32      	ldr	r5, [pc, #200]	; (80068f8 <_malloc_r+0xe8>)
 8006830:	682b      	ldr	r3, [r5, #0]
 8006832:	001c      	movs	r4, r3
 8006834:	2c00      	cmp	r4, #0
 8006836:	d12e      	bne.n	8006896 <_malloc_r+0x86>
 8006838:	0039      	movs	r1, r7
 800683a:	0030      	movs	r0, r6
 800683c:	f7ff ffc6 	bl	80067cc <sbrk_aligned>
 8006840:	0004      	movs	r4, r0
 8006842:	1c43      	adds	r3, r0, #1
 8006844:	d11e      	bne.n	8006884 <_malloc_r+0x74>
 8006846:	682c      	ldr	r4, [r5, #0]
 8006848:	0025      	movs	r5, r4
 800684a:	2d00      	cmp	r5, #0
 800684c:	d14a      	bne.n	80068e4 <_malloc_r+0xd4>
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	0029      	movs	r1, r5
 8006852:	18e3      	adds	r3, r4, r3
 8006854:	0030      	movs	r0, r6
 8006856:	9301      	str	r3, [sp, #4]
 8006858:	f000 fb34 	bl	8006ec4 <_sbrk_r>
 800685c:	9b01      	ldr	r3, [sp, #4]
 800685e:	4283      	cmp	r3, r0
 8006860:	d143      	bne.n	80068ea <_malloc_r+0xda>
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	3703      	adds	r7, #3
 8006866:	1aff      	subs	r7, r7, r3
 8006868:	2303      	movs	r3, #3
 800686a:	439f      	bics	r7, r3
 800686c:	3708      	adds	r7, #8
 800686e:	2f0c      	cmp	r7, #12
 8006870:	d200      	bcs.n	8006874 <_malloc_r+0x64>
 8006872:	270c      	movs	r7, #12
 8006874:	0039      	movs	r1, r7
 8006876:	0030      	movs	r0, r6
 8006878:	f7ff ffa8 	bl	80067cc <sbrk_aligned>
 800687c:	1c43      	adds	r3, r0, #1
 800687e:	d034      	beq.n	80068ea <_malloc_r+0xda>
 8006880:	6823      	ldr	r3, [r4, #0]
 8006882:	19df      	adds	r7, r3, r7
 8006884:	6027      	str	r7, [r4, #0]
 8006886:	e013      	b.n	80068b0 <_malloc_r+0xa0>
 8006888:	2b00      	cmp	r3, #0
 800688a:	dacb      	bge.n	8006824 <_malloc_r+0x14>
 800688c:	230c      	movs	r3, #12
 800688e:	2500      	movs	r5, #0
 8006890:	6033      	str	r3, [r6, #0]
 8006892:	0028      	movs	r0, r5
 8006894:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006896:	6822      	ldr	r2, [r4, #0]
 8006898:	1bd1      	subs	r1, r2, r7
 800689a:	d420      	bmi.n	80068de <_malloc_r+0xce>
 800689c:	290b      	cmp	r1, #11
 800689e:	d917      	bls.n	80068d0 <_malloc_r+0xc0>
 80068a0:	19e2      	adds	r2, r4, r7
 80068a2:	6027      	str	r7, [r4, #0]
 80068a4:	42a3      	cmp	r3, r4
 80068a6:	d111      	bne.n	80068cc <_malloc_r+0xbc>
 80068a8:	602a      	str	r2, [r5, #0]
 80068aa:	6863      	ldr	r3, [r4, #4]
 80068ac:	6011      	str	r1, [r2, #0]
 80068ae:	6053      	str	r3, [r2, #4]
 80068b0:	0030      	movs	r0, r6
 80068b2:	0025      	movs	r5, r4
 80068b4:	f000 fbd6 	bl	8007064 <__malloc_unlock>
 80068b8:	2207      	movs	r2, #7
 80068ba:	350b      	adds	r5, #11
 80068bc:	1d23      	adds	r3, r4, #4
 80068be:	4395      	bics	r5, r2
 80068c0:	1aea      	subs	r2, r5, r3
 80068c2:	429d      	cmp	r5, r3
 80068c4:	d0e5      	beq.n	8006892 <_malloc_r+0x82>
 80068c6:	1b5b      	subs	r3, r3, r5
 80068c8:	50a3      	str	r3, [r4, r2]
 80068ca:	e7e2      	b.n	8006892 <_malloc_r+0x82>
 80068cc:	605a      	str	r2, [r3, #4]
 80068ce:	e7ec      	b.n	80068aa <_malloc_r+0x9a>
 80068d0:	6862      	ldr	r2, [r4, #4]
 80068d2:	42a3      	cmp	r3, r4
 80068d4:	d101      	bne.n	80068da <_malloc_r+0xca>
 80068d6:	602a      	str	r2, [r5, #0]
 80068d8:	e7ea      	b.n	80068b0 <_malloc_r+0xa0>
 80068da:	605a      	str	r2, [r3, #4]
 80068dc:	e7e8      	b.n	80068b0 <_malloc_r+0xa0>
 80068de:	0023      	movs	r3, r4
 80068e0:	6864      	ldr	r4, [r4, #4]
 80068e2:	e7a7      	b.n	8006834 <_malloc_r+0x24>
 80068e4:	002c      	movs	r4, r5
 80068e6:	686d      	ldr	r5, [r5, #4]
 80068e8:	e7af      	b.n	800684a <_malloc_r+0x3a>
 80068ea:	230c      	movs	r3, #12
 80068ec:	0030      	movs	r0, r6
 80068ee:	6033      	str	r3, [r6, #0]
 80068f0:	f000 fbb8 	bl	8007064 <__malloc_unlock>
 80068f4:	e7cd      	b.n	8006892 <_malloc_r+0x82>
 80068f6:	46c0      	nop			; (mov r8, r8)
 80068f8:	20000db8 	.word	0x20000db8

080068fc <__ssputs_r>:
 80068fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068fe:	688e      	ldr	r6, [r1, #8]
 8006900:	b085      	sub	sp, #20
 8006902:	0007      	movs	r7, r0
 8006904:	000c      	movs	r4, r1
 8006906:	9203      	str	r2, [sp, #12]
 8006908:	9301      	str	r3, [sp, #4]
 800690a:	429e      	cmp	r6, r3
 800690c:	d83c      	bhi.n	8006988 <__ssputs_r+0x8c>
 800690e:	2390      	movs	r3, #144	; 0x90
 8006910:	898a      	ldrh	r2, [r1, #12]
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	421a      	tst	r2, r3
 8006916:	d034      	beq.n	8006982 <__ssputs_r+0x86>
 8006918:	6909      	ldr	r1, [r1, #16]
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	6960      	ldr	r0, [r4, #20]
 800691e:	1a5b      	subs	r3, r3, r1
 8006920:	9302      	str	r3, [sp, #8]
 8006922:	2303      	movs	r3, #3
 8006924:	4343      	muls	r3, r0
 8006926:	0fdd      	lsrs	r5, r3, #31
 8006928:	18ed      	adds	r5, r5, r3
 800692a:	9b01      	ldr	r3, [sp, #4]
 800692c:	9802      	ldr	r0, [sp, #8]
 800692e:	3301      	adds	r3, #1
 8006930:	181b      	adds	r3, r3, r0
 8006932:	106d      	asrs	r5, r5, #1
 8006934:	42ab      	cmp	r3, r5
 8006936:	d900      	bls.n	800693a <__ssputs_r+0x3e>
 8006938:	001d      	movs	r5, r3
 800693a:	0553      	lsls	r3, r2, #21
 800693c:	d532      	bpl.n	80069a4 <__ssputs_r+0xa8>
 800693e:	0029      	movs	r1, r5
 8006940:	0038      	movs	r0, r7
 8006942:	f7ff ff65 	bl	8006810 <_malloc_r>
 8006946:	1e06      	subs	r6, r0, #0
 8006948:	d109      	bne.n	800695e <__ssputs_r+0x62>
 800694a:	230c      	movs	r3, #12
 800694c:	603b      	str	r3, [r7, #0]
 800694e:	2340      	movs	r3, #64	; 0x40
 8006950:	2001      	movs	r0, #1
 8006952:	89a2      	ldrh	r2, [r4, #12]
 8006954:	4240      	negs	r0, r0
 8006956:	4313      	orrs	r3, r2
 8006958:	81a3      	strh	r3, [r4, #12]
 800695a:	b005      	add	sp, #20
 800695c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800695e:	9a02      	ldr	r2, [sp, #8]
 8006960:	6921      	ldr	r1, [r4, #16]
 8006962:	f7ff fbd7 	bl	8006114 <memcpy>
 8006966:	89a3      	ldrh	r3, [r4, #12]
 8006968:	4a14      	ldr	r2, [pc, #80]	; (80069bc <__ssputs_r+0xc0>)
 800696a:	401a      	ands	r2, r3
 800696c:	2380      	movs	r3, #128	; 0x80
 800696e:	4313      	orrs	r3, r2
 8006970:	81a3      	strh	r3, [r4, #12]
 8006972:	9b02      	ldr	r3, [sp, #8]
 8006974:	6126      	str	r6, [r4, #16]
 8006976:	18f6      	adds	r6, r6, r3
 8006978:	6026      	str	r6, [r4, #0]
 800697a:	6165      	str	r5, [r4, #20]
 800697c:	9e01      	ldr	r6, [sp, #4]
 800697e:	1aed      	subs	r5, r5, r3
 8006980:	60a5      	str	r5, [r4, #8]
 8006982:	9b01      	ldr	r3, [sp, #4]
 8006984:	429e      	cmp	r6, r3
 8006986:	d900      	bls.n	800698a <__ssputs_r+0x8e>
 8006988:	9e01      	ldr	r6, [sp, #4]
 800698a:	0032      	movs	r2, r6
 800698c:	9903      	ldr	r1, [sp, #12]
 800698e:	6820      	ldr	r0, [r4, #0]
 8006990:	f000 fb4d 	bl	800702e <memmove>
 8006994:	68a3      	ldr	r3, [r4, #8]
 8006996:	2000      	movs	r0, #0
 8006998:	1b9b      	subs	r3, r3, r6
 800699a:	60a3      	str	r3, [r4, #8]
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	199e      	adds	r6, r3, r6
 80069a0:	6026      	str	r6, [r4, #0]
 80069a2:	e7da      	b.n	800695a <__ssputs_r+0x5e>
 80069a4:	002a      	movs	r2, r5
 80069a6:	0038      	movs	r0, r7
 80069a8:	f000 fb64 	bl	8007074 <_realloc_r>
 80069ac:	1e06      	subs	r6, r0, #0
 80069ae:	d1e0      	bne.n	8006972 <__ssputs_r+0x76>
 80069b0:	0038      	movs	r0, r7
 80069b2:	6921      	ldr	r1, [r4, #16]
 80069b4:	f7ff fec0 	bl	8006738 <_free_r>
 80069b8:	e7c7      	b.n	800694a <__ssputs_r+0x4e>
 80069ba:	46c0      	nop			; (mov r8, r8)
 80069bc:	fffffb7f 	.word	0xfffffb7f

080069c0 <_svfiprintf_r>:
 80069c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069c2:	b0a1      	sub	sp, #132	; 0x84
 80069c4:	9003      	str	r0, [sp, #12]
 80069c6:	001d      	movs	r5, r3
 80069c8:	898b      	ldrh	r3, [r1, #12]
 80069ca:	000f      	movs	r7, r1
 80069cc:	0016      	movs	r6, r2
 80069ce:	061b      	lsls	r3, r3, #24
 80069d0:	d511      	bpl.n	80069f6 <_svfiprintf_r+0x36>
 80069d2:	690b      	ldr	r3, [r1, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10e      	bne.n	80069f6 <_svfiprintf_r+0x36>
 80069d8:	2140      	movs	r1, #64	; 0x40
 80069da:	f7ff ff19 	bl	8006810 <_malloc_r>
 80069de:	6038      	str	r0, [r7, #0]
 80069e0:	6138      	str	r0, [r7, #16]
 80069e2:	2800      	cmp	r0, #0
 80069e4:	d105      	bne.n	80069f2 <_svfiprintf_r+0x32>
 80069e6:	230c      	movs	r3, #12
 80069e8:	9a03      	ldr	r2, [sp, #12]
 80069ea:	3801      	subs	r0, #1
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	b021      	add	sp, #132	; 0x84
 80069f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069f2:	2340      	movs	r3, #64	; 0x40
 80069f4:	617b      	str	r3, [r7, #20]
 80069f6:	2300      	movs	r3, #0
 80069f8:	ac08      	add	r4, sp, #32
 80069fa:	6163      	str	r3, [r4, #20]
 80069fc:	3320      	adds	r3, #32
 80069fe:	7663      	strb	r3, [r4, #25]
 8006a00:	3310      	adds	r3, #16
 8006a02:	76a3      	strb	r3, [r4, #26]
 8006a04:	9507      	str	r5, [sp, #28]
 8006a06:	0035      	movs	r5, r6
 8006a08:	782b      	ldrb	r3, [r5, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <_svfiprintf_r+0x52>
 8006a0e:	2b25      	cmp	r3, #37	; 0x25
 8006a10:	d147      	bne.n	8006aa2 <_svfiprintf_r+0xe2>
 8006a12:	1bab      	subs	r3, r5, r6
 8006a14:	9305      	str	r3, [sp, #20]
 8006a16:	42b5      	cmp	r5, r6
 8006a18:	d00c      	beq.n	8006a34 <_svfiprintf_r+0x74>
 8006a1a:	0032      	movs	r2, r6
 8006a1c:	0039      	movs	r1, r7
 8006a1e:	9803      	ldr	r0, [sp, #12]
 8006a20:	f7ff ff6c 	bl	80068fc <__ssputs_r>
 8006a24:	1c43      	adds	r3, r0, #1
 8006a26:	d100      	bne.n	8006a2a <_svfiprintf_r+0x6a>
 8006a28:	e0ae      	b.n	8006b88 <_svfiprintf_r+0x1c8>
 8006a2a:	6962      	ldr	r2, [r4, #20]
 8006a2c:	9b05      	ldr	r3, [sp, #20]
 8006a2e:	4694      	mov	ip, r2
 8006a30:	4463      	add	r3, ip
 8006a32:	6163      	str	r3, [r4, #20]
 8006a34:	782b      	ldrb	r3, [r5, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d100      	bne.n	8006a3c <_svfiprintf_r+0x7c>
 8006a3a:	e0a5      	b.n	8006b88 <_svfiprintf_r+0x1c8>
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	2300      	movs	r3, #0
 8006a40:	4252      	negs	r2, r2
 8006a42:	6062      	str	r2, [r4, #4]
 8006a44:	a904      	add	r1, sp, #16
 8006a46:	3254      	adds	r2, #84	; 0x54
 8006a48:	1852      	adds	r2, r2, r1
 8006a4a:	1c6e      	adds	r6, r5, #1
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	60e3      	str	r3, [r4, #12]
 8006a50:	60a3      	str	r3, [r4, #8]
 8006a52:	7013      	strb	r3, [r2, #0]
 8006a54:	65a3      	str	r3, [r4, #88]	; 0x58
 8006a56:	2205      	movs	r2, #5
 8006a58:	7831      	ldrb	r1, [r6, #0]
 8006a5a:	4854      	ldr	r0, [pc, #336]	; (8006bac <_svfiprintf_r+0x1ec>)
 8006a5c:	f000 fadc 	bl	8007018 <memchr>
 8006a60:	1c75      	adds	r5, r6, #1
 8006a62:	2800      	cmp	r0, #0
 8006a64:	d11f      	bne.n	8006aa6 <_svfiprintf_r+0xe6>
 8006a66:	6822      	ldr	r2, [r4, #0]
 8006a68:	06d3      	lsls	r3, r2, #27
 8006a6a:	d504      	bpl.n	8006a76 <_svfiprintf_r+0xb6>
 8006a6c:	2353      	movs	r3, #83	; 0x53
 8006a6e:	a904      	add	r1, sp, #16
 8006a70:	185b      	adds	r3, r3, r1
 8006a72:	2120      	movs	r1, #32
 8006a74:	7019      	strb	r1, [r3, #0]
 8006a76:	0713      	lsls	r3, r2, #28
 8006a78:	d504      	bpl.n	8006a84 <_svfiprintf_r+0xc4>
 8006a7a:	2353      	movs	r3, #83	; 0x53
 8006a7c:	a904      	add	r1, sp, #16
 8006a7e:	185b      	adds	r3, r3, r1
 8006a80:	212b      	movs	r1, #43	; 0x2b
 8006a82:	7019      	strb	r1, [r3, #0]
 8006a84:	7833      	ldrb	r3, [r6, #0]
 8006a86:	2b2a      	cmp	r3, #42	; 0x2a
 8006a88:	d016      	beq.n	8006ab8 <_svfiprintf_r+0xf8>
 8006a8a:	0035      	movs	r5, r6
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	200a      	movs	r0, #10
 8006a90:	68e3      	ldr	r3, [r4, #12]
 8006a92:	782a      	ldrb	r2, [r5, #0]
 8006a94:	1c6e      	adds	r6, r5, #1
 8006a96:	3a30      	subs	r2, #48	; 0x30
 8006a98:	2a09      	cmp	r2, #9
 8006a9a:	d94e      	bls.n	8006b3a <_svfiprintf_r+0x17a>
 8006a9c:	2900      	cmp	r1, #0
 8006a9e:	d111      	bne.n	8006ac4 <_svfiprintf_r+0x104>
 8006aa0:	e017      	b.n	8006ad2 <_svfiprintf_r+0x112>
 8006aa2:	3501      	adds	r5, #1
 8006aa4:	e7b0      	b.n	8006a08 <_svfiprintf_r+0x48>
 8006aa6:	4b41      	ldr	r3, [pc, #260]	; (8006bac <_svfiprintf_r+0x1ec>)
 8006aa8:	6822      	ldr	r2, [r4, #0]
 8006aaa:	1ac0      	subs	r0, r0, r3
 8006aac:	2301      	movs	r3, #1
 8006aae:	4083      	lsls	r3, r0
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	002e      	movs	r6, r5
 8006ab4:	6023      	str	r3, [r4, #0]
 8006ab6:	e7ce      	b.n	8006a56 <_svfiprintf_r+0x96>
 8006ab8:	9b07      	ldr	r3, [sp, #28]
 8006aba:	1d19      	adds	r1, r3, #4
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	9107      	str	r1, [sp, #28]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	db01      	blt.n	8006ac8 <_svfiprintf_r+0x108>
 8006ac4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ac6:	e004      	b.n	8006ad2 <_svfiprintf_r+0x112>
 8006ac8:	425b      	negs	r3, r3
 8006aca:	60e3      	str	r3, [r4, #12]
 8006acc:	2302      	movs	r3, #2
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	782b      	ldrb	r3, [r5, #0]
 8006ad4:	2b2e      	cmp	r3, #46	; 0x2e
 8006ad6:	d10a      	bne.n	8006aee <_svfiprintf_r+0x12e>
 8006ad8:	786b      	ldrb	r3, [r5, #1]
 8006ada:	2b2a      	cmp	r3, #42	; 0x2a
 8006adc:	d135      	bne.n	8006b4a <_svfiprintf_r+0x18a>
 8006ade:	9b07      	ldr	r3, [sp, #28]
 8006ae0:	3502      	adds	r5, #2
 8006ae2:	1d1a      	adds	r2, r3, #4
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	9207      	str	r2, [sp, #28]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	db2b      	blt.n	8006b44 <_svfiprintf_r+0x184>
 8006aec:	9309      	str	r3, [sp, #36]	; 0x24
 8006aee:	4e30      	ldr	r6, [pc, #192]	; (8006bb0 <_svfiprintf_r+0x1f0>)
 8006af0:	2203      	movs	r2, #3
 8006af2:	0030      	movs	r0, r6
 8006af4:	7829      	ldrb	r1, [r5, #0]
 8006af6:	f000 fa8f 	bl	8007018 <memchr>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	d006      	beq.n	8006b0c <_svfiprintf_r+0x14c>
 8006afe:	2340      	movs	r3, #64	; 0x40
 8006b00:	1b80      	subs	r0, r0, r6
 8006b02:	4083      	lsls	r3, r0
 8006b04:	6822      	ldr	r2, [r4, #0]
 8006b06:	3501      	adds	r5, #1
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	6023      	str	r3, [r4, #0]
 8006b0c:	7829      	ldrb	r1, [r5, #0]
 8006b0e:	2206      	movs	r2, #6
 8006b10:	4828      	ldr	r0, [pc, #160]	; (8006bb4 <_svfiprintf_r+0x1f4>)
 8006b12:	1c6e      	adds	r6, r5, #1
 8006b14:	7621      	strb	r1, [r4, #24]
 8006b16:	f000 fa7f 	bl	8007018 <memchr>
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d03c      	beq.n	8006b98 <_svfiprintf_r+0x1d8>
 8006b1e:	4b26      	ldr	r3, [pc, #152]	; (8006bb8 <_svfiprintf_r+0x1f8>)
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d125      	bne.n	8006b70 <_svfiprintf_r+0x1b0>
 8006b24:	2207      	movs	r2, #7
 8006b26:	9b07      	ldr	r3, [sp, #28]
 8006b28:	3307      	adds	r3, #7
 8006b2a:	4393      	bics	r3, r2
 8006b2c:	3308      	adds	r3, #8
 8006b2e:	9307      	str	r3, [sp, #28]
 8006b30:	6963      	ldr	r3, [r4, #20]
 8006b32:	9a04      	ldr	r2, [sp, #16]
 8006b34:	189b      	adds	r3, r3, r2
 8006b36:	6163      	str	r3, [r4, #20]
 8006b38:	e765      	b.n	8006a06 <_svfiprintf_r+0x46>
 8006b3a:	4343      	muls	r3, r0
 8006b3c:	0035      	movs	r5, r6
 8006b3e:	2101      	movs	r1, #1
 8006b40:	189b      	adds	r3, r3, r2
 8006b42:	e7a6      	b.n	8006a92 <_svfiprintf_r+0xd2>
 8006b44:	2301      	movs	r3, #1
 8006b46:	425b      	negs	r3, r3
 8006b48:	e7d0      	b.n	8006aec <_svfiprintf_r+0x12c>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	200a      	movs	r0, #10
 8006b4e:	001a      	movs	r2, r3
 8006b50:	3501      	adds	r5, #1
 8006b52:	6063      	str	r3, [r4, #4]
 8006b54:	7829      	ldrb	r1, [r5, #0]
 8006b56:	1c6e      	adds	r6, r5, #1
 8006b58:	3930      	subs	r1, #48	; 0x30
 8006b5a:	2909      	cmp	r1, #9
 8006b5c:	d903      	bls.n	8006b66 <_svfiprintf_r+0x1a6>
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d0c5      	beq.n	8006aee <_svfiprintf_r+0x12e>
 8006b62:	9209      	str	r2, [sp, #36]	; 0x24
 8006b64:	e7c3      	b.n	8006aee <_svfiprintf_r+0x12e>
 8006b66:	4342      	muls	r2, r0
 8006b68:	0035      	movs	r5, r6
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	1852      	adds	r2, r2, r1
 8006b6e:	e7f1      	b.n	8006b54 <_svfiprintf_r+0x194>
 8006b70:	ab07      	add	r3, sp, #28
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	003a      	movs	r2, r7
 8006b76:	0021      	movs	r1, r4
 8006b78:	4b10      	ldr	r3, [pc, #64]	; (8006bbc <_svfiprintf_r+0x1fc>)
 8006b7a:	9803      	ldr	r0, [sp, #12]
 8006b7c:	e000      	b.n	8006b80 <_svfiprintf_r+0x1c0>
 8006b7e:	bf00      	nop
 8006b80:	9004      	str	r0, [sp, #16]
 8006b82:	9b04      	ldr	r3, [sp, #16]
 8006b84:	3301      	adds	r3, #1
 8006b86:	d1d3      	bne.n	8006b30 <_svfiprintf_r+0x170>
 8006b88:	89bb      	ldrh	r3, [r7, #12]
 8006b8a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006b8c:	065b      	lsls	r3, r3, #25
 8006b8e:	d400      	bmi.n	8006b92 <_svfiprintf_r+0x1d2>
 8006b90:	e72d      	b.n	80069ee <_svfiprintf_r+0x2e>
 8006b92:	2001      	movs	r0, #1
 8006b94:	4240      	negs	r0, r0
 8006b96:	e72a      	b.n	80069ee <_svfiprintf_r+0x2e>
 8006b98:	ab07      	add	r3, sp, #28
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	003a      	movs	r2, r7
 8006b9e:	0021      	movs	r1, r4
 8006ba0:	4b06      	ldr	r3, [pc, #24]	; (8006bbc <_svfiprintf_r+0x1fc>)
 8006ba2:	9803      	ldr	r0, [sp, #12]
 8006ba4:	f000 f87c 	bl	8006ca0 <_printf_i>
 8006ba8:	e7ea      	b.n	8006b80 <_svfiprintf_r+0x1c0>
 8006baa:	46c0      	nop			; (mov r8, r8)
 8006bac:	08007438 	.word	0x08007438
 8006bb0:	0800743e 	.word	0x0800743e
 8006bb4:	08007442 	.word	0x08007442
 8006bb8:	00000000 	.word	0x00000000
 8006bbc:	080068fd 	.word	0x080068fd

08006bc0 <_printf_common>:
 8006bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bc2:	0015      	movs	r5, r2
 8006bc4:	9301      	str	r3, [sp, #4]
 8006bc6:	688a      	ldr	r2, [r1, #8]
 8006bc8:	690b      	ldr	r3, [r1, #16]
 8006bca:	000c      	movs	r4, r1
 8006bcc:	9000      	str	r0, [sp, #0]
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	da00      	bge.n	8006bd4 <_printf_common+0x14>
 8006bd2:	0013      	movs	r3, r2
 8006bd4:	0022      	movs	r2, r4
 8006bd6:	602b      	str	r3, [r5, #0]
 8006bd8:	3243      	adds	r2, #67	; 0x43
 8006bda:	7812      	ldrb	r2, [r2, #0]
 8006bdc:	2a00      	cmp	r2, #0
 8006bde:	d001      	beq.n	8006be4 <_printf_common+0x24>
 8006be0:	3301      	adds	r3, #1
 8006be2:	602b      	str	r3, [r5, #0]
 8006be4:	6823      	ldr	r3, [r4, #0]
 8006be6:	069b      	lsls	r3, r3, #26
 8006be8:	d502      	bpl.n	8006bf0 <_printf_common+0x30>
 8006bea:	682b      	ldr	r3, [r5, #0]
 8006bec:	3302      	adds	r3, #2
 8006bee:	602b      	str	r3, [r5, #0]
 8006bf0:	6822      	ldr	r2, [r4, #0]
 8006bf2:	2306      	movs	r3, #6
 8006bf4:	0017      	movs	r7, r2
 8006bf6:	401f      	ands	r7, r3
 8006bf8:	421a      	tst	r2, r3
 8006bfa:	d027      	beq.n	8006c4c <_printf_common+0x8c>
 8006bfc:	0023      	movs	r3, r4
 8006bfe:	3343      	adds	r3, #67	; 0x43
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	1e5a      	subs	r2, r3, #1
 8006c04:	4193      	sbcs	r3, r2
 8006c06:	6822      	ldr	r2, [r4, #0]
 8006c08:	0692      	lsls	r2, r2, #26
 8006c0a:	d430      	bmi.n	8006c6e <_printf_common+0xae>
 8006c0c:	0022      	movs	r2, r4
 8006c0e:	9901      	ldr	r1, [sp, #4]
 8006c10:	9800      	ldr	r0, [sp, #0]
 8006c12:	9e08      	ldr	r6, [sp, #32]
 8006c14:	3243      	adds	r2, #67	; 0x43
 8006c16:	47b0      	blx	r6
 8006c18:	1c43      	adds	r3, r0, #1
 8006c1a:	d025      	beq.n	8006c68 <_printf_common+0xa8>
 8006c1c:	2306      	movs	r3, #6
 8006c1e:	6820      	ldr	r0, [r4, #0]
 8006c20:	682a      	ldr	r2, [r5, #0]
 8006c22:	68e1      	ldr	r1, [r4, #12]
 8006c24:	2500      	movs	r5, #0
 8006c26:	4003      	ands	r3, r0
 8006c28:	2b04      	cmp	r3, #4
 8006c2a:	d103      	bne.n	8006c34 <_printf_common+0x74>
 8006c2c:	1a8d      	subs	r5, r1, r2
 8006c2e:	43eb      	mvns	r3, r5
 8006c30:	17db      	asrs	r3, r3, #31
 8006c32:	401d      	ands	r5, r3
 8006c34:	68a3      	ldr	r3, [r4, #8]
 8006c36:	6922      	ldr	r2, [r4, #16]
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	dd01      	ble.n	8006c40 <_printf_common+0x80>
 8006c3c:	1a9b      	subs	r3, r3, r2
 8006c3e:	18ed      	adds	r5, r5, r3
 8006c40:	2700      	movs	r7, #0
 8006c42:	42bd      	cmp	r5, r7
 8006c44:	d120      	bne.n	8006c88 <_printf_common+0xc8>
 8006c46:	2000      	movs	r0, #0
 8006c48:	e010      	b.n	8006c6c <_printf_common+0xac>
 8006c4a:	3701      	adds	r7, #1
 8006c4c:	68e3      	ldr	r3, [r4, #12]
 8006c4e:	682a      	ldr	r2, [r5, #0]
 8006c50:	1a9b      	subs	r3, r3, r2
 8006c52:	42bb      	cmp	r3, r7
 8006c54:	ddd2      	ble.n	8006bfc <_printf_common+0x3c>
 8006c56:	0022      	movs	r2, r4
 8006c58:	2301      	movs	r3, #1
 8006c5a:	9901      	ldr	r1, [sp, #4]
 8006c5c:	9800      	ldr	r0, [sp, #0]
 8006c5e:	9e08      	ldr	r6, [sp, #32]
 8006c60:	3219      	adds	r2, #25
 8006c62:	47b0      	blx	r6
 8006c64:	1c43      	adds	r3, r0, #1
 8006c66:	d1f0      	bne.n	8006c4a <_printf_common+0x8a>
 8006c68:	2001      	movs	r0, #1
 8006c6a:	4240      	negs	r0, r0
 8006c6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c6e:	2030      	movs	r0, #48	; 0x30
 8006c70:	18e1      	adds	r1, r4, r3
 8006c72:	3143      	adds	r1, #67	; 0x43
 8006c74:	7008      	strb	r0, [r1, #0]
 8006c76:	0021      	movs	r1, r4
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	3145      	adds	r1, #69	; 0x45
 8006c7c:	7809      	ldrb	r1, [r1, #0]
 8006c7e:	18a2      	adds	r2, r4, r2
 8006c80:	3243      	adds	r2, #67	; 0x43
 8006c82:	3302      	adds	r3, #2
 8006c84:	7011      	strb	r1, [r2, #0]
 8006c86:	e7c1      	b.n	8006c0c <_printf_common+0x4c>
 8006c88:	0022      	movs	r2, r4
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	9901      	ldr	r1, [sp, #4]
 8006c8e:	9800      	ldr	r0, [sp, #0]
 8006c90:	9e08      	ldr	r6, [sp, #32]
 8006c92:	321a      	adds	r2, #26
 8006c94:	47b0      	blx	r6
 8006c96:	1c43      	adds	r3, r0, #1
 8006c98:	d0e6      	beq.n	8006c68 <_printf_common+0xa8>
 8006c9a:	3701      	adds	r7, #1
 8006c9c:	e7d1      	b.n	8006c42 <_printf_common+0x82>
	...

08006ca0 <_printf_i>:
 8006ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ca2:	b08b      	sub	sp, #44	; 0x2c
 8006ca4:	9206      	str	r2, [sp, #24]
 8006ca6:	000a      	movs	r2, r1
 8006ca8:	3243      	adds	r2, #67	; 0x43
 8006caa:	9307      	str	r3, [sp, #28]
 8006cac:	9005      	str	r0, [sp, #20]
 8006cae:	9204      	str	r2, [sp, #16]
 8006cb0:	7e0a      	ldrb	r2, [r1, #24]
 8006cb2:	000c      	movs	r4, r1
 8006cb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cb6:	2a78      	cmp	r2, #120	; 0x78
 8006cb8:	d807      	bhi.n	8006cca <_printf_i+0x2a>
 8006cba:	2a62      	cmp	r2, #98	; 0x62
 8006cbc:	d809      	bhi.n	8006cd2 <_printf_i+0x32>
 8006cbe:	2a00      	cmp	r2, #0
 8006cc0:	d100      	bne.n	8006cc4 <_printf_i+0x24>
 8006cc2:	e0c1      	b.n	8006e48 <_printf_i+0x1a8>
 8006cc4:	2a58      	cmp	r2, #88	; 0x58
 8006cc6:	d100      	bne.n	8006cca <_printf_i+0x2a>
 8006cc8:	e08c      	b.n	8006de4 <_printf_i+0x144>
 8006cca:	0026      	movs	r6, r4
 8006ccc:	3642      	adds	r6, #66	; 0x42
 8006cce:	7032      	strb	r2, [r6, #0]
 8006cd0:	e022      	b.n	8006d18 <_printf_i+0x78>
 8006cd2:	0010      	movs	r0, r2
 8006cd4:	3863      	subs	r0, #99	; 0x63
 8006cd6:	2815      	cmp	r0, #21
 8006cd8:	d8f7      	bhi.n	8006cca <_printf_i+0x2a>
 8006cda:	f7f9 fa19 	bl	8000110 <__gnu_thumb1_case_shi>
 8006cde:	0016      	.short	0x0016
 8006ce0:	fff6001f 	.word	0xfff6001f
 8006ce4:	fff6fff6 	.word	0xfff6fff6
 8006ce8:	001ffff6 	.word	0x001ffff6
 8006cec:	fff6fff6 	.word	0xfff6fff6
 8006cf0:	fff6fff6 	.word	0xfff6fff6
 8006cf4:	003600a8 	.word	0x003600a8
 8006cf8:	fff6009a 	.word	0xfff6009a
 8006cfc:	00b9fff6 	.word	0x00b9fff6
 8006d00:	0036fff6 	.word	0x0036fff6
 8006d04:	fff6fff6 	.word	0xfff6fff6
 8006d08:	009e      	.short	0x009e
 8006d0a:	0026      	movs	r6, r4
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	3642      	adds	r6, #66	; 0x42
 8006d10:	1d11      	adds	r1, r2, #4
 8006d12:	6019      	str	r1, [r3, #0]
 8006d14:	6813      	ldr	r3, [r2, #0]
 8006d16:	7033      	strb	r3, [r6, #0]
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e0a7      	b.n	8006e6c <_printf_i+0x1cc>
 8006d1c:	6808      	ldr	r0, [r1, #0]
 8006d1e:	6819      	ldr	r1, [r3, #0]
 8006d20:	1d0a      	adds	r2, r1, #4
 8006d22:	0605      	lsls	r5, r0, #24
 8006d24:	d50b      	bpl.n	8006d3e <_printf_i+0x9e>
 8006d26:	680d      	ldr	r5, [r1, #0]
 8006d28:	601a      	str	r2, [r3, #0]
 8006d2a:	2d00      	cmp	r5, #0
 8006d2c:	da03      	bge.n	8006d36 <_printf_i+0x96>
 8006d2e:	232d      	movs	r3, #45	; 0x2d
 8006d30:	9a04      	ldr	r2, [sp, #16]
 8006d32:	426d      	negs	r5, r5
 8006d34:	7013      	strb	r3, [r2, #0]
 8006d36:	4b61      	ldr	r3, [pc, #388]	; (8006ebc <_printf_i+0x21c>)
 8006d38:	270a      	movs	r7, #10
 8006d3a:	9303      	str	r3, [sp, #12]
 8006d3c:	e01b      	b.n	8006d76 <_printf_i+0xd6>
 8006d3e:	680d      	ldr	r5, [r1, #0]
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	0641      	lsls	r1, r0, #25
 8006d44:	d5f1      	bpl.n	8006d2a <_printf_i+0x8a>
 8006d46:	b22d      	sxth	r5, r5
 8006d48:	e7ef      	b.n	8006d2a <_printf_i+0x8a>
 8006d4a:	680d      	ldr	r5, [r1, #0]
 8006d4c:	6819      	ldr	r1, [r3, #0]
 8006d4e:	1d08      	adds	r0, r1, #4
 8006d50:	6018      	str	r0, [r3, #0]
 8006d52:	062e      	lsls	r6, r5, #24
 8006d54:	d501      	bpl.n	8006d5a <_printf_i+0xba>
 8006d56:	680d      	ldr	r5, [r1, #0]
 8006d58:	e003      	b.n	8006d62 <_printf_i+0xc2>
 8006d5a:	066d      	lsls	r5, r5, #25
 8006d5c:	d5fb      	bpl.n	8006d56 <_printf_i+0xb6>
 8006d5e:	680d      	ldr	r5, [r1, #0]
 8006d60:	b2ad      	uxth	r5, r5
 8006d62:	4b56      	ldr	r3, [pc, #344]	; (8006ebc <_printf_i+0x21c>)
 8006d64:	2708      	movs	r7, #8
 8006d66:	9303      	str	r3, [sp, #12]
 8006d68:	2a6f      	cmp	r2, #111	; 0x6f
 8006d6a:	d000      	beq.n	8006d6e <_printf_i+0xce>
 8006d6c:	3702      	adds	r7, #2
 8006d6e:	0023      	movs	r3, r4
 8006d70:	2200      	movs	r2, #0
 8006d72:	3343      	adds	r3, #67	; 0x43
 8006d74:	701a      	strb	r2, [r3, #0]
 8006d76:	6863      	ldr	r3, [r4, #4]
 8006d78:	60a3      	str	r3, [r4, #8]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	db03      	blt.n	8006d86 <_printf_i+0xe6>
 8006d7e:	2204      	movs	r2, #4
 8006d80:	6821      	ldr	r1, [r4, #0]
 8006d82:	4391      	bics	r1, r2
 8006d84:	6021      	str	r1, [r4, #0]
 8006d86:	2d00      	cmp	r5, #0
 8006d88:	d102      	bne.n	8006d90 <_printf_i+0xf0>
 8006d8a:	9e04      	ldr	r6, [sp, #16]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00c      	beq.n	8006daa <_printf_i+0x10a>
 8006d90:	9e04      	ldr	r6, [sp, #16]
 8006d92:	0028      	movs	r0, r5
 8006d94:	0039      	movs	r1, r7
 8006d96:	f7f9 fa4b 	bl	8000230 <__aeabi_uidivmod>
 8006d9a:	9b03      	ldr	r3, [sp, #12]
 8006d9c:	3e01      	subs	r6, #1
 8006d9e:	5c5b      	ldrb	r3, [r3, r1]
 8006da0:	7033      	strb	r3, [r6, #0]
 8006da2:	002b      	movs	r3, r5
 8006da4:	0005      	movs	r5, r0
 8006da6:	429f      	cmp	r7, r3
 8006da8:	d9f3      	bls.n	8006d92 <_printf_i+0xf2>
 8006daa:	2f08      	cmp	r7, #8
 8006dac:	d109      	bne.n	8006dc2 <_printf_i+0x122>
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	07db      	lsls	r3, r3, #31
 8006db2:	d506      	bpl.n	8006dc2 <_printf_i+0x122>
 8006db4:	6863      	ldr	r3, [r4, #4]
 8006db6:	6922      	ldr	r2, [r4, #16]
 8006db8:	4293      	cmp	r3, r2
 8006dba:	dc02      	bgt.n	8006dc2 <_printf_i+0x122>
 8006dbc:	2330      	movs	r3, #48	; 0x30
 8006dbe:	3e01      	subs	r6, #1
 8006dc0:	7033      	strb	r3, [r6, #0]
 8006dc2:	9b04      	ldr	r3, [sp, #16]
 8006dc4:	1b9b      	subs	r3, r3, r6
 8006dc6:	6123      	str	r3, [r4, #16]
 8006dc8:	9b07      	ldr	r3, [sp, #28]
 8006dca:	0021      	movs	r1, r4
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	9805      	ldr	r0, [sp, #20]
 8006dd0:	9b06      	ldr	r3, [sp, #24]
 8006dd2:	aa09      	add	r2, sp, #36	; 0x24
 8006dd4:	f7ff fef4 	bl	8006bc0 <_printf_common>
 8006dd8:	1c43      	adds	r3, r0, #1
 8006dda:	d14c      	bne.n	8006e76 <_printf_i+0x1d6>
 8006ddc:	2001      	movs	r0, #1
 8006dde:	4240      	negs	r0, r0
 8006de0:	b00b      	add	sp, #44	; 0x2c
 8006de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006de4:	3145      	adds	r1, #69	; 0x45
 8006de6:	700a      	strb	r2, [r1, #0]
 8006de8:	4a34      	ldr	r2, [pc, #208]	; (8006ebc <_printf_i+0x21c>)
 8006dea:	9203      	str	r2, [sp, #12]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	6821      	ldr	r1, [r4, #0]
 8006df0:	ca20      	ldmia	r2!, {r5}
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	0608      	lsls	r0, r1, #24
 8006df6:	d516      	bpl.n	8006e26 <_printf_i+0x186>
 8006df8:	07cb      	lsls	r3, r1, #31
 8006dfa:	d502      	bpl.n	8006e02 <_printf_i+0x162>
 8006dfc:	2320      	movs	r3, #32
 8006dfe:	4319      	orrs	r1, r3
 8006e00:	6021      	str	r1, [r4, #0]
 8006e02:	2710      	movs	r7, #16
 8006e04:	2d00      	cmp	r5, #0
 8006e06:	d1b2      	bne.n	8006d6e <_printf_i+0xce>
 8006e08:	2320      	movs	r3, #32
 8006e0a:	6822      	ldr	r2, [r4, #0]
 8006e0c:	439a      	bics	r2, r3
 8006e0e:	6022      	str	r2, [r4, #0]
 8006e10:	e7ad      	b.n	8006d6e <_printf_i+0xce>
 8006e12:	2220      	movs	r2, #32
 8006e14:	6809      	ldr	r1, [r1, #0]
 8006e16:	430a      	orrs	r2, r1
 8006e18:	6022      	str	r2, [r4, #0]
 8006e1a:	0022      	movs	r2, r4
 8006e1c:	2178      	movs	r1, #120	; 0x78
 8006e1e:	3245      	adds	r2, #69	; 0x45
 8006e20:	7011      	strb	r1, [r2, #0]
 8006e22:	4a27      	ldr	r2, [pc, #156]	; (8006ec0 <_printf_i+0x220>)
 8006e24:	e7e1      	b.n	8006dea <_printf_i+0x14a>
 8006e26:	0648      	lsls	r0, r1, #25
 8006e28:	d5e6      	bpl.n	8006df8 <_printf_i+0x158>
 8006e2a:	b2ad      	uxth	r5, r5
 8006e2c:	e7e4      	b.n	8006df8 <_printf_i+0x158>
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	680d      	ldr	r5, [r1, #0]
 8006e32:	1d10      	adds	r0, r2, #4
 8006e34:	6949      	ldr	r1, [r1, #20]
 8006e36:	6018      	str	r0, [r3, #0]
 8006e38:	6813      	ldr	r3, [r2, #0]
 8006e3a:	062e      	lsls	r6, r5, #24
 8006e3c:	d501      	bpl.n	8006e42 <_printf_i+0x1a2>
 8006e3e:	6019      	str	r1, [r3, #0]
 8006e40:	e002      	b.n	8006e48 <_printf_i+0x1a8>
 8006e42:	066d      	lsls	r5, r5, #25
 8006e44:	d5fb      	bpl.n	8006e3e <_printf_i+0x19e>
 8006e46:	8019      	strh	r1, [r3, #0]
 8006e48:	2300      	movs	r3, #0
 8006e4a:	9e04      	ldr	r6, [sp, #16]
 8006e4c:	6123      	str	r3, [r4, #16]
 8006e4e:	e7bb      	b.n	8006dc8 <_printf_i+0x128>
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	1d11      	adds	r1, r2, #4
 8006e54:	6019      	str	r1, [r3, #0]
 8006e56:	6816      	ldr	r6, [r2, #0]
 8006e58:	2100      	movs	r1, #0
 8006e5a:	0030      	movs	r0, r6
 8006e5c:	6862      	ldr	r2, [r4, #4]
 8006e5e:	f000 f8db 	bl	8007018 <memchr>
 8006e62:	2800      	cmp	r0, #0
 8006e64:	d001      	beq.n	8006e6a <_printf_i+0x1ca>
 8006e66:	1b80      	subs	r0, r0, r6
 8006e68:	6060      	str	r0, [r4, #4]
 8006e6a:	6863      	ldr	r3, [r4, #4]
 8006e6c:	6123      	str	r3, [r4, #16]
 8006e6e:	2300      	movs	r3, #0
 8006e70:	9a04      	ldr	r2, [sp, #16]
 8006e72:	7013      	strb	r3, [r2, #0]
 8006e74:	e7a8      	b.n	8006dc8 <_printf_i+0x128>
 8006e76:	6923      	ldr	r3, [r4, #16]
 8006e78:	0032      	movs	r2, r6
 8006e7a:	9906      	ldr	r1, [sp, #24]
 8006e7c:	9805      	ldr	r0, [sp, #20]
 8006e7e:	9d07      	ldr	r5, [sp, #28]
 8006e80:	47a8      	blx	r5
 8006e82:	1c43      	adds	r3, r0, #1
 8006e84:	d0aa      	beq.n	8006ddc <_printf_i+0x13c>
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	079b      	lsls	r3, r3, #30
 8006e8a:	d415      	bmi.n	8006eb8 <_printf_i+0x218>
 8006e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e8e:	68e0      	ldr	r0, [r4, #12]
 8006e90:	4298      	cmp	r0, r3
 8006e92:	daa5      	bge.n	8006de0 <_printf_i+0x140>
 8006e94:	0018      	movs	r0, r3
 8006e96:	e7a3      	b.n	8006de0 <_printf_i+0x140>
 8006e98:	0022      	movs	r2, r4
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	9906      	ldr	r1, [sp, #24]
 8006e9e:	9805      	ldr	r0, [sp, #20]
 8006ea0:	9e07      	ldr	r6, [sp, #28]
 8006ea2:	3219      	adds	r2, #25
 8006ea4:	47b0      	blx	r6
 8006ea6:	1c43      	adds	r3, r0, #1
 8006ea8:	d098      	beq.n	8006ddc <_printf_i+0x13c>
 8006eaa:	3501      	adds	r5, #1
 8006eac:	68e3      	ldr	r3, [r4, #12]
 8006eae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eb0:	1a9b      	subs	r3, r3, r2
 8006eb2:	42ab      	cmp	r3, r5
 8006eb4:	dcf0      	bgt.n	8006e98 <_printf_i+0x1f8>
 8006eb6:	e7e9      	b.n	8006e8c <_printf_i+0x1ec>
 8006eb8:	2500      	movs	r5, #0
 8006eba:	e7f7      	b.n	8006eac <_printf_i+0x20c>
 8006ebc:	08007449 	.word	0x08007449
 8006ec0:	0800745a 	.word	0x0800745a

08006ec4 <_sbrk_r>:
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	b570      	push	{r4, r5, r6, lr}
 8006ec8:	4d06      	ldr	r5, [pc, #24]	; (8006ee4 <_sbrk_r+0x20>)
 8006eca:	0004      	movs	r4, r0
 8006ecc:	0008      	movs	r0, r1
 8006ece:	602b      	str	r3, [r5, #0]
 8006ed0:	f7fa ff0c 	bl	8001cec <_sbrk>
 8006ed4:	1c43      	adds	r3, r0, #1
 8006ed6:	d103      	bne.n	8006ee0 <_sbrk_r+0x1c>
 8006ed8:	682b      	ldr	r3, [r5, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d000      	beq.n	8006ee0 <_sbrk_r+0x1c>
 8006ede:	6023      	str	r3, [r4, #0]
 8006ee0:	bd70      	pop	{r4, r5, r6, pc}
 8006ee2:	46c0      	nop			; (mov r8, r8)
 8006ee4:	20000dc0 	.word	0x20000dc0

08006ee8 <__sread>:
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	000c      	movs	r4, r1
 8006eec:	250e      	movs	r5, #14
 8006eee:	5f49      	ldrsh	r1, [r1, r5]
 8006ef0:	f000 f8f0 	bl	80070d4 <_read_r>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	db03      	blt.n	8006f00 <__sread+0x18>
 8006ef8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006efa:	181b      	adds	r3, r3, r0
 8006efc:	6563      	str	r3, [r4, #84]	; 0x54
 8006efe:	bd70      	pop	{r4, r5, r6, pc}
 8006f00:	89a3      	ldrh	r3, [r4, #12]
 8006f02:	4a02      	ldr	r2, [pc, #8]	; (8006f0c <__sread+0x24>)
 8006f04:	4013      	ands	r3, r2
 8006f06:	81a3      	strh	r3, [r4, #12]
 8006f08:	e7f9      	b.n	8006efe <__sread+0x16>
 8006f0a:	46c0      	nop			; (mov r8, r8)
 8006f0c:	ffffefff 	.word	0xffffefff

08006f10 <__swrite>:
 8006f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f12:	001f      	movs	r7, r3
 8006f14:	898b      	ldrh	r3, [r1, #12]
 8006f16:	0005      	movs	r5, r0
 8006f18:	000c      	movs	r4, r1
 8006f1a:	0016      	movs	r6, r2
 8006f1c:	05db      	lsls	r3, r3, #23
 8006f1e:	d505      	bpl.n	8006f2c <__swrite+0x1c>
 8006f20:	230e      	movs	r3, #14
 8006f22:	5ec9      	ldrsh	r1, [r1, r3]
 8006f24:	2200      	movs	r2, #0
 8006f26:	2302      	movs	r3, #2
 8006f28:	f000 f862 	bl	8006ff0 <_lseek_r>
 8006f2c:	89a3      	ldrh	r3, [r4, #12]
 8006f2e:	4a05      	ldr	r2, [pc, #20]	; (8006f44 <__swrite+0x34>)
 8006f30:	0028      	movs	r0, r5
 8006f32:	4013      	ands	r3, r2
 8006f34:	81a3      	strh	r3, [r4, #12]
 8006f36:	0032      	movs	r2, r6
 8006f38:	230e      	movs	r3, #14
 8006f3a:	5ee1      	ldrsh	r1, [r4, r3]
 8006f3c:	003b      	movs	r3, r7
 8006f3e:	f000 f81f 	bl	8006f80 <_write_r>
 8006f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f44:	ffffefff 	.word	0xffffefff

08006f48 <__sseek>:
 8006f48:	b570      	push	{r4, r5, r6, lr}
 8006f4a:	000c      	movs	r4, r1
 8006f4c:	250e      	movs	r5, #14
 8006f4e:	5f49      	ldrsh	r1, [r1, r5]
 8006f50:	f000 f84e 	bl	8006ff0 <_lseek_r>
 8006f54:	89a3      	ldrh	r3, [r4, #12]
 8006f56:	1c42      	adds	r2, r0, #1
 8006f58:	d103      	bne.n	8006f62 <__sseek+0x1a>
 8006f5a:	4a05      	ldr	r2, [pc, #20]	; (8006f70 <__sseek+0x28>)
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	81a3      	strh	r3, [r4, #12]
 8006f60:	bd70      	pop	{r4, r5, r6, pc}
 8006f62:	2280      	movs	r2, #128	; 0x80
 8006f64:	0152      	lsls	r2, r2, #5
 8006f66:	4313      	orrs	r3, r2
 8006f68:	81a3      	strh	r3, [r4, #12]
 8006f6a:	6560      	str	r0, [r4, #84]	; 0x54
 8006f6c:	e7f8      	b.n	8006f60 <__sseek+0x18>
 8006f6e:	46c0      	nop			; (mov r8, r8)
 8006f70:	ffffefff 	.word	0xffffefff

08006f74 <__sclose>:
 8006f74:	b510      	push	{r4, lr}
 8006f76:	230e      	movs	r3, #14
 8006f78:	5ec9      	ldrsh	r1, [r1, r3]
 8006f7a:	f000 f815 	bl	8006fa8 <_close_r>
 8006f7e:	bd10      	pop	{r4, pc}

08006f80 <_write_r>:
 8006f80:	b570      	push	{r4, r5, r6, lr}
 8006f82:	0004      	movs	r4, r0
 8006f84:	0008      	movs	r0, r1
 8006f86:	0011      	movs	r1, r2
 8006f88:	001a      	movs	r2, r3
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	4d05      	ldr	r5, [pc, #20]	; (8006fa4 <_write_r+0x24>)
 8006f8e:	602b      	str	r3, [r5, #0]
 8006f90:	f7fa fc8c 	bl	80018ac <_write>
 8006f94:	1c43      	adds	r3, r0, #1
 8006f96:	d103      	bne.n	8006fa0 <_write_r+0x20>
 8006f98:	682b      	ldr	r3, [r5, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d000      	beq.n	8006fa0 <_write_r+0x20>
 8006f9e:	6023      	str	r3, [r4, #0]
 8006fa0:	bd70      	pop	{r4, r5, r6, pc}
 8006fa2:	46c0      	nop			; (mov r8, r8)
 8006fa4:	20000dc0 	.word	0x20000dc0

08006fa8 <_close_r>:
 8006fa8:	2300      	movs	r3, #0
 8006faa:	b570      	push	{r4, r5, r6, lr}
 8006fac:	4d06      	ldr	r5, [pc, #24]	; (8006fc8 <_close_r+0x20>)
 8006fae:	0004      	movs	r4, r0
 8006fb0:	0008      	movs	r0, r1
 8006fb2:	602b      	str	r3, [r5, #0]
 8006fb4:	f7fa fca8 	bl	8001908 <_close>
 8006fb8:	1c43      	adds	r3, r0, #1
 8006fba:	d103      	bne.n	8006fc4 <_close_r+0x1c>
 8006fbc:	682b      	ldr	r3, [r5, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d000      	beq.n	8006fc4 <_close_r+0x1c>
 8006fc2:	6023      	str	r3, [r4, #0]
 8006fc4:	bd70      	pop	{r4, r5, r6, pc}
 8006fc6:	46c0      	nop			; (mov r8, r8)
 8006fc8:	20000dc0 	.word	0x20000dc0

08006fcc <_fstat_r>:
 8006fcc:	2300      	movs	r3, #0
 8006fce:	b570      	push	{r4, r5, r6, lr}
 8006fd0:	4d06      	ldr	r5, [pc, #24]	; (8006fec <_fstat_r+0x20>)
 8006fd2:	0004      	movs	r4, r0
 8006fd4:	0008      	movs	r0, r1
 8006fd6:	0011      	movs	r1, r2
 8006fd8:	602b      	str	r3, [r5, #0]
 8006fda:	f7fa fce7 	bl	80019ac <_fstat>
 8006fde:	1c43      	adds	r3, r0, #1
 8006fe0:	d103      	bne.n	8006fea <_fstat_r+0x1e>
 8006fe2:	682b      	ldr	r3, [r5, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d000      	beq.n	8006fea <_fstat_r+0x1e>
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	bd70      	pop	{r4, r5, r6, pc}
 8006fec:	20000dc0 	.word	0x20000dc0

08006ff0 <_lseek_r>:
 8006ff0:	b570      	push	{r4, r5, r6, lr}
 8006ff2:	0004      	movs	r4, r0
 8006ff4:	0008      	movs	r0, r1
 8006ff6:	0011      	movs	r1, r2
 8006ff8:	001a      	movs	r2, r3
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	4d05      	ldr	r5, [pc, #20]	; (8007014 <_lseek_r+0x24>)
 8006ffe:	602b      	str	r3, [r5, #0]
 8007000:	f7fa fc99 	bl	8001936 <_lseek>
 8007004:	1c43      	adds	r3, r0, #1
 8007006:	d103      	bne.n	8007010 <_lseek_r+0x20>
 8007008:	682b      	ldr	r3, [r5, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d000      	beq.n	8007010 <_lseek_r+0x20>
 800700e:	6023      	str	r3, [r4, #0]
 8007010:	bd70      	pop	{r4, r5, r6, pc}
 8007012:	46c0      	nop			; (mov r8, r8)
 8007014:	20000dc0 	.word	0x20000dc0

08007018 <memchr>:
 8007018:	b2c9      	uxtb	r1, r1
 800701a:	1882      	adds	r2, r0, r2
 800701c:	4290      	cmp	r0, r2
 800701e:	d101      	bne.n	8007024 <memchr+0xc>
 8007020:	2000      	movs	r0, #0
 8007022:	4770      	bx	lr
 8007024:	7803      	ldrb	r3, [r0, #0]
 8007026:	428b      	cmp	r3, r1
 8007028:	d0fb      	beq.n	8007022 <memchr+0xa>
 800702a:	3001      	adds	r0, #1
 800702c:	e7f6      	b.n	800701c <memchr+0x4>

0800702e <memmove>:
 800702e:	b510      	push	{r4, lr}
 8007030:	4288      	cmp	r0, r1
 8007032:	d902      	bls.n	800703a <memmove+0xc>
 8007034:	188b      	adds	r3, r1, r2
 8007036:	4298      	cmp	r0, r3
 8007038:	d303      	bcc.n	8007042 <memmove+0x14>
 800703a:	2300      	movs	r3, #0
 800703c:	e007      	b.n	800704e <memmove+0x20>
 800703e:	5c8b      	ldrb	r3, [r1, r2]
 8007040:	5483      	strb	r3, [r0, r2]
 8007042:	3a01      	subs	r2, #1
 8007044:	d2fb      	bcs.n	800703e <memmove+0x10>
 8007046:	bd10      	pop	{r4, pc}
 8007048:	5ccc      	ldrb	r4, [r1, r3]
 800704a:	54c4      	strb	r4, [r0, r3]
 800704c:	3301      	adds	r3, #1
 800704e:	429a      	cmp	r2, r3
 8007050:	d1fa      	bne.n	8007048 <memmove+0x1a>
 8007052:	e7f8      	b.n	8007046 <memmove+0x18>

08007054 <__malloc_lock>:
 8007054:	b510      	push	{r4, lr}
 8007056:	4802      	ldr	r0, [pc, #8]	; (8007060 <__malloc_lock+0xc>)
 8007058:	f7ff fb39 	bl	80066ce <__retarget_lock_acquire_recursive>
 800705c:	bd10      	pop	{r4, pc}
 800705e:	46c0      	nop			; (mov r8, r8)
 8007060:	20000db4 	.word	0x20000db4

08007064 <__malloc_unlock>:
 8007064:	b510      	push	{r4, lr}
 8007066:	4802      	ldr	r0, [pc, #8]	; (8007070 <__malloc_unlock+0xc>)
 8007068:	f7ff fb32 	bl	80066d0 <__retarget_lock_release_recursive>
 800706c:	bd10      	pop	{r4, pc}
 800706e:	46c0      	nop			; (mov r8, r8)
 8007070:	20000db4 	.word	0x20000db4

08007074 <_realloc_r>:
 8007074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007076:	0007      	movs	r7, r0
 8007078:	000e      	movs	r6, r1
 800707a:	0014      	movs	r4, r2
 800707c:	2900      	cmp	r1, #0
 800707e:	d105      	bne.n	800708c <_realloc_r+0x18>
 8007080:	0011      	movs	r1, r2
 8007082:	f7ff fbc5 	bl	8006810 <_malloc_r>
 8007086:	0005      	movs	r5, r0
 8007088:	0028      	movs	r0, r5
 800708a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800708c:	2a00      	cmp	r2, #0
 800708e:	d103      	bne.n	8007098 <_realloc_r+0x24>
 8007090:	f7ff fb52 	bl	8006738 <_free_r>
 8007094:	0025      	movs	r5, r4
 8007096:	e7f7      	b.n	8007088 <_realloc_r+0x14>
 8007098:	f000 f830 	bl	80070fc <_malloc_usable_size_r>
 800709c:	9001      	str	r0, [sp, #4]
 800709e:	4284      	cmp	r4, r0
 80070a0:	d803      	bhi.n	80070aa <_realloc_r+0x36>
 80070a2:	0035      	movs	r5, r6
 80070a4:	0843      	lsrs	r3, r0, #1
 80070a6:	42a3      	cmp	r3, r4
 80070a8:	d3ee      	bcc.n	8007088 <_realloc_r+0x14>
 80070aa:	0021      	movs	r1, r4
 80070ac:	0038      	movs	r0, r7
 80070ae:	f7ff fbaf 	bl	8006810 <_malloc_r>
 80070b2:	1e05      	subs	r5, r0, #0
 80070b4:	d0e8      	beq.n	8007088 <_realloc_r+0x14>
 80070b6:	9b01      	ldr	r3, [sp, #4]
 80070b8:	0022      	movs	r2, r4
 80070ba:	429c      	cmp	r4, r3
 80070bc:	d900      	bls.n	80070c0 <_realloc_r+0x4c>
 80070be:	001a      	movs	r2, r3
 80070c0:	0031      	movs	r1, r6
 80070c2:	0028      	movs	r0, r5
 80070c4:	f7ff f826 	bl	8006114 <memcpy>
 80070c8:	0031      	movs	r1, r6
 80070ca:	0038      	movs	r0, r7
 80070cc:	f7ff fb34 	bl	8006738 <_free_r>
 80070d0:	e7da      	b.n	8007088 <_realloc_r+0x14>
	...

080070d4 <_read_r>:
 80070d4:	b570      	push	{r4, r5, r6, lr}
 80070d6:	0004      	movs	r4, r0
 80070d8:	0008      	movs	r0, r1
 80070da:	0011      	movs	r1, r2
 80070dc:	001a      	movs	r2, r3
 80070de:	2300      	movs	r3, #0
 80070e0:	4d05      	ldr	r5, [pc, #20]	; (80070f8 <_read_r+0x24>)
 80070e2:	602b      	str	r3, [r5, #0]
 80070e4:	f7fa fc38 	bl	8001958 <_read>
 80070e8:	1c43      	adds	r3, r0, #1
 80070ea:	d103      	bne.n	80070f4 <_read_r+0x20>
 80070ec:	682b      	ldr	r3, [r5, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d000      	beq.n	80070f4 <_read_r+0x20>
 80070f2:	6023      	str	r3, [r4, #0]
 80070f4:	bd70      	pop	{r4, r5, r6, pc}
 80070f6:	46c0      	nop			; (mov r8, r8)
 80070f8:	20000dc0 	.word	0x20000dc0

080070fc <_malloc_usable_size_r>:
 80070fc:	1f0b      	subs	r3, r1, #4
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	1f18      	subs	r0, r3, #4
 8007102:	2b00      	cmp	r3, #0
 8007104:	da01      	bge.n	800710a <_malloc_usable_size_r+0xe>
 8007106:	580b      	ldr	r3, [r1, r0]
 8007108:	18c0      	adds	r0, r0, r3
 800710a:	4770      	bx	lr

0800710c <_init>:
 800710c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710e:	46c0      	nop			; (mov r8, r8)
 8007110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007112:	bc08      	pop	{r3}
 8007114:	469e      	mov	lr, r3
 8007116:	4770      	bx	lr

08007118 <_fini>:
 8007118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711a:	46c0      	nop			; (mov r8, r8)
 800711c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800711e:	bc08      	pop	{r3}
 8007120:	469e      	mov	lr, r3
 8007122:	4770      	bx	lr
 8007124:	0000      	movs	r0, r0
	...

08007128 <__FLASH_Program_Fast_veneer>:
 8007128:	b401      	push	{r0}
 800712a:	4802      	ldr	r0, [pc, #8]	; (8007134 <__FLASH_Program_Fast_veneer+0xc>)
 800712c:	4684      	mov	ip, r0
 800712e:	bc01      	pop	{r0}
 8007130:	4760      	bx	ip
 8007132:	bf00      	nop
 8007134:	20000471 	.word	0x20000471

Disassembly of section .data:

20000400 <SystemCoreClock>:
20000400:	00f42400                                .$..

20000404 <uwTickPrio>:
20000404:	00000004                                ....

20000408 <uwTickFreq>:
20000408:	00000001                                ....

2000040c <_impure_ptr>:
2000040c:	20000410                                ... 

20000410 <impure_data>:
20000410:	00000000 080073f8 08007418 080073d8     .....s...t...s..
	...

20000470 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000470:	b580      	push	{r7, lr}
20000472:	b088      	sub	sp, #32
20000474:	af00      	add	r7, sp, #0
20000476:	6078      	str	r0, [r7, #4]
20000478:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000047a:	231f      	movs	r3, #31
2000047c:	18fb      	adds	r3, r7, r3
2000047e:	2200      	movs	r2, #0
20000480:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000482:	687b      	ldr	r3, [r7, #4]
20000484:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000486:	683b      	ldr	r3, [r7, #0]
20000488:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000048a:	4b1a      	ldr	r3, [pc, #104]	; (200004f4 <FLASH_Program_Fast+0x84>)
2000048c:	695a      	ldr	r2, [r3, #20]
2000048e:	4b19      	ldr	r3, [pc, #100]	; (200004f4 <FLASH_Program_Fast+0x84>)
20000490:	2180      	movs	r1, #128	; 0x80
20000492:	02c9      	lsls	r1, r1, #11
20000494:	430a      	orrs	r2, r1
20000496:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000498:	f3ef 8310 	mrs	r3, PRIMASK
2000049c:	60fb      	str	r3, [r7, #12]
  return(result);
2000049e:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200004a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200004a2:	b672      	cpsid	i
}
200004a4:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200004a6:	e00f      	b.n	200004c8 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200004a8:	697a      	ldr	r2, [r7, #20]
200004aa:	69bb      	ldr	r3, [r7, #24]
200004ac:	6812      	ldr	r2, [r2, #0]
200004ae:	601a      	str	r2, [r3, #0]
    src += 4U;
200004b0:	697b      	ldr	r3, [r7, #20]
200004b2:	3304      	adds	r3, #4
200004b4:	617b      	str	r3, [r7, #20]
    dest += 4U;
200004b6:	69bb      	ldr	r3, [r7, #24]
200004b8:	3304      	adds	r3, #4
200004ba:	61bb      	str	r3, [r7, #24]
    index++;
200004bc:	211f      	movs	r1, #31
200004be:	187b      	adds	r3, r7, r1
200004c0:	781a      	ldrb	r2, [r3, #0]
200004c2:	187b      	adds	r3, r7, r1
200004c4:	3201      	adds	r2, #1
200004c6:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200004c8:	231f      	movs	r3, #31
200004ca:	18fb      	adds	r3, r7, r3
200004cc:	781b      	ldrb	r3, [r3, #0]
200004ce:	2b3f      	cmp	r3, #63	; 0x3f
200004d0:	d9ea      	bls.n	200004a8 <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
200004d2:	46c0      	nop			; (mov r8, r8)
200004d4:	4b07      	ldr	r3, [pc, #28]	; (200004f4 <FLASH_Program_Fast+0x84>)
200004d6:	691a      	ldr	r2, [r3, #16]
200004d8:	23c0      	movs	r3, #192	; 0xc0
200004da:	029b      	lsls	r3, r3, #10
200004dc:	4013      	ands	r3, r2
200004de:	d1f9      	bne.n	200004d4 <FLASH_Program_Fast+0x64>
200004e0:	693b      	ldr	r3, [r7, #16]
200004e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200004e4:	68bb      	ldr	r3, [r7, #8]
200004e6:	f383 8810 	msr	PRIMASK, r3
}
200004ea:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200004ec:	46c0      	nop			; (mov r8, r8)
200004ee:	46bd      	mov	sp, r7
200004f0:	b008      	add	sp, #32
200004f2:	bd80      	pop	{r7, pc}
200004f4:	40022000 	.word	0x40022000
